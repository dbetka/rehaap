(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~main"],{

/***/ "./node_modules/@dbetka/utils/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@dbetka/utils/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * @dbetka/utils v0.1.2
 * (c) dbetka
 * Released under the MIT License.
 */


Object.defineProperty(exports, '__esModule', {
  value: true
});

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var check = {
  isUndefined: function isUndefined(value) {
    return typeof value === 'undefined';
  },
  isString: function isString(value) {
    return typeof value === 'string';
  },
  isNumber: function isNumber(value) {
    return typeof value === 'number';
  },
  isNull: function isNull(value) {
    return value === null;
  },
  isObject: function isObject(value) {
    return _typeof(value) === 'object' && check.isNotNull(value);
  },
  isArray: function isArray(value) {
    return Array.isArray(value);
  },
  isFunction: function isFunction(value) {
    return typeof value === 'function';
  },
  isBoolean: function isBoolean(value) {
    return typeof value === 'boolean';
  },
  isDefined: function isDefined(value) {
    return check.isUndefined(value) === false;
  },
  isNotString: function isNotString(value) {
    return check.isString(value) === false;
  },
  isNotNumber: function isNotNumber(value) {
    return check.isNumber(value) === false;
  },
  isNotNull: function isNotNull(value) {
    return check.isNull(value) === false;
  },
  isNotObject: function isNotObject(value) {
    return check.isObject(value) === false;
  },
  isNotArray: function isNotArray(value) {
    return check.isArray(value) === false;
  },
  isNotFunction: function isNotFunction(value) {
    return check.isFunction(value) === false;
  },
  isNotBoolean: function isNotBoolean(value) {
    return check.isBoolean(value) === false;
  }
};
var array = {
  removeItem: function removeItem(array, toRemove) {
    var indexToRemove = array.indexOf(toRemove);
    return array.splice(indexToRemove, 1);
  },
  removeItemByIndex: function removeItemByIndex(array, indexToRemove) {
    return array.splice(indexToRemove, 1);
  }
};
var number = {
  roundTo: function roundTo(value, precision) {
    return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);
  }
};
var object = {
  /**
   * Deep merge two objects.
   * @param target
   * @param sources
   */
  mergeDeep: function mergeDeep(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }

    if (!sources.length) return target;
    var source = sources.shift();

    if (check.isObject(target) && check.isObject(source)) {
      for (var key in source) {
        if (check.isObject(source[key])) {
          if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));
          object.mergeDeep(target[key], source[key]);
        } else {
          Object.assign(target, _defineProperty({}, key, source[key]));
        }
      }
    }

    return object.mergeDeep.apply(object, [target].concat(sources));
  }
};
var promise = {
  timeout: function timeout(_timeout) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        return resolve();
      }, _timeout);
    });
  }
};
var requestHost = '';

function makeFetch(_ref) {
  var url = _ref.url,
      config = _ref.config;
  return new Promise(function (resolve, reject) {
    fetch(url, Object.assign(Object.assign({}, config), {}, {
      headers: {
        'Content-Type': 'application/json'
      }
    })).then(resolve)["catch"](reject);
  });
}

function addBodyToConfig(config, data) {
  if (check.isDefined(data)) {
    config.body = JSON.stringify(data);
  }
}

var request = {
  setHost: function setHost(newHost) {
    requestHost = newHost;
  },
  getHost: function getHost() {
    return requestHost;
  },
  dataToPathVariables: function dataToPathVariables(data) {
    var pathData = '';

    if (Object.keys(data).length > 0) {
      pathData += '?';
      pathData += Object.entries(data).map(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            key = _ref3[0],
            val = _ref3[1];

        return key + '=' + val;
      }).join('&');
    }

    return pathData;
  },
  get: function get(_ref4) {
    var _ref4$url = _ref4.url,
        url = _ref4$url === void 0 ? '/' : _ref4$url,
        _ref4$data = _ref4.data,
        data = _ref4$data === void 0 ? {} : _ref4$data,
        _ref4$config = _ref4.config,
        config = _ref4$config === void 0 ? {} : _ref4$config;
    var pathVariables = request.dataToPathVariables(data);
    var fullUrl = requestHost + url + pathVariables;
    return makeFetch({
      url: fullUrl,
      config: Object.assign({
        method: 'GET'
      }, config)
    });
  },
  post: function post(_ref5) {
    var _ref5$url = _ref5.url,
        url = _ref5$url === void 0 ? '/' : _ref5$url,
        data = _ref5.data,
        _ref5$config = _ref5.config,
        config = _ref5$config === void 0 ? {} : _ref5$config;
    var fullUrl = requestHost + url;
    addBodyToConfig(config, data);
    return makeFetch({
      url: fullUrl,
      config: Object.assign({
        method: 'POST'
      }, config)
    });
  },
  put: function put(_ref6) {
    var _ref6$url = _ref6.url,
        url = _ref6$url === void 0 ? '/' : _ref6$url,
        _ref6$data = _ref6.data,
        data = _ref6$data === void 0 ? {} : _ref6$data,
        _ref6$config = _ref6.config,
        config = _ref6$config === void 0 ? {} : _ref6$config;
    var fullUrl = requestHost + url;
    addBodyToConfig(config, data);
    return makeFetch({
      url: fullUrl,
      config: Object.assign({
        method: 'PUT'
      }, config)
    });
  },
  "delete": function _delete(_ref7) {
    var _ref7$url = _ref7.url,
        url = _ref7$url === void 0 ? '/' : _ref7$url,
        _ref7$data = _ref7.data,
        data = _ref7$data === void 0 ? {} : _ref7$data,
        _ref7$config = _ref7.config,
        config = _ref7$config === void 0 ? {} : _ref7$config;
    var fullUrl = requestHost + url;
    addBodyToConfig(config, data);
    return makeFetch({
      url: fullUrl,
      config: Object.assign({
        method: 'DELETE'
      }, config)
    });
  }
};
var validate = {
  hasNumber: function hasNumber(data) {
    return /\d/.test(data);
  },
  hasNotNumber: function hasNotNumber(data) {
    return !this.hasNumber(data);
  },
  isEmail: function isEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
  },
  isNotEmail: function isNotEmail(email) {
    return !this.isEmail(email);
  },
  isLonger: function isLonger(data, length) {
    return data.length > length;
  },
  isShorter: function isShorter(data, length) {
    return data && data.length ? data.length < length : true;
  },
  isNullOrEmpty: function isNullOrEmpty(data) {
    return ['', undefined, null].includes(data);
  },
  isUndefined: function isUndefined(data) {
    return check.isUndefined(data);
  },
  inRange: function inRange(value, start, end) {
    return value >= start && value <= end;
  },
  inNotRange: function inNotRange(value, start, end) {
    return !this.inRange(value, start, end);
  },
  contain: function contain(value, array) {
    return array.includes(value);
  },
  notContain: function notContain(value, array) {
    return !this.contain(value, array);
  },
  isBoolean: function isBoolean(value) {
    return check.isBoolean(value);
  },
  isNotBoolean: function isNotBoolean(value) {
    return check.isNotBoolean(value);
  }
};
var uCheck = check;
var uObject = object;
var uArray = array;
var uNumber = number;
var uPromise = promise;
var uRequest = request;
var uValidate = validate;
var index = {
  check: check,
  object: object,
  array: array,
  number: number,
  promise: promise,
  request: request,
  validate: validate
};
exports.default = index;
exports.uArray = uArray;
exports.uCheck = uCheck;
exports.uNumber = uNumber;
exports.uObject = uObject;
exports.uPromise = uPromise;
exports.uRequest = uRequest;
exports.uValidate = uValidate;

/***/ }),

/***/ "./node_modules/@dbetka/vue-material-icons/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@dbetka/vue-material-icons/dist/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * @dbetka/vue-material-icons v0.2.5
 * (c) dbetka
 * Released under the MIT License.
 */


Object.defineProperty(exports, '__esModule', {
  value: true
});

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".a-icon {\n  font-family: \"Material Icons\";\n  font-weight: normal;\n  font-style: normal;\n  width: 24px;\n  height: 24px;\n  font-size: 24px;\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n  /* Support for IE. */\n  font-feature-settings: \"liga\";\n}\n.a-icon.f-filled {\n  font-family: \"Material Icons\";\n}\n.a-icon.f-outlined {\n  font-family: \"Material Icons Outlined\";\n}\n.a-icon.f-round {\n  font-family: \"Material Icons Round\";\n}\n.a-icon.f-sharp {\n  font-family: \"Material Icons Sharp\";\n}\n.a-icon.f-two-tone {\n  font-family: \"Material Icons Two Tone\";\n}\n\n@font-face {\n  font-family: \"Material Icons\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialicons/v85/flUhRq6tzZclQEJ-Vdg-IuiaDsNZ.ttf) format(\"truetype\");\n}\n.material-icons {\n  font-family: \"Material Icons\";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n\n@font-face {\n  font-family: \"Material Icons Outlined\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconsoutlined/v56/gok-H7zzDkdnRel8-DQ6KAXJ69wP1tGnf4ZGhUcd.otf) format(\"opentype\");\n}\n.material-icons-outlined {\n  font-family: \"Material Icons Outlined\";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n\n@font-face {\n  font-family: \"Material Icons Round\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconsround/v55/LDItaoyNOAY6Uewc665JcIzCKsKc_M9flwmM.otf) format(\"opentype\");\n}\n.material-icons-round {\n  font-family: \"Material Icons Round\";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n\n@font-face {\n  font-family: \"Material Icons Sharp\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconssharp/v56/oPWQ_lt5nv4pWNJpghLP75WiFR4kLh3kvmvS.otf) format(\"opentype\");\n}\n.material-icons-sharp {\n  font-family: \"Material Icons Sharp\";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n\n@font-face {\n  font-family: \"Material Icons Two Tone\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconstwotone/v54/hESh6WRmNCxEqUmNyh3JDeGxjVVyMg4tHGctNCu3.otf) format(\"opentype\");\n}\n.material-icons-two-tone {\n  font-family: \"Material Icons Two Tone\";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}";
styleInject(css_248z);
var ICONS = {
  '10k': '10k',
  '10mp': '10mp',
  '11mp': '11mp',
  '12mp': '12mp',
  '13mp': '13mp',
  '14mp': '14mp',
  '15mp': '15mp',
  '16mp': '16mp',
  '17mp': '17mp',
  '18mp': '18mp',
  '19mp': '19mp',
  '1k': '1k',
  '1k_plus': '1k_plus',
  '1x_mobiledata': '1x_mobiledata',
  '20mp': '20mp',
  '21mp': '21mp',
  '22mp': '22mp',
  '23mp': '23mp',
  '24mp': '24mp',
  '2k': '2k',
  '2k_plus': '2k_plus',
  '2mp': '2mp',
  '30fps': '30fps',
  '30fps_select': '30fps_select',
  '360': '360',
  '3d_rotation': '3d_rotation',
  '3g_mobiledata': '3g_mobiledata',
  '3k': '3k',
  '3k_plus': '3k_plus',
  '3mp': '3mp',
  '3p': '3p',
  '4g_mobiledata': '4g_mobiledata',
  '4g_plus_mobiledata': '4g_plus_mobiledata',
  '4k': '4k',
  '4k_plus': '4k_plus',
  '4mp': '4mp',
  '5g': '5g',
  '5k': '5k',
  '5k_plus': '5k_plus',
  '5mp': '5mp',
  '60fps': '60fps',
  '60fps_select': '60fps_select',
  '6_ft_apart': '6_ft_apart',
  '6k': '6k',
  '6k_plus': '6k_plus',
  '6mp': '6mp',
  '7k': '7k',
  '7k_plus': '7k_plus',
  '7mp': '7mp',
  '8k': '8k',
  '8k_plus': '8k_plus',
  '8mp': '8mp',
  '9k': '9k',
  '9k_plus': '9k_plus',
  '9mp': '9mp',
  'ac_unit': 'ac_unit',
  'access_alarm': 'access_alarm',
  'access_alarms': 'access_alarms',
  'access_time': 'access_time',
  'access_time_filled': 'access_time_filled',
  'accessibility': 'accessibility',
  'accessibility_new': 'accessibility_new',
  'accessible': 'accessible',
  'accessible_forward': 'accessible_forward',
  'account_balance': 'account_balance',
  'account_balance_wallet': 'account_balance_wallet',
  'account_box': 'account_box',
  'account_circle': 'account_circle',
  'account_tree': 'account_tree',
  'ad_units': 'ad_units',
  'adb': 'adb',
  'add': 'add',
  'add_a_photo': 'add_a_photo',
  'add_alarm': 'add_alarm',
  'add_alert': 'add_alert',
  'add_box': 'add_box',
  'add_business': 'add_business',
  'add_chart': 'add_chart',
  'add_circle': 'add_circle',
  'add_circle_outline': 'add_circle_outline',
  'add_comment': 'add_comment',
  'add_ic_call': 'add_ic_call',
  'add_link': 'add_link',
  'add_location': 'add_location',
  'add_location_alt': 'add_location_alt',
  'add_moderator': 'add_moderator',
  'add_photo_alternate': 'add_photo_alternate',
  'add_reaction': 'add_reaction',
  'add_road': 'add_road',
  'add_shopping_cart': 'add_shopping_cart',
  'add_task': 'add_task',
  'add_to_drive': 'add_to_drive',
  'add_to_home_screen': 'add_to_home_screen',
  'add_to_photos': 'add_to_photos',
  'add_to_queue': 'add_to_queue',
  'addchart': 'addchart',
  'adjust': 'adjust',
  'admin_panel_settings': 'admin_panel_settings',
  'ads_click': 'ads_click',
  'agriculture': 'agriculture',
  'air': 'air',
  'airline_seat_flat': 'airline_seat_flat',
  'airline_seat_flat_angled': 'airline_seat_flat_angled',
  'airline_seat_individual_suite': 'airline_seat_individual_suite',
  'airline_seat_legroom_extra': 'airline_seat_legroom_extra',
  'airline_seat_legroom_normal': 'airline_seat_legroom_normal',
  'airline_seat_legroom_reduced': 'airline_seat_legroom_reduced',
  'airline_seat_recline_extra': 'airline_seat_recline_extra',
  'airline_seat_recline_normal': 'airline_seat_recline_normal',
  'airplane_ticket': 'airplane_ticket',
  'airplanemode_active': 'airplanemode_active',
  'airplanemode_inactive': 'airplanemode_inactive',
  'airplay': 'airplay',
  'airport_shuttle': 'airport_shuttle',
  'alarm': 'alarm',
  'alarm_add': 'alarm_add',
  'alarm_off': 'alarm_off',
  'alarm_on': 'alarm_on',
  'album': 'album',
  'align_horizontal_center': 'align_horizontal_center',
  'align_horizontal_left': 'align_horizontal_left',
  'align_horizontal_right': 'align_horizontal_right',
  'align_vertical_bottom': 'align_vertical_bottom',
  'align_vertical_center': 'align_vertical_center',
  'align_vertical_top': 'align_vertical_top',
  'all_inbox': 'all_inbox',
  'all_inclusive': 'all_inclusive',
  'all_out': 'all_out',
  'alt_route': 'alt_route',
  'alternate_email': 'alternate_email',
  'analytics': 'analytics',
  'anchor': 'anchor',
  'android': 'android',
  'animation': 'animation',
  'announcement': 'announcement',
  'aod': 'aod',
  'apartment': 'apartment',
  'api': 'api',
  'app_blocking': 'app_blocking',
  'app_registration': 'app_registration',
  'app_settings_alt': 'app_settings_alt',
  'approval': 'approval',
  'apps': 'apps',
  'architecture': 'architecture',
  'archive': 'archive',
  'area_chart': 'area_chart',
  'arrow_back': 'arrow_back',
  'arrow_back_ios': 'arrow_back_ios',
  'arrow_back_ios_new': 'arrow_back_ios_new',
  'arrow_circle_down': 'arrow_circle_down',
  'arrow_circle_up': 'arrow_circle_up',
  'arrow_downward': 'arrow_downward',
  'arrow_drop_down': 'arrow_drop_down',
  'arrow_drop_down_circle': 'arrow_drop_down_circle',
  'arrow_drop_up': 'arrow_drop_up',
  'arrow_forward': 'arrow_forward',
  'arrow_forward_ios': 'arrow_forward_ios',
  'arrow_left': 'arrow_left',
  'arrow_right': 'arrow_right',
  'arrow_right_alt': 'arrow_right_alt',
  'arrow_upward': 'arrow_upward',
  'art_track': 'art_track',
  'article': 'article',
  'aspect_ratio': 'aspect_ratio',
  'assessment': 'assessment',
  'assignment': 'assignment',
  'assignment_ind': 'assignment_ind',
  'assignment_late': 'assignment_late',
  'assignment_return': 'assignment_return',
  'assignment_returned': 'assignment_returned',
  'assignment_turned_in': 'assignment_turned_in',
  'assistant': 'assistant',
  'assistant_direction': 'assistant_direction',
  'assistant_photo': 'assistant_photo',
  'atm': 'atm',
  'attach_email': 'attach_email',
  'attach_file': 'attach_file',
  'attach_money': 'attach_money',
  'attachment': 'attachment',
  'attractions': 'attractions',
  'attribution': 'attribution',
  'audiotrack': 'audiotrack',
  'auto_awesome': 'auto_awesome',
  'auto_awesome_mosaic': 'auto_awesome_mosaic',
  'auto_awesome_motion': 'auto_awesome_motion',
  'auto_delete': 'auto_delete',
  'auto_fix_high': 'auto_fix_high',
  'auto_fix_normal': 'auto_fix_normal',
  'auto_fix_off': 'auto_fix_off',
  'auto_graph': 'auto_graph',
  'auto_stories': 'auto_stories',
  'autofps_select': 'autofps_select',
  'autorenew': 'autorenew',
  'av_timer': 'av_timer',
  'baby_changing_station': 'baby_changing_station',
  'back_hand': 'back_hand',
  'backpack': 'backpack',
  'backspace': 'backspace',
  'backup': 'backup',
  'backup_table': 'backup_table',
  'badge': 'badge',
  'bakery_dining': 'bakery_dining',
  'balcony': 'balcony',
  'ballot': 'ballot',
  'bar_chart': 'bar_chart',
  'batch_prediction': 'batch_prediction',
  'bathroom': 'bathroom',
  'bathtub': 'bathtub',
  'battery_alert': 'battery_alert',
  'battery_charging_full': 'battery_charging_full',
  'battery_full': 'battery_full',
  'battery_saver': 'battery_saver',
  'battery_std': 'battery_std',
  'battery_unknown': 'battery_unknown',
  'beach_access': 'beach_access',
  'bed': 'bed',
  'bedroom_baby': 'bedroom_baby',
  'bedroom_child': 'bedroom_child',
  'bedroom_parent': 'bedroom_parent',
  'bedtime': 'bedtime',
  'beenhere': 'beenhere',
  'bento': 'bento',
  'bike_scooter': 'bike_scooter',
  'biotech': 'biotech',
  'blender': 'blender',
  'block': 'block',
  'bloodtype': 'bloodtype',
  'bluetooth': 'bluetooth',
  'bluetooth_audio': 'bluetooth_audio',
  'bluetooth_connected': 'bluetooth_connected',
  'bluetooth_disabled': 'bluetooth_disabled',
  'bluetooth_drive': 'bluetooth_drive',
  'bluetooth_searching': 'bluetooth_searching',
  'blur_circular': 'blur_circular',
  'blur_linear': 'blur_linear',
  'blur_off': 'blur_off',
  'blur_on': 'blur_on',
  'bolt': 'bolt',
  'book': 'book',
  'book_online': 'book_online',
  'bookmark': 'bookmark',
  'bookmark_add': 'bookmark_add',
  'bookmark_added': 'bookmark_added',
  'bookmark_border': 'bookmark_border',
  'bookmark_remove': 'bookmark_remove',
  'bookmarks': 'bookmarks',
  'border_all': 'border_all',
  'border_bottom': 'border_bottom',
  'border_clear': 'border_clear',
  'border_color': 'border_color',
  'border_horizontal': 'border_horizontal',
  'border_inner': 'border_inner',
  'border_left': 'border_left',
  'border_outer': 'border_outer',
  'border_right': 'border_right',
  'border_style': 'border_style',
  'border_top': 'border_top',
  'border_vertical': 'border_vertical',
  'branding_watermark': 'branding_watermark',
  'breakfast_dining': 'breakfast_dining',
  'brightness_1': 'brightness_1',
  'brightness_2': 'brightness_2',
  'brightness_3': 'brightness_3',
  'brightness_4': 'brightness_4',
  'brightness_5': 'brightness_5',
  'brightness_6': 'brightness_6',
  'brightness_7': 'brightness_7',
  'brightness_auto': 'brightness_auto',
  'brightness_high': 'brightness_high',
  'brightness_low': 'brightness_low',
  'brightness_medium': 'brightness_medium',
  'broken_image': 'broken_image',
  'browser_not_supported': 'browser_not_supported',
  'brunch_dining': 'brunch_dining',
  'brush': 'brush',
  'bubble_chart': 'bubble_chart',
  'bug_report': 'bug_report',
  'build': 'build',
  'build_circle': 'build_circle',
  'bungalow': 'bungalow',
  'burst_mode': 'burst_mode',
  'bus_alert': 'bus_alert',
  'business': 'business',
  'business_center': 'business_center',
  'cabin': 'cabin',
  'cable': 'cable',
  'cached': 'cached',
  'cake': 'cake',
  'calculate': 'calculate',
  'calendar_today': 'calendar_today',
  'calendar_view_day': 'calendar_view_day',
  'calendar_view_month': 'calendar_view_month',
  'calendar_view_week': 'calendar_view_week',
  'call': 'call',
  'call_end': 'call_end',
  'call_made': 'call_made',
  'call_merge': 'call_merge',
  'call_missed': 'call_missed',
  'call_missed_outgoing': 'call_missed_outgoing',
  'call_received': 'call_received',
  'call_split': 'call_split',
  'call_to_action': 'call_to_action',
  'camera': 'camera',
  'camera_alt': 'camera_alt',
  'camera_enhance': 'camera_enhance',
  'camera_front': 'camera_front',
  'camera_indoor': 'camera_indoor',
  'camera_outdoor': 'camera_outdoor',
  'camera_rear': 'camera_rear',
  'camera_roll': 'camera_roll',
  'cameraswitch': 'cameraswitch',
  'campaign': 'campaign',
  'cancel': 'cancel',
  'cancel_presentation': 'cancel_presentation',
  'cancel_schedule_send': 'cancel_schedule_send',
  'car_rental': 'car_rental',
  'car_repair': 'car_repair',
  'card_giftcard': 'card_giftcard',
  'card_membership': 'card_membership',
  'card_travel': 'card_travel',
  'carpenter': 'carpenter',
  'cases': 'cases',
  'casino': 'casino',
  'cast': 'cast',
  'cast_connected': 'cast_connected',
  'cast_for_education': 'cast_for_education',
  'catching_pokemon': 'catching_pokemon',
  'category': 'category',
  'celebration': 'celebration',
  'cell_wifi': 'cell_wifi',
  'center_focus_strong': 'center_focus_strong',
  'center_focus_weak': 'center_focus_weak',
  'chair': 'chair',
  'chair_alt': 'chair_alt',
  'chalet': 'chalet',
  'change_circle': 'change_circle',
  'change_history': 'change_history',
  'charging_station': 'charging_station',
  'chat': 'chat',
  'chat_bubble': 'chat_bubble',
  'chat_bubble_outline': 'chat_bubble_outline',
  'check': 'check',
  'check_box': 'check_box',
  'check_box_outline_blank': 'check_box_outline_blank',
  'check_circle': 'check_circle',
  'check_circle_outline': 'check_circle_outline',
  'checklist': 'checklist',
  'checklist_rtl': 'checklist_rtl',
  'checkroom': 'checkroom',
  'chevron_left': 'chevron_left',
  'chevron_right': 'chevron_right',
  'child_care': 'child_care',
  'child_friendly': 'child_friendly',
  'chrome_reader_mode': 'chrome_reader_mode',
  'circle': 'circle',
  'circle_notifications': 'circle_notifications',
  'class': 'class',
  'clean_hands': 'clean_hands',
  'cleaning_services': 'cleaning_services',
  'clear': 'clear',
  'clear_all': 'clear_all',
  'close': 'close',
  'close_fullscreen': 'close_fullscreen',
  'closed_caption': 'closed_caption',
  'closed_caption_disabled': 'closed_caption_disabled',
  'closed_caption_off': 'closed_caption_off',
  'cloud': 'cloud',
  'cloud_circle': 'cloud_circle',
  'cloud_done': 'cloud_done',
  'cloud_download': 'cloud_download',
  'cloud_off': 'cloud_off',
  'cloud_queue': 'cloud_queue',
  'cloud_upload': 'cloud_upload',
  'code': 'code',
  'code_off': 'code_off',
  'coffee': 'coffee',
  'coffee_maker': 'coffee_maker',
  'collections': 'collections',
  'collections_bookmark': 'collections_bookmark',
  'color_lens': 'color_lens',
  'colorize': 'colorize',
  'comment': 'comment',
  'comment_bank': 'comment_bank',
  'commute': 'commute',
  'compare': 'compare',
  'compare_arrows': 'compare_arrows',
  'compass_calibration': 'compass_calibration',
  'compost': 'compost',
  'compress': 'compress',
  'computer': 'computer',
  'confirmation_number': 'confirmation_number',
  'connect_without_contact': 'connect_without_contact',
  'connected_tv': 'connected_tv',
  'construction': 'construction',
  'contact_mail': 'contact_mail',
  'contact_page': 'contact_page',
  'contact_phone': 'contact_phone',
  'contact_support': 'contact_support',
  'contactless': 'contactless',
  'contacts': 'contacts',
  'content_copy': 'content_copy',
  'content_cut': 'content_cut',
  'content_paste': 'content_paste',
  'content_paste_off': 'content_paste_off',
  'control_camera': 'control_camera',
  'control_point': 'control_point',
  'control_point_duplicate': 'control_point_duplicate',
  'copy_all': 'copy_all',
  'copyright': 'copyright',
  'coronavirus': 'coronavirus',
  'corporate_fare': 'corporate_fare',
  'cottage': 'cottage',
  'countertops': 'countertops',
  'create': 'create',
  'create_new_folder': 'create_new_folder',
  'credit_card': 'credit_card',
  'credit_card_off': 'credit_card_off',
  'credit_score': 'credit_score',
  'crib': 'crib',
  'crop': 'crop',
  'crop_16_9': 'crop_16_9',
  'crop_3_2': 'crop_3_2',
  'crop_5_4': 'crop_5_4',
  'crop_7_5': 'crop_7_5',
  'crop_din': 'crop_din',
  'crop_free': 'crop_free',
  'crop_landscape': 'crop_landscape',
  'crop_original': 'crop_original',
  'crop_portrait': 'crop_portrait',
  'crop_rotate': 'crop_rotate',
  'crop_square': 'crop_square',
  'cruelty_free': 'cruelty_free',
  'dangerous': 'dangerous',
  'dark_mode': 'dark_mode',
  'dashboard': 'dashboard',
  'dashboard_customize': 'dashboard_customize',
  'data_exploration': 'data_exploration',
  'data_saver_off': 'data_saver_off',
  'data_saver_on': 'data_saver_on',
  'data_usage': 'data_usage',
  'date_range': 'date_range',
  'deck': 'deck',
  'dehaze': 'dehaze',
  'delete': 'delete',
  'delete_forever': 'delete_forever',
  'delete_outline': 'delete_outline',
  'delete_sweep': 'delete_sweep',
  'delivery_dining': 'delivery_dining',
  'departure_board': 'departure_board',
  'description': 'description',
  'design_services': 'design_services',
  'desktop_access_disabled': 'desktop_access_disabled',
  'desktop_mac': 'desktop_mac',
  'desktop_windows': 'desktop_windows',
  'details': 'details',
  'developer_board': 'developer_board',
  'developer_board_off': 'developer_board_off',
  'developer_mode': 'developer_mode',
  'device_hub': 'device_hub',
  'device_thermostat': 'device_thermostat',
  'device_unknown': 'device_unknown',
  'devices': 'devices',
  'devices_other': 'devices_other',
  'dialer_sip': 'dialer_sip',
  'dialpad': 'dialpad',
  'dining': 'dining',
  'dinner_dining': 'dinner_dining',
  'directions': 'directions',
  'directions_bike': 'directions_bike',
  'directions_boat': 'directions_boat',
  'directions_boat_filled': 'directions_boat_filled',
  'directions_bus': 'directions_bus',
  'directions_bus_filled': 'directions_bus_filled',
  'directions_car': 'directions_car',
  'directions_car_filled': 'directions_car_filled',
  'directions_off': 'directions_off',
  'directions_railway': 'directions_railway',
  'directions_railway_filled': 'directions_railway_filled',
  'directions_run': 'directions_run',
  'directions_subway': 'directions_subway',
  'directions_subway_filled': 'directions_subway_filled',
  'directions_transit': 'directions_transit',
  'directions_transit_filled': 'directions_transit_filled',
  'directions_walk': 'directions_walk',
  'dirty_lens': 'dirty_lens',
  'disabled_by_default': 'disabled_by_default',
  'disabled_visible': 'disabled_visible',
  'disc_full': 'disc_full',
  'dns': 'dns',
  'do_disturb': 'do_disturb',
  'do_disturb_alt': 'do_disturb_alt',
  'do_disturb_off': 'do_disturb_off',
  'do_disturb_on': 'do_disturb_on',
  'do_not_disturb': 'do_not_disturb',
  'do_not_disturb_alt': 'do_not_disturb_alt',
  'do_not_disturb_off': 'do_not_disturb_off',
  'do_not_disturb_on': 'do_not_disturb_on',
  'do_not_disturb_on_total_silence': 'do_not_disturb_on_total_silence',
  'do_not_step': 'do_not_step',
  'do_not_touch': 'do_not_touch',
  'dock': 'dock',
  'document_scanner': 'document_scanner',
  'domain': 'domain',
  'domain_disabled': 'domain_disabled',
  'domain_verification': 'domain_verification',
  'done': 'done',
  'done_all': 'done_all',
  'done_outline': 'done_outline',
  'donut_large': 'donut_large',
  'donut_small': 'donut_small',
  'door_back': 'door_back',
  'door_front': 'door_front',
  'door_sliding': 'door_sliding',
  'doorbell': 'doorbell',
  'double_arrow': 'double_arrow',
  'downhill_skiing': 'downhill_skiing',
  'download': 'download',
  'download_done': 'download_done',
  'download_for_offline': 'download_for_offline',
  'downloading': 'downloading',
  'drafts': 'drafts',
  'drag_handle': 'drag_handle',
  'drag_indicator': 'drag_indicator',
  'draw': 'draw',
  'drive_eta': 'drive_eta',
  'drive_file_move': 'drive_file_move',
  'drive_file_move_rtl': 'drive_file_move_rtl',
  'drive_file_rename_outline': 'drive_file_rename_outline',
  'drive_folder_upload': 'drive_folder_upload',
  'dry': 'dry',
  'dry_cleaning': 'dry_cleaning',
  'duo': 'duo',
  'dvr': 'dvr',
  'dynamic_feed': 'dynamic_feed',
  'dynamic_form': 'dynamic_form',
  'e_mobiledata': 'e_mobiledata',
  'earbuds': 'earbuds',
  'earbuds_battery': 'earbuds_battery',
  'east': 'east',
  'edgesensor_high': 'edgesensor_high',
  'edgesensor_low': 'edgesensor_low',
  'edit': 'edit',
  'edit_attributes': 'edit_attributes',
  'edit_calendar': 'edit_calendar',
  'edit_location': 'edit_location',
  'edit_location_alt': 'edit_location_alt',
  'edit_note': 'edit_note',
  'edit_notifications': 'edit_notifications',
  'edit_off': 'edit_off',
  'edit_road': 'edit_road',
  'eject': 'eject',
  'elderly': 'elderly',
  'electric_bike': 'electric_bike',
  'electric_car': 'electric_car',
  'electric_moped': 'electric_moped',
  'electric_rickshaw': 'electric_rickshaw',
  'electric_scooter': 'electric_scooter',
  'electrical_services': 'electrical_services',
  'elevator': 'elevator',
  'email': 'email',
  'emergency': 'emergency',
  'emoji_emotions': 'emoji_emotions',
  'emoji_events': 'emoji_events',
  'emoji_flags': 'emoji_flags',
  'emoji_food_beverage': 'emoji_food_beverage',
  'emoji_nature': 'emoji_nature',
  'emoji_objects': 'emoji_objects',
  'emoji_people': 'emoji_people',
  'emoji_symbols': 'emoji_symbols',
  'emoji_transportation': 'emoji_transportation',
  'engineering': 'engineering',
  'enhanced_encryption': 'enhanced_encryption',
  'equalizer': 'equalizer',
  'error': 'error',
  'error_outline': 'error_outline',
  'escalator': 'escalator',
  'escalator_warning': 'escalator_warning',
  'euro': 'euro',
  'euro_symbol': 'euro_symbol',
  'ev_station': 'ev_station',
  'event': 'event',
  'event_available': 'event_available',
  'event_busy': 'event_busy',
  'event_note': 'event_note',
  'event_seat': 'event_seat',
  'exit_to_app': 'exit_to_app',
  'expand': 'expand',
  'expand_less': 'expand_less',
  'expand_more': 'expand_more',
  'explicit': 'explicit',
  'explore': 'explore',
  'explore_off': 'explore_off',
  'exposure': 'exposure',
  'exposure_neg_1': 'exposure_neg_1',
  'exposure_neg_2': 'exposure_neg_2',
  'exposure_plus_1': 'exposure_plus_1',
  'exposure_plus_2': 'exposure_plus_2',
  'exposure_zero': 'exposure_zero',
  'extension': 'extension',
  'extension_off': 'extension_off',
  'face': 'face',
  'face_retouching_natural': 'face_retouching_natural',
  'face_retouching_off': 'face_retouching_off',
  'facebook': 'facebook',
  'fact_check': 'fact_check',
  'family_restroom': 'family_restroom',
  'fast_forward': 'fast_forward',
  'fast_rewind': 'fast_rewind',
  'fastfood': 'fastfood',
  'favorite': 'favorite',
  'favorite_border': 'favorite_border',
  'featured_play_list': 'featured_play_list',
  'featured_video': 'featured_video',
  'feed': 'feed',
  'feedback': 'feedback',
  'female': 'female',
  'fence': 'fence',
  'festival': 'festival',
  'fiber_dvr': 'fiber_dvr',
  'fiber_manual_record': 'fiber_manual_record',
  'fiber_new': 'fiber_new',
  'fiber_pin': 'fiber_pin',
  'fiber_smart_record': 'fiber_smart_record',
  'file_copy': 'file_copy',
  'file_download': 'file_download',
  'file_download_done': 'file_download_done',
  'file_download_off': 'file_download_off',
  'file_present': 'file_present',
  'file_upload': 'file_upload',
  'filter': 'filter',
  'filter_1': 'filter_1',
  'filter_2': 'filter_2',
  'filter_3': 'filter_3',
  'filter_4': 'filter_4',
  'filter_5': 'filter_5',
  'filter_6': 'filter_6',
  'filter_7': 'filter_7',
  'filter_8': 'filter_8',
  'filter_9': 'filter_9',
  'filter_9_plus': 'filter_9_plus',
  'filter_alt': 'filter_alt',
  'filter_b_and_w': 'filter_b_and_w',
  'filter_center_focus': 'filter_center_focus',
  'filter_drama': 'filter_drama',
  'filter_frames': 'filter_frames',
  'filter_hdr': 'filter_hdr',
  'filter_list': 'filter_list',
  'filter_none': 'filter_none',
  'filter_tilt_shift': 'filter_tilt_shift',
  'filter_vintage': 'filter_vintage',
  'find_in_page': 'find_in_page',
  'find_replace': 'find_replace',
  'fingerprint': 'fingerprint',
  'fire_extinguisher': 'fire_extinguisher',
  'fireplace': 'fireplace',
  'first_page': 'first_page',
  'fit_screen': 'fit_screen',
  'fitness_center': 'fitness_center',
  'flag': 'flag',
  'flaky': 'flaky',
  'flare': 'flare',
  'flash_auto': 'flash_auto',
  'flash_off': 'flash_off',
  'flash_on': 'flash_on',
  'flashlight_off': 'flashlight_off',
  'flashlight_on': 'flashlight_on',
  'flatware': 'flatware',
  'flight': 'flight',
  'flight_land': 'flight_land',
  'flight_takeoff': 'flight_takeoff',
  'flip': 'flip',
  'flip_camera_android': 'flip_camera_android',
  'flip_camera_ios': 'flip_camera_ios',
  'flip_to_back': 'flip_to_back',
  'flip_to_front': 'flip_to_front',
  'flourescent': 'flourescent',
  'flutter_dash': 'flutter_dash',
  'fmd_bad': 'fmd_bad',
  'fmd_good': 'fmd_good',
  'folder': 'folder',
  'folder_open': 'folder_open',
  'folder_shared': 'folder_shared',
  'folder_special': 'folder_special',
  'follow_the_signs': 'follow_the_signs',
  'font_download': 'font_download',
  'font_download_off': 'font_download_off',
  'food_bank': 'food_bank',
  'format_align_center': 'format_align_center',
  'format_align_justify': 'format_align_justify',
  'format_align_left': 'format_align_left',
  'format_align_right': 'format_align_right',
  'format_bold': 'format_bold',
  'format_clear': 'format_clear',
  'format_color_fill': 'format_color_fill',
  'format_color_reset': 'format_color_reset',
  'format_color_text': 'format_color_text',
  'format_indent_decrease': 'format_indent_decrease',
  'format_indent_increase': 'format_indent_increase',
  'format_italic': 'format_italic',
  'format_line_spacing': 'format_line_spacing',
  'format_list_bulleted': 'format_list_bulleted',
  'format_list_numbered': 'format_list_numbered',
  'format_list_numbered_rtl': 'format_list_numbered_rtl',
  'format_paint': 'format_paint',
  'format_quote': 'format_quote',
  'format_shapes': 'format_shapes',
  'format_size': 'format_size',
  'format_strikethrough': 'format_strikethrough',
  'format_textdirection_l_to_r': 'format_textdirection_l_to_r',
  'format_textdirection_r_to_l': 'format_textdirection_r_to_l',
  'format_underlined': 'format_underlined',
  'forum': 'forum',
  'forward': 'forward',
  'forward_10': 'forward_10',
  'forward_30': 'forward_30',
  'forward_5': 'forward_5',
  'forward_to_inbox': 'forward_to_inbox',
  'foundation': 'foundation',
  'free_breakfast': 'free_breakfast',
  'free_cancellation': 'free_cancellation',
  'front_hand': 'front_hand',
  'fullscreen': 'fullscreen',
  'fullscreen_exit': 'fullscreen_exit',
  'functions': 'functions',
  'g_mobiledata': 'g_mobiledata',
  'g_translate': 'g_translate',
  'gamepad': 'gamepad',
  'games': 'games',
  'garage': 'garage',
  'gavel': 'gavel',
  'generating_tokens': 'generating_tokens',
  'gesture': 'gesture',
  'get_app': 'get_app',
  'gif': 'gif',
  'gite': 'gite',
  'golf_course': 'golf_course',
  'gpp_bad': 'gpp_bad',
  'gpp_good': 'gpp_good',
  'gpp_maybe': 'gpp_maybe',
  'gps_fixed': 'gps_fixed',
  'gps_not_fixed': 'gps_not_fixed',
  'gps_off': 'gps_off',
  'grade': 'grade',
  'gradient': 'gradient',
  'grading': 'grading',
  'grain': 'grain',
  'graphic_eq': 'graphic_eq',
  'grass': 'grass',
  'grid_3x3': 'grid_3x3',
  'grid_4x4': 'grid_4x4',
  'grid_goldenratio': 'grid_goldenratio',
  'grid_off': 'grid_off',
  'grid_on': 'grid_on',
  'grid_view': 'grid_view',
  'group': 'group',
  'group_add': 'group_add',
  'group_off': 'group_off',
  'group_work': 'group_work',
  'groups': 'groups',
  'h_mobiledata': 'h_mobiledata',
  'h_plus_mobiledata': 'h_plus_mobiledata',
  'hail': 'hail',
  'handyman': 'handyman',
  'hardware': 'hardware',
  'hd': 'hd',
  'hdr_auto': 'hdr_auto',
  'hdr_auto_select': 'hdr_auto_select',
  'hdr_enhanced_select': 'hdr_enhanced_select',
  'hdr_off': 'hdr_off',
  'hdr_off_select': 'hdr_off_select',
  'hdr_on': 'hdr_on',
  'hdr_on_select': 'hdr_on_select',
  'hdr_plus': 'hdr_plus',
  'hdr_strong': 'hdr_strong',
  'hdr_weak': 'hdr_weak',
  'headphones': 'headphones',
  'headphones_battery': 'headphones_battery',
  'headset': 'headset',
  'headset_mic': 'headset_mic',
  'headset_off': 'headset_off',
  'healing': 'healing',
  'health_and_safety': 'health_and_safety',
  'hearing': 'hearing',
  'hearing_disabled': 'hearing_disabled',
  'height': 'height',
  'help': 'help',
  'help_center': 'help_center',
  'help_outline': 'help_outline',
  'hevc': 'hevc',
  'hide_image': 'hide_image',
  'hide_source': 'hide_source',
  'high_quality': 'high_quality',
  'highlight': 'highlight',
  'highlight_alt': 'highlight_alt',
  'highlight_off': 'highlight_off',
  'hiking': 'hiking',
  'history': 'history',
  'history_edu': 'history_edu',
  'history_toggle_off': 'history_toggle_off',
  'holiday_village': 'holiday_village',
  'home': 'home',
  'home_max': 'home_max',
  'home_mini': 'home_mini',
  'home_repair_service': 'home_repair_service',
  'home_work': 'home_work',
  'horizontal_distribute': 'horizontal_distribute',
  'horizontal_rule': 'horizontal_rule',
  'horizontal_split': 'horizontal_split',
  'hot_tub': 'hot_tub',
  'hotel': 'hotel',
  'hotel_class': 'hotel_class',
  'hourglass_bottom': 'hourglass_bottom',
  'hourglass_disabled': 'hourglass_disabled',
  'hourglass_empty': 'hourglass_empty',
  'hourglass_full': 'hourglass_full',
  'hourglass_top': 'hourglass_top',
  'house': 'house',
  'house_siding': 'house_siding',
  'houseboat': 'houseboat',
  'how_to_reg': 'how_to_reg',
  'how_to_vote': 'how_to_vote',
  'http': 'http',
  'https': 'https',
  'hvac': 'hvac',
  'ice_skating': 'ice_skating',
  'icecream': 'icecream',
  'image': 'image',
  'image_aspect_ratio': 'image_aspect_ratio',
  'image_not_supported': 'image_not_supported',
  'image_search': 'image_search',
  'imagesearch_roller': 'imagesearch_roller',
  'import_contacts': 'import_contacts',
  'import_export': 'import_export',
  'important_devices': 'important_devices',
  'inbox': 'inbox',
  'incomplete_circle': 'incomplete_circle',
  'indeterminate_check_box': 'indeterminate_check_box',
  'info': 'info',
  'input': 'input',
  'insert_chart': 'insert_chart',
  'insert_chart_outlined': 'insert_chart_outlined',
  'insert_comment': 'insert_comment',
  'insert_drive_file': 'insert_drive_file',
  'insert_emoticon': 'insert_emoticon',
  'insert_invitation': 'insert_invitation',
  'insert_link': 'insert_link',
  'insert_photo': 'insert_photo',
  'insights': 'insights',
  'integration_instructions': 'integration_instructions',
  'inventory': 'inventory',
  'inventory_2': 'inventory_2',
  'invert_colors': 'invert_colors',
  'invert_colors_off': 'invert_colors_off',
  'ios_share': 'ios_share',
  'iron': 'iron',
  'iso': 'iso',
  'kayaking': 'kayaking',
  'keyboard': 'keyboard',
  'keyboard_alt': 'keyboard_alt',
  'keyboard_arrow_down': 'keyboard_arrow_down',
  'keyboard_arrow_left': 'keyboard_arrow_left',
  'keyboard_arrow_right': 'keyboard_arrow_right',
  'keyboard_arrow_up': 'keyboard_arrow_up',
  'keyboard_backspace': 'keyboard_backspace',
  'keyboard_capslock': 'keyboard_capslock',
  'keyboard_hide': 'keyboard_hide',
  'keyboard_return': 'keyboard_return',
  'keyboard_tab': 'keyboard_tab',
  'keyboard_voice': 'keyboard_voice',
  'king_bed': 'king_bed',
  'kitchen': 'kitchen',
  'kitesurfing': 'kitesurfing',
  'label': 'label',
  'label_important': 'label_important',
  'label_off': 'label_off',
  'landscape': 'landscape',
  'language': 'language',
  'laptop': 'laptop',
  'laptop_chromebook': 'laptop_chromebook',
  'laptop_mac': 'laptop_mac',
  'laptop_windows': 'laptop_windows',
  'last_page': 'last_page',
  'launch': 'launch',
  'layers': 'layers',
  'layers_clear': 'layers_clear',
  'leaderboard': 'leaderboard',
  'leak_add': 'leak_add',
  'leak_remove': 'leak_remove',
  'legend_toggle': 'legend_toggle',
  'lens': 'lens',
  'lens_blur': 'lens_blur',
  'library_add': 'library_add',
  'library_add_check': 'library_add_check',
  'library_books': 'library_books',
  'library_music': 'library_music',
  'light': 'light',
  'light_mode': 'light_mode',
  'lightbulb': 'lightbulb',
  'line_style': 'line_style',
  'line_weight': 'line_weight',
  'linear_scale': 'linear_scale',
  'link': 'link',
  'link_off': 'link_off',
  'linked_camera': 'linked_camera',
  'liquor': 'liquor',
  'list': 'list',
  'list_alt': 'list_alt',
  'live_help': 'live_help',
  'live_tv': 'live_tv',
  'living': 'living',
  'local_activity': 'local_activity',
  'local_airport': 'local_airport',
  'local_atm': 'local_atm',
  'local_bar': 'local_bar',
  'local_cafe': 'local_cafe',
  'local_car_wash': 'local_car_wash',
  'local_convenience_store': 'local_convenience_store',
  'local_dining': 'local_dining',
  'local_drink': 'local_drink',
  'local_fire_department': 'local_fire_department',
  'local_florist': 'local_florist',
  'local_gas_station': 'local_gas_station',
  'local_grocery_store': 'local_grocery_store',
  'local_hospital': 'local_hospital',
  'local_hotel': 'local_hotel',
  'local_laundry_service': 'local_laundry_service',
  'local_library': 'local_library',
  'local_mall': 'local_mall',
  'local_movies': 'local_movies',
  'local_offer': 'local_offer',
  'local_parking': 'local_parking',
  'local_pharmacy': 'local_pharmacy',
  'local_phone': 'local_phone',
  'local_pizza': 'local_pizza',
  'local_play': 'local_play',
  'local_police': 'local_police',
  'local_post_office': 'local_post_office',
  'local_printshop': 'local_printshop',
  'local_see': 'local_see',
  'local_shipping': 'local_shipping',
  'local_taxi': 'local_taxi',
  'location_city': 'location_city',
  'location_disabled': 'location_disabled',
  'location_off': 'location_off',
  'location_on': 'location_on',
  'location_searching': 'location_searching',
  'lock': 'lock',
  'lock_clock': 'lock_clock',
  'lock_open': 'lock_open',
  'login': 'login',
  'logout': 'logout',
  'looks': 'looks',
  'looks_3': 'looks_3',
  'looks_4': 'looks_4',
  'looks_5': 'looks_5',
  'looks_6': 'looks_6',
  'looks_one': 'looks_one',
  'looks_two': 'looks_two',
  'loop': 'loop',
  'loupe': 'loupe',
  'low_priority': 'low_priority',
  'loyalty': 'loyalty',
  'lte_mobiledata': 'lte_mobiledata',
  'lte_plus_mobiledata': 'lte_plus_mobiledata',
  'luggage': 'luggage',
  'lunch_dining': 'lunch_dining',
  'mail': 'mail',
  'mail_outline': 'mail_outline',
  'male': 'male',
  'manage_accounts': 'manage_accounts',
  'manage_search': 'manage_search',
  'map': 'map',
  'maps_home_work': 'maps_home_work',
  'maps_ugc': 'maps_ugc',
  'margin': 'margin',
  'mark_as_unread': 'mark_as_unread',
  'mark_chat_read': 'mark_chat_read',
  'mark_chat_unread': 'mark_chat_unread',
  'mark_email_read': 'mark_email_read',
  'mark_email_unread': 'mark_email_unread',
  'markunread': 'markunread',
  'markunread_mailbox': 'markunread_mailbox',
  'masks': 'masks',
  'maximize': 'maximize',
  'media_bluetooth_off': 'media_bluetooth_off',
  'media_bluetooth_on': 'media_bluetooth_on',
  'mediation': 'mediation',
  'medical_services': 'medical_services',
  'medication': 'medication',
  'meeting_room': 'meeting_room',
  'memory': 'memory',
  'menu': 'menu',
  'menu_book': 'menu_book',
  'menu_open': 'menu_open',
  'merge_type': 'merge_type',
  'message': 'message',
  'mic': 'mic',
  'mic_external_off': 'mic_external_off',
  'mic_external_on': 'mic_external_on',
  'mic_none': 'mic_none',
  'mic_off': 'mic_off',
  'microwave': 'microwave',
  'military_tech': 'military_tech',
  'minimize': 'minimize',
  'miscellaneous_services': 'miscellaneous_services',
  'missed_video_call': 'missed_video_call',
  'mms': 'mms',
  'mobile_friendly': 'mobile_friendly',
  'mobile_off': 'mobile_off',
  'mobile_screen_share': 'mobile_screen_share',
  'mobiledata_off': 'mobiledata_off',
  'mode': 'mode',
  'mode_comment': 'mode_comment',
  'mode_edit': 'mode_edit',
  'mode_edit_outline': 'mode_edit_outline',
  'mode_night': 'mode_night',
  'mode_standby': 'mode_standby',
  'model_training': 'model_training',
  'monetization_on': 'monetization_on',
  'money': 'money',
  'money_off': 'money_off',
  'money_off_csred': 'money_off_csred',
  'monitor': 'monitor',
  'monitor_weight': 'monitor_weight',
  'monochrome_photos': 'monochrome_photos',
  'mood': 'mood',
  'mood_bad': 'mood_bad',
  'moped': 'moped',
  'more': 'more',
  'more_horiz': 'more_horiz',
  'more_time': 'more_time',
  'more_vert': 'more_vert',
  'motion_photos_auto': 'motion_photos_auto',
  'motion_photos_off': 'motion_photos_off',
  'motion_photos_on': 'motion_photos_on',
  'motion_photos_pause': 'motion_photos_pause',
  'motion_photos_paused': 'motion_photos_paused',
  'mouse': 'mouse',
  'move_to_inbox': 'move_to_inbox',
  'movie': 'movie',
  'movie_creation': 'movie_creation',
  'movie_filter': 'movie_filter',
  'moving': 'moving',
  'mp': 'mp',
  'multiline_chart': 'multiline_chart',
  'multiple_stop': 'multiple_stop',
  'museum': 'museum',
  'music_note': 'music_note',
  'music_off': 'music_off',
  'music_video': 'music_video',
  'my_location': 'my_location',
  'nat': 'nat',
  'nature': 'nature',
  'nature_people': 'nature_people',
  'navigate_before': 'navigate_before',
  'navigate_next': 'navigate_next',
  'navigation': 'navigation',
  'near_me': 'near_me',
  'near_me_disabled': 'near_me_disabled',
  'nearby_error': 'nearby_error',
  'nearby_off': 'nearby_off',
  'network_cell': 'network_cell',
  'network_check': 'network_check',
  'network_locked': 'network_locked',
  'network_wifi': 'network_wifi',
  'new_label': 'new_label',
  'new_releases': 'new_releases',
  'next_plan': 'next_plan',
  'next_week': 'next_week',
  'nfc': 'nfc',
  'night_shelter': 'night_shelter',
  'nightlife': 'nightlife',
  'nightlight': 'nightlight',
  'nightlight_round': 'nightlight_round',
  'nights_stay': 'nights_stay',
  'no_accounts': 'no_accounts',
  'no_backpack': 'no_backpack',
  'no_cell': 'no_cell',
  'no_drinks': 'no_drinks',
  'no_encryption': 'no_encryption',
  'no_encryption_gmailerrorred': 'no_encryption_gmailerrorred',
  'no_flash': 'no_flash',
  'no_food': 'no_food',
  'no_luggage': 'no_luggage',
  'no_meals': 'no_meals',
  'no_meeting_room': 'no_meeting_room',
  'no_photography': 'no_photography',
  'no_sim': 'no_sim',
  'no_stroller': 'no_stroller',
  'no_transfer': 'no_transfer',
  'nordic_walking': 'nordic_walking',
  'north': 'north',
  'north_east': 'north_east',
  'north_west': 'north_west',
  'not_accessible': 'not_accessible',
  'not_interested': 'not_interested',
  'not_listed_location': 'not_listed_location',
  'not_started': 'not_started',
  'note': 'note',
  'note_add': 'note_add',
  'note_alt': 'note_alt',
  'notes': 'notes',
  'notification_add': 'notification_add',
  'notification_important': 'notification_important',
  'notifications': 'notifications',
  'notifications_active': 'notifications_active',
  'notifications_none': 'notifications_none',
  'notifications_off': 'notifications_off',
  'notifications_paused': 'notifications_paused',
  'offline_bolt': 'offline_bolt',
  'offline_pin': 'offline_pin',
  'offline_share': 'offline_share',
  'ondemand_video': 'ondemand_video',
  'online_prediction': 'online_prediction',
  'opacity': 'opacity',
  'open_in_browser': 'open_in_browser',
  'open_in_full': 'open_in_full',
  'open_in_new': 'open_in_new',
  'open_in_new_off': 'open_in_new_off',
  'open_with': 'open_with',
  'other_houses': 'other_houses',
  'outbound': 'outbound',
  'outbox': 'outbox',
  'outdoor_grill': 'outdoor_grill',
  'outlet': 'outlet',
  'outlined_flag': 'outlined_flag',
  'padding': 'padding',
  'pages': 'pages',
  'pageview': 'pageview',
  'paid': 'paid',
  'palette': 'palette',
  'pan_tool': 'pan_tool',
  'panorama': 'panorama',
  'panorama_fish_eye': 'panorama_fish_eye',
  'panorama_horizontal': 'panorama_horizontal',
  'panorama_horizontal_select': 'panorama_horizontal_select',
  'panorama_photosphere': 'panorama_photosphere',
  'panorama_photosphere_select': 'panorama_photosphere_select',
  'panorama_vertical': 'panorama_vertical',
  'panorama_vertical_select': 'panorama_vertical_select',
  'panorama_wide_angle': 'panorama_wide_angle',
  'panorama_wide_angle_select': 'panorama_wide_angle_select',
  'paragliding': 'paragliding',
  'park': 'park',
  'party_mode': 'party_mode',
  'password': 'password',
  'pattern': 'pattern',
  'pause': 'pause',
  'pause_circle': 'pause_circle',
  'pause_circle_filled': 'pause_circle_filled',
  'pause_circle_outline': 'pause_circle_outline',
  'pause_presentation': 'pause_presentation',
  'payment': 'payment',
  'payments': 'payments',
  'pedal_bike': 'pedal_bike',
  'pending': 'pending',
  'pending_actions': 'pending_actions',
  'people': 'people',
  'people_alt': 'people_alt',
  'people_outline': 'people_outline',
  'perm_camera_mic': 'perm_camera_mic',
  'perm_contact_calendar': 'perm_contact_calendar',
  'perm_data_setting': 'perm_data_setting',
  'perm_device_information': 'perm_device_information',
  'perm_identity': 'perm_identity',
  'perm_media': 'perm_media',
  'perm_phone_msg': 'perm_phone_msg',
  'perm_scan_wifi': 'perm_scan_wifi',
  'person': 'person',
  'person_add': 'person_add',
  'person_add_alt': 'person_add_alt',
  'person_add_alt_1': 'person_add_alt_1',
  'person_add_disabled': 'person_add_disabled',
  'person_off': 'person_off',
  'person_outline': 'person_outline',
  'person_pin': 'person_pin',
  'person_pin_circle': 'person_pin_circle',
  'person_remove': 'person_remove',
  'person_remove_alt_1': 'person_remove_alt_1',
  'person_search': 'person_search',
  'personal_injury': 'personal_injury',
  'personal_video': 'personal_video',
  'pest_control': 'pest_control',
  'pest_control_rodent': 'pest_control_rodent',
  'pets': 'pets',
  'phone': 'phone',
  'phone_android': 'phone_android',
  'phone_bluetooth_speaker': 'phone_bluetooth_speaker',
  'phone_callback': 'phone_callback',
  'phone_disabled': 'phone_disabled',
  'phone_enabled': 'phone_enabled',
  'phone_forwarded': 'phone_forwarded',
  'phone_in_talk': 'phone_in_talk',
  'phone_iphone': 'phone_iphone',
  'phone_locked': 'phone_locked',
  'phone_missed': 'phone_missed',
  'phone_paused': 'phone_paused',
  'phonelink': 'phonelink',
  'phonelink_erase': 'phonelink_erase',
  'phonelink_lock': 'phonelink_lock',
  'phonelink_off': 'phonelink_off',
  'phonelink_ring': 'phonelink_ring',
  'phonelink_setup': 'phonelink_setup',
  'photo': 'photo',
  'photo_album': 'photo_album',
  'photo_camera': 'photo_camera',
  'photo_camera_back': 'photo_camera_back',
  'photo_camera_front': 'photo_camera_front',
  'photo_filter': 'photo_filter',
  'photo_library': 'photo_library',
  'photo_size_select_actual': 'photo_size_select_actual',
  'photo_size_select_large': 'photo_size_select_large',
  'photo_size_select_small': 'photo_size_select_small',
  'piano': 'piano',
  'piano_off': 'piano_off',
  'picture_as_pdf': 'picture_as_pdf',
  'picture_in_picture': 'picture_in_picture',
  'picture_in_picture_alt': 'picture_in_picture_alt',
  'pie_chart': 'pie_chart',
  'pie_chart_outline': 'pie_chart_outline',
  'pin': 'pin',
  'pin_drop': 'pin_drop',
  'pin_end': 'pin_end',
  'pin_invoke': 'pin_invoke',
  'pivot_table_chart': 'pivot_table_chart',
  'place': 'place',
  'plagiarism': 'plagiarism',
  'play_arrow': 'play_arrow',
  'play_circle': 'play_circle',
  'play_circle_filled': 'play_circle_filled',
  'play_circle_outline': 'play_circle_outline',
  'play_disabled': 'play_disabled',
  'play_for_work': 'play_for_work',
  'play_lesson': 'play_lesson',
  'playlist_add': 'playlist_add',
  'playlist_add_check': 'playlist_add_check',
  'playlist_play': 'playlist_play',
  'plumbing': 'plumbing',
  'plus_one': 'plus_one',
  'podcasts': 'podcasts',
  'point_of_sale': 'point_of_sale',
  'policy': 'policy',
  'poll': 'poll',
  'polymer': 'polymer',
  'pool': 'pool',
  'portable_wifi_off': 'portable_wifi_off',
  'portrait': 'portrait',
  'post_add': 'post_add',
  'power': 'power',
  'power_input': 'power_input',
  'power_off': 'power_off',
  'power_settings_new': 'power_settings_new',
  'precision_manufacturing': 'precision_manufacturing',
  'pregnant_woman': 'pregnant_woman',
  'present_to_all': 'present_to_all',
  'preview': 'preview',
  'price_change': 'price_change',
  'price_check': 'price_check',
  'print': 'print',
  'print_disabled': 'print_disabled',
  'priority_high': 'priority_high',
  'privacy_tip': 'privacy_tip',
  'private_connectivity': 'private_connectivity',
  'production_quantity_limits': 'production_quantity_limits',
  'psychology': 'psychology',
  'public': 'public',
  'public_off': 'public_off',
  'publish': 'publish',
  'published_with_changes': 'published_with_changes',
  'push_pin': 'push_pin',
  'qr_code': 'qr_code',
  'qr_code_2': 'qr_code_2',
  'qr_code_scanner': 'qr_code_scanner',
  'query_builder': 'query_builder',
  'query_stats': 'query_stats',
  'question_answer': 'question_answer',
  'queue': 'queue',
  'queue_music': 'queue_music',
  'queue_play_next': 'queue_play_next',
  'quickreply': 'quickreply',
  'quiz': 'quiz',
  'r_mobiledata': 'r_mobiledata',
  'radar': 'radar',
  'radio': 'radio',
  'radio_button_checked': 'radio_button_checked',
  'radio_button_unchecked': 'radio_button_unchecked',
  'railway_alert': 'railway_alert',
  'ramen_dining': 'ramen_dining',
  'rate_review': 'rate_review',
  'raw_off': 'raw_off',
  'raw_on': 'raw_on',
  'read_more': 'read_more',
  'real_estate_agent': 'real_estate_agent',
  'receipt': 'receipt',
  'receipt_long': 'receipt_long',
  'recent_actors': 'recent_actors',
  'recommend': 'recommend',
  'record_voice_over': 'record_voice_over',
  'recycling': 'recycling',
  'redeem': 'redeem',
  'redo': 'redo',
  'reduce_capacity': 'reduce_capacity',
  'refresh': 'refresh',
  'remember_me': 'remember_me',
  'remove': 'remove',
  'remove_circle': 'remove_circle',
  'remove_circle_outline': 'remove_circle_outline',
  'remove_done': 'remove_done',
  'remove_from_queue': 'remove_from_queue',
  'remove_moderator': 'remove_moderator',
  'remove_red_eye': 'remove_red_eye',
  'remove_shopping_cart': 'remove_shopping_cart',
  'reorder': 'reorder',
  'repeat': 'repeat',
  'repeat_on': 'repeat_on',
  'repeat_one': 'repeat_one',
  'repeat_one_on': 'repeat_one_on',
  'replay': 'replay',
  'replay_10': 'replay_10',
  'replay_30': 'replay_30',
  'replay_5': 'replay_5',
  'replay_circle_filled': 'replay_circle_filled',
  'reply': 'reply',
  'reply_all': 'reply_all',
  'report': 'report',
  'report_gmailerrorred': 'report_gmailerrorred',
  'report_off': 'report_off',
  'report_problem': 'report_problem',
  'request_page': 'request_page',
  'request_quote': 'request_quote',
  'reset_tv': 'reset_tv',
  'restart_alt': 'restart_alt',
  'restaurant': 'restaurant',
  'restaurant_menu': 'restaurant_menu',
  'restore': 'restore',
  'restore_from_trash': 'restore_from_trash',
  'restore_page': 'restore_page',
  'reviews': 'reviews',
  'rice_bowl': 'rice_bowl',
  'ring_volume': 'ring_volume',
  'roofing': 'roofing',
  'room': 'room',
  'room_preferences': 'room_preferences',
  'room_service': 'room_service',
  'rotate_90_degrees_ccw': 'rotate_90_degrees_ccw',
  'rotate_left': 'rotate_left',
  'rotate_right': 'rotate_right',
  'rounded_corner': 'rounded_corner',
  'router': 'router',
  'rowing': 'rowing',
  'rss_feed': 'rss_feed',
  'rsvp': 'rsvp',
  'rtt': 'rtt',
  'rule': 'rule',
  'rule_folder': 'rule_folder',
  'run_circle': 'run_circle',
  'running_with_errors': 'running_with_errors',
  'rv_hookup': 'rv_hookup',
  'safety_divider': 'safety_divider',
  'sailing': 'sailing',
  'sanitizer': 'sanitizer',
  'satellite': 'satellite',
  'save': 'save',
  'save_alt': 'save_alt',
  'saved_search': 'saved_search',
  'savings': 'savings',
  'scanner': 'scanner',
  'scatter_plot': 'scatter_plot',
  'schedule': 'schedule',
  'schedule_send': 'schedule_send',
  'schema': 'schema',
  'school': 'school',
  'science': 'science',
  'score': 'score',
  'screen_lock_landscape': 'screen_lock_landscape',
  'screen_lock_portrait': 'screen_lock_portrait',
  'screen_lock_rotation': 'screen_lock_rotation',
  'screen_rotation': 'screen_rotation',
  'screen_search_desktop': 'screen_search_desktop',
  'screen_share': 'screen_share',
  'screenshot': 'screenshot',
  'sd': 'sd',
  'sd_card': 'sd_card',
  'sd_card_alert': 'sd_card_alert',
  'sd_storage': 'sd_storage',
  'search': 'search',
  'search_off': 'search_off',
  'security': 'security',
  'security_update': 'security_update',
  'security_update_good': 'security_update_good',
  'security_update_warning': 'security_update_warning',
  'segment': 'segment',
  'select_all': 'select_all',
  'self_improvement': 'self_improvement',
  'sell': 'sell',
  'send': 'send',
  'send_and_archive': 'send_and_archive',
  'send_to_mobile': 'send_to_mobile',
  'sensor_door': 'sensor_door',
  'sensor_window': 'sensor_window',
  'sensors': 'sensors',
  'sensors_off': 'sensors_off',
  'sentiment_dissatisfied': 'sentiment_dissatisfied',
  'sentiment_neutral': 'sentiment_neutral',
  'sentiment_satisfied': 'sentiment_satisfied',
  'sentiment_satisfied_alt': 'sentiment_satisfied_alt',
  'sentiment_very_dissatisfied': 'sentiment_very_dissatisfied',
  'sentiment_very_satisfied': 'sentiment_very_satisfied',
  'set_meal': 'set_meal',
  'settings': 'settings',
  'settings_accessibility': 'settings_accessibility',
  'settings_applications': 'settings_applications',
  'settings_backup_restore': 'settings_backup_restore',
  'settings_bluetooth': 'settings_bluetooth',
  'settings_brightness': 'settings_brightness',
  'settings_cell': 'settings_cell',
  'settings_ethernet': 'settings_ethernet',
  'settings_input_antenna': 'settings_input_antenna',
  'settings_input_component': 'settings_input_component',
  'settings_input_composite': 'settings_input_composite',
  'settings_input_hdmi': 'settings_input_hdmi',
  'settings_input_svideo': 'settings_input_svideo',
  'settings_overscan': 'settings_overscan',
  'settings_phone': 'settings_phone',
  'settings_power': 'settings_power',
  'settings_remote': 'settings_remote',
  'settings_suggest': 'settings_suggest',
  'settings_system_daydream': 'settings_system_daydream',
  'settings_voice': 'settings_voice',
  'share': 'share',
  'share_location': 'share_location',
  'shield': 'shield',
  'shop': 'shop',
  'shop_2': 'shop_2',
  'shop_two': 'shop_two',
  'shopping_bag': 'shopping_bag',
  'shopping_basket': 'shopping_basket',
  'shopping_cart': 'shopping_cart',
  'short_text': 'short_text',
  'shortcut': 'shortcut',
  'show_chart': 'show_chart',
  'shower': 'shower',
  'shuffle': 'shuffle',
  'shuffle_on': 'shuffle_on',
  'shutter_speed': 'shutter_speed',
  'sick': 'sick',
  'signal_cellular_0_bar': 'signal_cellular_0_bar',
  'signal_cellular_4_bar': 'signal_cellular_4_bar',
  'signal_cellular_alt': 'signal_cellular_alt',
  'signal_cellular_connected_no_internet_0_bar': 'signal_cellular_connected_no_internet_0_bar',
  'signal_cellular_connected_no_internet_4_bar': 'signal_cellular_connected_no_internet_4_bar',
  'signal_cellular_no_sim': 'signal_cellular_no_sim',
  'signal_cellular_nodata': 'signal_cellular_nodata',
  'signal_cellular_null': 'signal_cellular_null',
  'signal_cellular_off': 'signal_cellular_off',
  'signal_wifi_0_bar': 'signal_wifi_0_bar',
  'signal_wifi_4_bar': 'signal_wifi_4_bar',
  'signal_wifi_4_bar_lock': 'signal_wifi_4_bar_lock',
  'signal_wifi_bad': 'signal_wifi_bad',
  'signal_wifi_connected_no_internet_4': 'signal_wifi_connected_no_internet_4',
  'signal_wifi_off': 'signal_wifi_off',
  'signal_wifi_statusbar_4_bar': 'signal_wifi_statusbar_4_bar',
  'signal_wifi_statusbar_connected_no_internet_4': 'signal_wifi_statusbar_connected_no_internet_4',
  'signal_wifi_statusbar_null': 'signal_wifi_statusbar_null',
  'sim_card': 'sim_card',
  'sim_card_alert': 'sim_card_alert',
  'sim_card_download': 'sim_card_download',
  'single_bed': 'single_bed',
  'sip': 'sip',
  'skateboarding': 'skateboarding',
  'skip_next': 'skip_next',
  'skip_previous': 'skip_previous',
  'sledding': 'sledding',
  'slideshow': 'slideshow',
  'slow_motion_video': 'slow_motion_video',
  'smart_button': 'smart_button',
  'smart_display': 'smart_display',
  'smart_screen': 'smart_screen',
  'smart_toy': 'smart_toy',
  'smartphone': 'smartphone',
  'smoke_free': 'smoke_free',
  'smoking_rooms': 'smoking_rooms',
  'sms': 'sms',
  'sms_failed': 'sms_failed',
  'snippet_folder': 'snippet_folder',
  'snooze': 'snooze',
  'snowboarding': 'snowboarding',
  'snowmobile': 'snowmobile',
  'snowshoeing': 'snowshoeing',
  'soap': 'soap',
  'social_distance': 'social_distance',
  'sort': 'sort',
  'sort_by_alpha': 'sort_by_alpha',
  'source': 'source',
  'south': 'south',
  'south_east': 'south_east',
  'south_west': 'south_west',
  'spa': 'spa',
  'space_bar': 'space_bar',
  'space_dashboard': 'space_dashboard',
  'speaker': 'speaker',
  'speaker_group': 'speaker_group',
  'speaker_notes': 'speaker_notes',
  'speaker_notes_off': 'speaker_notes_off',
  'speaker_phone': 'speaker_phone',
  'speed': 'speed',
  'spellcheck': 'spellcheck',
  'splitscreen': 'splitscreen',
  'sports': 'sports',
  'sports_bar': 'sports_bar',
  'sports_baseball': 'sports_baseball',
  'sports_basketball': 'sports_basketball',
  'sports_cricket': 'sports_cricket',
  'sports_esports': 'sports_esports',
  'sports_football': 'sports_football',
  'sports_golf': 'sports_golf',
  'sports_handball': 'sports_handball',
  'sports_hockey': 'sports_hockey',
  'sports_kabaddi': 'sports_kabaddi',
  'sports_mma': 'sports_mma',
  'sports_motorsports': 'sports_motorsports',
  'sports_rugby': 'sports_rugby',
  'sports_score': 'sports_score',
  'sports_soccer': 'sports_soccer',
  'sports_tennis': 'sports_tennis',
  'sports_volleyball': 'sports_volleyball',
  'square_foot': 'square_foot',
  'stacked_bar_chart': 'stacked_bar_chart',
  'stacked_line_chart': 'stacked_line_chart',
  'stairs': 'stairs',
  'star': 'star',
  'star_border': 'star_border',
  'star_border_purple500': 'star_border_purple500',
  'star_half': 'star_half',
  'star_outline': 'star_outline',
  'star_purple500': 'star_purple500',
  'star_rate': 'star_rate',
  'stars': 'stars',
  'stay_current_landscape': 'stay_current_landscape',
  'stay_current_portrait': 'stay_current_portrait',
  'stay_primary_landscape': 'stay_primary_landscape',
  'stay_primary_portrait': 'stay_primary_portrait',
  'sticky_note_2': 'sticky_note_2',
  'stop': 'stop',
  'stop_circle': 'stop_circle',
  'stop_screen_share': 'stop_screen_share',
  'storage': 'storage',
  'store': 'store',
  'store_mall_directory': 'store_mall_directory',
  'storefront': 'storefront',
  'storm': 'storm',
  'straighten': 'straighten',
  'stream': 'stream',
  'streetview': 'streetview',
  'strikethrough_s': 'strikethrough_s',
  'stroller': 'stroller',
  'style': 'style',
  'subdirectory_arrow_left': 'subdirectory_arrow_left',
  'subdirectory_arrow_right': 'subdirectory_arrow_right',
  'subject': 'subject',
  'subscript': 'subscript',
  'subscriptions': 'subscriptions',
  'subtitles': 'subtitles',
  'subtitles_off': 'subtitles_off',
  'subway': 'subway',
  'summarize': 'summarize',
  'superscript': 'superscript',
  'supervised_user_circle': 'supervised_user_circle',
  'supervisor_account': 'supervisor_account',
  'support': 'support',
  'support_agent': 'support_agent',
  'surfing': 'surfing',
  'surround_sound': 'surround_sound',
  'swap_calls': 'swap_calls',
  'swap_horiz': 'swap_horiz',
  'swap_horizontal_circle': 'swap_horizontal_circle',
  'swap_vert': 'swap_vert',
  'swap_vertical_circle': 'swap_vertical_circle',
  'swipe': 'swipe',
  'switch_account': 'switch_account',
  'switch_camera': 'switch_camera',
  'switch_left': 'switch_left',
  'switch_right': 'switch_right',
  'switch_video': 'switch_video',
  'sync': 'sync',
  'sync_alt': 'sync_alt',
  'sync_disabled': 'sync_disabled',
  'sync_problem': 'sync_problem',
  'system_security_update': 'system_security_update',
  'system_security_update_good': 'system_security_update_good',
  'system_security_update_warning': 'system_security_update_warning',
  'system_update': 'system_update',
  'system_update_alt': 'system_update_alt',
  'tab': 'tab',
  'tab_unselected': 'tab_unselected',
  'table_chart': 'table_chart',
  'table_rows': 'table_rows',
  'table_view': 'table_view',
  'tablet': 'tablet',
  'tablet_android': 'tablet_android',
  'tablet_mac': 'tablet_mac',
  'tag': 'tag',
  'tag_faces': 'tag_faces',
  'takeout_dining': 'takeout_dining',
  'tap_and_play': 'tap_and_play',
  'tapas': 'tapas',
  'task': 'task',
  'task_alt': 'task_alt',
  'taxi_alert': 'taxi_alert',
  'terrain': 'terrain',
  'text_fields': 'text_fields',
  'text_format': 'text_format',
  'text_rotate_up': 'text_rotate_up',
  'text_rotate_vertical': 'text_rotate_vertical',
  'text_rotation_angledown': 'text_rotation_angledown',
  'text_rotation_angleup': 'text_rotation_angleup',
  'text_rotation_down': 'text_rotation_down',
  'text_rotation_none': 'text_rotation_none',
  'text_snippet': 'text_snippet',
  'textsms': 'textsms',
  'texture': 'texture',
  'theater_comedy': 'theater_comedy',
  'theaters': 'theaters',
  'thermostat': 'thermostat',
  'thermostat_auto': 'thermostat_auto',
  'thumb_down': 'thumb_down',
  'thumb_down_alt': 'thumb_down_alt',
  'thumb_down_off_alt': 'thumb_down_off_alt',
  'thumb_up': 'thumb_up',
  'thumb_up_alt': 'thumb_up_alt',
  'thumb_up_off_alt': 'thumb_up_off_alt',
  'thumbs_up_down': 'thumbs_up_down',
  'time_to_leave': 'time_to_leave',
  'timelapse': 'timelapse',
  'timeline': 'timeline',
  'timer': 'timer',
  'timer_10': 'timer_10',
  'timer_10_select': 'timer_10_select',
  'timer_3': 'timer_3',
  'timer_3_select': 'timer_3_select',
  'timer_off': 'timer_off',
  'tips_and_updates': 'tips_and_updates',
  'title': 'title',
  'toc': 'toc',
  'today': 'today',
  'toggle_off': 'toggle_off',
  'toggle_on': 'toggle_on',
  'toll': 'toll',
  'tonality': 'tonality',
  'topic': 'topic',
  'touch_app': 'touch_app',
  'tour': 'tour',
  'toys': 'toys',
  'track_changes': 'track_changes',
  'traffic': 'traffic',
  'train': 'train',
  'tram': 'tram',
  'transfer_within_a_station': 'transfer_within_a_station',
  'transform': 'transform',
  'transgender': 'transgender',
  'transit_enterexit': 'transit_enterexit',
  'translate': 'translate',
  'travel_explore': 'travel_explore',
  'trending_down': 'trending_down',
  'trending_flat': 'trending_flat',
  'trending_up': 'trending_up',
  'trip_origin': 'trip_origin',
  'try': 'try',
  'tty': 'tty',
  'tune': 'tune',
  'tungsten': 'tungsten',
  'turned_in': 'turned_in',
  'turned_in_not': 'turned_in_not',
  'tv': 'tv',
  'tv_off': 'tv_off',
  'two_wheeler': 'two_wheeler',
  'umbrella': 'umbrella',
  'unarchive': 'unarchive',
  'undo': 'undo',
  'unfold_less': 'unfold_less',
  'unfold_more': 'unfold_more',
  'unpublished': 'unpublished',
  'unsubscribe': 'unsubscribe',
  'upcoming': 'upcoming',
  'update': 'update',
  'update_disabled': 'update_disabled',
  'upgrade': 'upgrade',
  'upload': 'upload',
  'upload_file': 'upload_file',
  'usb': 'usb',
  'usb_off': 'usb_off',
  'verified': 'verified',
  'verified_user': 'verified_user',
  'vertical_align_bottom': 'vertical_align_bottom',
  'vertical_align_center': 'vertical_align_center',
  'vertical_align_top': 'vertical_align_top',
  'vertical_distribute': 'vertical_distribute',
  'vertical_split': 'vertical_split',
  'vibration': 'vibration',
  'video_call': 'video_call',
  'video_camera_back': 'video_camera_back',
  'video_camera_front': 'video_camera_front',
  'video_label': 'video_label',
  'video_library': 'video_library',
  'video_settings': 'video_settings',
  'video_stable': 'video_stable',
  'videocam': 'videocam',
  'videocam_off': 'videocam_off',
  'videogame_asset': 'videogame_asset',
  'videogame_asset_off': 'videogame_asset_off',
  'view_agenda': 'view_agenda',
  'view_array': 'view_array',
  'view_carousel': 'view_carousel',
  'view_column': 'view_column',
  'view_comfy': 'view_comfy',
  'view_compact': 'view_compact',
  'view_day': 'view_day',
  'view_headline': 'view_headline',
  'view_in_ar': 'view_in_ar',
  'view_list': 'view_list',
  'view_module': 'view_module',
  'view_quilt': 'view_quilt',
  'view_sidebar': 'view_sidebar',
  'view_stream': 'view_stream',
  'view_week': 'view_week',
  'vignette': 'vignette',
  'villa': 'villa',
  'visibility': 'visibility',
  'visibility_off': 'visibility_off',
  'voice_chat': 'voice_chat',
  'voice_over_off': 'voice_over_off',
  'voicemail': 'voicemail',
  'volume_down': 'volume_down',
  'volume_mute': 'volume_mute',
  'volume_off': 'volume_off',
  'volume_up': 'volume_up',
  'volunteer_activism': 'volunteer_activism',
  'vpn_key': 'vpn_key',
  'vpn_lock': 'vpn_lock',
  'vrpano': 'vrpano',
  'wallpaper': 'wallpaper',
  'warning': 'warning',
  'warning_amber': 'warning_amber',
  'wash': 'wash',
  'watch': 'watch',
  'watch_later': 'watch_later',
  'water': 'water',
  'water_damage': 'water_damage',
  'water_drop': 'water_drop',
  'waterfall_chart': 'waterfall_chart',
  'waves': 'waves',
  'waving_hand': 'waving_hand',
  'wb_auto': 'wb_auto',
  'wb_cloudy': 'wb_cloudy',
  'wb_incandescent': 'wb_incandescent',
  'wb_iridescent': 'wb_iridescent',
  'wb_shade': 'wb_shade',
  'wb_sunny': 'wb_sunny',
  'wb_twilight': 'wb_twilight',
  'wc': 'wc',
  'web': 'web',
  'web_asset': 'web_asset',
  'web_asset_off': 'web_asset_off',
  'weekend': 'weekend',
  'west': 'west',
  'whatshot': 'whatshot',
  'wheelchair_pickup': 'wheelchair_pickup',
  'where_to_vote': 'where_to_vote',
  'widgets': 'widgets',
  'wifi': 'wifi',
  'wifi_calling': 'wifi_calling',
  'wifi_calling_3': 'wifi_calling_3',
  'wifi_lock': 'wifi_lock',
  'wifi_off': 'wifi_off',
  'wifi_protected_setup': 'wifi_protected_setup',
  'wifi_tethering': 'wifi_tethering',
  'wifi_tethering_error_rounded': 'wifi_tethering_error_rounded',
  'wifi_tethering_off': 'wifi_tethering_off',
  'window': 'window',
  'wine_bar': 'wine_bar',
  'work': 'work',
  'work_off': 'work_off',
  'work_outline': 'work_outline',
  'workspaces': 'workspaces',
  'wrap_text': 'wrap_text',
  'wrong_location': 'wrong_location',
  'wysiwyg': 'wysiwyg',
  'yard': 'yard',
  'youtube_searched_for': 'youtube_searched_for',
  'zoom_in': 'zoom_in',
  'zoom_out': 'zoom_out',
  'zoom_out_map': 'zoom_out_map'
};
var ICONS_TYPES = {
  'filled': 'Material Icons',
  'outlined': 'Material Icons Outlined',
  'round': 'Material Icons Round',
  'sharp': 'Material Icons Sharp',
  'two-tone': 'Material Icons Two Tone'
};

var ICONS_GETTER = function ICONS_GETTER() {
  return ICONS;
};

var ICONS_TYPES_GETTER = function ICONS_TYPES_GETTER() {
  return ICONS_TYPES;
};

var IconComputed = {
  install: function install(Vue, options) {
    Vue.mixin({
      computed: {
        ICONS: ICONS_GETTER,
        ICONS_TYPES: ICONS_TYPES_GETTER
      }
    });
  }
};

function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var dist = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var check = {
    isUndefined: function isUndefined(value) {
      return typeof value === 'undefined';
    },
    isString: function isString(value) {
      return typeof value === 'string';
    },
    isNumber: function isNumber(value) {
      return typeof value === 'number';
    },
    isNull: function isNull(value) {
      return value === null;
    },
    isObject: function isObject(value) {
      return _typeof(value) === 'object' && check.isNotNull(value);
    },
    isArray: function isArray(value) {
      return Array.isArray(value);
    },
    isFunction: function isFunction(value) {
      return typeof value === 'function';
    },
    isBoolean: function isBoolean(value) {
      return typeof value === 'boolean';
    },
    isDefined: function isDefined(value) {
      return check.isUndefined(value) === false;
    },
    isNotString: function isNotString(value) {
      return check.isString(value) === false;
    },
    isNotNumber: function isNotNumber(value) {
      return check.isNumber(value) === false;
    },
    isNotNull: function isNotNull(value) {
      return check.isNull(value) === false;
    },
    isNotObject: function isNotObject(value) {
      return check.isObject(value) === false;
    },
    isNotArray: function isNotArray(value) {
      return check.isArray(value) === false;
    },
    isNotFunction: function isNotFunction(value) {
      return check.isFunction(value) === false;
    },
    isNotBoolean: function isNotBoolean(value) {
      return check.isBoolean(value) === false;
    }
  };
  var array = {
    removeItem: function removeItem(array, toRemove) {
      var indexToRemove = array.indexOf(toRemove);
      return array.splice(indexToRemove, 1);
    },
    removeItemByIndex: function removeItemByIndex(array, indexToRemove) {
      return array.splice(indexToRemove, 1);
    }
  };
  var number = {
    roundTo: function roundTo(value, precision) {
      return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);
    }
  };
  var object = {
    /**
     * Deep merge two objects.
     * @param target
     * @param sources
     */
    mergeDeep: function mergeDeep(target) {
      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        sources[_key - 1] = arguments[_key];
      }

      if (!sources.length) return target;
      var source = sources.shift();

      if (check.isObject(target) && check.isObject(source)) {
        for (var key in source) {
          if (check.isObject(source[key])) {
            if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));
            object.mergeDeep(target[key], source[key]);
          } else {
            Object.assign(target, _defineProperty({}, key, source[key]));
          }
        }
      }

      return object.mergeDeep.apply(object, [target].concat(sources));
    }
  };
  var promise = {
    timeout: function timeout(_timeout) {
      return new Promise(function (resolve) {
        setTimeout(function () {
          return resolve();
        }, _timeout);
      });
    }
  };
  var requestHost = '';

  function makeFetch(_ref) {
    var url = _ref.url,
        config = _ref.config;
    return new Promise(function (resolve, reject) {
      fetch(url, Object.assign(Object.assign({}, config), {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      })).then(resolve)["catch"](reject);
    });
  }

  function addBodyToConfig(config, data) {
    if (check.isDefined(data)) {
      config.body = JSON.stringify(data);
    }
  }

  var request = {
    setHost: function setHost(newHost) {
      requestHost = newHost;
    },
    getHost: function getHost() {
      return requestHost;
    },
    dataToPathVariables: function dataToPathVariables(data) {
      var pathData = '';

      if (Object.keys(data).length > 0) {
        pathData += '?';
        pathData += Object.entries(data).map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              key = _ref3[0],
              val = _ref3[1];

          return key + '=' + val;
        }).join('&');
      }

      return pathData;
    },
    get: function get(_ref4) {
      var _ref4$url = _ref4.url,
          url = _ref4$url === void 0 ? '/' : _ref4$url,
          _ref4$data = _ref4.data,
          data = _ref4$data === void 0 ? {} : _ref4$data,
          _ref4$config = _ref4.config,
          config = _ref4$config === void 0 ? {} : _ref4$config;
      var pathVariables = request.dataToPathVariables(data);
      var fullUrl = requestHost + url + pathVariables;
      return makeFetch({
        url: fullUrl,
        config: Object.assign({
          method: 'GET'
        }, config)
      });
    },
    post: function post(_ref5) {
      var _ref5$url = _ref5.url,
          url = _ref5$url === void 0 ? '/' : _ref5$url,
          data = _ref5.data,
          _ref5$config = _ref5.config,
          config = _ref5$config === void 0 ? {} : _ref5$config;
      var fullUrl = requestHost + url;
      addBodyToConfig(config, data);
      return makeFetch({
        url: fullUrl,
        config: Object.assign({
          method: 'POST'
        }, config)
      });
    },
    put: function put(_ref6) {
      var _ref6$url = _ref6.url,
          url = _ref6$url === void 0 ? '/' : _ref6$url,
          _ref6$data = _ref6.data,
          data = _ref6$data === void 0 ? {} : _ref6$data,
          _ref6$config = _ref6.config,
          config = _ref6$config === void 0 ? {} : _ref6$config;
      var fullUrl = requestHost + url;
      addBodyToConfig(config, data);
      return makeFetch({
        url: fullUrl,
        config: Object.assign({
          method: 'PUT'
        }, config)
      });
    },
    "delete": function _delete(_ref7) {
      var _ref7$url = _ref7.url,
          url = _ref7$url === void 0 ? '/' : _ref7$url,
          _ref7$data = _ref7.data,
          data = _ref7$data === void 0 ? {} : _ref7$data,
          _ref7$config = _ref7.config,
          config = _ref7$config === void 0 ? {} : _ref7$config;
      var fullUrl = requestHost + url;
      addBodyToConfig(config, data);
      return makeFetch({
        url: fullUrl,
        config: Object.assign({
          method: 'DELETE'
        }, config)
      });
    }
  };
  var validate = {
    hasNumber: function hasNumber(data) {
      return /\d/.test(data);
    },
    hasNotNumber: function hasNotNumber(data) {
      return !this.hasNumber(data);
    },
    isEmail: function isEmail(email) {
      var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(email).toLowerCase());
    },
    isNotEmail: function isNotEmail(email) {
      return !this.isEmail(email);
    },
    isLonger: function isLonger(data, length) {
      return data.length > length;
    },
    isShorter: function isShorter(data, length) {
      return data && data.length ? data.length < length : true;
    },
    isNullOrEmpty: function isNullOrEmpty(data) {
      return ['', undefined, null].includes(data);
    },
    isUndefined: function isUndefined(data) {
      return check.isUndefined(data);
    },
    inRange: function inRange(value, start, end) {
      return value >= start && value <= end;
    },
    inNotRange: function inNotRange(value, start, end) {
      return !this.inRange(value, start, end);
    },
    contain: function contain(value, array) {
      return array.includes(value);
    },
    notContain: function notContain(value, array) {
      return !this.contain(value, array);
    },
    isBoolean: function isBoolean(value) {
      return check.isBoolean(value);
    },
    isNotBoolean: function isNotBoolean(value) {
      return check.isNotBoolean(value);
    }
  };
  var uCheck = check;
  var uObject = object;
  var uArray = array;
  var uNumber = number;
  var uPromise = promise;
  var uRequest = request;
  var uValidate = validate;
  var index = {
    check: check,
    object: object,
    array: array,
    number: number,
    promise: promise,
    request: request,
    validate: validate
  };
  exports.default = index;
  exports.uArray = uArray;
  exports.uCheck = uCheck;
  exports.uNumber = uNumber;
  exports.uObject = uObject;
  exports.uPromise = uPromise;
  exports.uRequest = uRequest;
  exports.uValidate = uValidate;
});
unwrapExports(dist);
var dist_1 = dist.uArray;
var dist_2 = dist.uCheck;
var dist_3 = dist.uNumber;
var dist_4 = dist.uObject;
var dist_5 = dist.uPromise;
var dist_6 = dist.uRequest;
var dist_7 = dist.uValidate; //

var script = {
  name: 'a-icon',
  props: {
    type: {
      type: String,
      "default": ''
    },
    name: {
      type: String,
      required: true
    },
    size: {
      type: [String, Number],
      "default": undefined
    },
    filled: {
      type: Boolean
    },
    outlined: {
      type: Boolean
    },
    round: {
      type: Boolean
    },
    sharp: {
      type: Boolean
    },
    twoTone: {
      type: Boolean
    }
  },
  computed: {
    ICONS_TYPES: ICONS_TYPES_GETTER,
    style: function style() {
      var style = '';

      if (dist_2.isDefined(this.size)) {
        style += "font-size: ".concat(this.size, "px;");
        style += "width: ".concat(this.size, "px;");
        style += "height: ".concat(this.size, "px;");
      }

      return style;
    },
    typeClassFromType: function typeClassFromType() {
      switch (this.type) {
        case this.ICONS_TYPES.filled:
          return 'f-filled';

        case this.ICONS_TYPES.outlined:
          return 'f-outlined';

        case this.ICONS_TYPES.round:
          return 'f-round';

        case this.ICONS_TYPES.sharp:
          return 'f-sharp';

        case this.ICONS_TYPES['two-tone']:
          return 'f-two-tone';

        default:
          return '';
      }
    },
    typeClassFromParams: function typeClassFromParams() {
      if (this.filled) return 'f-filled';
      if (this.outlined) return 'f-outlined';
      if (this.round) return 'f-round';
      if (this.sharp) return 'f-sharp';
      if (this.twoTone) return 'f-two-tone';else return '';
    },
    classes: function classes() {
      return [this.typeClassFromType, this.typeClassFromParams];
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  const options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  let hook;

  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function (context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      const originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}
/* script */


var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('i', _vm._g({
    staticClass: "a-icon",
    "class": _vm.classes,
    style: _vm.style
  }, Object.assign({}, _vm.$listeners)), [_vm._v("\n  " + _vm._s(_vm.name) + "\n  "), _vm._t("default")], 2);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

var components = {
  AIcon: __vue_component__
};

function install(Vue, options) {
  IconComputed.install(Vue, options);

  for (var componentName in components) {
    var component = components[componentName];
    Vue.component(component.name, component);
  }
}

var index = {
  install: install
};
exports.AIcon = __vue_component__;
exports.ICONS = ICONS;
exports.ICONS_TYPES = ICONS_TYPES;
exports.IconComputed = IconComputed;
exports.default = index;

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/js-cookie/src/js.cookie.js":
/*!*************************************************!*\
  !*** ./node_modules/js-cookie/src/js.cookie.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;

(function (factory) {
  var registeredInModuleLoader;

  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    registeredInModuleLoader = true;
  }

  if (true) {
    module.exports = factory();
    registeredInModuleLoader = true;
  }

  if (!registeredInModuleLoader) {
    var OldCookies = window.Cookies;
    var api = window.Cookies = factory();

    api.noConflict = function () {
      window.Cookies = OldCookies;
      return api;
    };
  }
})(function () {
  function extend() {
    var i = 0;
    var result = {};

    for (; i < arguments.length; i++) {
      var attributes = arguments[i];

      for (var key in attributes) {
        result[key] = attributes[key];
      }
    }

    return result;
  }

  function decode(s) {
    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
  }

  function init(converter) {
    function api() {}

    function set(key, value, attributes) {
      if (typeof document === 'undefined') {
        return;
      }

      attributes = extend({
        path: '/'
      }, api.defaults, attributes);

      if (typeof attributes.expires === 'number') {
        attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
      } // We're using "expires" because "max-age" is not supported by IE


      attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

      try {
        var result = JSON.stringify(value);

        if (/^[\{\[]/.test(result)) {
          value = result;
        }
      } catch (e) {}

      value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
      key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
      var stringifiedAttributes = '';

      for (var attributeName in attributes) {
        if (!attributes[attributeName]) {
          continue;
        }

        stringifiedAttributes += '; ' + attributeName;

        if (attributes[attributeName] === true) {
          continue;
        } // Considers RFC 6265 section 5.2:
        // ...
        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
        //     character:
        // Consume the characters of the unparsed-attributes up to,
        // not including, the first %x3B (";") character.
        // ...


        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
      }

      return document.cookie = key + '=' + value + stringifiedAttributes;
    }

    function get(key, json) {
      if (typeof document === 'undefined') {
        return;
      }

      var jar = {}; // To prevent the for loop in the first place assign an empty array
      // in case there are no cookies at all.

      var cookies = document.cookie ? document.cookie.split('; ') : [];
      var i = 0;

      for (; i < cookies.length; i++) {
        var parts = cookies[i].split('=');
        var cookie = parts.slice(1).join('=');

        if (!json && cookie.charAt(0) === '"') {
          cookie = cookie.slice(1, -1);
        }

        try {
          var name = decode(parts[0]);
          cookie = (converter.read || converter)(cookie, name) || decode(cookie);

          if (json) {
            try {
              cookie = JSON.parse(cookie);
            } catch (e) {}
          }

          jar[name] = cookie;

          if (key === name) {
            break;
          }
        } catch (e) {}
      }

      return key ? jar[key] : jar;
    }

    api.set = set;

    api.get = function (key) {
      return get(key, false
      /* read as raw */
      );
    };

    api.getJSON = function (key) {
      return get(key, true
      /* read as json */
      );
    };

    api.remove = function (key, attributes) {
      set(key, '', extend(attributes, {
        expires: -1
      }));
    };

    api.defaults = {};
    api.withConverter = init;
    return api;
  }

  return init(function () {});
});

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function (handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function (event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function (handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function (handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function (handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function (handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vee-validate/dist/locale/pl.json":
/*!*******************************************************!*\
  !*** ./node_modules/vee-validate/dist/locale/pl.json ***!
  \*******************************************************/
/*! exports provided: code, messages, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"code\":\"pl\",\"messages\":{\"alpha\":\"Pole {_field_} może zawierać tylko litery\",\"alpha_dash\":\"Pole {_field_} może zawierać litery, cyfry oraz myślnik lub podkreślnik\",\"alpha_num\":\"Pole {_field_} może zawierać tylko litery i cyfry\",\"alpha_spaces\":\"Pole {_field_} może zawierać tylko litery oraz spacje\",\"between\":\"Pole {_field_} musi być pomiędzy {min} oraz {max}\",\"confirmed\":\"Pole {_field_} nie zgadza się z polem potwierdzającym {target}\",\"digits\":\"Pole {_field_} musi być liczbą i dokładnie {length} cyfr\",\"dimensions\":\"Obraz {_field_} musi być szeroki na {width} pikseli i wysoki na {height} pikseli\",\"email\":\"Pole {_field_} musi być poprawnym adresem email\",\"excluded\":\"Pole {_field_} musi być poprawną wartością\",\"ext\":\"Plik {_field_} musi być poprawnym plikiem\",\"image\":\"Pole {_field_} musi być obrazem\",\"oneOf\":\"Pole {_field_} musi być poprawną wartością\",\"integer\":\"Pole {_field_} musi być liczbą całkowitą\",\"length\":\"Pole {_field_} musi mieć długość {length}\",\"max\":\"Pole {_field_} nie może być dłuższe niż {length}\",\"max_value\":\"Pole {_field_} musi mieć maksymalną wartość {max}\",\"mimes\":\"Plik {_field_} musi posiadać poprawne rozszerzenie\",\"min\":\"Pole {_field_} musi być długie na co najmniej {length}\",\"min_value\":\"Pole {_field_} musi mieć minimalną wartość {min}\",\"numeric\":\"Pole {_field_} może zawierać tylko cyfry\",\"regex\":\"Format pola {_field_} jest nieodpowiedni\",\"required\":\"Pole {_field_} jest wymagane\",\"required_if\":\"Pole {_field_} jest wymagane\",\"size\":\"Plik {_field_} musi być mniejszy niż {size}KB\",\"double\":\"Pole {_field_} musi być prawidłową liczbą dziesiętną\"}}");

/***/ }),

/***/ "./node_modules/vee-validate/dist/rules.js":
/*!*************************************************!*\
  !*** ./node_modules/vee-validate/dist/rules.js ***!
  \*************************************************/
/*! exports provided: alpha, alpha_dash, alpha_num, alpha_spaces, between, confirmed, digits, dimensions, double, email, excluded, ext, image, integer, is, is_not, length, max, max_value, mimes, min, min_value, numeric, oneOf, regex, required, required_if, size */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha", function() { return alpha$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_dash", function() { return alpha_dash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_num", function() { return alpha_num; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_spaces", function() { return alpha_spaces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "between", function() { return between; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmed", function() { return confirmed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "digits", function() { return digits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dimensions", function() { return dimensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "double", function() { return double; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "email", function() { return email; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "excluded", function() { return excluded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ext", function() { return ext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "image", function() { return image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integer", function() { return integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is_not", function() { return is_not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max_value", function() { return max_value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mimes", function() { return mimes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min_value", function() { return min_value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numeric", function() { return numeric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneOf", function() { return oneOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return regex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "required", function() { return required; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "required_if", function() { return required_if; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function() { return size; });
/**
  * vee-validate v3.4.5
  * (c) 2020 Abdelrahman Awad
  * @license MIT
  */

/**
 * Some Alpha Regex helpers.
 * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js
 */

/* eslint-disable no-misleading-character-class */
var alpha = {
  en: /^[A-Z]*$/i,
  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
  da: /^[A-ZÆØÅ]*$/i,
  de: /^[A-ZÄÖÜß]*$/i,
  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
  it: /^[A-Z\xC0-\xFF]*$/i,
  lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,
  nl: /^[A-ZÉËÏÓÖÜ]*$/i,
  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
  ro: /^[A-ZĂÂÎŞŢ]*$/i,
  ru: /^[А-ЯЁ]*$/i,
  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
  sr: /^[A-ZČĆŽŠĐ]*$/i,
  sv: /^[A-ZÅÄÖ]*$/i,
  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,
  uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i,
  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
  az: /^[A-ZÇƏĞİıÖŞÜ]*$/i,
  el: /^[Α-ώ]*$/i
};
var alphaSpaces = {
  en: /^[A-Z\s]*$/i,
  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\s]*$/i,
  da: /^[A-ZÆØÅ\s]*$/i,
  de: /^[A-ZÄÖÜß\s]*$/i,
  es: /^[A-ZÁÉÍÑÓÚÜ\s]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\s]*$/i,
  it: /^[A-Z\xC0-\xFF\s]*$/i,
  lt: /^[A-ZĄČĘĖĮŠŲŪŽ\s]*$/i,
  nl: /^[A-ZÉËÏÓÖÜ\s]*$/i,
  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\s]*$/i,
  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\s]*$/i,
  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\s]*$/i,
  ro: /^[A-ZĂÂÎŞŢ\s]*$/i,
  ru: /^[А-ЯЁ\s]*$/i,
  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\s]*$/i,
  sr: /^[A-ZČĆŽŠĐ\s]*$/i,
  sv: /^[A-ZÅÄÖ\s]*$/i,
  tr: /^[A-ZÇĞİıÖŞÜ\s]*$/i,
  uk: /^[А-ЩЬЮЯЄІЇҐ\s]*$/i,
  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\s]*$/,
  az: /^[A-ZÇƏĞİıÖŞÜ\s]*$/i,
  el: /^[Α-ώ\s]*$/i
};
var alphanumeric = {
  en: /^[0-9A-Z]*$/i,
  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
  da: /^[0-9A-ZÆØÅ]$/i,
  de: /^[0-9A-ZÄÖÜß]*$/i,
  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
  it: /^[0-9A-Z\xC0-\xFF]*$/i,
  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i,
  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,
  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
  ro: /^[0-9A-ZĂÂÎŞŢ]*$/i,
  ru: /^[0-9А-ЯЁ]*$/i,
  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,
  sv: /^[0-9A-ZÅÄÖ]*$/i,
  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,
  uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i,
  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
  az: /^[0-9A-ZÇƏĞİıÖŞÜ]*$/i,
  el: /^[0-9Α-ώ]*$/i
};
var alphaDash = {
  en: /^[0-9A-Z_-]*$/i,
  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,
  da: /^[0-9A-ZÆØÅ_-]*$/i,
  de: /^[0-9A-ZÄÖÜß_-]*$/i,
  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,
  it: /^[0-9A-Z\xC0-\xFF_-]*$/i,
  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i,
  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,
  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,
  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,
  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,
  ro: /^[0-9A-ZĂÂÎŞŢ_-]*$/i,
  ru: /^[0-9А-ЯЁ_-]*$/i,
  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i,
  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,
  sv: /^[0-9A-ZÅÄÖ_-]*$/i,
  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,
  uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i,
  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/,
  az: /^[0-9A-ZÇƏĞİıÖŞÜ_-]*$/i,
  el: /^[0-9Α-ώ_-]*$/i
};

var validate = function (value, _a) {
  var _b = (_a === void 0 ? {} : _a).locale,
      locale = _b === void 0 ? '' : _b;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate(val, {
        locale: locale
      });
    });
  } // Match at least one locale.


  if (!locale) {
    return Object.keys(alpha).some(function (loc) {
      return alpha[loc].test(value);
    });
  }

  return (alpha[locale] || alpha.en).test(value);
};

var params = [{
  name: 'locale'
}];
var alpha$1 = {
  validate: validate,
  params: params
};

var validate$1 = function (value, _a) {
  var _b = (_a === void 0 ? {} : _a).locale,
      locale = _b === void 0 ? '' : _b;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$1(val, {
        locale: locale
      });
    });
  } // Match at least one locale.


  if (!locale) {
    return Object.keys(alphaDash).some(function (loc) {
      return alphaDash[loc].test(value);
    });
  }

  return (alphaDash[locale] || alphaDash.en).test(value);
};

var params$1 = [{
  name: 'locale'
}];
var alpha_dash = {
  validate: validate$1,
  params: params$1
};

var validate$2 = function (value, _a) {
  var _b = (_a === void 0 ? {} : _a).locale,
      locale = _b === void 0 ? '' : _b;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$2(val, {
        locale: locale
      });
    });
  } // Match at least one locale.


  if (!locale) {
    return Object.keys(alphanumeric).some(function (loc) {
      return alphanumeric[loc].test(value);
    });
  }

  return (alphanumeric[locale] || alphanumeric.en).test(value);
};

var params$2 = [{
  name: 'locale'
}];
var alpha_num = {
  validate: validate$2,
  params: params$2
};

var validate$3 = function (value, _a) {
  var _b = (_a === void 0 ? {} : _a).locale,
      locale = _b === void 0 ? '' : _b;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$3(val, {
        locale: locale
      });
    });
  } // Match at least one locale.


  if (!locale) {
    return Object.keys(alphaSpaces).some(function (loc) {
      return alphaSpaces[loc].test(value);
    });
  }

  return (alphaSpaces[locale] || alphaSpaces.en).test(value);
};

var params$3 = [{
  name: 'locale'
}];
var alpha_spaces = {
  validate: validate$3,
  params: params$3
};

var validate$4 = function (value, _a) {
  var _b = _a === void 0 ? {} : _a,
      min = _b.min,
      max = _b.max;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return !!validate$4(val, {
        min: min,
        max: max
      });
    });
  }

  return Number(min) <= value && Number(max) >= value;
};

var params$4 = [{
  name: 'min'
}, {
  name: 'max'
}];
var between = {
  validate: validate$4,
  params: params$4
};

var validate$5 = function (value, _a) {
  var target = _a.target;
  return String(value) === String(target);
};

var params$5 = [{
  name: 'target',
  isTarget: true
}];
var confirmed = {
  validate: validate$5,
  params: params$5
};

var validate$6 = function (value, _a) {
  var length = _a.length;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$6(val, {
        length: length
      });
    });
  }

  var strVal = String(value);
  return /^[0-9]*$/.test(strVal) && strVal.length === length;
};

var params$6 = [{
  name: 'length',
  cast: function (value) {
    return Number(value);
  }
}];
var digits = {
  validate: validate$6,
  params: params$6
};

var validateImage = function (file, width, height) {
  var URL = window.URL || window.webkitURL;
  return new Promise(function (resolve) {
    var image = new Image();

    image.onerror = function () {
      return resolve(false);
    };

    image.onload = function () {
      return resolve(image.width === width && image.height === height);
    };

    image.src = URL.createObjectURL(file);
  });
};

var validate$7 = function (files, _a) {
  var width = _a.width,
      height = _a.height;
  var list = [];
  files = Array.isArray(files) ? files : [files];

  for (var i = 0; i < files.length; i++) {
    // if file is not an image, reject.
    if (!/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(files[i].name)) {
      return Promise.resolve(false);
    }

    list.push(files[i]);
  }

  return Promise.all(list.map(function (file) {
    return validateImage(file, width, height);
  })).then(function (values) {
    return values.every(function (v) {
      return v;
    });
  });
};

var params$7 = [{
  name: 'width',
  cast: function (value) {
    return Number(value);
  }
}, {
  name: 'height',
  cast: function (value) {
    return Number(value);
  }
}];
var dimensions = {
  validate: validate$7,
  params: params$7
};

var validate$8 = function (value, _a) {
  var multiple = (_a === void 0 ? {} : _a).multiple; // eslint-disable-next-line

  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

  if (multiple && !Array.isArray(value)) {
    value = String(value).split(',').map(function (emailStr) {
      return emailStr.trim();
    });
  }

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return re.test(String(val));
    });
  }

  return re.test(String(value));
};

var params$8 = [{
  name: 'multiple',
  default: false
}];
var email = {
  validate: validate$8,
  params: params$8
};

function isNullOrUndefined(value) {
  return value === null || value === undefined;
}

function isEmptyArray(arr) {
  return Array.isArray(arr) && arr.length === 0;
}

function isCallable(fn) {
  return typeof fn === 'function';
}

function includes(collection, item) {
  return collection.indexOf(item) !== -1;
}
/**
 * Converts an array-like object to array, provides a simple polyfill for Array.from
 */


function toArray(arrayLike) {
  if (isCallable(Array.from)) {
    return Array.from(arrayLike);
  }
  /* istanbul ignore next */


  return _copyArray(arrayLike);
}
/* istanbul ignore next */


function _copyArray(arrayLike) {
  var array = [];
  var length = arrayLike.length;

  for (var i = 0; i < length; i++) {
    array.push(arrayLike[i]);
  }

  return array;
}

var validate$9 = function (value, options) {
  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$9(val, options);
    });
  }

  return toArray(options).some(function (item) {
    // eslint-disable-next-line
    return item == value;
  });
};

var oneOf = {
  validate: validate$9
};

var validate$a = function (value, args) {
  return !validate$9(value, args);
};

var excluded = {
  validate: validate$a
};

var validate$b = function (files, extensions) {
  var regex = new RegExp(".(" + extensions.join('|') + ")$", 'i');

  if (Array.isArray(files)) {
    return files.every(function (file) {
      return regex.test(file.name);
    });
  }

  return regex.test(files.name);
};

var ext = {
  validate: validate$b
};

var validate$c = function (files) {
  var regex = /\.(jpg|svg|jpeg|png|bmp|gif|webp)$/i;

  if (Array.isArray(files)) {
    return files.every(function (file) {
      return regex.test(file.name);
    });
  }

  return regex.test(files.name);
};

var image = {
  validate: validate$c
};

var validate$d = function (value) {
  if (Array.isArray(value)) {
    return value.every(function (val) {
      return /^-?[0-9]+$/.test(String(val));
    });
  }

  return /^-?[0-9]+$/.test(String(value));
};

var integer = {
  validate: validate$d
};

var validate$e = function (value, _a) {
  var other = _a.other;
  return value === other;
};

var params$9 = [{
  name: 'other'
}];
var is = {
  validate: validate$e,
  params: params$9
};

var validate$f = function (value, _a) {
  var other = _a.other;
  return value !== other;
};

var params$a = [{
  name: 'other'
}];
var is_not = {
  validate: validate$f,
  params: params$a
};

var validate$g = function (value, _a) {
  var length = _a.length;

  if (isNullOrUndefined(value)) {
    return false;
  }

  if (typeof value === 'string') {
    value = toArray(value);
  }

  if (typeof value === 'number') {
    value = String(value);
  }

  if (!value.length) {
    value = toArray(value);
  }

  return value.length === length;
};

var params$b = [{
  name: 'length',
  cast: function (value) {
    return Number(value);
  }
}];
var length = {
  validate: validate$g,
  params: params$b
};

var validate$h = function (value, _a) {
  var length = _a.length;

  if (isNullOrUndefined(value)) {
    return length >= 0;
  }

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$h(val, {
        length: length
      });
    });
  }

  return String(value).length <= length;
};

var params$c = [{
  name: 'length',
  cast: function (value) {
    return Number(value);
  }
}];
var max = {
  validate: validate$h,
  params: params$c
};

var validate$i = function (value, _a) {
  var max = _a.max;

  if (isNullOrUndefined(value) || value === '') {
    return false;
  }

  if (Array.isArray(value)) {
    return value.length > 0 && value.every(function (val) {
      return validate$i(val, {
        max: max
      });
    });
  }

  return Number(value) <= max;
};

var params$d = [{
  name: 'max',
  cast: function (value) {
    return Number(value);
  }
}];
var max_value = {
  validate: validate$i,
  params: params$d
};

var validate$j = function (files, mimes) {
  var regex = new RegExp(mimes.join('|').replace('*', '.+') + "$", 'i');

  if (Array.isArray(files)) {
    return files.every(function (file) {
      return regex.test(file.type);
    });
  }

  return regex.test(files.type);
};

var mimes = {
  validate: validate$j
};

var validate$k = function (value, _a) {
  var length = _a.length;

  if (isNullOrUndefined(value)) {
    return false;
  }

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$k(val, {
        length: length
      });
    });
  }

  return String(value).length >= length;
};

var params$e = [{
  name: 'length',
  cast: function (value) {
    return Number(value);
  }
}];
var min = {
  validate: validate$k,
  params: params$e
};

var validate$l = function (value, _a) {
  var min = _a.min;

  if (isNullOrUndefined(value) || value === '') {
    return false;
  }

  if (Array.isArray(value)) {
    return value.length > 0 && value.every(function (val) {
      return validate$l(val, {
        min: min
      });
    });
  }

  return Number(value) >= min;
};

var params$f = [{
  name: 'min',
  cast: function (value) {
    return Number(value);
  }
}];
var min_value = {
  validate: validate$l,
  params: params$f
};
var ar = /^[٠١٢٣٤٥٦٧٨٩]+$/;
var en = /^[0-9]+$/;

var validate$m = function (value) {
  var testValue = function (val) {
    var strValue = String(val);
    return en.test(strValue) || ar.test(strValue);
  };

  if (Array.isArray(value)) {
    return value.every(testValue);
  }

  return testValue(value);
};

var numeric = {
  validate: validate$m
};

var validate$n = function (value, _a) {
  var regex = _a.regex;

  if (Array.isArray(value)) {
    return value.every(function (val) {
      return validate$n(val, {
        regex: regex
      });
    });
  }

  return regex.test(String(value));
};

var params$g = [{
  name: 'regex',
  cast: function (value) {
    if (typeof value === 'string') {
      return new RegExp(value);
    }

    return value;
  }
}];
var regex = {
  validate: validate$n,
  params: params$g
};

var validate$o = function (value, _a) {
  var allowFalse = (_a === void 0 ? {
    allowFalse: true
  } : _a).allowFalse;
  var result = {
    valid: false,
    required: true
  };

  if (isNullOrUndefined(value) || isEmptyArray(value)) {
    return result;
  } // incase a field considers `false` as an empty value like checkboxes.


  if (value === false && !allowFalse) {
    return result;
  }

  result.valid = !!String(value).trim().length;
  return result;
};

var computesRequired = true;
var params$h = [{
  name: 'allowFalse',
  default: true
}];
var required = {
  validate: validate$o,
  params: params$h,
  computesRequired: computesRequired
};

var testEmpty = function (value) {
  return isEmptyArray(value) || includes([false, null, undefined], value) || !String(value).trim().length;
};

var validate$p = function (value, _a) {
  var target = _a.target,
      values = _a.values;
  var required;

  if (values && values.length) {
    if (!Array.isArray(values) && typeof values === 'string') {
      values = [values];
    } // eslint-disable-next-line


    required = values.some(function (val) {
      return val == String(target).trim();
    });
  } else {
    required = !testEmpty(target);
  }

  if (!required) {
    return {
      valid: true,
      required: required
    };
  }

  return {
    valid: !testEmpty(value),
    required: required
  };
};

var params$i = [{
  name: 'target',
  isTarget: true
}, {
  name: 'values'
}];
var computesRequired$1 = true;
var required_if = {
  validate: validate$p,
  params: params$i,
  computesRequired: computesRequired$1
};

var validate$q = function (files, _a) {
  var size = _a.size;

  if (isNaN(size)) {
    return false;
  }

  var nSize = size * 1024;

  if (!Array.isArray(files)) {
    return files.size <= nSize;
  }

  for (var i = 0; i < files.length; i++) {
    if (files[i].size > nSize) {
      return false;
    }
  }

  return true;
};

var params$j = [{
  name: 'size',
  cast: function (value) {
    return Number(value);
  }
}];
var size = {
  validate: validate$q,
  params: params$j
};

var validate$r = function (value, params) {
  var _a = params || {},
      _b = _a.decimals,
      decimals = _b === void 0 ? 0 : _b,
      _c = _a.separator,
      separator = _c === void 0 ? 'dot' : _c;

  var separators = {
    dot: '.',
    comma: ','
  };
  var regexPart = +decimals === 0 ? '+' : "{" + decimals + "}";
  var regex = new RegExp("^-?\\d+\\" + (separators[separator] || '.') + "\\d" + regexPart + "$");
  return Array.isArray(value) ? value.every(function (val) {
    return regex.test(String(val));
  }) : regex.test(String(value));
};

var params$k = [{
  name: 'decimals',
  default: 0
}, {
  name: 'separator',
  default: 'dot'
}];
var double = {
  validate: validate$r,
  params: params$k
};


/***/ }),

/***/ "./node_modules/vee-validate/dist/vee-validate.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/vee-validate/dist/vee-validate.esm.js ***!
  \************************************************************/
/*! exports provided: ValidationObserver, ValidationProvider, configure, extend, localeChanged, localize, normalizeRules, setInteractionMode, validate, version, withValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationObserver", function() { return ValidationObserver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationProvider", function() { return ValidationProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localeChanged", function() { return localeChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localize", function() { return localize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeRules", function() { return normalizeRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setInteractionMode", function() { return setInteractionMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return validate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withValidation", function() { return withValidation; });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.esm.js");
/**
  * vee-validate v3.4.5
  * (c) 2020 Abdelrahman Awad
  * @license MIT
  */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function isNaN(value) {
  // NaN is the one value that does not equal itself.
  // eslint-disable-next-line
  return value !== value;
}

function isNullOrUndefined(value) {
  return value === null || value === undefined;
}

function isEmptyArray(arr) {
  return Array.isArray(arr) && arr.length === 0;
}

var isObject = function (obj) {
  return obj !== null && obj && typeof obj === 'object' && !Array.isArray(obj);
};
/**
 * A reference comparison function with NaN support
 */


function isRefEqual(lhs, rhs) {
  if (isNaN(lhs) && isNaN(rhs)) {
    return true;
  }

  return lhs === rhs;
}
/**
 * Shallow object comparison.
 */


function isEqual(lhs, rhs) {
  if (lhs instanceof RegExp && rhs instanceof RegExp) {
    return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);
  }

  if (Array.isArray(lhs) && Array.isArray(rhs)) {
    if (lhs.length !== rhs.length) return false;

    for (var i = 0; i < lhs.length; i++) {
      if (!isEqual(lhs[i], rhs[i])) {
        return false;
      }
    }

    return true;
  } // if both are objects, compare each key recursively.


  if (isObject(lhs) && isObject(rhs)) {
    return Object.keys(lhs).every(function (key) {
      return isEqual(lhs[key], rhs[key]);
    }) && Object.keys(rhs).every(function (key) {
      return isEqual(lhs[key], rhs[key]);
    });
  }

  return isRefEqual(lhs, rhs);
} // Checks if a given value is not an empty string or null or undefined.


function isSpecified(val) {
  if (val === '') {
    return false;
  }

  return !isNullOrUndefined(val);
}

function isCallable(fn) {
  return typeof fn === 'function';
}

function isLocator(value) {
  return isCallable(value) && !!value.__locatorRef;
}

function findIndex(arrayLike, predicate) {
  var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);

  if (isCallable(array.findIndex)) {
    return array.findIndex(predicate);
  }
  /* istanbul ignore next */


  for (var i = 0; i < array.length; i++) {
    if (predicate(array[i], i)) {
      return i;
    }
  }
  /* istanbul ignore next */


  return -1;
}
/**
 * finds the first element that satisfies the predicate callback, polyfills array.find
 */


function find(arrayLike, predicate) {
  var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);
  var idx = findIndex(array, predicate);
  return idx === -1 ? undefined : array[idx];
}

function includes(collection, item) {
  return collection.indexOf(item) !== -1;
}
/**
 * Converts an array-like object to array, provides a simple polyfill for Array.from
 */


function toArray(arrayLike) {
  if (isCallable(Array.from)) {
    return Array.from(arrayLike);
  }
  /* istanbul ignore next */


  return _copyArray(arrayLike);
}
/* istanbul ignore next */


function _copyArray(arrayLike) {
  var array = [];
  var length = arrayLike.length;

  for (var i = 0; i < length; i++) {
    array.push(arrayLike[i]);
  }

  return array;
}

function values(obj) {
  if (isCallable(Object.values)) {
    return Object.values(obj);
  } // fallback to keys()

  /* istanbul ignore next */


  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
}

function merge(target, source) {
  Object.keys(source).forEach(function (key) {
    if (isObject(source[key])) {
      if (!target[key]) {
        target[key] = {};
      }

      merge(target[key], source[key]);
      return;
    }

    target[key] = source[key];
  });
  return target;
}

function createFlags() {
  return {
    untouched: true,
    touched: false,
    dirty: false,
    pristine: true,
    valid: false,
    invalid: false,
    validated: false,
    pending: false,
    required: false,
    changed: false,
    passed: false,
    failed: false
  };
}

function identity(x) {
  return x;
}

function debounce(fn, wait, token) {
  if (wait === void 0) {
    wait = 0;
  }

  if (token === void 0) {
    token = {
      cancelled: false
    };
  }

  if (wait === 0) {
    return fn;
  }

  var timeout;
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var later = function () {
      timeout = undefined; // check if the fn call was cancelled.

      if (!token.cancelled) fn.apply(void 0, args);
    }; // because we might want to use Node.js setTimout for SSR.


    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}
/**
 * Emits a warning to the console
 */


function warn(message) {
  console.warn("[vee-validate] " + message);
}
/**
 * Replaces placeholder values in a string with their actual values
 */


function interpolate(template, values) {
  return template.replace(/{([^}]+)}/g, function (_, p) {
    return p in values ? values[p] : "{" + p + "}";
  });
}

var RULES = {};

function normalizeSchema(schema) {
  var _a;

  if ((_a = schema.params) === null || _a === void 0 ? void 0 : _a.length) {
    schema.params = schema.params.map(function (param) {
      if (typeof param === 'string') {
        return {
          name: param
        };
      }

      return param;
    });
  }

  return schema;
}

var RuleContainer =
/** @class */
function () {
  function RuleContainer() {}

  RuleContainer.extend = function (name, schema) {
    // if rule already exists, overwrite it.
    var rule = normalizeSchema(schema);

    if (RULES[name]) {
      RULES[name] = merge(RULES[name], schema);
      return;
    }

    RULES[name] = __assign({
      lazy: false,
      computesRequired: false
    }, rule);
  };

  RuleContainer.isLazy = function (name) {
    var _a;

    return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.lazy);
  };

  RuleContainer.isRequireRule = function (name) {
    var _a;

    return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.computesRequired);
  };

  RuleContainer.getRuleDefinition = function (ruleName) {
    return RULES[ruleName];
  };

  return RuleContainer;
}();
/**
 * Adds a custom validator to the list of validation rules.
 */


function extend(name, schema) {
  // makes sure new rules are properly formatted.
  guardExtend(name, schema); // Full schema object.

  if (typeof schema === 'object') {
    RuleContainer.extend(name, schema);
    return;
  }

  RuleContainer.extend(name, {
    validate: schema
  });
}
/**
 * Guards from extension violations.
 */


function guardExtend(name, validator) {
  if (isCallable(validator)) {
    return;
  }

  if (isCallable(validator.validate)) {
    return;
  }

  if (RuleContainer.getRuleDefinition(name)) {
    return;
  }

  throw new Error("Extension Error: The validator '" + name + "' must be a function or have a 'validate' method.");
}

var DEFAULT_CONFIG = {
  defaultMessage: "{_field_} is not valid.",
  skipOptional: true,
  classes: {
    touched: 'touched',
    untouched: 'untouched',
    valid: 'valid',
    invalid: 'invalid',
    pristine: 'pristine',
    dirty: 'dirty' // control has been interacted with

  },
  bails: true,
  mode: 'aggressive',
  useConstraintAttrs: true
};

var currentConfig = __assign({}, DEFAULT_CONFIG);

var getConfig = function () {
  return currentConfig;
};

var setConfig = function (newConf) {
  currentConfig = __assign(__assign({}, currentConfig), newConf);
};

var configure = function (cfg) {
  setConfig(cfg);
};
/**
 * Normalizes the given rules expression.
 */


function normalizeRules(rules) {
  // if falsy value return an empty object.
  var acc = {};
  Object.defineProperty(acc, '_$$isNormalized', {
    value: true,
    writable: false,
    enumerable: false,
    configurable: false
  });

  if (!rules) {
    return acc;
  } // Object is already normalized, skip.


  if (isObject(rules) && rules._$$isNormalized) {
    return rules;
  }

  if (isObject(rules)) {
    return Object.keys(rules).reduce(function (prev, curr) {
      var params = [];

      if (rules[curr] === true) {
        params = [];
      } else if (Array.isArray(rules[curr])) {
        params = rules[curr];
      } else if (isObject(rules[curr])) {
        params = rules[curr];
      } else {
        params = [rules[curr]];
      }

      if (rules[curr] !== false) {
        prev[curr] = buildParams(curr, params);
      }

      return prev;
    }, acc);
  }
  /* istanbul ignore if */


  if (typeof rules !== 'string') {
    warn('rules must be either a string or an object.');
    return acc;
  }

  return rules.split('|').reduce(function (prev, rule) {
    var parsedRule = parseRule(rule);

    if (!parsedRule.name) {
      return prev;
    }

    prev[parsedRule.name] = buildParams(parsedRule.name, parsedRule.params);
    return prev;
  }, acc);
}

function buildParams(ruleName, provided) {
  var ruleSchema = RuleContainer.getRuleDefinition(ruleName);

  if (!ruleSchema) {
    return provided;
  }

  var params = {};

  if (!ruleSchema.params && !Array.isArray(provided)) {
    throw new Error('You provided an object params to a rule that has no defined schema.');
  } // Rule probably uses an array for their args, keep it as is.


  if (Array.isArray(provided) && !ruleSchema.params) {
    return provided;
  }

  var definedParams; // collect the params schema.

  if (!ruleSchema.params || ruleSchema.params.length < provided.length && Array.isArray(provided)) {
    var lastDefinedParam_1; // collect any additional parameters in the last item.

    definedParams = provided.map(function (_, idx) {
      var _a;

      var param = (_a = ruleSchema.params) === null || _a === void 0 ? void 0 : _a[idx];
      lastDefinedParam_1 = param || lastDefinedParam_1;

      if (!param) {
        param = lastDefinedParam_1;
      }

      return param;
    });
  } else {
    definedParams = ruleSchema.params;
  } // Match the provided array length with a temporary schema.


  for (var i = 0; i < definedParams.length; i++) {
    var options = definedParams[i];
    var value = options.default; // if the provided is an array, map element value.

    if (Array.isArray(provided)) {
      if (i in provided) {
        value = provided[i];
      }
    } else {
      // If the param exists in the provided object.
      if (options.name in provided) {
        value = provided[options.name]; // if the provided is the first param value.
      } else if (definedParams.length === 1) {
        value = provided;
      }
    } // if the param is a target, resolve the target value.


    if (options.isTarget) {
      value = createLocator(value, options.cast);
    } // A target param using interpolation


    if (typeof value === 'string' && value[0] === '@') {
      value = createLocator(value.slice(1), options.cast);
    } // If there is a transformer defined.


    if (!isLocator(value) && options.cast) {
      value = options.cast(value);
    } // already been set, probably multiple values.


    if (params[options.name]) {
      params[options.name] = Array.isArray(params[options.name]) ? params[options.name] : [params[options.name]];
      params[options.name].push(value);
    } else {
      // set the value.
      params[options.name] = value;
    }
  }

  return params;
}
/**
 * Parses a rule string expression.
 */


var parseRule = function (rule) {
  var params = [];
  var name = rule.split(':')[0];

  if (includes(rule, ':')) {
    params = rule.split(':').slice(1).join(':').split(',');
  }

  return {
    name: name,
    params: params
  };
};

function createLocator(value, castFn) {
  var locator = function (crossTable) {
    var val = crossTable[value];
    return castFn ? castFn(val) : val;
  };

  locator.__locatorRef = value;
  return locator;
}

function extractLocators(params) {
  if (Array.isArray(params)) {
    return params.filter(function (param) {
      return isLocator(param) || typeof param === 'string' && param[0] === '@';
    });
  }

  return Object.keys(params).filter(function (key) {
    return isLocator(params[key]);
  }).map(function (key) {
    return params[key];
  });
}
/**
 * Validates a value against the rules.
 */


function validate(value, rules, options) {
  if (options === void 0) {
    options = {};
  }

  return __awaiter(this, void 0, void 0, function () {
    var shouldBail, skipIfEmpty, field, result, errors, failedRules, regenerateMap;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          shouldBail = options === null || options === void 0 ? void 0 : options.bails;
          skipIfEmpty = options === null || options === void 0 ? void 0 : options.skipIfEmpty;
          field = {
            name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',
            rules: normalizeRules(rules),
            bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,
            skipIfEmpty: skipIfEmpty !== null && skipIfEmpty !== void 0 ? skipIfEmpty : true,
            forceRequired: false,
            crossTable: (options === null || options === void 0 ? void 0 : options.values) || {},
            names: (options === null || options === void 0 ? void 0 : options.names) || {},
            customMessages: (options === null || options === void 0 ? void 0 : options.customMessages) || {}
          };
          return [4
          /*yield*/
          , _validate(field, value, options)];

        case 1:
          result = _a.sent();
          errors = [];
          failedRules = {};
          regenerateMap = {};
          result.errors.forEach(function (e) {
            var msg = e.msg();
            errors.push(msg);
            failedRules[e.rule] = msg;
            regenerateMap[e.rule] = e.msg;
          });
          return [2
          /*return*/
          , {
            valid: result.valid,
            errors: errors,
            failedRules: failedRules,
            regenerateMap: regenerateMap
          }];
      }
    });
  });
}
/**
 * Starts the validation process.
 */


function _validate(field, value, _a) {
  var _b = (_a === void 0 ? {} : _a).isInitial,
      isInitial = _b === void 0 ? false : _b;
  return __awaiter(this, void 0, void 0, function () {
    var _c, shouldSkip, errors, rules, length, i, rule, result;

    return __generator(this, function (_d) {
      switch (_d.label) {
        case 0:
          return [4
          /*yield*/
          , _shouldSkip(field, value)];

        case 1:
          _c = _d.sent(), shouldSkip = _c.shouldSkip, errors = _c.errors;

          if (shouldSkip) {
            return [2
            /*return*/
            , {
              valid: !errors.length,
              errors: errors
            }];
          }

          rules = Object.keys(field.rules).filter(function (rule) {
            return !RuleContainer.isRequireRule(rule);
          });
          length = rules.length;
          i = 0;
          _d.label = 2;

        case 2:
          if (!(i < length)) return [3
          /*break*/
          , 5];

          if (isInitial && RuleContainer.isLazy(rules[i])) {
            return [3
            /*break*/
            , 4];
          }

          rule = rules[i];
          return [4
          /*yield*/
          , _test(field, value, {
            name: rule,
            params: field.rules[rule]
          })];

        case 3:
          result = _d.sent();

          if (!result.valid && result.error) {
            errors.push(result.error);

            if (field.bails) {
              return [2
              /*return*/
              , {
                valid: false,
                errors: errors
              }];
            }
          }

          _d.label = 4;

        case 4:
          i++;
          return [3
          /*break*/
          , 2];

        case 5:
          return [2
          /*return*/
          , {
            valid: !errors.length,
            errors: errors
          }];
      }
    });
  });
}

function _shouldSkip(field, value) {
  return __awaiter(this, void 0, void 0, function () {
    var requireRules, length, errors, isEmpty, isEmptyAndOptional, isRequired, i, rule, result;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);
          length = requireRules.length;
          errors = [];
          isEmpty = isNullOrUndefined(value) || value === '' || isEmptyArray(value);
          isEmptyAndOptional = isEmpty && field.skipIfEmpty;
          isRequired = false;
          i = 0;
          _a.label = 1;

        case 1:
          if (!(i < length)) return [3
          /*break*/
          , 4];
          rule = requireRules[i];
          return [4
          /*yield*/
          , _test(field, value, {
            name: rule,
            params: field.rules[rule]
          })];

        case 2:
          result = _a.sent();

          if (!isObject(result)) {
            throw new Error('Require rules has to return an object (see docs)');
          }

          if (result.required) {
            isRequired = true;
          }

          if (!result.valid && result.error) {
            errors.push(result.error); // Exit early as the field is required and failed validation.

            if (field.bails) {
              return [2
              /*return*/
              , {
                shouldSkip: true,
                errors: errors
              }];
            }
          }

          _a.label = 3;

        case 3:
          i++;
          return [3
          /*break*/
          , 1];

        case 4:
          if (isEmpty && !isRequired && !field.skipIfEmpty) {
            return [2
            /*return*/
            , {
              shouldSkip: false,
              errors: errors
            }];
          } // field is configured to run through the pipeline regardless


          if (!field.bails && !isEmptyAndOptional) {
            return [2
            /*return*/
            , {
              shouldSkip: false,
              errors: errors
            }];
          } // skip if the field is not required and has an empty value.


          return [2
          /*return*/
          , {
            shouldSkip: !isRequired && isEmpty,
            errors: errors
          }];
      }
    });
  });
}
/**
 * Tests a single input value against a rule.
 */


function _test(field, value, rule) {
  return __awaiter(this, void 0, void 0, function () {
    var ruleSchema, normalizedValue, params, result, values_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          ruleSchema = RuleContainer.getRuleDefinition(rule.name);

          if (!ruleSchema || !ruleSchema.validate) {
            throw new Error("No such validator '" + rule.name + "' exists.");
          }

          normalizedValue = ruleSchema.castValue ? ruleSchema.castValue(value) : value;
          params = fillTargetValues(rule.params, field.crossTable);
          return [4
          /*yield*/
          , ruleSchema.validate(normalizedValue, params)];

        case 1:
          result = _a.sent();

          if (typeof result === 'string') {
            values_1 = __assign(__assign({}, params || {}), {
              _field_: field.name,
              _value_: value,
              _rule_: rule.name
            });
            return [2
            /*return*/
            , {
              valid: false,
              error: {
                rule: rule.name,
                msg: function () {
                  return interpolate(result, values_1);
                }
              }
            }];
          }

          if (!isObject(result)) {
            result = {
              valid: result
            };
          }

          return [2
          /*return*/
          , {
            valid: result.valid,
            required: result.required,
            error: result.valid ? undefined : _generateFieldError(field, value, ruleSchema, rule.name, params)
          }];
      }
    });
  });
}
/**
 * Generates error messages.
 */


function _generateFieldError(field, value, ruleSchema, ruleName, params) {
  var _a;

  var message = (_a = field.customMessages[ruleName]) !== null && _a !== void 0 ? _a : ruleSchema.message;

  var ruleTargets = _getRuleTargets(field, ruleSchema, ruleName);

  var _b = _getUserTargets(field, ruleSchema, ruleName, message),
      userTargets = _b.userTargets,
      userMessage = _b.userMessage;

  var values = __assign(__assign(__assign(__assign({}, params || {}), {
    _field_: field.name,
    _value_: value,
    _rule_: ruleName
  }), ruleTargets), userTargets);

  return {
    msg: function () {
      return _normalizeMessage(userMessage || getConfig().defaultMessage, field.name, values);
    },
    rule: ruleName
  };
}

function _getRuleTargets(field, ruleSchema, ruleName) {
  var params = ruleSchema.params;

  if (!params) {
    return {};
  }

  var numTargets = params.filter(function (param) {
    return param.isTarget;
  }).length;

  if (numTargets <= 0) {
    return {};
  }

  var names = {};
  var ruleConfig = field.rules[ruleName];

  if (!Array.isArray(ruleConfig) && isObject(ruleConfig)) {
    ruleConfig = params.map(function (param) {
      return ruleConfig[param.name];
    });
  }

  for (var index = 0; index < params.length; index++) {
    var param = params[index];
    var key = ruleConfig[index];

    if (!isLocator(key)) {
      continue;
    }

    key = key.__locatorRef;
    var name_1 = field.names[key] || key;
    names[param.name] = name_1;
    names["_" + param.name + "_"] = field.crossTable[key];
  }

  return names;
}

function _getUserTargets(field, ruleSchema, ruleName, userMessage) {
  var userTargets = {};
  var rules = field.rules[ruleName];
  var params = ruleSchema.params || []; // early return if no rules

  if (!rules) {
    return {};
  } // check all rules to convert targets


  Object.keys(rules).forEach(function (key, index) {
    // get the rule
    var rule = rules[key];

    if (!isLocator(rule)) {
      return {};
    } // get associated parameter


    var param = params[index];

    if (!param) {
      return {};
    } // grab the name of the target


    var name = rule.__locatorRef;
    userTargets[param.name] = field.names[name] || name;
    userTargets["_" + param.name + "_"] = field.crossTable[name];
  });
  return {
    userTargets: userTargets,
    userMessage: userMessage
  };
}

function _normalizeMessage(template, field, values) {
  if (typeof template === 'function') {
    return template(field, values);
  }

  return interpolate(template, __assign(__assign({}, values), {
    _field_: field
  }));
}

function fillTargetValues(params, crossTable) {
  if (Array.isArray(params)) {
    return params.map(function (param) {
      var targetPart = typeof param === 'string' && param[0] === '@' ? param.slice(1) : param;

      if (targetPart in crossTable) {
        return crossTable[targetPart];
      }

      return param;
    });
  }

  var values = {};

  var normalize = function (value) {
    if (isLocator(value)) {
      return value(crossTable);
    }

    return value;
  };

  Object.keys(params).forEach(function (param) {
    values[param] = normalize(params[param]);
  });
  return values;
}

var aggressive = function () {
  return {
    on: ['input', 'blur']
  };
};

var lazy = function () {
  return {
    on: ['change', 'blur']
  };
};

var eager = function (_a) {
  var errors = _a.errors;

  if (errors.length) {
    return {
      on: ['input', 'change']
    };
  }

  return {
    on: ['change', 'blur']
  };
};

var passive = function () {
  return {
    on: []
  };
};

var modes = {
  aggressive: aggressive,
  eager: eager,
  passive: passive,
  lazy: lazy
};

var setInteractionMode = function (mode, implementation) {
  setConfig({
    mode: mode
  });

  if (!implementation) {
    return;
  }

  if (!isCallable(implementation)) {
    throw new Error('A mode implementation must be a function');
  }

  modes[mode] = implementation;
};

var EVENT_BUS = new vue__WEBPACK_IMPORTED_MODULE_0__["default"]();

function localeChanged() {
  EVENT_BUS.$emit('change:locale');
}

var Dictionary =
/** @class */
function () {
  function Dictionary(locale, dictionary) {
    this.container = {};
    this.locale = locale;
    this.merge(dictionary);
  }

  Dictionary.prototype.resolve = function (field, rule, values) {
    return this.format(this.locale, field, rule, values);
  };

  Dictionary.prototype.format = function (locale, field, rule, values) {
    var _a, _b, _c, _d, _e, _f, _g, _h;

    var message; // find if specific message for that field was specified.

    var fieldContainer = (_c = (_b = (_a = this.container[locale]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c[rule];
    var messageContainer = (_e = (_d = this.container[locale]) === null || _d === void 0 ? void 0 : _d.messages) === null || _e === void 0 ? void 0 : _e[rule];
    message = fieldContainer || messageContainer || '';

    if (!message) {
      message = '{_field_} is not valid';
    }

    field = (_h = (_g = (_f = this.container[locale]) === null || _f === void 0 ? void 0 : _f.names) === null || _g === void 0 ? void 0 : _g[field]) !== null && _h !== void 0 ? _h : field;
    return isCallable(message) ? message(field, values) : interpolate(message, __assign(__assign({}, values), {
      _field_: field
    }));
  };

  Dictionary.prototype.merge = function (dictionary) {
    merge(this.container, dictionary);
  };

  Dictionary.prototype.hasRule = function (name) {
    var _a, _b;

    return !!((_b = (_a = this.container[this.locale]) === null || _a === void 0 ? void 0 : _a.messages) === null || _b === void 0 ? void 0 : _b[name]);
  };

  return Dictionary;
}();

var DICTIONARY;

function localize(locale, dictionary) {
  var _a;

  if (!DICTIONARY) {
    DICTIONARY = new Dictionary('en', {});
    setConfig({
      defaultMessage: function (field, values) {
        return DICTIONARY.resolve(field, values === null || values === void 0 ? void 0 : values._rule_, values || {});
      }
    });
  }

  if (typeof locale === 'string') {
    DICTIONARY.locale = locale;

    if (dictionary) {
      DICTIONARY.merge((_a = {}, _a[locale] = dictionary, _a));
    }

    localeChanged();
    return;
  }

  DICTIONARY.merge(locale);
}

var isEvent = function (evt) {
  if (!evt) {
    return false;
  }

  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {
    return true;
  } // this is for IE

  /* istanbul ignore next */


  if (evt && evt.srcElement) {
    return true;
  }

  return false;
};

function normalizeEventValue(value) {
  var _a, _b;

  if (!isEvent(value)) {
    return value;
  }

  var input = value.target;

  if (input.type === 'file' && input.files) {
    return toArray(input.files);
  } // If the input has a `v-model.number` modifier applied.


  if ((_a = input._vModifiers) === null || _a === void 0 ? void 0 : _a.number) {
    // as per the spec the v-model.number uses parseFloat
    var valueAsNumber = parseFloat(input.value);

    if (isNaN(valueAsNumber)) {
      return input.value;
    }

    return valueAsNumber;
  }

  if ((_b = input._vModifiers) === null || _b === void 0 ? void 0 : _b.trim) {
    var trimmedValue = typeof input.value === 'string' ? input.value.trim() : input.value;
    return trimmedValue;
  }

  return input.value;
}

var isTextInput = function (vnode) {
  var _a;

  var attrs = ((_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs) || vnode.elm; // it will fallback to being a text input per browsers spec.

  if (vnode.tag === 'input' && (!attrs || !attrs.type)) {
    return true;
  }

  if (vnode.tag === 'textarea') {
    return true;
  }

  return includes(['text', 'password', 'search', 'email', 'tel', 'url', 'number'], attrs === null || attrs === void 0 ? void 0 : attrs.type);
}; // export const isCheckboxOrRadioInput = (vnode: VNode): boolean => {
//   const attrs = (vnode.data && vnode.data.attrs) || vnode.elm;
//   return includes(['radio', 'checkbox'], attrs && attrs.type);
// };
// Gets the model object on the vnode.


function findModel(vnode) {
  if (!vnode.data) {
    return undefined;
  } // Component Model
  // THIS IS NOT TYPED IN OFFICIAL VUE TYPINGS
  // eslint-disable-next-line


  var nonStandardVNodeData = vnode.data;

  if ('model' in nonStandardVNodeData) {
    return nonStandardVNodeData.model;
  }

  if (!vnode.data.directives) {
    return undefined;
  }

  return find(vnode.data.directives, function (d) {
    return d.name === 'model';
  });
}

function findValue(vnode) {
  var _a, _b;

  var model = findModel(vnode);

  if (model) {
    return {
      value: model.value
    };
  }

  var config = findModelConfig(vnode);
  var prop = (config === null || config === void 0 ? void 0 : config.prop) || 'value';

  if (((_a = vnode.componentOptions) === null || _a === void 0 ? void 0 : _a.propsData) && prop in vnode.componentOptions.propsData) {
    var propsDataWithValue = vnode.componentOptions.propsData;
    return {
      value: propsDataWithValue[prop]
    };
  }

  if (((_b = vnode.data) === null || _b === void 0 ? void 0 : _b.domProps) && 'value' in vnode.data.domProps) {
    return {
      value: vnode.data.domProps.value
    };
  }

  return undefined;
}

function extractChildren(vnode) {
  if (Array.isArray(vnode)) {
    return vnode;
  }

  if (Array.isArray(vnode.children)) {
    return vnode.children;
  }
  /* istanbul ignore next */


  if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {
    return vnode.componentOptions.children;
  }

  return [];
}

function findInputNodes(vnode) {
  if (!Array.isArray(vnode) && findValue(vnode) !== undefined) {
    return [vnode];
  }

  var children = extractChildren(vnode);
  return children.reduce(function (nodes, node) {
    var candidates = findInputNodes(node);

    if (candidates.length) {
      nodes.push.apply(nodes, candidates);
    }

    return nodes;
  }, []);
} // Resolves v-model config if exists.


function findModelConfig(vnode) {
  /* istanbul ignore next */
  if (!vnode.componentOptions) return null; // This is also not typed in the standard Vue TS.

  return vnode.componentOptions.Ctor.options.model;
} // Adds a listener to vnode listener object.


function mergeVNodeListeners(obj, eventName, handler) {
  // no listener at all.
  if (isNullOrUndefined(obj[eventName])) {
    obj[eventName] = [handler];
    return;
  } // Is an invoker.


  if (isCallable(obj[eventName]) && obj[eventName].fns) {
    var invoker = obj[eventName];
    invoker.fns = Array.isArray(invoker.fns) ? invoker.fns : [invoker.fns];

    if (!includes(invoker.fns, handler)) {
      invoker.fns.push(handler);
    }

    return;
  }

  if (isCallable(obj[eventName])) {
    var prev = obj[eventName];
    obj[eventName] = [prev];
  }

  if (Array.isArray(obj[eventName]) && !includes(obj[eventName], handler)) {
    obj[eventName].push(handler);
  }
} // Adds a listener to a native HTML vnode.


function addNativeNodeListener(node, eventName, handler) {
  /* istanbul ignore next */
  if (!node.data) {
    node.data = {};
  }

  if (isNullOrUndefined(node.data.on)) {
    node.data.on = {};
  }

  mergeVNodeListeners(node.data.on, eventName, handler);
} // Adds a listener to a Vue component vnode.


function addComponentNodeListener(node, eventName, handler) {
  /* istanbul ignore next */
  if (!node.componentOptions) {
    return;
  }
  /* istanbul ignore next */


  if (!node.componentOptions.listeners) {
    node.componentOptions.listeners = {};
  }

  mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);
}

function addVNodeListener(vnode, eventName, handler) {
  if (vnode.componentOptions) {
    addComponentNodeListener(vnode, eventName, handler);
    return;
  }

  addNativeNodeListener(vnode, eventName, handler);
} // Determines if `change` should be used over `input` for listeners.


function getInputEventName(vnode, model) {
  var _a; // Is a component.


  if (vnode.componentOptions) {
    var event_1 = (findModelConfig(vnode) || {
      event: 'input'
    }).event;
    return event_1;
  } // Lazy Models typically use change event


  if ((_a = model === null || model === void 0 ? void 0 : model.modifiers) === null || _a === void 0 ? void 0 : _a.lazy) {
    return 'change';
  } // is a textual-type input.


  if (isTextInput(vnode)) {
    return 'input';
  }

  return 'change';
}

function isHTMLNode(node) {
  return includes(['input', 'select', 'textarea'], node.tag);
} // TODO: Type this one properly.


function normalizeSlots(slots, ctx) {
  var acc = [];
  return Object.keys(slots).reduce(function (arr, key) {
    slots[key].forEach(function (vnode) {
      if (!vnode.context) {
        slots[key].context = ctx;

        if (!vnode.data) {
          vnode.data = {};
        }

        vnode.data.slot = key;
      }
    });
    return arr.concat(slots[key]);
  }, acc);
}

function resolveTextualRules(vnode) {
  var _a;

  var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;
  var rules = {};
  if (!attrs) return rules;

  if (attrs.type === 'email' && RuleContainer.getRuleDefinition('email')) {
    rules.email = ['multiple' in attrs];
  }

  if (attrs.pattern && RuleContainer.getRuleDefinition('regex')) {
    rules.regex = attrs.pattern;
  }

  if (attrs.maxlength >= 0 && RuleContainer.getRuleDefinition('max')) {
    rules.max = attrs.maxlength;
  }

  if (attrs.minlength >= 0 && RuleContainer.getRuleDefinition('min')) {
    rules.min = attrs.minlength;
  }

  if (attrs.type === 'number') {
    if (isSpecified(attrs.min) && RuleContainer.getRuleDefinition('min_value')) {
      rules.min_value = Number(attrs.min);
    }

    if (isSpecified(attrs.max) && RuleContainer.getRuleDefinition('max_value')) {
      rules.max_value = Number(attrs.max);
    }
  }

  return rules;
}

function resolveRules(vnode) {
  var _a;

  var htmlTags = ['input', 'select', 'textarea'];
  var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;

  if (!includes(htmlTags, vnode.tag) || !attrs) {
    return {};
  }

  var rules = {};

  if ('required' in attrs && attrs.required !== false && RuleContainer.getRuleDefinition('required')) {
    rules.required = attrs.type === 'checkbox' ? [true] : true;
  }

  if (isTextInput(vnode)) {
    return normalizeRules(__assign(__assign({}, rules), resolveTextualRules(vnode)));
  }

  return normalizeRules(rules);
}

function normalizeChildren(context, slotProps) {
  if (context.$scopedSlots.default) {
    return context.$scopedSlots.default(slotProps) || [];
  }

  return context.$slots.default || [];
}
/**
 * Determines if a provider needs to run validation.
 */


function shouldValidate(ctx, value) {
  // when an immediate/initial validation is needed and wasn't done before.
  if (!ctx._ignoreImmediate && ctx.immediate) {
    return true;
  } // when the value changes for whatever reason.


  if (!isRefEqual(ctx.value, value) && ctx.normalizedEvents.length) {
    return true;
  } // when it needs validation due to props/cross-fields changes.


  if (ctx._needsValidation) {
    return true;
  } // when the initial value is undefined and the field wasn't rendered yet.


  if (!ctx.initialized && value === undefined) {
    return true;
  }

  return false;
}

function createValidationCtx(ctx) {
  return __assign(__assign({}, ctx.flags), {
    errors: ctx.errors,
    classes: ctx.classes,
    failedRules: ctx.failedRules,
    reset: function () {
      return ctx.reset();
    },
    validate: function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return ctx.validate.apply(ctx, args);
    },
    ariaInput: {
      'aria-invalid': ctx.flags.invalid ? 'true' : 'false',
      'aria-required': ctx.isRequired ? 'true' : 'false',
      'aria-errormessage': "vee_" + ctx.id
    },
    ariaMsg: {
      id: "vee_" + ctx.id,
      'aria-live': ctx.errors.length ? 'assertive' : 'off'
    }
  });
}

function onRenderUpdate(vm, value) {
  if (!vm.initialized) {
    vm.initialValue = value;
  }

  var validateNow = shouldValidate(vm, value);
  vm._needsValidation = false;
  vm.value = value;
  vm._ignoreImmediate = true;

  if (!validateNow) {
    return;
  }

  var validate = function () {
    if (vm.immediate || vm.flags.validated) {
      return triggerThreadSafeValidation(vm);
    }

    vm.validateSilent();
  };

  if (vm.initialized) {
    validate();
    return;
  }

  vm.$once('hook:mounted', function () {
    return validate();
  });
}

function computeModeSetting(ctx) {
  var compute = isCallable(ctx.mode) ? ctx.mode : modes[ctx.mode];
  return compute(ctx);
}

function triggerThreadSafeValidation(vm) {
  var pendingPromise = vm.validateSilent(); // avoids race conditions between successive validations.

  vm._pendingValidation = pendingPromise;
  return pendingPromise.then(function (result) {
    if (pendingPromise === vm._pendingValidation) {
      vm.applyResult(result);
      vm._pendingValidation = undefined;
    }

    return result;
  });
} // Creates the common handlers for a validatable context.


function createCommonHandlers(vm) {
  if (!vm.$veeOnInput) {
    vm.$veeOnInput = function (e) {
      vm.syncValue(e); // track and keep the value updated.

      vm.setFlags({
        dirty: true,
        pristine: false
      });
    };
  }

  var onInput = vm.$veeOnInput;

  if (!vm.$veeOnBlur) {
    vm.$veeOnBlur = function () {
      vm.setFlags({
        touched: true,
        untouched: false
      });
    };
  } // Blur event listener.


  var onBlur = vm.$veeOnBlur;
  var onValidate = vm.$veeHandler;
  var mode = computeModeSetting(vm); // Handle debounce changes.

  if (!onValidate || vm.$veeDebounce !== vm.debounce) {
    onValidate = debounce(function () {
      vm.$nextTick(function () {
        if (!vm._pendingReset) {
          triggerThreadSafeValidation(vm);
        }

        vm._pendingReset = false;
      });
    }, mode.debounce || vm.debounce); // Cache the handler so we don't create it each time.

    vm.$veeHandler = onValidate; // cache the debounce value so we detect if it was changed.

    vm.$veeDebounce = vm.debounce;
  }

  return {
    onInput: onInput,
    onBlur: onBlur,
    onValidate: onValidate
  };
} // Adds all plugin listeners to the vnode.


function addListeners(vm, node) {
  var value = findValue(node); // cache the input eventName.

  vm._inputEventName = vm._inputEventName || getInputEventName(node, findModel(node));
  onRenderUpdate(vm, value === null || value === void 0 ? void 0 : value.value);

  var _a = createCommonHandlers(vm),
      onInput = _a.onInput,
      onBlur = _a.onBlur,
      onValidate = _a.onValidate;

  addVNodeListener(node, vm._inputEventName, onInput);
  addVNodeListener(node, 'blur', onBlur); // add the validation listeners.

  vm.normalizedEvents.forEach(function (evt) {
    addVNodeListener(node, evt, onValidate);
  });
  vm.initialized = true;
}

var PROVIDER_COUNTER = 0;

function data() {
  var errors = [];
  var fieldName = '';
  var defaultValues = {
    errors: errors,
    value: undefined,
    initialized: false,
    initialValue: undefined,
    flags: createFlags(),
    failedRules: {},
    isActive: true,
    fieldName: fieldName,
    id: ''
  };
  return defaultValues;
}

var ValidationProvider = vue__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  inject: {
    $_veeObserver: {
      from: '$_veeObserver',
      default: function () {
        if (!this.$vnode.context.$_veeObserver) {
          this.$vnode.context.$_veeObserver = createObserver();
        }

        return this.$vnode.context.$_veeObserver;
      }
    }
  },
  props: {
    vid: {
      type: String,
      default: ''
    },
    name: {
      type: String,
      default: null
    },
    mode: {
      type: [String, Function],
      default: function () {
        return getConfig().mode;
      }
    },
    rules: {
      type: [Object, String],
      default: null
    },
    immediate: {
      type: Boolean,
      default: false
    },
    bails: {
      type: Boolean,
      default: function () {
        return getConfig().bails;
      }
    },
    skipIfEmpty: {
      type: Boolean,
      default: function () {
        return getConfig().skipOptional;
      }
    },
    debounce: {
      type: Number,
      default: 0
    },
    tag: {
      type: String,
      default: 'span'
    },
    slim: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    customMessages: {
      type: Object,
      default: function () {
        return {};
      }
    },
    detectInput: {
      type: Boolean,
      default: true
    }
  },
  watch: {
    rules: {
      deep: true,
      handler: function (val, oldVal) {
        this._needsValidation = !isEqual(val, oldVal);
      }
    }
  },
  data: data,
  computed: {
    fieldDeps: function () {
      var _this = this;

      return Object.keys(this.normalizedRules).reduce(function (acc, rule) {
        var deps = extractLocators(_this.normalizedRules[rule]).map(function (dep) {
          return isLocator(dep) ? dep.__locatorRef : dep.slice(1);
        });
        acc.push.apply(acc, deps);
        deps.forEach(function (depName) {
          watchCrossFieldDep(_this, depName);
        });
        return acc;
      }, []);
    },
    normalizedEvents: function () {
      var _this = this;

      var on = computeModeSetting(this).on;
      return (on || []).map(function (e) {
        if (e === 'input') {
          return _this._inputEventName;
        }

        return e;
      });
    },
    isRequired: function () {
      var rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);

      var isRequired = Object.keys(rules).some(RuleContainer.isRequireRule);
      this.flags.required = !!isRequired;
      return isRequired;
    },
    classes: function () {
      var names = getConfig().classes;
      return computeClassObj(names, this.flags);
    },
    normalizedRules: function () {
      return normalizeRules(this.rules);
    }
  },
  mounted: function () {
    var _this = this;

    var onLocaleChanged = function () {
      if (!_this.flags.validated) {
        return;
      }

      var regenerateMap = _this._regenerateMap;

      if (regenerateMap) {
        var errors_1 = [];
        var failedRules_1 = {};
        Object.keys(regenerateMap).forEach(function (rule) {
          var msg = regenerateMap[rule]();
          errors_1.push(msg);
          failedRules_1[rule] = msg;
        });

        _this.applyResult({
          errors: errors_1,
          failedRules: failedRules_1,
          regenerateMap: regenerateMap
        });

        return;
      }

      _this.validate();
    };

    EVENT_BUS.$on('change:locale', onLocaleChanged);
    this.$on('hook:beforeDestroy', function () {
      EVENT_BUS.$off('change:locale', onLocaleChanged);
    });
  },
  render: function (h) {
    var _this = this;

    this.registerField();
    var ctx = createValidationCtx(this);
    var children = normalizeChildren(this, ctx); // Automatic v-model detection

    if (this.detectInput) {
      var inputs = findInputNodes(children);

      if (inputs.length) {
        inputs.forEach(function (input, idx) {
          var _a, _b, _c, _d, _e, _f; // If the elements are not checkboxes and there are more input nodes


          if (!includes(['checkbox', 'radio'], (_b = (_a = input.data) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.type) && idx > 0) {
            return;
          }

          var resolved = getConfig().useConstraintAttrs ? resolveRules(input) : {};

          if (!isEqual(_this._resolvedRules, resolved)) {
            _this._needsValidation = true;
          }

          if (isHTMLNode(input)) {
            _this.fieldName = ((_d = (_c = input.data) === null || _c === void 0 ? void 0 : _c.attrs) === null || _d === void 0 ? void 0 : _d.name) || ((_f = (_e = input.data) === null || _e === void 0 ? void 0 : _e.attrs) === null || _f === void 0 ? void 0 : _f.id);
          }

          _this._resolvedRules = resolved;
          addListeners(_this, input);
        });
      }
    }

    return this.slim && children.length <= 1 ? children[0] : h(this.tag, children);
  },
  beforeDestroy: function () {
    // cleanup reference.
    this.$_veeObserver.unobserve(this.id);
  },
  activated: function () {
    this.isActive = true;
  },
  deactivated: function () {
    this.isActive = false;
  },
  methods: {
    setFlags: function (flags) {
      var _this = this;

      Object.keys(flags).forEach(function (flag) {
        _this.flags[flag] = flags[flag];
      });
    },
    syncValue: function (v) {
      var value = normalizeEventValue(v);
      this.value = value;
      this.flags.changed = this.initialValue !== value;
    },
    reset: function () {
      var _this = this;

      this.errors = [];
      this.initialValue = this.value;
      var flags = createFlags();
      flags.required = this.isRequired;
      this.setFlags(flags);
      this.failedRules = {};
      this.validateSilent();
      this._pendingValidation = undefined;
      this._pendingReset = true;
      setTimeout(function () {
        _this._pendingReset = false;
      }, this.debounce);
    },
    validate: function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          if (args.length > 0) {
            this.syncValue(args[0]);
          }

          return [2
          /*return*/
          , triggerThreadSafeValidation(this)];
        });
      });
    },
    validateSilent: function () {
      return __awaiter(this, void 0, void 0, function () {
        var rules, result;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this.setFlags({
                pending: true
              });
              rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);
              Object.defineProperty(rules, '_$$isNormalized', {
                value: true,
                writable: false,
                enumerable: false,
                configurable: false
              });
              return [4
              /*yield*/
              , validate(this.value, rules, __assign(__assign({
                name: this.name || this.fieldName
              }, createLookup(this)), {
                bails: this.bails,
                skipIfEmpty: this.skipIfEmpty,
                isInitial: !this.initialized,
                customMessages: this.customMessages
              }))];

            case 1:
              result = _a.sent();
              this.setFlags({
                pending: false,
                valid: result.valid,
                invalid: !result.valid
              });
              return [2
              /*return*/
              , result];
          }
        });
      });
    },
    setErrors: function (errors) {
      this.applyResult({
        errors: errors,
        failedRules: {}
      });
    },
    applyResult: function (_a) {
      var errors = _a.errors,
          failedRules = _a.failedRules,
          regenerateMap = _a.regenerateMap;
      this.errors = errors;
      this._regenerateMap = regenerateMap;
      this.failedRules = __assign({}, failedRules || {});
      this.setFlags({
        valid: !errors.length,
        passed: !errors.length,
        invalid: !!errors.length,
        failed: !!errors.length,
        validated: true,
        changed: this.value !== this.initialValue
      });
    },
    registerField: function () {
      updateRenderingContextRefs(this);
    }
  }
});

function computeClassObj(names, flags) {
  var acc = {};
  var keys = Object.keys(flags);
  var length = keys.length;

  var _loop_1 = function (i) {
    var flag = keys[i];
    var className = names && names[flag] || flag;
    var value = flags[flag];

    if (isNullOrUndefined(value)) {
      return "continue";
    }

    if ((flag === 'valid' || flag === 'invalid') && !flags.validated) {
      return "continue";
    }

    if (typeof className === 'string') {
      acc[className] = value;
    } else if (Array.isArray(className)) {
      className.forEach(function (cls) {
        acc[cls] = value;
      });
    }
  };

  for (var i = 0; i < length; i++) {
    _loop_1(i);
  }

  return acc;
}

function createLookup(vm) {
  var providers = vm.$_veeObserver.refs;
  var reduced = {
    names: {},
    values: {}
  };
  return vm.fieldDeps.reduce(function (acc, depName) {
    if (!providers[depName]) {
      return acc;
    }

    acc.values[depName] = providers[depName].value;
    acc.names[depName] = providers[depName].name;
    return acc;
  }, reduced);
}

function extractId(vm) {
  if (vm.vid) {
    return vm.vid;
  }

  if (vm.name) {
    return vm.name;
  }

  if (vm.id) {
    return vm.id;
  }

  if (vm.fieldName) {
    return vm.fieldName;
  }

  PROVIDER_COUNTER++;
  return "_vee_" + PROVIDER_COUNTER;
}

function updateRenderingContextRefs(vm) {
  var providedId = extractId(vm);
  var id = vm.id; // Nothing has changed.

  if (!vm.isActive || id === providedId && vm.$_veeObserver.refs[id]) {
    return;
  } // vid was changed.


  if (id !== providedId && vm.$_veeObserver.refs[id] === vm) {
    vm.$_veeObserver.unobserve(id);
  }

  vm.id = providedId;
  vm.$_veeObserver.observe(vm);
}

function createObserver() {
  return {
    refs: {},
    observe: function (vm) {
      this.refs[vm.id] = vm;
    },
    unobserve: function (id) {
      delete this.refs[id];
    }
  };
}

function watchCrossFieldDep(ctx, depName, withHooks) {
  if (withHooks === void 0) {
    withHooks = true;
  }

  var providers = ctx.$_veeObserver.refs;

  if (!ctx._veeWatchers) {
    ctx._veeWatchers = {};
  }

  if (!providers[depName] && withHooks) {
    return ctx.$once('hook:mounted', function () {
      watchCrossFieldDep(ctx, depName, false);
    });
  }

  if (!isCallable(ctx._veeWatchers[depName]) && providers[depName]) {
    ctx._veeWatchers[depName] = providers[depName].$watch('value', function () {
      if (ctx.flags.validated) {
        ctx._needsValidation = true;
        ctx.validate();
      }
    });
  }
}

var FLAGS_STRATEGIES = [['pristine', 'every'], ['dirty', 'some'], ['touched', 'some'], ['untouched', 'every'], ['valid', 'every'], ['invalid', 'some'], ['pending', 'some'], ['validated', 'every'], ['changed', 'some'], ['passed', 'every'], ['failed', 'some']];
var OBSERVER_COUNTER = 0;

function data$1() {
  var refs = {};
  var errors = {};
  var flags = createObserverFlags();
  var fields = {}; // FIXME: Not sure of this one can be typed, circular type reference.

  var observers = [];
  return {
    id: '',
    refs: refs,
    observers: observers,
    errors: errors,
    flags: flags,
    fields: fields
  };
}

function provideSelf() {
  return {
    $_veeObserver: this
  };
}

var ValidationObserver = vue__WEBPACK_IMPORTED_MODULE_0__["default"].extend({
  name: 'ValidationObserver',
  provide: provideSelf,
  inject: {
    $_veeObserver: {
      from: '$_veeObserver',
      default: function () {
        if (!this.$vnode.context.$_veeObserver) {
          return null;
        }

        return this.$vnode.context.$_veeObserver;
      }
    }
  },
  props: {
    tag: {
      type: String,
      default: 'span'
    },
    vid: {
      type: String,
      default: function () {
        return "obs_" + OBSERVER_COUNTER++;
      }
    },
    slim: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  data: data$1,
  created: function () {
    var _this = this;

    this.id = this.vid;
    register(this);
    var onChange = debounce(function (_a) {
      var errors = _a.errors,
          flags = _a.flags,
          fields = _a.fields;
      _this.errors = errors;
      _this.flags = flags;
      _this.fields = fields;
    }, 16);
    this.$watch(computeObserverState, onChange);
  },
  activated: function () {
    register(this);
  },
  deactivated: function () {
    unregister(this);
  },
  beforeDestroy: function () {
    unregister(this);
  },
  render: function (h) {
    var children = normalizeChildren(this, prepareSlotProps(this));
    return this.slim && children.length <= 1 ? children[0] : h(this.tag, {
      on: this.$listeners
    }, children);
  },
  methods: {
    observe: function (subscriber, kind) {
      var _a;

      if (kind === void 0) {
        kind = 'provider';
      }

      if (kind === 'observer') {
        this.observers.push(subscriber);
        return;
      }

      this.refs = __assign(__assign({}, this.refs), (_a = {}, _a[subscriber.id] = subscriber, _a));
    },
    unobserve: function (id, kind) {
      if (kind === void 0) {
        kind = 'provider';
      }

      if (kind === 'provider') {
        var provider = this.refs[id];

        if (!provider) {
          return;
        }

        this.$delete(this.refs, id);
        return;
      }

      var idx = findIndex(this.observers, function (o) {
        return o.id === id;
      });

      if (idx !== -1) {
        this.observers.splice(idx, 1);
      }
    },
    validateWithInfo: function (_a) {
      var _b = (_a === void 0 ? {} : _a).silent,
          silent = _b === void 0 ? false : _b;
      return __awaiter(this, void 0, void 0, function () {
        var results, isValid, _c, errors, flags, fields;

        return __generator(this, function (_d) {
          switch (_d.label) {
            case 0:
              return [4
              /*yield*/
              , Promise.all(__spreadArrays(values(this.refs).filter(function (r) {
                return !r.disabled;
              }).map(function (ref) {
                return ref[silent ? 'validateSilent' : 'validate']().then(function (r) {
                  return r.valid;
                });
              }), this.observers.filter(function (o) {
                return !o.disabled;
              }).map(function (obs) {
                return obs.validate({
                  silent: silent
                });
              })))];

            case 1:
              results = _d.sent();
              isValid = results.every(function (r) {
                return r;
              });
              _c = computeObserverState.call(this), errors = _c.errors, flags = _c.flags, fields = _c.fields;
              this.errors = errors;
              this.flags = flags;
              this.fields = fields;
              return [2
              /*return*/
              , {
                errors: errors,
                flags: flags,
                fields: fields,
                isValid: isValid
              }];
          }
        });
      });
    },
    validate: function (_a) {
      var _b = (_a === void 0 ? {} : _a).silent,
          silent = _b === void 0 ? false : _b;
      return __awaiter(this, void 0, void 0, function () {
        var isValid;
        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4
              /*yield*/
              , this.validateWithInfo({
                silent: silent
              })];

            case 1:
              isValid = _c.sent().isValid;
              return [2
              /*return*/
              , isValid];
          }
        });
      });
    },
    handleSubmit: function (cb) {
      return __awaiter(this, void 0, void 0, function () {
        var isValid;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.validate()];

            case 1:
              isValid = _a.sent();

              if (!isValid || !cb) {
                return [2
                /*return*/
                ];
              }

              return [2
              /*return*/
              , cb()];
          }
        });
      });
    },
    reset: function () {
      return __spreadArrays(values(this.refs), this.observers).forEach(function (ref) {
        return ref.reset();
      });
    },
    setErrors: function (errors) {
      var _this = this;

      Object.keys(errors).forEach(function (key) {
        var provider = _this.refs[key];
        if (!provider) return;
        var errorArr = errors[key] || [];
        errorArr = typeof errorArr === 'string' ? [errorArr] : errorArr;
        provider.setErrors(errorArr);
      });
      this.observers.forEach(function (observer) {
        observer.setErrors(errors);
      });
    }
  }
});

function unregister(vm) {
  if (vm.$_veeObserver) {
    vm.$_veeObserver.unobserve(vm.id, 'observer');
  }
}

function register(vm) {
  if (vm.$_veeObserver) {
    vm.$_veeObserver.observe(vm, 'observer');
  }
}

function prepareSlotProps(vm) {
  return __assign(__assign({}, vm.flags), {
    errors: vm.errors,
    fields: vm.fields,
    validate: vm.validate,
    validateWithInfo: vm.validateWithInfo,
    passes: vm.handleSubmit,
    handleSubmit: vm.handleSubmit,
    reset: vm.reset
  });
} // Creates a modified version of validation flags


function createObserverFlags() {
  return __assign(__assign({}, createFlags()), {
    valid: true,
    invalid: false
  });
}

function computeObserverState() {
  var vms = __spreadArrays(values(this.refs), this.observers.filter(function (o) {
    return !o.disabled;
  }));

  var errors = {};
  var flags = createObserverFlags();
  var fields = {};
  var length = vms.length;

  for (var i = 0; i < length; i++) {
    var vm = vms[i]; // validation provider

    if (Array.isArray(vm.errors)) {
      errors[vm.id] = vm.errors;
      fields[vm.id] = __assign({
        id: vm.id,
        name: vm.name,
        failedRules: vm.failedRules
      }, vm.flags);
      continue;
    } // Nested observer, merge errors and fields


    errors = __assign(__assign({}, errors), vm.errors);
    fields = __assign(__assign({}, fields), vm.fields);
  }

  FLAGS_STRATEGIES.forEach(function (_a) {
    var flag = _a[0],
        method = _a[1];
    flags[flag] = vms[method](function (vm) {
      return vm.flags[flag];
    });
  });
  return {
    errors: errors,
    flags: flags,
    fields: fields
  };
}

function withValidation(component, mapProps) {
  var _a;

  if (mapProps === void 0) {
    mapProps = identity;
  }

  var options = 'options' in component ? component.options : component;
  var providerOpts = ValidationProvider.options;
  var hoc = {
    name: (options.name || 'AnonymousHoc') + "WithValidation",
    props: __assign({}, providerOpts.props),
    data: providerOpts.data,
    computed: __assign({}, providerOpts.computed),
    methods: __assign({}, providerOpts.methods),
    beforeDestroy: providerOpts.beforeDestroy,
    inject: providerOpts.inject
  };
  var eventName = ((_a = options === null || options === void 0 ? void 0 : options.model) === null || _a === void 0 ? void 0 : _a.event) || 'input';

  hoc.render = function (h) {
    var _a;

    this.registerField();
    var vctx = createValidationCtx(this);

    var listeners = __assign({}, this.$listeners);

    var model = findModel(this.$vnode);
    this._inputEventName = this._inputEventName || getInputEventName(this.$vnode, model);
    var value = findValue(this.$vnode);
    onRenderUpdate(this, value === null || value === void 0 ? void 0 : value.value);

    var _b = createCommonHandlers(this),
        onInput = _b.onInput,
        onBlur = _b.onBlur,
        onValidate = _b.onValidate;

    mergeVNodeListeners(listeners, eventName, onInput);
    mergeVNodeListeners(listeners, 'blur', onBlur);
    this.normalizedEvents.forEach(function (evt) {
      mergeVNodeListeners(listeners, evt, onValidate);
    }); // Props are any attrs not associated with ValidationProvider Plus the model prop.
    // WARNING: Accidental prop overwrite will probably happen.

    var prop = (findModelConfig(this.$vnode) || {
      prop: 'value'
    }).prop;

    var props = __assign(__assign(__assign({}, this.$attrs), (_a = {}, _a[prop] = model === null || model === void 0 ? void 0 : model.value, _a)), mapProps(vctx));

    return h(options, {
      attrs: this.$attrs,
      props: props,
      on: listeners,
      scopedSlots: this.$scopedSlots
    }, normalizeSlots(this.$slots, this.$vnode.context));
  };

  return hoc;
}

var version = '3.4.5';


/***/ }),

/***/ "./node_modules/vue-ellipse-progress/dist/vue-ellipse-progress.umd.min.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vue-ellipse-progress/dist/vue-ellipse-progress.umd.min.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function (t, e) {
   true ? module.exports = e() : undefined;
})("undefined" !== typeof self ? self : this, function () {
  return function (t) {
    var e = {};

    function r(n) {
      if (e[n]) return e[n].exports;
      var i = e[n] = {
        i: n,
        l: !1,
        exports: {}
      };
      return t[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
    }

    return r.m = t, r.c = e, r.d = function (t, e, n) {
      r.o(t, e) || Object.defineProperty(t, e, {
        enumerable: !0,
        get: n
      });
    }, r.r = function (t) {
      "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }, r.t = function (t, e) {
      if (1 & e && (t = r(t)), 8 & e) return t;
      if (4 & e && "object" === typeof t && t && t.__esModule) return t;
      var n = Object.create(null);
      if (r.r(n), Object.defineProperty(n, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var i in t) r.d(n, i, function (e) {
        return t[e];
      }.bind(null, i));
      return n;
    }, r.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t["default"];
      } : function () {
        return t;
      };
      return r.d(e, "a", e), e;
    }, r.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, r.p = "", r(r.s = "fb15");
  }({
    "00ee": function (t, e, r) {
      var n = r("b622"),
          i = n("toStringTag"),
          o = {};
      o[i] = "z", t.exports = "[object z]" === String(o);
    },
    "01f3": function (t, e, r) {
      "use strict";

      var n = r("6d40"),
          i = r.n(n);
      i.a;
    },
    "02d4": function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, "@-webkit-keyframes ep-dot--init__loop{0%{-webkit-transform:rotate(var(--ep-dot-start));transform:rotate(var(--ep-dot-start))}33%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}66%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-loop-end));transform:rotate(var(--ep-dot-loop-end))}}@keyframes ep-dot--init__loop{0%{-webkit-transform:rotate(var(--ep-dot-start));transform:rotate(var(--ep-dot-start))}33%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}66%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-loop-end));transform:rotate(var(--ep-dot-loop-end))}}@-webkit-keyframes ep-dot--init__reverse{0%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}50%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-end));transform:rotate(var(--ep-dot-end))}}@keyframes ep-dot--init__reverse{0%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}50%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-end));transform:rotate(var(--ep-dot-end))}}@-webkit-keyframes ep-dot--init__bounce{0%{opacity:0}90%{opacity:0}to{opacity:1}}@keyframes ep-dot--init__bounce{0%{opacity:0}90%{opacity:0}to{opacity:1}}@-webkit-keyframes ep-dot--init__disabled{0%{opacity:0}90%{opacity:0}to{opacity:1}}@keyframes ep-dot--init__disabled{0%{opacity:0}90%{opacity:0}to{opacity:1}}.ep-circle--progress{-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}.ep-circle--progress.animation__default{-webkit-animation-name:ep-progress--init__default;animation-name:ep-progress--init__default}.ep-circle--progress.animation__rs{-webkit-animation-name:ep-progress--init__rs;animation-name:ep-progress--init__rs}.ep-circle--progress.animation__bounce{-webkit-animation-name:ep-progress--init__bounce;animation-name:ep-progress--init__bounce}.ep-circle--progress.animation__reverse{-webkit-animation-name:ep-progress--init__reverse;animation-name:ep-progress--init__reverse}.ep-circle--progress.animation__loop{-webkit-animation-name:ep-progress--init__loop;animation-name:ep-progress--init__loop}.ep-circle--loading.animation__loading{-webkit-animation-name:ep-progress--loading,ep-progress--loading__rotation;animation-name:ep-progress--loading,ep-progress--loading__rotation;-webkit-animation-iteration-count:infinite!important;animation-iteration-count:infinite!important;-webkit-animation-duration:2s,1s!important;animation-duration:2s,1s!important;-webkit-animation-timing-function:ease-in-out,linear;animation-timing-function:ease-in-out,linear}.ep-half-circle--loading.animation__loading{-webkit-animation-name:ep-half-progress--loading;animation-name:ep-half-progress--loading;-webkit-animation-iteration-count:infinite!important;animation-iteration-count:infinite!important;-webkit-animation-duration:2s!important;animation-duration:2s!important;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}.ep-circle--empty.ep-circle--nodata,.ep-half-circle--empty.ep-circle--nodata{opacity:.5}.ep-circle--progress__dot-container{-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}.ep-circle--progress__dot-container.animation__rs{-webkit-animation-name:ep-dot--init__rs;animation-name:ep-dot--init__rs}.ep-circle--progress__dot-container.animation__bounce{-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-name:ep-dot--init__disabled;animation-name:ep-dot--init__disabled}.ep-circle--progress__dot-container.animation__reverse{-webkit-animation-name:ep-dot--init__reverse;animation-name:ep-dot--init__reverse}.ep-circle--progress__dot-container.animation__loop{-webkit-animation-name:ep-dot--init__loop;animation-name:ep-dot--init__loop}.ep-circle--progress__dot-container.ep-half-circle-progress__dot.animation__bounce,.ep-circle--progress__dot-container.ep-half-circle-progress__dot.animation__loop{-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-name:ep-dot--init__disabled;animation-name:ep-dot--init__disabled}@-webkit-keyframes ep-progress--init__default{0%{stroke-dashoffset:var(--ep-circumference)}to{stroke-dashoffset:var(--ep-stroke-offset)}}@keyframes ep-progress--init__default{0%{stroke-dashoffset:var(--ep-circumference)}to{stroke-dashoffset:var(--ep-stroke-offset)}}@-webkit-keyframes ep-progress--init__rs{0%{stroke-dashoffset:var(--ep-circumference)}50%{stroke-dashoffset:0}to{stroke-dashoffset:var(--ep-stroke-offset)}}@keyframes ep-progress--init__rs{0%{stroke-dashoffset:var(--ep-circumference)}50%{stroke-dashoffset:0}to{stroke-dashoffset:var(--ep-stroke-offset)}}@-webkit-keyframes ep-progress--init__bounce{0%{-webkit-animation-timing-function:linear;animation-timing-function:linear;stroke-dashoffset:var(--ep-circumference)}33%{stroke-dashoffset:var(--ep-bounce-out-stroke-offset)}66%{stroke-dashoffset:var(--ep-bounce-in-stroke-offset)}to{stroke-dashoffset:var(--ep-stroke-offset)}}@keyframes ep-progress--init__bounce{0%{-webkit-animation-timing-function:linear;animation-timing-function:linear;stroke-dashoffset:var(--ep-circumference)}33%{stroke-dashoffset:var(--ep-bounce-out-stroke-offset)}66%{stroke-dashoffset:var(--ep-bounce-in-stroke-offset)}to{stroke-dashoffset:var(--ep-stroke-offset)}}@-webkit-keyframes ep-progress--init__reverse{0%{stroke-dashoffset:var(--ep-circumference)}50%{stroke-dashoffset:var(--ep-double-circumference)}to{stroke-dashoffset:var(--ep-reverse-stroke-offset)}}@keyframes ep-progress--init__reverse{0%{stroke-dashoffset:var(--ep-circumference)}50%{stroke-dashoffset:var(--ep-double-circumference)}to{stroke-dashoffset:var(--ep-reverse-stroke-offset)}}@-webkit-keyframes ep-progress--init__loop{0%{stroke-dashoffset:var(--ep-circumference)}33%{stroke-dashoffset:0}66%{stroke-dashoffset:var(--ep-negative-circumference)}to{stroke-dashoffset:var(--ep-loop-stroke-offset)}}@keyframes ep-progress--init__loop{0%{stroke-dashoffset:var(--ep-circumference)}33%{stroke-dashoffset:0}66%{stroke-dashoffset:var(--ep-negative-circumference)}to{stroke-dashoffset:var(--ep-loop-stroke-offset)}}@-webkit-keyframes ep-progress--loading{0%{opacity:.5;stroke-dashoffset:var(--ep-circumference)}50%{opacity:.8;stroke-dashoffset:var(--ep-loading-stroke-offset)}to{opacity:.5;stroke-dashoffset:var(--ep-circumference)}}@keyframes ep-progress--loading{0%{opacity:.5;stroke-dashoffset:var(--ep-circumference)}50%{opacity:.8;stroke-dashoffset:var(--ep-loading-stroke-offset)}to{opacity:.5;stroke-dashoffset:var(--ep-circumference)}}@-webkit-keyframes ep-half-progress--loading{0%{opacity:.5;stroke-dashoffset:var(--ep-circumference)}50%{opacity:.8;stroke-dashoffset:0}to{opacity:.5;stroke-dashoffset:var(--ep-circumference)}}@keyframes ep-half-progress--loading{0%{opacity:.5;stroke-dashoffset:var(--ep-circumference)}50%{opacity:.8;stroke-dashoffset:0}to{opacity:.5;stroke-dashoffset:var(--ep-circumference)}}@-webkit-keyframes ep-progress--loading__rotation{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes ep-progress--loading__rotation{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes ep-dot--init__rs{0%{-webkit-transform:rotate(var(--ep-dot-start));transform:rotate(var(--ep-dot-start))}50%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-end));transform:rotate(var(--ep-dot-end))}}@keyframes ep-dot--init__rs{0%{-webkit-transform:rotate(var(--ep-dot-start));transform:rotate(var(--ep-dot-start))}50%{-webkit-transform:rotate(var(--ep-dot-360));transform:rotate(var(--ep-dot-360))}to{-webkit-transform:rotate(var(--ep-dot-end));transform:rotate(var(--ep-dot-end))}}.ep-svg-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:absolute}.ep-svg-container.ep-reverse{-webkit-transform:scaleX(-1);transform:scaleX(-1)}g.ep-circle--container{-webkit-transition:inherit;-o-transition:inherit;transition:inherit;-webkit-transform-origin:50% 50%;transform-origin:50% 50%}", ""]), t.exports = e;
    },
    "0366": function (t, e, r) {
      var n = r("1c0b");

      t.exports = function (t, e, r) {
        if (n(t), void 0 === e) return t;

        switch (r) {
          case 0:
            return function () {
              return t.call(e);
            };

          case 1:
            return function (r) {
              return t.call(e, r);
            };

          case 2:
            return function (r, n) {
              return t.call(e, r, n);
            };

          case 3:
            return function (r, n, i) {
              return t.call(e, r, n, i);
            };
        }

        return function () {
          return t.apply(e, arguments);
        };
      };
    },
    "054f": function (t, e, r) {
      "use strict";

      var n = r("a231"),
          i = r.n(n);
      i.a;
    },
    "057f": function (t, e, r) {
      var n = r("fc6a"),
          i = r("241c").f,
          o = {}.toString,
          a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
          s = function (t) {
        try {
          return i(t);
        } catch (e) {
          return a.slice();
        }
      };

      t.exports.f = function (t) {
        return a && "[object Window]" == o.call(t) ? s(t) : i(n(t));
      };
    },
    "06cf": function (t, e, r) {
      var n = r("83ab"),
          i = r("d1e7"),
          o = r("5c6c"),
          a = r("fc6a"),
          s = r("c04e"),
          c = r("5135"),
          u = r("0cfb"),
          f = Object.getOwnPropertyDescriptor;
      e.f = n ? f : function (t, e) {
        if (t = a(t), e = s(e, !0), u) try {
          return f(t, e);
        } catch (r) {}
        if (c(t, e)) return o(!i.f.call(t, e), t[e]);
      };
    },
    "0cfb": function (t, e, r) {
      var n = r("83ab"),
          i = r("d039"),
          o = r("cc12");
      t.exports = !n && !i(function () {
        return 7 != Object.defineProperty(o("div"), "a", {
          get: function () {
            return 7;
          }
        }).a;
      });
    },
    1148: function (t, e, r) {
      "use strict";

      var n = r("a691"),
          i = r("1d80");

      t.exports = "".repeat || function (t) {
        var e = String(i(this)),
            r = "",
            o = n(t);
        if (o < 0 || o == 1 / 0) throw RangeError("Wrong number of repetitions");

        for (; o > 0; (o >>>= 1) && (e += e)) 1 & o && (r += e);

        return r;
      };
    },
    "11ae": function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, ".ep-container[data-v-59d6a78d]{display:inline-block;overflow:hidden}.ep-content[data-v-59d6a78d]{max-width:inherit;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;height:100%;width:100%}.ep-content[data-v-59d6a78d],.ep-legend--container[data-v-59d6a78d]{-webkit-transition:inherit;-o-transition:inherit;transition:inherit}.ep-legend--container[data-v-59d6a78d]{position:absolute;text-align:center}.ep-legend--value[data-v-59d6a78d]{-webkit-transition:.3s;-o-transition:.3s;transition:.3s;text-align:center;opacity:1}.ep-hidden[data-v-59d6a78d]{opacity:0}svg.ep-svg[data-v-59d6a78d]{-webkit-transition:inherit;-o-transition:inherit;transition:inherit;-webkit-transform-origin:50% 50%;transform-origin:50% 50%}", ""]), t.exports = e;
    },
    1276: function (t, e, r) {
      "use strict";

      var n = r("d784"),
          i = r("44e7"),
          o = r("825a"),
          a = r("1d80"),
          s = r("4840"),
          c = r("8aa5"),
          u = r("50c4"),
          f = r("14c3"),
          l = r("9263"),
          p = r("d039"),
          d = [].push,
          h = Math.min,
          v = 4294967295,
          m = !p(function () {
        return !RegExp(v, "y");
      });
      n("split", 2, function (t, e, r) {
        var n;
        return n = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function (t, r) {
          var n = String(a(this)),
              o = void 0 === r ? v : r >>> 0;
          if (0 === o) return [];
          if (void 0 === t) return [n];
          if (!i(t)) return e.call(n, t, o);
          var s,
              c,
              u,
              f = [],
              p = (t.ignoreCase ? "i" : "") + (t.multiline ? "m" : "") + (t.unicode ? "u" : "") + (t.sticky ? "y" : ""),
              h = 0,
              m = new RegExp(t.source, p + "g");

          while (s = l.call(m, n)) {
            if (c = m.lastIndex, c > h && (f.push(n.slice(h, s.index)), s.length > 1 && s.index < n.length && d.apply(f, s.slice(1)), u = s[0].length, h = c, f.length >= o)) break;
            m.lastIndex === s.index && m.lastIndex++;
          }

          return h === n.length ? !u && m.test("") || f.push("") : f.push(n.slice(h)), f.length > o ? f.slice(0, o) : f;
        } : "0".split(void 0, 0).length ? function (t, r) {
          return void 0 === t && 0 === r ? [] : e.call(this, t, r);
        } : e, [function (e, r) {
          var i = a(this),
              o = void 0 == e ? void 0 : e[t];
          return void 0 !== o ? o.call(e, i, r) : n.call(String(i), e, r);
        }, function (t, i) {
          var a = r(n, t, this, i, n !== e);
          if (a.done) return a.value;
          var l = o(t),
              p = String(this),
              d = s(l, RegExp),
              g = l.unicode,
              y = (l.ignoreCase ? "i" : "") + (l.multiline ? "m" : "") + (l.unicode ? "u" : "") + (m ? "y" : "g"),
              b = new d(m ? l : "^(?:" + l.source + ")", y),
              x = void 0 === i ? v : i >>> 0;
          if (0 === x) return [];
          if (0 === p.length) return null === f(b, p) ? [p] : [];
          var k = 0,
              w = 0,
              _ = [];

          while (w < p.length) {
            b.lastIndex = m ? w : 0;
            var S,
                E = f(b, m ? p : p.slice(w));
            if (null === E || (S = h(u(b.lastIndex + (m ? 0 : w)), p.length)) === k) w = c(p, w, g);else {
              if (_.push(p.slice(k, w)), _.length === x) return _;

              for (var T = 1; T <= E.length - 1; T++) if (_.push(E[T]), _.length === x) return _;

              w = k = S;
            }
          }

          return _.push(p.slice(k)), _;
        }];
      }, !m);
    },
    "129f": function (t, e) {
      t.exports = Object.is || function (t, e) {
        return t === e ? 0 !== t || 1 / t === 1 / e : t != t && e != e;
      };
    },
    "13d5": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("d58f").left,
          o = r("a640"),
          a = r("ae40"),
          s = o("reduce"),
          c = a("reduce", {
        1: 0
      });
      n({
        target: "Array",
        proto: !0,
        forced: !s || !c
      }, {
        reduce: function (t) {
          return i(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    "14c3": function (t, e, r) {
      var n = r("c6b6"),
          i = r("9263");

      t.exports = function (t, e) {
        var r = t.exec;

        if ("function" === typeof r) {
          var o = r.call(t, e);
          if ("object" !== typeof o) throw TypeError("RegExp exec method returned something other than an Object or null");
          return o;
        }

        if ("RegExp" !== n(t)) throw TypeError("RegExp#exec called on incompatible receiver");
        return i.call(t, e);
      };
    },
    "159b": function (t, e, r) {
      var n = r("da84"),
          i = r("fdbc"),
          o = r("17c2"),
          a = r("9112");

      for (var s in i) {
        var c = n[s],
            u = c && c.prototype;
        if (u && u.forEach !== o) try {
          a(u, "forEach", o);
        } catch (f) {
          u.forEach = o;
        }
      }
    },
    "17c2": function (t, e, r) {
      "use strict";

      var n = r("b727").forEach,
          i = r("a640"),
          o = r("ae40"),
          a = i("forEach"),
          s = o("forEach");
      t.exports = a && s ? [].forEach : function (t) {
        return n(this, t, arguments.length > 1 ? arguments[1] : void 0);
      };
    },
    "19aa": function (t, e) {
      t.exports = function (t, e, r) {
        if (!(t instanceof e)) throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
        return t;
      };
    },
    "1be4": function (t, e, r) {
      var n = r("d066");
      t.exports = n("document", "documentElement");
    },
    "1c0b": function (t, e) {
      t.exports = function (t) {
        if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
        return t;
      };
    },
    "1c7e": function (t, e, r) {
      var n = r("b622"),
          i = n("iterator"),
          o = !1;

      try {
        var a = 0,
            s = {
          next: function () {
            return {
              done: !!a++
            };
          },
          return: function () {
            o = !0;
          }
        };
        s[i] = function () {
          return this;
        }, Array.from(s, function () {
          throw 2;
        });
      } catch (c) {}

      t.exports = function (t, e) {
        if (!e && !o) return !1;
        var r = !1;

        try {
          var n = {};
          n[i] = function () {
            return {
              next: function () {
                return {
                  done: r = !0
                };
              }
            };
          }, t(n);
        } catch (c) {}

        return r;
      };
    },
    "1cdc": function (t, e, r) {
      var n = r("342f");
      t.exports = /(iphone|ipod|ipad).*applewebkit/i.test(n);
    },
    "1d1a": function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, "g.ep-half-circle[data-v-5b37ebc3]{-webkit-transform-origin:50% 50%;transform-origin:50% 50%}", ""]), t.exports = e;
    },
    "1d80": function (t, e) {
      t.exports = function (t) {
        if (void 0 == t) throw TypeError("Can't call method on " + t);
        return t;
      };
    },
    "1dde": function (t, e, r) {
      var n = r("d039"),
          i = r("b622"),
          o = r("2d00"),
          a = i("species");

      t.exports = function (t) {
        return o >= 51 || !n(function () {
          var e = [],
              r = e.constructor = {};
          return r[a] = function () {
            return {
              foo: 1
            };
          }, 1 !== e[t](Boolean).foo;
        });
      };
    },
    2266: function (t, e, r) {
      var n = r("825a"),
          i = r("e95a"),
          o = r("50c4"),
          a = r("0366"),
          s = r("35a1"),
          c = r("9bdd"),
          u = function (t, e) {
        this.stopped = t, this.result = e;
      },
          f = t.exports = function (t, e, r, f, l) {
        var p,
            d,
            h,
            v,
            m,
            g,
            y,
            b = a(e, r, f ? 2 : 1);
        if (l) p = t;else {
          if (d = s(t), "function" != typeof d) throw TypeError("Target is not iterable");

          if (i(d)) {
            for (h = 0, v = o(t.length); v > h; h++) if (m = f ? b(n(y = t[h])[0], y[1]) : b(t[h]), m && m instanceof u) return m;

            return new u(!1);
          }

          p = d.call(t);
        }
        g = p.next;

        while (!(y = g.call(p)).done) if (m = c(p, b, y.value, f), "object" == typeof m && m && m instanceof u) return m;

        return new u(!1);
      };

      f.stop = function (t) {
        return new u(!0, t);
      };
    },
    "23cb": function (t, e, r) {
      var n = r("a691"),
          i = Math.max,
          o = Math.min;

      t.exports = function (t, e) {
        var r = n(t);
        return r < 0 ? i(r + e, 0) : o(r, e);
      };
    },
    "23e7": function (t, e, r) {
      var n = r("da84"),
          i = r("06cf").f,
          o = r("9112"),
          a = r("6eeb"),
          s = r("ce4e"),
          c = r("e893"),
          u = r("94ca");

      t.exports = function (t, e) {
        var r,
            f,
            l,
            p,
            d,
            h,
            v = t.target,
            m = t.global,
            g = t.stat;
        if (f = m ? n : g ? n[v] || s(v, {}) : (n[v] || {}).prototype, f) for (l in e) {
          if (d = e[l], t.noTargetGet ? (h = i(f, l), p = h && h.value) : p = f[l], r = u(m ? l : v + (g ? "." : "#") + l, t.forced), !r && void 0 !== p) {
            if (typeof d === typeof p) continue;
            c(d, p);
          }

          (t.sham || p && p.sham) && o(d, "sham", !0), a(f, l, d, t);
        }
      };
    },
    "241c": function (t, e, r) {
      var n = r("ca84"),
          i = r("7839"),
          o = i.concat("length", "prototype");

      e.f = Object.getOwnPropertyNames || function (t) {
        return n(t, o);
      };
    },
    2474: function (t, e, r) {
      "use strict";

      var n = r("d07f"),
          i = r.n(n);
      i.a;
    },
    "24fb": function (t, e, r) {
      "use strict";

      function n(t, e) {
        var r = t[1] || "",
            n = t[3];
        if (!n) return r;

        if (e && "function" === typeof btoa) {
          var o = i(n),
              a = n.sources.map(function (t) {
            return "/*# sourceURL=".concat(n.sourceRoot || "").concat(t, " */");
          });
          return [r].concat(a).concat([o]).join("\n");
        }

        return [r].join("\n");
      }

      function i(t) {
        var e = btoa(unescape(encodeURIComponent(JSON.stringify(t)))),
            r = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e);
        return "/*# ".concat(r, " */");
      }

      t.exports = function (t) {
        var e = [];
        return e.toString = function () {
          return this.map(function (e) {
            var r = n(e, t);
            return e[2] ? "@media ".concat(e[2], " {").concat(r, "}") : r;
          }).join("");
        }, e.i = function (t, r, n) {
          "string" === typeof t && (t = [[null, t, ""]]);
          var i = {};
          if (n) for (var o = 0; o < this.length; o++) {
            var a = this[o][0];
            null != a && (i[a] = !0);
          }

          for (var s = 0; s < t.length; s++) {
            var c = [].concat(t[s]);
            n && i[c[0]] || (r && (c[2] ? c[2] = "".concat(r, " and ").concat(c[2]) : c[2] = r), e.push(c));
          }
        }, e;
      };
    },
    2532: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("5a34"),
          o = r("1d80"),
          a = r("ab13");
      n({
        target: "String",
        proto: !0,
        forced: !a("includes")
      }, {
        includes: function (t) {
          return !!~String(o(this)).indexOf(i(t), arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    "25f0": function (t, e, r) {
      "use strict";

      var n = r("6eeb"),
          i = r("825a"),
          o = r("d039"),
          a = r("ad6d"),
          s = "toString",
          c = RegExp.prototype,
          u = c[s],
          f = o(function () {
        return "/a/b" != u.call({
          source: "a",
          flags: "b"
        });
      }),
          l = u.name != s;
      (f || l) && n(RegExp.prototype, s, function () {
        var t = i(this),
            e = String(t.source),
            r = t.flags,
            n = String(void 0 === r && t instanceof RegExp && !("flags" in c) ? a.call(t) : r);
        return "/" + e + "/" + n;
      }, {
        unsafe: !0
      });
    },
    2626: function (t, e, r) {
      "use strict";

      var n = r("d066"),
          i = r("9bf2"),
          o = r("b622"),
          a = r("83ab"),
          s = o("species");

      t.exports = function (t) {
        var e = n(t),
            r = i.f;
        a && e && !e[s] && r(e, s, {
          configurable: !0,
          get: function () {
            return this;
          }
        });
      };
    },
    "273a": function (t, e, r) {
      "use strict";

      var n = r("d30c"),
          i = r.n(n);
      i.a;
    },
    "28ab": function (t, e, r) {
      "use strict";

      var n = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("div", {
          staticClass: "ep-container",
          style: {
            width: t.size + "px",
            height: t.size + "px"
          }
        }, [r("div", {
          staticClass: "ep-content"
        }, [t._l(t.circlesData, function (e, n) {
          return r("circle-container", t._b({
            key: n,
            attrs: {
              multiple: t.isMultiple,
              index: n,
              globalThickness: t.thickness,
              globalGap: t.gap,
              globalDot: t.dot
            }
          }, "circle-container", e, !1));
        }), r("div", {
          staticClass: "ep-legend--container",
          style: {
            maxWidth: t.size + "px"
          }
        }, [t.legend && !t.isMultiple ? r("div", {
          staticClass: "ep-legend--value",
          class: [t.legendClass, {
            "ep-hidden": t.shouldHideLegendValue
          }],
          style: {
            fontSize: t.fontSize,
            color: t.fontColor
          }
        }, [r("counter", {
          attrs: {
            value: t.legendVal,
            animation: t.animation,
            loading: t.loading
          },
          scopedSlots: t._u([{
            key: "default",
            fn: function (e) {
              var n = e.counterTick;
              return [t.$scopedSlots.default ? t._t("default", null, {
                counterTick: n
              }) : t._e(), t.legendFormatter ? r("span", [t.isHTML ? r("span", {
                domProps: {
                  innerHTML: t._s(t.legendFormatter(n))
                }
              }) : r("span", [t._v(t._s(t.legendFormatter(n)))])]) : t.$scopedSlots.default ? t._e() : r("span", [t._v(t._s(n.currentFormattedValue))])];
            }
          }], null, !0)
        }), t._t("legend-value")], 2) : t._e(), t._t("legend-caption")], 2)], 2)]);
      },
          i = [];

      r("d81d"), r("d3b7"), r("25f0"), r("498a"), r("a4d3"), r("4de4"), r("4160"), r("e439"), r("dbb4"), r("b64b"), r("159b");

      function o(t, e, r) {
        return e in t ? Object.defineProperty(t, e, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : t[e] = r, t;
      }

      function a(t, e) {
        var r = Object.keys(t);

        if (Object.getOwnPropertySymbols) {
          var n = Object.getOwnPropertySymbols(t);
          e && (n = n.filter(function (e) {
            return Object.getOwnPropertyDescriptor(t, e).enumerable;
          })), r.push.apply(r, n);
        }

        return r;
      }

      function s(t) {
        for (var e = 1; e < arguments.length; e++) {
          var r = null != arguments[e] ? arguments[e] : {};
          e % 2 ? a(Object(r), !0).forEach(function (e) {
            o(t, e, r[e]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : a(Object(r)).forEach(function (e) {
            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
          });
        }

        return t;
      }

      r("a9e3"), r("9129");

      var c = function (t) {
        return void 0 !== t && "" !== t && null !== t && !Number.isNaN(parseFloat(t));
      },
          u = function (t) {
        return !!c(t) && parseFloat(t);
      };

      r("a623"), r("caad"), r("45fc"), r("ac1f"), r("5319"), r("1276"), r("2ca0"), r("e01a"), r("d28b"), r("e260"), r("3ca3"), r("ddb0");

      function f(t) {
        return f = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function (t) {
          return typeof t;
        } : function (t) {
          return t && "function" === typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
        }, f(t);
      }

      var l = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "transparent";
        return {
          type: [String, Object],
          required: !1,
          default: t,
          validator: function (t) {
            return !("string" !== typeof t || !t) || !("object" !== f(t) || !t.colors) && t.colors.every(function (t) {
              return t.color && t.offset;
            });
          }
        };
      },
          p = {
        data: {
          type: Array,
          required: !1,
          default: function () {
            return [];
          }
        },
        progress: {
          type: Number,
          require: !0,
          validator: function (t) {
            return t >= -100 && t <= 100;
          }
        },
        legendValue: {
          type: [Number, String],
          required: !1,
          validator: function (t) {
            return !Number.isNaN(parseFloat(t.toString().replace(",", ".")));
          }
        },
        size: {
          type: Number,
          required: !1,
          default: 200,
          validator: function (t) {
            return t >= 0;
          }
        },
        thickness: {
          type: [Number, String],
          required: !1,
          default: "5%",
          validator: function (t) {
            return parseFloat(t) >= 0;
          }
        },
        emptyThickness: {
          type: [Number, String],
          required: !1,
          default: "5%",
          validator: function (t) {
            return parseFloat(t) >= 0;
          }
        },
        line: {
          type: String,
          required: !1,
          default: "round",
          validator: function (t) {
            return ["round", "butt", "square"].includes(t);
          }
        },
        lineMode: {
          type: String,
          required: !1,
          default: "normal",
          validator: function (t) {
            var e = t.split(" "),
                r = ["normal", "out", "out-over", "in", "in-over", "top", "bottom"].includes(e[0]),
                n = !e[1] || !Number.isNaN(parseFloat(e[1]));
            return r && n;
          }
        },
        color: l("#3f79ff"),
        emptyColor: l("#e6e9f0"),
        colorFill: l(),
        emptyColorFill: l(),
        fontSize: {
          type: String,
          required: !1
        },
        fontColor: {
          type: String,
          required: !1
        },
        animation: {
          type: String,
          required: !1,
          default: "default 1000 400",
          validator: function (t) {
            var e = t.split(" "),
                r = ["default", "rs", "loop", "reverse", "bounce"].some(function (t) {
              return t === e[0];
            }),
                n = !e[1] || parseFloat(e[1]) >= 0,
                i = !e[2] || parseFloat(e[2]) >= 0;
            return r && n && i;
          }
        },
        legend: {
          type: Boolean,
          required: !1,
          default: !0
        },
        legendClass: {
          type: String,
          required: !1
        },
        angle: {
          type: [String, Number],
          required: !1,
          default: -90
        },
        loading: {
          type: Boolean,
          required: !1,
          default: !1
        },
        noData: {
          type: Boolean,
          required: !1,
          default: !1
        },
        dash: {
          type: String,
          required: !1,
          default: "",
          validator: function (t) {
            if (t.startsWith("strict")) {
              var e = t.split(" ");
              return parseFloat(e[1]) >= 0 && parseFloat(e[2]) >= 0;
            }

            return !0;
          }
        },
        half: {
          type: Boolean,
          required: !1,
          default: !1
        },
        gap: {
          type: Number,
          required: !1,
          default: 0,
          validator: function (t) {
            return !Number.isNaN(parseInt(t, 10));
          }
        },
        determinate: {
          type: Boolean,
          required: !1,
          default: !1
        },
        dot: {
          type: [String, Number, Object],
          required: !1,
          default: 0,
          validator: function (t) {
            return "object" === f(t) ? void 0 !== t.size && !Number.isNaN(parseFloat(t.size)) : !Number.isNaN(parseFloat(t));
          }
        },
        reverse: {
          type: Boolean,
          required: !1,
          default: !1
        }
      },
          d = {};

      for (var h in p) d[h] = {
        type: p[h].type,
        default: p[h].default
      };

      var v = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("div", {
          staticClass: "ep-svg-container",
          class: {
            "ep-reverse": t.reverse
          }
        }, [r("svg", {
          staticClass: "ep-svg",
          attrs: {
            height: t.size,
            width: t.size,
            xmlns: "http://www.w3.org/2000/svg"
          }
        }, [r("g", {
          staticClass: "ep-circle--container"
        }, [r("defs", [t.isColorGradient ? r("gradient", {
          attrs: {
            color: t.color,
            type: "progress",
            id: t._uid
          }
        }) : t._e(), t.isColorFillGradient ? r("gradient", {
          attrs: {
            color: t.colorFill,
            type: "progress-fill",
            id: t._uid
          }
        }) : t._e(), t.isEmptyColorGradient ? r("gradient", {
          attrs: {
            color: t.emptyColor,
            type: "empty",
            id: t._uid
          }
        }) : t._e(), t.isEmptyColorFillGradient ? r("gradient", {
          attrs: {
            color: t.emptyColorFill,
            type: "empty-fill",
            id: t._uid
          }
        }) : t._e()], 1), r(t.circleType, t._b({
          tag: "component",
          attrs: {
            id: t._uid
          }
        }, "component", t.$props, !1))], 1)]), t.dot ? r("circle-dot", t._b({
          attrs: {
            id: t._uid
          }
        }, "circle-dot", t.$props, !1)) : t._e()], 1);
      },
          m = [],
          g = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r(t.gradientComponent, {
          tag: "component",
          attrs: {
            id: "ep-" + t.type + "-gradient-" + t.id,
            x1: "0%",
            y1: "100%",
            x2: "0%",
            y2: "0%",
            "area-hidden": "true"
          }
        }, t._l(t.color.colors, function (e, n) {
          return r("stop", {
            key: n,
            attrs: {
              offset: e.offset + "%",
              "stop-color": "" + e.color,
              "stop-opacity": "" + (t.isValidNumber(e.opacity) ? e.opacity : 1)
            }
          });
        }), 1);
      },
          y = [],
          b = {
        name: "Gradient",
        props: {
          color: {
            type: Object,
            required: !0
          },
          type: {
            type: String,
            required: !0
          },
          id: {
            type: Number,
            required: !0
          }
        },
        methods: {
          isValidNumber: function (t) {
            return c(t);
          }
        },
        computed: {
          gradientComponent: function () {
            return this.color.radial ? "radialGradient" : "linearGradient";
          }
        }
      },
          x = b;

      function k(t, e, r, n, i, o, a, s) {
        var c,
            u = "function" === typeof t ? t.options : t;
        if (e && (u.render = e, u.staticRenderFns = r, u._compiled = !0), n && (u.functional = !0), o && (u._scopeId = "data-v-" + o), a ? (c = function (t) {
          t = t || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext, t || "undefined" === typeof __VUE_SSR_CONTEXT__ || (t = __VUE_SSR_CONTEXT__), i && i.call(this, t), t && t._registeredComponents && t._registeredComponents.add(a);
        }, u._ssrRegister = c) : i && (c = s ? function () {
          i.call(this, (u.functional ? this.parent : this).$root.$options.shadowRoot);
        } : i), c) if (u.functional) {
          u._injectStyles = c;
          var f = u.render;

          u.render = function (t, e) {
            return c.call(e), f(t, e);
          };
        } else {
          var l = u.beforeCreate;
          u.beforeCreate = l ? [].concat(l, c) : [c];
        }
        return {
          exports: t,
          options: u
        };
      }

      var w = k(x, g, y, !1, null, null, null),
          _ = w.exports,
          S = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("g", {
          staticClass: "ep-half-circle",
          style: {
            transitionDuration: t.styles.transitionDuration,
            transitionTimingFunction: t.styles.transitionTimingFunction,
            transform: "rotate(" + t.computedAngle + "deg)"
          }
        }, [r("path", {
          staticClass: "ep-half-circle--empty",
          class: {
            "ep-circle--nodata": !t.dataIsAvailable
          },
          style: {
            transitionDuration: t.animationDuration,
            transitionTimingFunction: t.styles.transitionTimingFunction
          },
          attrs: {
            "stroke-width": t.computedEmptyThickness,
            fill: t.computedColorFill,
            stroke: t.computedEmptyColor,
            d: t.emptyPath,
            "stroke-linecap": t.line,
            "stroke-dasharray": t.emptyDasharray
          }
        }), r("fade-in-transition", [t.isLoading ? r("g", [r("g", {
          style: {
            opacity: "" + (t.loading ? 1 : .45)
          }
        }, [r("path", {
          staticClass: "ep-half-circle--loading animation__loading",
          style: {
            transitionTimingFunction: t.styles.transitionTimingFunction,
            transformOrigin: t.styles.transformOrigin,
            "--ep-loading-stroke-offset": t.styles["--ep-loading-stroke-offset"],
            "--ep-circumference": t.styles["--ep-circumference"],
            "--ep-negative-circumference": t.styles["--ep-negative-circumference"]
          },
          attrs: {
            "stroke-width": t.computedThickness,
            d: t.path,
            fill: t.computedColorFill,
            stroke: t.computedColor,
            "stroke-dasharray": t.circumference,
            "stroke-linecap": t.line
          }
        })])]) : t._e()]), r("path", {
          staticClass: "ep-half-circle--progress ep-circle--progress",
          class: t.animationClass,
          style: t.styles,
          attrs: {
            "stroke-width": t.computedThickness,
            d: t.path,
            fill: t.computedColorFill,
            stroke: t.computedColor,
            "stroke-dasharray": t.circumference,
            "stroke-linecap": t.line
          }
        })], 1);
      },
          E = [];

      r("99af"), r("13d5"), r("e6cf"), r("2532"), r("4795"), r("96cf");

      function T(t, e, r, n, i, o, a) {
        try {
          var s = t[o](a),
              c = s.value;
        } catch (u) {
          return void r(u);
        }

        s.done ? e(c) : Promise.resolve(c).then(n, i);
      }

      function O(t) {
        return function () {
          var e = this,
              r = arguments;
          return new Promise(function (n, i) {
            var o = t.apply(e, r);

            function a(t) {
              T(o, n, i, a, s, "next", t);
            }

            function s(t) {
              T(o, n, i, a, s, "throw", t);
            }

            a(void 0);
          });
        };
      }

      var C = function (t) {
        var e = t.trim().split(" ");
        return {
          mode: e[0],
          offset: u(e[1]) || 0
        };
      },
          j = function (t) {
        var e = t.trim().split(" ");
        return {
          type: e[0],
          duration: c(e[1]) ? parseFloat(e[1]) : 1e3,
          delay: c(e[2]) ? parseFloat(e[2]) : 400
        };
      },
          A = function (t) {
        var e = t.trim().split(" "),
            r = "strict" === e[0];
        return r ? {
          count: parseInt(e[1], 10),
          spacing: parseFloat(e[2])
        } : t;
      },
          P = function (t) {
        var e = 0,
            r = "white",
            n = {};

        if ("object" !== f(t)) {
          var i = t.toString().trim().split(" ");
          e = c(i[0]) ? i[0] : 0, r = i[1] || "white";
        } else e = t.size || 0, n = t;

        return s(s({}, n), {}, {
          size: e,
          color: r
        });
      },
          R = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 400;
        return new Promise(function (e) {
          return setTimeout(function () {
            return e();
          }, t);
        });
      },
          F = {
        name: "CircleMixin",
        props: s(s({}, d), {}, {
          multiple: {
            type: Boolean,
            required: !0
          },
          id: {
            type: Number,
            required: !0
          },
          index: {
            type: Number,
            required: !0
          },
          globalThickness: {
            type: [Number, String],
            required: !1,
            default: "5%"
          },
          globalGap: {
            type: Number,
            required: !1
          },
          globalDot: {
            type: [Number, String, Object],
            required: !1
          }
        }),
        data: function () {
          return {
            isInitialized: !1
          };
        },
        computed: {
          computedProgress: function () {
            return parseFloat(this.progress || 0);
          },
          progressOffset: function () {
            var t = this.circumference - this.computedProgress / 100 * this.circumference;
            return Math.abs(this.circumference - t) < 1 ? this.circumference - .5 : t;
          },
          radius: function () {
            var t = this.parsedLineMode.offset;
            if (this.multiple) return this.baseRadius - this.previousCirclesThickness;

            switch (this.parsedLineMode.mode) {
              case "normal":
                return this.normalLineModeRadius;

              case "in":
                return this.emptyRadius - (this.computedEmptyThickness / 2 + this.computedThickness / 2 + t);

              case "out-over":
                return this.computedEmptyThickness <= this.computedThickness ? this.baseRadius : this.emptyRadius - this.computedEmptyThickness / 2 + this.computedThickness / 2;

              case "bottom":
                return this.emptyRadius - this.computedEmptyThickness / 2;

              case "top":
                return this.emptyRadius + this.computedEmptyThickness / 2;

              default:
                return this.baseRadius;
            }
          },
          emptyRadius: function () {
            var t = this.parsedLineMode.offset;
            if (this.multiple) return this.baseRadius - this.previousCirclesThickness;

            switch (this.parsedLineMode.mode) {
              case "normal":
                return this.normalLineModeRadius;

              case "in":
                var e = this.computedThickness / 2 + this.computedEmptyThickness + t;
                return this.dotSize / 2 > e ? this.emptyBaseRadius - (this.dotSize / 2 - e) : this.emptyBaseRadius;

              case "in-over":
                return this.dotToThicknessDifference > 0 ? this.emptyBaseRadius - this.dotToThicknessDifference / 2 : this.emptyBaseRadius;

              case "out":
                return this.baseRadius - (this.computedThickness / 2 + this.computedEmptyThickness / 2 + t);

              case "out-over":
                return this.computedEmptyThickness <= this.computedThickness ? this.baseRadius - this.computedThickness / 2 + this.computedEmptyThickness / 2 : this.emptyBaseRadius;

              case "bottom":
                return this.computedEmptyThickness < this.thicknessWithDot / 2 ? this.emptyBaseRadius - (this.thicknessWithDot / 2 - this.computedEmptyThickness) : this.emptyBaseRadius;

              case "top":
                return this.emptyBaseRadius - this.thicknessWithDot / 2;

              default:
                return this.emptyBaseRadius;
            }
          },
          baseRadius: function () {
            return this.size / 2 - this.thicknessWithDot / 2;
          },
          emptyBaseRadius: function () {
            return this.size / 2 - this.computedEmptyThickness / 2;
          },
          normalLineModeRadius: function () {
            return this.thicknessWithDot < this.computedEmptyThickness ? this.emptyBaseRadius : this.baseRadius;
          },
          parsedLineMode: function () {
            return C(this.lineMode);
          },
          parsedAnimation: function () {
            return j(this.animation);
          },
          parsedDash: function () {
            return A(this.dash);
          },
          dataIsAvailable: function () {
            return c(this.computedProgress) && !this.noData;
          },
          animationClass: function () {
            return ["animation__".concat(!this.loading && this.dataIsAvailable && this.isInitialized ? this.parsedAnimation.type : "none")];
          },
          animationDuration: function () {
            return "".concat(this.parsedAnimation.duration, "ms");
          },
          computedColor: function () {
            return Array.isArray(this.color.colors) ? "url(#ep-progress-gradient-".concat(this.id, ")") : this.color;
          },
          computedEmptyColor: function () {
            return Array.isArray(this.emptyColor.colors) ? "url(#ep-empty-gradient-".concat(this.id, ")") : this.emptyColor;
          },
          computedColorFill: function () {
            return Array.isArray(this.colorFill.colors) ? "url(#ep-progress-fill-gradient-".concat(this.id, ")") : this.colorFill;
          },
          computedEmptyColorFill: function () {
            return Array.isArray(this.emptyColorFill.colors) ? "url(#ep-empty-fill-gradient-".concat(this.id, ")") : this.emptyColorFill;
          },
          computedThickness: function () {
            return this.calculateThickness(this.thickness.toString());
          },
          thicknessWithDot: function () {
            return this.computedThickness < this.dotSize ? this.dotSize : this.computedThickness;
          },
          computedGlobalThickness: function () {
            return this.calculateThickness(this.globalThickness);
          },
          computedEmptyThickness: function () {
            return this.calculateThickness(this.emptyThickness);
          },
          computedAngle: function () {
            return c(this.angle) ? this.angle : -90;
          },
          transformOrigin: function () {
            return "50% 50%";
          },
          emptyDasharray: function () {
            return this.parsedDash.count && this.parsedDash.spacing ? "".concat(2 * Math.PI * this.emptyRadius * this.getDashPercent(), ",\n              ").concat(2 * Math.PI * this.emptyRadius * this.getDashSpacingPercent()).trim() : this.parsedDash;
          },
          strokeDashOffset: function () {
            return this.dataIsAvailable && !this.loading && this.isInitialized ? this.progressOffset : this.circumference;
          },
          previousCirclesThickness: function () {
            if (0 === this.index) return 0;

            for (var t = c(this.gap) ? this.gap : this.globalGap, e = [], r = 0; r < this.index; r++) {
              var n = this.data[r],
                  i = n.dot ? this.calculateThickness(P(n.dot).size) : this.globalDotSize,
                  o = c(n.thickness) ? this.calculateThickness(n.thickness) : this.computedGlobalThickness,
                  a = c(n.gap) ? n.gap : this.globalGap,
                  s = Math.max(i, o);
              e.push(r > 0 ? s + a : s);
            }

            return e.reduce(function (t, e) {
              return t + e;
            }) + t;
          },
          parsedDot: function () {
            return P(this.dot);
          },
          dotSize: function () {
            return this.calculateThickness(this.parsedDot.size);
          },
          dotColor: function () {
            return this.parsedDot.color;
          },
          dotToThicknessDifference: function () {
            return this.dotSize - this.computedThickness;
          },
          globalDotSize: function () {
            return this.calculateThickness(P(this.globalDot).size);
          },
          styles: function () {
            return {
              transition: "".concat(this.animationDuration, ", opacity 0.3s"),
              strokeDashoffset: this.strokeDashOffset,
              transitionTimingFunction: "ease-in-out",
              transformOrigin: this.transformOrigin,
              opacity: this.loading || !this.dataIsAvailable ? 0 : 1,
              "--ep-circumference": this.circumference,
              "--ep-negative-circumference": this.getNegativeCircumference(),
              "--ep-double-circumference": this.getDoubleCircumference(),
              "--ep-stroke-offset": this.progressOffset,
              "--ep-loop-stroke-offset": this.getLoopOffset(),
              "--ep-bounce-out-stroke-offset": this.getBounceOutOffset(),
              "--ep-bounce-in-stroke-offset": this.getBounceInOffset(),
              "--ep-reverse-stroke-offset": this.getReverseOffset(),
              "--ep-loading-stroke-offset": .2 * this.circumference,
              "animation-duration": this.animationDuration
            };
          },
          isLoading: function () {
            return (this.determinate || this.loading) && this.dataIsAvailable;
          }
        },
        methods: {
          calculateThickness: function (t) {
            var e = parseFloat(t);

            switch (!0) {
              case t.toString().includes("%"):
                return e * this.size / 100;

              default:
                return e;
            }
          },
          getDashSpacingPercent: function () {
            return this.parsedDash.spacing / this.parsedDash.count;
          },
          getDashPercent: function () {
            return (1 - this.parsedDash.spacing) / this.parsedDash.count;
          },
          getNegativeCircumference: function () {
            return -1 * this.circumference;
          },
          getDoubleCircumference: function () {
            return 2 * this.circumference;
          },
          getLoopOffset: function () {
            return this.getNegativeCircumference() - (this.circumference - this.progressOffset);
          },
          getReverseOffset: function () {
            return this.getDoubleCircumference() + this.progressOffset;
          },
          getBounceOutOffset: function () {
            return this.progressOffset < 100 ? 0 : this.progressOffset - 100;
          },
          getBounceInOffset: function () {
            return this.circumference - this.progressOffset < 100 ? this.progressOffset : this.progressOffset + 100;
          }
        },
        mounted: function () {
          var t = this;
          return O(regeneratorRuntime.mark(function e() {
            return regeneratorRuntime.wrap(function (e) {
              while (1) switch (e.prev = e.next) {
                case 0:
                  if (t.loading) {
                    e.next = 3;
                    break;
                  }

                  return e.next = 3, R(t.parsedAnimation.delay);

                case 3:
                  t.isInitialized = !0;

                case 4:
                case "end":
                  return e.stop();
              }
            }, e);
          }))();
        }
      },
          I = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("transition", {
          attrs: {
            mode: "out-in",
            name: "fade",
            appear: ""
          }
        }, [t._t("default")], 2);
      },
          N = [],
          D = {
        name: "FadeInTransition"
      },
          L = D,
          M = (r("53c8"), k(L, I, N, !1, null, "873ef638", null)),
          z = M.exports,
          q = {
        name: "HalfCircleProgress",
        components: {
          FadeInTransition: z
        },
        mixins: [F],
        computed: {
          circumference: function () {
            return 2 * this.radius * Math.PI / 2;
          },
          path: function () {
            return " M ".concat(this.position, ", ").concat(this.size / 2, " a ").concat(this.radius, ",").concat(this.radius, " 0 1,1 ").concat(2 * this.radius, ",0");
          },
          emptyPath: function () {
            return " M ".concat(this.emptyPosition, ", ").concat(this.size / 2, " a ").concat(this.emptyRadius, ",").concat(this.emptyRadius, " 0 1,1 ").concat(2 * this.emptyRadius, ",0");
          },
          position: function () {
            return this.size / 2 - this.radius;
          },
          emptyPosition: function () {
            return this.size / 2 - this.emptyRadius;
          }
        }
      },
          V = q,
          G = (r("054f"), k(V, S, E, !1, null, "5b37ebc3", null)),
          $ = G.exports,
          B = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("g", {
          staticClass: "ep-circle",
          style: {
            transitionDuration: t.styles.transitionDuration,
            transitionTimingFunction: t.styles.transitionTimingFunction,
            transform: "rotate(" + t.computedAngle + "deg)"
          }
        }, [r("circle", {
          staticClass: "ep-circle--empty",
          class: {
            "ep-circle--nodata": !t.dataIsAvailable
          },
          style: {
            transitionDuration: t.animationDuration,
            transitionTimingFunction: t.styles.transitionTimingFunction
          },
          attrs: {
            r: t.emptyRadius,
            cx: t.position,
            cy: t.position,
            stroke: t.computedEmptyColor,
            "stroke-dasharray": t.emptyDasharray,
            fill: t.computedEmptyColorFill,
            "stroke-width": t.computedEmptyThickness
          }
        }), r("fade-in-transition", [t.isLoading ? r("g", [r("g", {
          staticClass: "ep-circle--loading__container",
          style: {
            opacity: "" + (t.loading ? 1 : .45)
          }
        }, [r("circle", {
          staticClass: "ep-circle--loading animation__loading",
          style: {
            transitionTimingFunction: t.styles.transitionTimingFunction,
            transformOrigin: t.styles.transformOrigin,
            "--ep-loading-stroke-offset": t.styles["--ep-loading-stroke-offset"],
            "--ep-circumference": t.styles["--ep-circumference"]
          },
          attrs: {
            r: t.radius,
            cx: t.position,
            cy: t.position,
            fill: "transparent",
            stroke: t.computedColor,
            "stroke-width": t.computedThickness,
            "stroke-linecap": t.line,
            "stroke-dasharray": t.circumference
          }
        })])]) : t._e()]), r("circle", {
          staticClass: "ep-circle--progress",
          class: t.animationClass,
          style: t.styles,
          attrs: {
            r: t.radius,
            cx: t.position,
            cy: t.position,
            fill: t.computedColorFill,
            stroke: t.computedColor,
            "stroke-width": t.computedThickness,
            "stroke-linecap": t.line,
            "stroke-dasharray": t.circumference
          }
        })], 1);
      },
          U = [],
          W = {
        name: "CircleProgress",
        components: {
          FadeInTransition: z
        },
        mixins: [F],
        computed: {
          position: function () {
            return this.size / 2;
          },
          circumference: function () {
            return 2 * this.radius * Math.PI;
          }
        }
      },
          H = W,
          X = (r("273a"), k(H, B, U, !1, null, "7d0a0fbb", null)),
          Y = X.exports,
          K = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("div", {
          staticClass: "ep-circle--progress__dot-container",
          class: t.dotContainerClasses,
          style: t.dotContainerStyle
        }, [r("div", [r("span", {
          staticClass: "ep-circle--progress__dot",
          class: {
            "ep-hidden": t.isHidden
          },
          style: t.dotStyle
        })])]);
      },
          J = [],
          Q = {
        props: s({}, d),
        name: "CircleDot",
        mixins: [F],
        computed: {
          dotContainerSize: function () {
            return 2 * this.radius + this.dotSize;
          },
          dotContainerRotation: function () {
            return this.isInitialized && !this.loading && this.dataIsAvailable ? this.dotEnd : this.dotStart;
          },
          dotContainerFullRotationDeg: function () {
            return this.half ? 180 : 360;
          },
          dotContainerStyle: function () {
            return s({
              width: "".concat(this.dotContainerSize, "px"),
              height: "".concat(this.dotContainerSize, "px"),
              transform: "rotate(".concat(this.dotContainerRotation, "deg)"),
              transitionDuration: this.loading || !this.dataIsAvailable ? "0s" : this.animationDuration,
              transitionTimingFunction: "ease-in-out",
              "animation-duration": this.animationDuration,
              "--ep-dot-start": "".concat(this.dotStart, "deg"),
              "--ep-dot-end": "".concat(this.dotEnd, "deg"),
              "--ep-dot-360": "".concat(this.dotStart + this.dotContainerFullRotationDeg, "deg")
            }, this.dotContainerAnimationStyle);
          },
          dotContainerClasses: function () {
            return [this.animationClass, !this.half || "ep-half-circle-progress__dot"];
          },
          dotContainerAnimationStyle: function () {
            var t = {
              loop: {
                opacity: this.half ? 0 : 1,
                "--ep-dot-loop-end": "".concat(this.dotStart + this.dotContainerFullRotationDeg + this.dotEnd, "deg")
              },
              bounce: {
                opacity: 0,
                "animation-duration": "".concat(this.parsedAnimation.duration + 500, "ms")
              }
            };
            return t[this.parsedAnimation.type];
          },
          dotStyle: function () {
            return s(s({
              borderRadius: "".concat(this.dotSize / 2, "px"),
              width: "".concat(this.dotSize, "px"),
              backgroundColor: this.dotColor
            }, this.dot), {}, {
              transitionDuration: this.loading || !this.dataIsAvailable ? "0s" : this.animationDuration,
              height: "".concat(this.dotSize, "px")
            });
          },
          dotStart: function () {
            return this.half ? this.angle - 90 : this.angle + 90;
          },
          dotEnd: function () {
            var t = this.calculateProgress();
            return this.dotStart + t * this.dotContainerFullRotationDeg / 100;
          },
          isHidden: function () {
            return !this.isInitialized || this.loading || !this.dataIsAvailable;
          }
        },
        methods: {
          calculateProgress: function () {
            return this.half && this.computedProgress < 0 ? this.computedProgress - 100 : this.computedProgress;
          }
        }
      },
          Z = Q,
          tt = (r("2474"), k(Z, K, J, !1, null, "38ca167f", null)),
          et = tt.exports,
          rt = {
        name: "EpCircleContainer",
        components: {
          CircleDot: et,
          CircleProgress: Y,
          HalfCircleProgress: $,
          Gradient: _
        },
        props: s(s({}, d), {}, {
          index: {
            type: Number,
            required: !0
          },
          multiple: {
            type: Boolean,
            required: !0
          },
          globalThickness: {
            type: [Number, String],
            required: !1,
            default: "5%"
          },
          globalGap: {
            type: Number,
            required: !1
          },
          globalDot: {
            type: [Number, String, Object],
            required: !1
          }
        }),
        computed: {
          circleType: function () {
            return this.half ? "half-circle-progress" : "circle-progress";
          },
          isColorGradient: function () {
            return Array.isArray(this.color.colors);
          },
          isColorFillGradient: function () {
            return Array.isArray(this.colorFill.colors);
          },
          isEmptyColorGradient: function () {
            return Array.isArray(this.emptyColor.colors);
          },
          isEmptyColorFillGradient: function () {
            return Array.isArray(this.emptyColorFill.colors);
          }
        }
      },
          nt = rt,
          it = (r("c49e"), k(nt, v, m, !1, null, null, null)),
          ot = it.exports,
          at = function () {
        var t = this,
            e = t.$createElement,
            r = t._self._c || e;
        return r("span", {
          staticClass: "ep-legend--value__counter"
        }, [t._t("default", null, {
          counterTick: t.counterProps
        }), t.$scopedSlots.default ? t._e() : r("span", [t._v(t._s(t.formattedValue))])], 2);
      },
          st = [],
          ct = (r("b680"), r("841c"), {
        name: "Counter",
        props: {
          value: {
            type: [Number, String],
            required: !0
          },
          animation: {
            type: String,
            required: !0
          },
          loading: {
            type: Boolean,
            required: !0
          }
        },
        data: function () {
          return {
            start: 0,
            startTime: 0,
            currentValue: 0,
            raf: null,
            previousCountStepValue: 0
          };
        },
        watch: {
          value: function () {
            this.start = this.currentValue, this.reset(), this.raf = requestAnimationFrame(this.count);
          }
        },
        computed: {
          end: function () {
            return parseFloat(this.value.toString().replace(",", "."));
          },
          difference: function () {
            return Math.abs(this.end - this.start);
          },
          oneStepDifference: function () {
            return 0 === this.duration ? this.difference : this.difference / this.duration;
          },
          delimiter: function () {
            return this.value.toString().search(",") >= 0 ? "," : ".";
          },
          formattedValue: function () {
            return this.currentValue.toFixed(this.countDecimals()).replace(".", this.delimiter);
          },
          delay: function () {
            return j(this.animation).delay;
          },
          duration: function () {
            return j(this.animation).duration;
          },
          counterProps: function () {
            return {
              currentValue: parseFloat(this.formattedValue),
              currentFormattedValue: this.formattedValue,
              currentRawValue: this.currentValue,
              duration: this.duration,
              previousCountStepValue: this.previousCountStepValue,
              start: this.start,
              end: this.end,
              difference: this.difference,
              oneStepDifference: this.oneStepDifference,
              startTime: this.startTime,
              elapsed: 0
            };
          }
        },
        methods: {
          countDecimals: function () {
            return this.value % 1 === 0 ? 0 : this.value.toString().split(this.delimiter)[1].length;
          },
          count: function (t) {
            this.startTime || (this.startTime = t);
            var e = t - this.startTime;
            this.end >= this.start ? this.countUp(e) : this.countDown(e), e < this.duration && this.difference > .1 && (cancelAnimationFrame(this.raf), this.raf = requestAnimationFrame(this.count)), e >= this.duration && (this.currentValue = this.end, this.reset());
          },
          countDown: function (t) {
            var e = Math.min(this.oneStepDifference * (t || 1), this.difference);
            this.currentValue -= e - this.previousCountStepValue, this.previousCountStepValue = e;
          },
          countUp: function (t) {
            var e = Math.min(this.oneStepDifference * (t || 1), this.difference);
            this.currentValue += e - this.previousCountStepValue, this.previousCountStepValue = e;
          },
          reset: function () {
            this.startTime = 0, this.previousCountStepValue = 0, cancelAnimationFrame(this.raf);
          }
        },
        mounted: function () {
          var t = this;
          this.loading ? this.raf = requestAnimationFrame(this.count) : setTimeout(function () {
            t.raf = requestAnimationFrame(t.count);
          }, this.delay);
        }
      }),
          ut = ct,
          ft = k(ut, at, st, !1, null, null, null),
          lt = ft.exports,
          pt = {
        name: "VueEllipseProgress",
        components: {
          Counter: lt,
          CircleContainer: ot
        },
        props: s(s({}, p), {}, {
          legendFormatter: {
            type: Function,
            required: !1
          }
        }),
        data: function () {
          return {
            counterTick: {}
          };
        },
        computed: {
          legendVal: function () {
            return this.loading || this.noData ? 0 : this.legendValue ? this.legendValue : u(this.progress) || 0;
          },
          shouldHideLegendValue: function () {
            return !this.isDataAvailable || this.loading;
          },
          isDataAvailable: function () {
            return c(this.progress) && !this.noData;
          },
          isMultiple: function () {
            return this.data.length > 1;
          },
          isHTML: function () {
            return /<[a-z/][\s\S]*>/i.test(this.legendFormatter({
              currentValue: 0
            }).toString().trim());
          },
          circlesData: function () {
            var t = this;
            return this.isMultiple ? this.data.map(function (e) {
              return s(s(s({}, t.$props), e), {}, {
                emptyThickness: c(e.thickness) ? e.thickness : t.$props.thickness
              });
            }) : [this.$props];
          }
        }
      },
          dt = pt,
          ht = (r("01f3"), k(dt, n, i, !1, null, "59d6a78d", null));

      e["a"] = ht.exports;
    },
    "2ca0": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("06cf").f,
          o = r("50c4"),
          a = r("5a34"),
          s = r("1d80"),
          c = r("ab13"),
          u = r("c430"),
          f = "".startsWith,
          l = Math.min,
          p = c("startsWith"),
          d = !u && !p && !!function () {
        var t = i(String.prototype, "startsWith");
        return t && !t.writable;
      }();
      n({
        target: "String",
        proto: !0,
        forced: !d && !p
      }, {
        startsWith: function (t) {
          var e = String(s(this));
          a(t);
          var r = o(l(arguments.length > 1 ? arguments[1] : void 0, e.length)),
              n = String(t);
          return f ? f.call(e, n, r) : e.slice(r, r + n.length) === n;
        }
      });
    },
    "2cf4": function (t, e, r) {
      var n,
          i,
          o,
          a = r("da84"),
          s = r("d039"),
          c = r("c6b6"),
          u = r("0366"),
          f = r("1be4"),
          l = r("cc12"),
          p = r("1cdc"),
          d = a.location,
          h = a.setImmediate,
          v = a.clearImmediate,
          m = a.process,
          g = a.MessageChannel,
          y = a.Dispatch,
          b = 0,
          x = {},
          k = "onreadystatechange",
          w = function (t) {
        if (x.hasOwnProperty(t)) {
          var e = x[t];
          delete x[t], e();
        }
      },
          _ = function (t) {
        return function () {
          w(t);
        };
      },
          S = function (t) {
        w(t.data);
      },
          E = function (t) {
        a.postMessage(t + "", d.protocol + "//" + d.host);
      };

      h && v || (h = function (t) {
        var e = [],
            r = 1;

        while (arguments.length > r) e.push(arguments[r++]);

        return x[++b] = function () {
          ("function" == typeof t ? t : Function(t)).apply(void 0, e);
        }, n(b), b;
      }, v = function (t) {
        delete x[t];
      }, "process" == c(m) ? n = function (t) {
        m.nextTick(_(t));
      } : y && y.now ? n = function (t) {
        y.now(_(t));
      } : g && !p ? (i = new g(), o = i.port2, i.port1.onmessage = S, n = u(o.postMessage, o, 1)) : !a.addEventListener || "function" != typeof postMessage || a.importScripts || s(E) || "file:" === d.protocol ? n = k in l("script") ? function (t) {
        f.appendChild(l("script"))[k] = function () {
          f.removeChild(this), w(t);
        };
      } : function (t) {
        setTimeout(_(t), 0);
      } : (n = E, a.addEventListener("message", S, !1))), t.exports = {
        set: h,
        clear: v
      };
    },
    "2d00": function (t, e, r) {
      var n,
          i,
          o = r("da84"),
          a = r("342f"),
          s = o.process,
          c = s && s.versions,
          u = c && c.v8;
      u ? (n = u.split("."), i = n[0] + n[1]) : a && (n = a.match(/Edge\/(\d+)/), (!n || n[1] >= 74) && (n = a.match(/Chrome\/(\d+)/), n && (i = n[1]))), t.exports = i && +i;
    },
    "342f": function (t, e, r) {
      var n = r("d066");
      t.exports = n("navigator", "userAgent") || "";
    },
    "35a1": function (t, e, r) {
      var n = r("f5df"),
          i = r("3f8c"),
          o = r("b622"),
          a = o("iterator");

      t.exports = function (t) {
        if (void 0 != t) return t[a] || t["@@iterator"] || i[n(t)];
      };
    },
    "37e8": function (t, e, r) {
      var n = r("83ab"),
          i = r("9bf2"),
          o = r("825a"),
          a = r("df75");
      t.exports = n ? Object.defineProperties : function (t, e) {
        o(t);
        var r,
            n = a(e),
            s = n.length,
            c = 0;

        while (s > c) i.f(t, r = n[c++], e[r]);

        return t;
      };
    },
    "3bbe": function (t, e, r) {
      var n = r("861d");

      t.exports = function (t) {
        if (!n(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
        return t;
      };
    },
    "3ca3": function (t, e, r) {
      "use strict";

      var n = r("6547").charAt,
          i = r("69f3"),
          o = r("7dd0"),
          a = "String Iterator",
          s = i.set,
          c = i.getterFor(a);
      o(String, "String", function (t) {
        s(this, {
          type: a,
          string: String(t),
          index: 0
        });
      }, function () {
        var t,
            e = c(this),
            r = e.string,
            i = e.index;
        return i >= r.length ? {
          value: void 0,
          done: !0
        } : (t = n(r, i), e.index += t.length, {
          value: t,
          done: !1
        });
      });
    },
    "3f8c": function (t, e) {
      t.exports = {};
    },
    "403e": function (t, e, r) {
      var n = r("648b");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("3d3d86fd", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    },
    "408a": function (t, e, r) {
      var n = r("c6b6");

      t.exports = function (t) {
        if ("number" != typeof t && "Number" != n(t)) throw TypeError("Incorrect invocation");
        return +t;
      };
    },
    4160: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("17c2");
      n({
        target: "Array",
        proto: !0,
        forced: [].forEach != i
      }, {
        forEach: i
      });
    },
    "428f": function (t, e, r) {
      var n = r("da84");
      t.exports = n;
    },
    "44ad": function (t, e, r) {
      var n = r("d039"),
          i = r("c6b6"),
          o = "".split;
      t.exports = n(function () {
        return !Object("z").propertyIsEnumerable(0);
      }) ? function (t) {
        return "String" == i(t) ? o.call(t, "") : Object(t);
      } : Object;
    },
    "44d2": function (t, e, r) {
      var n = r("b622"),
          i = r("7c73"),
          o = r("9bf2"),
          a = n("unscopables"),
          s = Array.prototype;
      void 0 == s[a] && o.f(s, a, {
        configurable: !0,
        value: i(null)
      }), t.exports = function (t) {
        s[a][t] = !0;
      };
    },
    "44de": function (t, e, r) {
      var n = r("da84");

      t.exports = function (t, e) {
        var r = n.console;
        r && r.error && (1 === arguments.length ? r.error(t) : r.error(t, e));
      };
    },
    "44e7": function (t, e, r) {
      var n = r("861d"),
          i = r("c6b6"),
          o = r("b622"),
          a = o("match");

      t.exports = function (t) {
        var e;
        return n(t) && (void 0 !== (e = t[a]) ? !!e : "RegExp" == i(t));
      };
    },
    "45fc": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("b727").some,
          o = r("a640"),
          a = r("ae40"),
          s = o("some"),
          c = a("some");
      n({
        target: "Array",
        proto: !0,
        forced: !s || !c
      }, {
        some: function (t) {
          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    4795: function (t, e, r) {
      var n = r("23e7"),
          i = r("da84"),
          o = r("342f"),
          a = [].slice,
          s = /MSIE .\./.test(o),
          c = function (t) {
        return function (e, r) {
          var n = arguments.length > 2,
              i = n ? a.call(arguments, 2) : void 0;
          return t(n ? function () {
            ("function" == typeof e ? e : Function(e)).apply(this, i);
          } : e, r);
        };
      };

      n({
        global: !0,
        bind: !0,
        forced: s
      }, {
        setTimeout: c(i.setTimeout),
        setInterval: c(i.setInterval)
      });
    },
    4840: function (t, e, r) {
      var n = r("825a"),
          i = r("1c0b"),
          o = r("b622"),
          a = o("species");

      t.exports = function (t, e) {
        var r,
            o = n(t).constructor;
        return void 0 === o || void 0 == (r = n(o)[a]) ? e : i(r);
      };
    },
    4930: function (t, e, r) {
      var n = r("d039");
      t.exports = !!Object.getOwnPropertySymbols && !n(function () {
        return !String(Symbol());
      });
    },
    "498a": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("58a8").trim,
          o = r("c8d2");
      n({
        target: "String",
        proto: !0,
        forced: o("trim")
      }, {
        trim: function () {
          return i(this);
        }
      });
    },
    "499e": function (t, e, r) {
      "use strict";

      function n(t, e) {
        for (var r = [], n = {}, i = 0; i < e.length; i++) {
          var o = e[i],
              a = o[0],
              s = o[1],
              c = o[2],
              u = o[3],
              f = {
            id: t + ":" + i,
            css: s,
            media: c,
            sourceMap: u
          };
          n[a] ? n[a].parts.push(f) : r.push(n[a] = {
            id: a,
            parts: [f]
          });
        }

        return r;
      }

      r.r(e), r.d(e, "default", function () {
        return h;
      });
      var i = "undefined" !== typeof document;
      if ("undefined" !== typeof DEBUG && DEBUG && !i) throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");

      var o = {},
          a = i && (document.head || document.getElementsByTagName("head")[0]),
          s = null,
          c = 0,
          u = !1,
          f = function () {},
          l = null,
          p = "data-vue-ssr-id",
          d = "undefined" !== typeof navigator && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());

      function h(t, e, r, i) {
        u = r, l = i || {};
        var a = n(t, e);
        return v(a), function (e) {
          for (var r = [], i = 0; i < a.length; i++) {
            var s = a[i],
                c = o[s.id];
            c.refs--, r.push(c);
          }

          e ? (a = n(t, e), v(a)) : a = [];

          for (i = 0; i < r.length; i++) {
            c = r[i];

            if (0 === c.refs) {
              for (var u = 0; u < c.parts.length; u++) c.parts[u]();

              delete o[c.id];
            }
          }
        };
      }

      function v(t) {
        for (var e = 0; e < t.length; e++) {
          var r = t[e],
              n = o[r.id];

          if (n) {
            n.refs++;

            for (var i = 0; i < n.parts.length; i++) n.parts[i](r.parts[i]);

            for (; i < r.parts.length; i++) n.parts.push(g(r.parts[i]));

            n.parts.length > r.parts.length && (n.parts.length = r.parts.length);
          } else {
            var a = [];

            for (i = 0; i < r.parts.length; i++) a.push(g(r.parts[i]));

            o[r.id] = {
              id: r.id,
              refs: 1,
              parts: a
            };
          }
        }
      }

      function m() {
        var t = document.createElement("style");
        return t.type = "text/css", a.appendChild(t), t;
      }

      function g(t) {
        var e,
            r,
            n = document.querySelector("style[" + p + '~="' + t.id + '"]');

        if (n) {
          if (u) return f;
          n.parentNode.removeChild(n);
        }

        if (d) {
          var i = c++;
          n = s || (s = m()), e = b.bind(null, n, i, !1), r = b.bind(null, n, i, !0);
        } else n = m(), e = x.bind(null, n), r = function () {
          n.parentNode.removeChild(n);
        };

        return e(t), function (n) {
          if (n) {
            if (n.css === t.css && n.media === t.media && n.sourceMap === t.sourceMap) return;
            e(t = n);
          } else r();
        };
      }

      var y = function () {
        var t = [];
        return function (e, r) {
          return t[e] = r, t.filter(Boolean).join("\n");
        };
      }();

      function b(t, e, r, n) {
        var i = r ? "" : n.css;
        if (t.styleSheet) t.styleSheet.cssText = y(e, i);else {
          var o = document.createTextNode(i),
              a = t.childNodes;
          a[e] && t.removeChild(a[e]), a.length ? t.insertBefore(o, a[e]) : t.appendChild(o);
        }
      }

      function x(t, e) {
        var r = e.css,
            n = e.media,
            i = e.sourceMap;
        if (n && t.setAttribute("media", n), l.ssrId && t.setAttribute(p, e.id), i && (r += "\n/*# sourceURL=" + i.sources[0] + " */", r += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(i)))) + " */"), t.styleSheet) t.styleSheet.cssText = r;else {
          while (t.firstChild) t.removeChild(t.firstChild);

          t.appendChild(document.createTextNode(r));
        }
      }
    },
    "4d64": function (t, e, r) {
      var n = r("fc6a"),
          i = r("50c4"),
          o = r("23cb"),
          a = function (t) {
        return function (e, r, a) {
          var s,
              c = n(e),
              u = i(c.length),
              f = o(a, u);

          if (t && r != r) {
            while (u > f) if (s = c[f++], s != s) return !0;
          } else for (; u > f; f++) if ((t || f in c) && c[f] === r) return t || f || 0;

          return !t && -1;
        };
      };

      t.exports = {
        includes: a(!0),
        indexOf: a(!1)
      };
    },
    "4de4": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("b727").filter,
          o = r("1dde"),
          a = r("ae40"),
          s = o("filter"),
          c = a("filter");
      n({
        target: "Array",
        proto: !0,
        forced: !s || !c
      }, {
        filter: function (t) {
          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    "50c4": function (t, e, r) {
      var n = r("a691"),
          i = Math.min;

      t.exports = function (t) {
        return t > 0 ? i(n(t), 9007199254740991) : 0;
      };
    },
    5135: function (t, e) {
      var r = {}.hasOwnProperty;

      t.exports = function (t, e) {
        return r.call(t, e);
      };
    },
    5319: function (t, e, r) {
      "use strict";

      var n = r("d784"),
          i = r("825a"),
          o = r("7b0b"),
          a = r("50c4"),
          s = r("a691"),
          c = r("1d80"),
          u = r("8aa5"),
          f = r("14c3"),
          l = Math.max,
          p = Math.min,
          d = Math.floor,
          h = /\$([$&'`]|\d\d?|<[^>]*>)/g,
          v = /\$([$&'`]|\d\d?)/g,
          m = function (t) {
        return void 0 === t ? t : String(t);
      };

      n("replace", 2, function (t, e, r, n) {
        var g = n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,
            y = n.REPLACE_KEEPS_$0,
            b = g ? "$" : "$0";
        return [function (r, n) {
          var i = c(this),
              o = void 0 == r ? void 0 : r[t];
          return void 0 !== o ? o.call(r, i, n) : e.call(String(i), r, n);
        }, function (t, n) {
          if (!g && y || "string" === typeof n && -1 === n.indexOf(b)) {
            var o = r(e, t, this, n);
            if (o.done) return o.value;
          }

          var c = i(t),
              d = String(this),
              h = "function" === typeof n;
          h || (n = String(n));
          var v = c.global;

          if (v) {
            var k = c.unicode;
            c.lastIndex = 0;
          }

          var w = [];

          while (1) {
            var _ = f(c, d);

            if (null === _) break;
            if (w.push(_), !v) break;
            var S = String(_[0]);
            "" === S && (c.lastIndex = u(d, a(c.lastIndex), k));
          }

          for (var E = "", T = 0, O = 0; O < w.length; O++) {
            _ = w[O];

            for (var C = String(_[0]), j = l(p(s(_.index), d.length), 0), A = [], P = 1; P < _.length; P++) A.push(m(_[P]));

            var R = _.groups;

            if (h) {
              var F = [C].concat(A, j, d);
              void 0 !== R && F.push(R);
              var I = String(n.apply(void 0, F));
            } else I = x(C, d, j, A, R, n);

            j >= T && (E += d.slice(T, j) + I, T = j + C.length);
          }

          return E + d.slice(T);
        }];

        function x(t, r, n, i, a, s) {
          var c = n + t.length,
              u = i.length,
              f = v;
          return void 0 !== a && (a = o(a), f = h), e.call(s, f, function (e, o) {
            var s;

            switch (o.charAt(0)) {
              case "$":
                return "$";

              case "&":
                return t;

              case "`":
                return r.slice(0, n);

              case "'":
                return r.slice(c);

              case "<":
                s = a[o.slice(1, -1)];
                break;

              default:
                var f = +o;
                if (0 === f) return e;

                if (f > u) {
                  var l = d(f / 10);
                  return 0 === l ? e : l <= u ? void 0 === i[l - 1] ? o.charAt(1) : i[l - 1] + o.charAt(1) : e;
                }

                s = i[f - 1];
            }

            return void 0 === s ? "" : s;
          });
        }
      });
    },
    "53c8": function (t, e, r) {
      "use strict";

      var n = r("403e"),
          i = r.n(n);
      i.a;
    },
    5692: function (t, e, r) {
      var n = r("c430"),
          i = r("c6cd");
      (t.exports = function (t, e) {
        return i[t] || (i[t] = void 0 !== e ? e : {});
      })("versions", []).push({
        version: "3.6.5",
        mode: n ? "pure" : "global",
        copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
      });
    },
    "56ef": function (t, e, r) {
      var n = r("d066"),
          i = r("241c"),
          o = r("7418"),
          a = r("825a");

      t.exports = n("Reflect", "ownKeys") || function (t) {
        var e = i.f(a(t)),
            r = o.f;
        return r ? e.concat(r(t)) : e;
      };
    },
    5899: function (t, e) {
      t.exports = "\t\n\v\f\r                　\u2028\u2029\ufeff";
    },
    "58a8": function (t, e, r) {
      var n = r("1d80"),
          i = r("5899"),
          o = "[" + i + "]",
          a = RegExp("^" + o + o + "*"),
          s = RegExp(o + o + "*$"),
          c = function (t) {
        return function (e) {
          var r = String(n(e));
          return 1 & t && (r = r.replace(a, "")), 2 & t && (r = r.replace(s, "")), r;
        };
      };

      t.exports = {
        start: c(1),
        end: c(2),
        trim: c(3)
      };
    },
    "5a34": function (t, e, r) {
      var n = r("44e7");

      t.exports = function (t) {
        if (n(t)) throw TypeError("The method doesn't accept regular expressions");
        return t;
      };
    },
    "5c6c": function (t, e) {
      t.exports = function (t, e) {
        return {
          enumerable: !(1 & t),
          configurable: !(2 & t),
          writable: !(4 & t),
          value: e
        };
      };
    },
    "648b": function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, ".fade-enter-active[data-v-873ef638],.fade-leave-active[data-v-873ef638]{-webkit-transition:opacity .3s;-o-transition:opacity .3s;transition:opacity .3s}.fade-enter[data-v-873ef638],.fade-leave-active[data-v-873ef638]{-webkit-transition:.3s;-o-transition:.3s;transition:.3s;opacity:0}", ""]), t.exports = e;
    },
    6547: function (t, e, r) {
      var n = r("a691"),
          i = r("1d80"),
          o = function (t) {
        return function (e, r) {
          var o,
              a,
              s = String(i(e)),
              c = n(r),
              u = s.length;
          return c < 0 || c >= u ? t ? "" : void 0 : (o = s.charCodeAt(c), o < 55296 || o > 56319 || c + 1 === u || (a = s.charCodeAt(c + 1)) < 56320 || a > 57343 ? t ? s.charAt(c) : o : t ? s.slice(c, c + 2) : a - 56320 + (o - 55296 << 10) + 65536);
        };
      };

      t.exports = {
        codeAt: o(!1),
        charAt: o(!0)
      };
    },
    "65f0": function (t, e, r) {
      var n = r("861d"),
          i = r("e8b5"),
          o = r("b622"),
          a = o("species");

      t.exports = function (t, e) {
        var r;
        return i(t) && (r = t.constructor, "function" != typeof r || r !== Array && !i(r.prototype) ? n(r) && (r = r[a], null === r && (r = void 0)) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);
      };
    },
    "69f3": function (t, e, r) {
      var n,
          i,
          o,
          a = r("7f9a"),
          s = r("da84"),
          c = r("861d"),
          u = r("9112"),
          f = r("5135"),
          l = r("f772"),
          p = r("d012"),
          d = s.WeakMap,
          h = function (t) {
        return o(t) ? i(t) : n(t, {});
      },
          v = function (t) {
        return function (e) {
          var r;
          if (!c(e) || (r = i(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
          return r;
        };
      };

      if (a) {
        var m = new d(),
            g = m.get,
            y = m.has,
            b = m.set;
        n = function (t, e) {
          return b.call(m, t, e), e;
        }, i = function (t) {
          return g.call(m, t) || {};
        }, o = function (t) {
          return y.call(m, t);
        };
      } else {
        var x = l("state");
        p[x] = !0, n = function (t, e) {
          return u(t, x, e), e;
        }, i = function (t) {
          return f(t, x) ? t[x] : {};
        }, o = function (t) {
          return f(t, x);
        };
      }

      t.exports = {
        set: n,
        get: i,
        has: o,
        enforce: h,
        getterFor: v
      };
    },
    "6d40": function (t, e, r) {
      var n = r("11ae");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("78b49b6e", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    },
    "6eeb": function (t, e, r) {
      var n = r("da84"),
          i = r("9112"),
          o = r("5135"),
          a = r("ce4e"),
          s = r("8925"),
          c = r("69f3"),
          u = c.get,
          f = c.enforce,
          l = String(String).split("String");
      (t.exports = function (t, e, r, s) {
        var c = !!s && !!s.unsafe,
            u = !!s && !!s.enumerable,
            p = !!s && !!s.noTargetGet;
        "function" == typeof r && ("string" != typeof e || o(r, "name") || i(r, "name", e), f(r).source = l.join("string" == typeof e ? e : "")), t !== n ? (c ? !p && t[e] && (u = !0) : delete t[e], u ? t[e] = r : i(t, e, r)) : u ? t[e] = r : a(e, r);
      })(Function.prototype, "toString", function () {
        return "function" == typeof this && u(this).source || s(this);
      });
    },
    7156: function (t, e, r) {
      var n = r("861d"),
          i = r("d2bb");

      t.exports = function (t, e, r) {
        var o, a;
        return i && "function" == typeof (o = e.constructor) && o !== r && n(a = o.prototype) && a !== r.prototype && i(t, a), t;
      };
    },
    7418: function (t, e) {
      e.f = Object.getOwnPropertySymbols;
    },
    "746f": function (t, e, r) {
      var n = r("428f"),
          i = r("5135"),
          o = r("e538"),
          a = r("9bf2").f;

      t.exports = function (t) {
        var e = n.Symbol || (n.Symbol = {});
        i(e, t) || a(e, t, {
          value: o.f(t)
        });
      };
    },
    7839: function (t, e) {
      t.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
    },
    "7b0b": function (t, e, r) {
      var n = r("1d80");

      t.exports = function (t) {
        return Object(n(t));
      };
    },
    "7c73": function (t, e, r) {
      var n,
          i = r("825a"),
          o = r("37e8"),
          a = r("7839"),
          s = r("d012"),
          c = r("1be4"),
          u = r("cc12"),
          f = r("f772"),
          l = ">",
          p = "<",
          d = "prototype",
          h = "script",
          v = f("IE_PROTO"),
          m = function () {},
          g = function (t) {
        return p + h + l + t + p + "/" + h + l;
      },
          y = function (t) {
        t.write(g("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
      },
          b = function () {
        var t,
            e = u("iframe"),
            r = "java" + h + ":";
        return e.style.display = "none", c.appendChild(e), e.src = String(r), t = e.contentWindow.document, t.open(), t.write(g("document.F=Object")), t.close(), t.F;
      },
          x = function () {
        try {
          n = document.domain && new ActiveXObject("htmlfile");
        } catch (e) {}

        x = n ? y(n) : b();
        var t = a.length;

        while (t--) delete x[d][a[t]];

        return x();
      };

      s[v] = !0, t.exports = Object.create || function (t, e) {
        var r;
        return null !== t ? (m[d] = i(t), r = new m(), m[d] = null, r[v] = t) : r = x(), void 0 === e ? r : o(r, e);
      };
    },
    "7dd0": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("9ed3"),
          o = r("e163"),
          a = r("d2bb"),
          s = r("d44e"),
          c = r("9112"),
          u = r("6eeb"),
          f = r("b622"),
          l = r("c430"),
          p = r("3f8c"),
          d = r("ae93"),
          h = d.IteratorPrototype,
          v = d.BUGGY_SAFARI_ITERATORS,
          m = f("iterator"),
          g = "keys",
          y = "values",
          b = "entries",
          x = function () {
        return this;
      };

      t.exports = function (t, e, r, f, d, k, w) {
        i(r, e, f);

        var _,
            S,
            E,
            T = function (t) {
          if (t === d && P) return P;
          if (!v && t in j) return j[t];

          switch (t) {
            case g:
              return function () {
                return new r(this, t);
              };

            case y:
              return function () {
                return new r(this, t);
              };

            case b:
              return function () {
                return new r(this, t);
              };
          }

          return function () {
            return new r(this);
          };
        },
            O = e + " Iterator",
            C = !1,
            j = t.prototype,
            A = j[m] || j["@@iterator"] || d && j[d],
            P = !v && A || T(d),
            R = "Array" == e && j.entries || A;

        if (R && (_ = o(R.call(new t())), h !== Object.prototype && _.next && (l || o(_) === h || (a ? a(_, h) : "function" != typeof _[m] && c(_, m, x)), s(_, O, !0, !0), l && (p[O] = x))), d == y && A && A.name !== y && (C = !0, P = function () {
          return A.call(this);
        }), l && !w || j[m] === P || c(j, m, P), p[e] = P, d) if (S = {
          values: T(y),
          keys: k ? P : T(g),
          entries: T(b)
        }, w) for (E in S) (v || C || !(E in j)) && u(j, E, S[E]);else n({
          target: e,
          proto: !0,
          forced: v || C
        }, S);
        return S;
      };
    },
    "7f9a": function (t, e, r) {
      var n = r("da84"),
          i = r("8925"),
          o = n.WeakMap;
      t.exports = "function" === typeof o && /native code/.test(i(o));
    },
    "825a": function (t, e, r) {
      var n = r("861d");

      t.exports = function (t) {
        if (!n(t)) throw TypeError(String(t) + " is not an object");
        return t;
      };
    },
    "83ab": function (t, e, r) {
      var n = r("d039");
      t.exports = !n(function () {
        return 7 != Object.defineProperty({}, 1, {
          get: function () {
            return 7;
          }
        })[1];
      });
    },
    8418: function (t, e, r) {
      "use strict";

      var n = r("c04e"),
          i = r("9bf2"),
          o = r("5c6c");

      t.exports = function (t, e, r) {
        var a = n(e);
        a in t ? i.f(t, a, o(0, r)) : t[a] = r;
      };
    },
    "841c": function (t, e, r) {
      "use strict";

      var n = r("d784"),
          i = r("825a"),
          o = r("1d80"),
          a = r("129f"),
          s = r("14c3");
      n("search", 1, function (t, e, r) {
        return [function (e) {
          var r = o(this),
              n = void 0 == e ? void 0 : e[t];
          return void 0 !== n ? n.call(e, r) : new RegExp(e)[t](String(r));
        }, function (t) {
          var n = r(e, t, this);
          if (n.done) return n.value;
          var o = i(t),
              c = String(this),
              u = o.lastIndex;
          a(u, 0) || (o.lastIndex = 0);
          var f = s(o, c);
          return a(o.lastIndex, u) || (o.lastIndex = u), null === f ? -1 : f.index;
        }];
      });
    },
    "861d": function (t, e) {
      t.exports = function (t) {
        return "object" === typeof t ? null !== t : "function" === typeof t;
      };
    },
    8875: function (t, e, r) {
      var n, i, o;

      (function (r, a) {
        i = [], n = a, o = "function" === typeof n ? n.apply(e, i) : n, void 0 === o || (t.exports = o);
      })("undefined" !== typeof self && self, function () {
        function t() {
          var e = Object.getOwnPropertyDescriptor(document, "currentScript");
          if (!e && "currentScript" in document && document.currentScript) return document.currentScript;
          if (e && e.get !== t && document.currentScript) return document.currentScript;

          try {
            throw new Error();
          } catch (d) {
            var r,
                n,
                i,
                o = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
                a = /@([^@]*):(\d+):(\d+)\s*$/gi,
                s = o.exec(d.stack) || a.exec(d.stack),
                c = s && s[1] || !1,
                u = s && s[2] || !1,
                f = document.location.href.replace(document.location.hash, ""),
                l = document.getElementsByTagName("script");
            c === f && (r = document.documentElement.outerHTML, n = new RegExp("(?:[^\\n]+?\\n){0," + (u - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i"), i = r.replace(n, "$1").trim());

            for (var p = 0; p < l.length; p++) {
              if ("interactive" === l[p].readyState) return l[p];
              if (l[p].src === c) return l[p];
              if (c === f && l[p].innerHTML && l[p].innerHTML.trim() === i) return l[p];
            }

            return null;
          }
        }

        return t;
      });
    },
    8925: function (t, e, r) {
      var n = r("c6cd"),
          i = Function.toString;
      "function" != typeof n.inspectSource && (n.inspectSource = function (t) {
        return i.call(t);
      }), t.exports = n.inspectSource;
    },
    "8aa5": function (t, e, r) {
      "use strict";

      var n = r("6547").charAt;

      t.exports = function (t, e, r) {
        return e + (r ? n(t, e).length : 1);
      };
    },
    "90e3": function (t, e) {
      var r = 0,
          n = Math.random();

      t.exports = function (t) {
        return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++r + n).toString(36);
      };
    },
    9112: function (t, e, r) {
      var n = r("83ab"),
          i = r("9bf2"),
          o = r("5c6c");
      t.exports = n ? function (t, e, r) {
        return i.f(t, e, o(1, r));
      } : function (t, e, r) {
        return t[e] = r, t;
      };
    },
    9129: function (t, e, r) {
      var n = r("23e7");
      n({
        target: "Number",
        stat: !0
      }, {
        isNaN: function (t) {
          return t != t;
        }
      });
    },
    9263: function (t, e, r) {
      "use strict";

      var n = r("ad6d"),
          i = r("9f7f"),
          o = RegExp.prototype.exec,
          a = String.prototype.replace,
          s = o,
          c = function () {
        var t = /a/,
            e = /b*/g;
        return o.call(t, "a"), o.call(e, "a"), 0 !== t.lastIndex || 0 !== e.lastIndex;
      }(),
          u = i.UNSUPPORTED_Y || i.BROKEN_CARET,
          f = void 0 !== /()??/.exec("")[1],
          l = c || f || u;

      l && (s = function (t) {
        var e,
            r,
            i,
            s,
            l = this,
            p = u && l.sticky,
            d = n.call(l),
            h = l.source,
            v = 0,
            m = t;
        return p && (d = d.replace("y", ""), -1 === d.indexOf("g") && (d += "g"), m = String(t).slice(l.lastIndex), l.lastIndex > 0 && (!l.multiline || l.multiline && "\n" !== t[l.lastIndex - 1]) && (h = "(?: " + h + ")", m = " " + m, v++), r = new RegExp("^(?:" + h + ")", d)), f && (r = new RegExp("^" + h + "$(?!\\s)", d)), c && (e = l.lastIndex), i = o.call(p ? r : l, m), p ? i ? (i.input = i.input.slice(v), i[0] = i[0].slice(v), i.index = l.lastIndex, l.lastIndex += i[0].length) : l.lastIndex = 0 : c && i && (l.lastIndex = l.global ? i.index + i[0].length : e), f && i && i.length > 1 && a.call(i[0], r, function () {
          for (s = 1; s < arguments.length - 2; s++) void 0 === arguments[s] && (i[s] = void 0);
        }), i;
      }), t.exports = s;
    },
    "94ca": function (t, e, r) {
      var n = r("d039"),
          i = /#|\.prototype\./,
          o = function (t, e) {
        var r = s[a(t)];
        return r == u || r != c && ("function" == typeof e ? n(e) : !!e);
      },
          a = o.normalize = function (t) {
        return String(t).replace(i, ".").toLowerCase();
      },
          s = o.data = {},
          c = o.NATIVE = "N",
          u = o.POLYFILL = "P";

      t.exports = o;
    },
    "96cf": function (t, e, r) {
      var n = function (t) {
        "use strict";

        var e,
            r = Object.prototype,
            n = r.hasOwnProperty,
            i = "function" === typeof Symbol ? Symbol : {},
            o = i.iterator || "@@iterator",
            a = i.asyncIterator || "@@asyncIterator",
            s = i.toStringTag || "@@toStringTag";

        function c(t, e, r) {
          return Object.defineProperty(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }), t[e];
        }

        try {
          c({}, "");
        } catch (R) {
          c = function (t, e, r) {
            return t[e] = r;
          };
        }

        function u(t, e, r, n) {
          var i = e && e.prototype instanceof m ? e : m,
              o = Object.create(i.prototype),
              a = new j(n || []);
          return o._invoke = E(t, r, a), o;
        }

        function f(t, e, r) {
          try {
            return {
              type: "normal",
              arg: t.call(e, r)
            };
          } catch (R) {
            return {
              type: "throw",
              arg: R
            };
          }
        }

        t.wrap = u;
        var l = "suspendedStart",
            p = "suspendedYield",
            d = "executing",
            h = "completed",
            v = {};

        function m() {}

        function g() {}

        function y() {}

        var b = {};

        b[o] = function () {
          return this;
        };

        var x = Object.getPrototypeOf,
            k = x && x(x(A([])));
        k && k !== r && n.call(k, o) && (b = k);
        var w = y.prototype = m.prototype = Object.create(b);

        function _(t) {
          ["next", "throw", "return"].forEach(function (e) {
            c(t, e, function (t) {
              return this._invoke(e, t);
            });
          });
        }

        function S(t, e) {
          function r(i, o, a, s) {
            var c = f(t[i], t, o);

            if ("throw" !== c.type) {
              var u = c.arg,
                  l = u.value;
              return l && "object" === typeof l && n.call(l, "__await") ? e.resolve(l.__await).then(function (t) {
                r("next", t, a, s);
              }, function (t) {
                r("throw", t, a, s);
              }) : e.resolve(l).then(function (t) {
                u.value = t, a(u);
              }, function (t) {
                return r("throw", t, a, s);
              });
            }

            s(c.arg);
          }

          var i;

          function o(t, n) {
            function o() {
              return new e(function (e, i) {
                r(t, n, e, i);
              });
            }

            return i = i ? i.then(o, o) : o();
          }

          this._invoke = o;
        }

        function E(t, e, r) {
          var n = l;
          return function (i, o) {
            if (n === d) throw new Error("Generator is already running");

            if (n === h) {
              if ("throw" === i) throw o;
              return P();
            }

            r.method = i, r.arg = o;

            while (1) {
              var a = r.delegate;

              if (a) {
                var s = T(a, r);

                if (s) {
                  if (s === v) continue;
                  return s;
                }
              }

              if ("next" === r.method) r.sent = r._sent = r.arg;else if ("throw" === r.method) {
                if (n === l) throw n = h, r.arg;
                r.dispatchException(r.arg);
              } else "return" === r.method && r.abrupt("return", r.arg);
              n = d;
              var c = f(t, e, r);

              if ("normal" === c.type) {
                if (n = r.done ? h : p, c.arg === v) continue;
                return {
                  value: c.arg,
                  done: r.done
                };
              }

              "throw" === c.type && (n = h, r.method = "throw", r.arg = c.arg);
            }
          };
        }

        function T(t, r) {
          var n = t.iterator[r.method];

          if (n === e) {
            if (r.delegate = null, "throw" === r.method) {
              if (t.iterator["return"] && (r.method = "return", r.arg = e, T(t, r), "throw" === r.method)) return v;
              r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return v;
          }

          var i = f(n, t.iterator, r.arg);
          if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, v;
          var o = i.arg;
          return o ? o.done ? (r[t.resultName] = o.value, r.next = t.nextLoc, "return" !== r.method && (r.method = "next", r.arg = e), r.delegate = null, v) : o : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, v);
        }

        function O(t) {
          var e = {
            tryLoc: t[0]
          };
          1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
        }

        function C(t) {
          var e = t.completion || {};
          e.type = "normal", delete e.arg, t.completion = e;
        }

        function j(t) {
          this.tryEntries = [{
            tryLoc: "root"
          }], t.forEach(O, this), this.reset(!0);
        }

        function A(t) {
          if (t) {
            var r = t[o];
            if (r) return r.call(t);
            if ("function" === typeof t.next) return t;

            if (!isNaN(t.length)) {
              var i = -1,
                  a = function r() {
                while (++i < t.length) if (n.call(t, i)) return r.value = t[i], r.done = !1, r;

                return r.value = e, r.done = !0, r;
              };

              return a.next = a;
            }
          }

          return {
            next: P
          };
        }

        function P() {
          return {
            value: e,
            done: !0
          };
        }

        return g.prototype = w.constructor = y, y.constructor = g, g.displayName = c(y, s, "GeneratorFunction"), t.isGeneratorFunction = function (t) {
          var e = "function" === typeof t && t.constructor;
          return !!e && (e === g || "GeneratorFunction" === (e.displayName || e.name));
        }, t.mark = function (t) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(t, y) : (t.__proto__ = y, c(t, s, "GeneratorFunction")), t.prototype = Object.create(w), t;
        }, t.awrap = function (t) {
          return {
            __await: t
          };
        }, _(S.prototype), S.prototype[a] = function () {
          return this;
        }, t.AsyncIterator = S, t.async = function (e, r, n, i, o) {
          void 0 === o && (o = Promise);
          var a = new S(u(e, r, n, i), o);
          return t.isGeneratorFunction(r) ? a : a.next().then(function (t) {
            return t.done ? t.value : a.next();
          });
        }, _(w), c(w, s, "Generator"), w[o] = function () {
          return this;
        }, w.toString = function () {
          return "[object Generator]";
        }, t.keys = function (t) {
          var e = [];

          for (var r in t) e.push(r);

          return e.reverse(), function r() {
            while (e.length) {
              var n = e.pop();
              if (n in t) return r.value = n, r.done = !1, r;
            }

            return r.done = !0, r;
          };
        }, t.values = A, j.prototype = {
          constructor: j,
          reset: function (t) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = e, this.done = !1, this.delegate = null, this.method = "next", this.arg = e, this.tryEntries.forEach(C), !t) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = e);
          },
          stop: function () {
            this.done = !0;
            var t = this.tryEntries[0],
                e = t.completion;
            if ("throw" === e.type) throw e.arg;
            return this.rval;
          },
          dispatchException: function (t) {
            if (this.done) throw t;
            var r = this;

            function i(n, i) {
              return s.type = "throw", s.arg = t, r.next = n, i && (r.method = "next", r.arg = e), !!i;
            }

            for (var o = this.tryEntries.length - 1; o >= 0; --o) {
              var a = this.tryEntries[o],
                  s = a.completion;
              if ("root" === a.tryLoc) return i("end");

              if (a.tryLoc <= this.prev) {
                var c = n.call(a, "catchLoc"),
                    u = n.call(a, "finallyLoc");

                if (c && u) {
                  if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                  if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                } else if (c) {
                  if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                } else {
                  if (!u) throw new Error("try statement without catch or finally");
                  if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                }
              }
            }
          },
          abrupt: function (t, e) {
            for (var r = this.tryEntries.length - 1; r >= 0; --r) {
              var i = this.tryEntries[r];

              if (i.tryLoc <= this.prev && n.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                var o = i;
                break;
              }
            }

            o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
            var a = o ? o.completion : {};
            return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, v) : this.complete(a);
          },
          complete: function (t, e) {
            if ("throw" === t.type) throw t.arg;
            return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), v;
          },
          finish: function (t) {
            for (var e = this.tryEntries.length - 1; e >= 0; --e) {
              var r = this.tryEntries[e];
              if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), C(r), v;
            }
          },
          catch: function (t) {
            for (var e = this.tryEntries.length - 1; e >= 0; --e) {
              var r = this.tryEntries[e];

              if (r.tryLoc === t) {
                var n = r.completion;

                if ("throw" === n.type) {
                  var i = n.arg;
                  C(r);
                }

                return i;
              }
            }

            throw new Error("illegal catch attempt");
          },
          delegateYield: function (t, r, n) {
            return this.delegate = {
              iterator: A(t),
              resultName: r,
              nextLoc: n
            }, "next" === this.method && (this.arg = e), v;
          }
        }, t;
      }(t.exports);

      try {
        regeneratorRuntime = n;
      } catch (i) {
        Function("r", "regeneratorRuntime = r")(n);
      }
    },
    "99af": function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("d039"),
          o = r("e8b5"),
          a = r("861d"),
          s = r("7b0b"),
          c = r("50c4"),
          u = r("8418"),
          f = r("65f0"),
          l = r("1dde"),
          p = r("b622"),
          d = r("2d00"),
          h = p("isConcatSpreadable"),
          v = 9007199254740991,
          m = "Maximum allowed index exceeded",
          g = d >= 51 || !i(function () {
        var t = [];
        return t[h] = !1, t.concat()[0] !== t;
      }),
          y = l("concat"),
          b = function (t) {
        if (!a(t)) return !1;
        var e = t[h];
        return void 0 !== e ? !!e : o(t);
      },
          x = !g || !y;

      n({
        target: "Array",
        proto: !0,
        forced: x
      }, {
        concat: function (t) {
          var e,
              r,
              n,
              i,
              o,
              a = s(this),
              l = f(a, 0),
              p = 0;

          for (e = -1, n = arguments.length; e < n; e++) if (o = -1 === e ? a : arguments[e], b(o)) {
            if (i = c(o.length), p + i > v) throw TypeError(m);

            for (r = 0; r < i; r++, p++) r in o && u(l, p, o[r]);
          } else {
            if (p >= v) throw TypeError(m);
            u(l, p++, o);
          }

          return l.length = p, l;
        }
      });
    },
    "9bdd": function (t, e, r) {
      var n = r("825a");

      t.exports = function (t, e, r, i) {
        try {
          return i ? e(n(r)[0], r[1]) : e(r);
        } catch (a) {
          var o = t["return"];
          throw void 0 !== o && n(o.call(t)), a;
        }
      };
    },
    "9bf2": function (t, e, r) {
      var n = r("83ab"),
          i = r("0cfb"),
          o = r("825a"),
          a = r("c04e"),
          s = Object.defineProperty;
      e.f = n ? s : function (t, e, r) {
        if (o(t), e = a(e, !0), o(r), i) try {
          return s(t, e, r);
        } catch (n) {}
        if ("get" in r || "set" in r) throw TypeError("Accessors not supported");
        return "value" in r && (t[e] = r.value), t;
      };
    },
    "9ed3": function (t, e, r) {
      "use strict";

      var n = r("ae93").IteratorPrototype,
          i = r("7c73"),
          o = r("5c6c"),
          a = r("d44e"),
          s = r("3f8c"),
          c = function () {
        return this;
      };

      t.exports = function (t, e, r) {
        var u = e + " Iterator";
        return t.prototype = i(n, {
          next: o(1, r)
        }), a(t, u, !1, !0), s[u] = c, t;
      };
    },
    "9f7f": function (t, e, r) {
      "use strict";

      var n = r("d039");

      function i(t, e) {
        return RegExp(t, e);
      }

      e.UNSUPPORTED_Y = n(function () {
        var t = i("a", "y");
        return t.lastIndex = 2, null != t.exec("abcd");
      }), e.BROKEN_CARET = n(function () {
        var t = i("^r", "gy");
        return t.lastIndex = 2, null != t.exec("str");
      });
    },
    a231: function (t, e, r) {
      var n = r("1d1a");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("1ef95f13", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    },
    a4d3: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("da84"),
          o = r("d066"),
          a = r("c430"),
          s = r("83ab"),
          c = r("4930"),
          u = r("fdbf"),
          f = r("d039"),
          l = r("5135"),
          p = r("e8b5"),
          d = r("861d"),
          h = r("825a"),
          v = r("7b0b"),
          m = r("fc6a"),
          g = r("c04e"),
          y = r("5c6c"),
          b = r("7c73"),
          x = r("df75"),
          k = r("241c"),
          w = r("057f"),
          _ = r("7418"),
          S = r("06cf"),
          E = r("9bf2"),
          T = r("d1e7"),
          O = r("9112"),
          C = r("6eeb"),
          j = r("5692"),
          A = r("f772"),
          P = r("d012"),
          R = r("90e3"),
          F = r("b622"),
          I = r("e538"),
          N = r("746f"),
          D = r("d44e"),
          L = r("69f3"),
          M = r("b727").forEach,
          z = A("hidden"),
          q = "Symbol",
          V = "prototype",
          G = F("toPrimitive"),
          $ = L.set,
          B = L.getterFor(q),
          U = Object[V],
          W = i.Symbol,
          H = o("JSON", "stringify"),
          X = S.f,
          Y = E.f,
          K = w.f,
          J = T.f,
          Q = j("symbols"),
          Z = j("op-symbols"),
          tt = j("string-to-symbol-registry"),
          et = j("symbol-to-string-registry"),
          rt = j("wks"),
          nt = i.QObject,
          it = !nt || !nt[V] || !nt[V].findChild,
          ot = s && f(function () {
        return 7 != b(Y({}, "a", {
          get: function () {
            return Y(this, "a", {
              value: 7
            }).a;
          }
        })).a;
      }) ? function (t, e, r) {
        var n = X(U, e);
        n && delete U[e], Y(t, e, r), n && t !== U && Y(U, e, n);
      } : Y,
          at = function (t, e) {
        var r = Q[t] = b(W[V]);
        return $(r, {
          type: q,
          tag: t,
          description: e
        }), s || (r.description = e), r;
      },
          st = u ? function (t) {
        return "symbol" == typeof t;
      } : function (t) {
        return Object(t) instanceof W;
      },
          ct = function (t, e, r) {
        t === U && ct(Z, e, r), h(t);
        var n = g(e, !0);
        return h(r), l(Q, n) ? (r.enumerable ? (l(t, z) && t[z][n] && (t[z][n] = !1), r = b(r, {
          enumerable: y(0, !1)
        })) : (l(t, z) || Y(t, z, y(1, {})), t[z][n] = !0), ot(t, n, r)) : Y(t, n, r);
      },
          ut = function (t, e) {
        h(t);
        var r = m(e),
            n = x(r).concat(ht(r));
        return M(n, function (e) {
          s && !lt.call(r, e) || ct(t, e, r[e]);
        }), t;
      },
          ft = function (t, e) {
        return void 0 === e ? b(t) : ut(b(t), e);
      },
          lt = function (t) {
        var e = g(t, !0),
            r = J.call(this, e);
        return !(this === U && l(Q, e) && !l(Z, e)) && (!(r || !l(this, e) || !l(Q, e) || l(this, z) && this[z][e]) || r);
      },
          pt = function (t, e) {
        var r = m(t),
            n = g(e, !0);

        if (r !== U || !l(Q, n) || l(Z, n)) {
          var i = X(r, n);
          return !i || !l(Q, n) || l(r, z) && r[z][n] || (i.enumerable = !0), i;
        }
      },
          dt = function (t) {
        var e = K(m(t)),
            r = [];
        return M(e, function (t) {
          l(Q, t) || l(P, t) || r.push(t);
        }), r;
      },
          ht = function (t) {
        var e = t === U,
            r = K(e ? Z : m(t)),
            n = [];
        return M(r, function (t) {
          !l(Q, t) || e && !l(U, t) || n.push(Q[t]);
        }), n;
      };

      if (c || (W = function () {
        if (this instanceof W) throw TypeError("Symbol is not a constructor");

        var t = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0,
            e = R(t),
            r = function (t) {
          this === U && r.call(Z, t), l(this, z) && l(this[z], e) && (this[z][e] = !1), ot(this, e, y(1, t));
        };

        return s && it && ot(U, e, {
          configurable: !0,
          set: r
        }), at(e, t);
      }, C(W[V], "toString", function () {
        return B(this).tag;
      }), C(W, "withoutSetter", function (t) {
        return at(R(t), t);
      }), T.f = lt, E.f = ct, S.f = pt, k.f = w.f = dt, _.f = ht, I.f = function (t) {
        return at(F(t), t);
      }, s && (Y(W[V], "description", {
        configurable: !0,
        get: function () {
          return B(this).description;
        }
      }), a || C(U, "propertyIsEnumerable", lt, {
        unsafe: !0
      }))), n({
        global: !0,
        wrap: !0,
        forced: !c,
        sham: !c
      }, {
        Symbol: W
      }), M(x(rt), function (t) {
        N(t);
      }), n({
        target: q,
        stat: !0,
        forced: !c
      }, {
        for: function (t) {
          var e = String(t);
          if (l(tt, e)) return tt[e];
          var r = W(e);
          return tt[e] = r, et[r] = e, r;
        },
        keyFor: function (t) {
          if (!st(t)) throw TypeError(t + " is not a symbol");
          if (l(et, t)) return et[t];
        },
        useSetter: function () {
          it = !0;
        },
        useSimple: function () {
          it = !1;
        }
      }), n({
        target: "Object",
        stat: !0,
        forced: !c,
        sham: !s
      }, {
        create: ft,
        defineProperty: ct,
        defineProperties: ut,
        getOwnPropertyDescriptor: pt
      }), n({
        target: "Object",
        stat: !0,
        forced: !c
      }, {
        getOwnPropertyNames: dt,
        getOwnPropertySymbols: ht
      }), n({
        target: "Object",
        stat: !0,
        forced: f(function () {
          _.f(1);
        })
      }, {
        getOwnPropertySymbols: function (t) {
          return _.f(v(t));
        }
      }), H) {
        var vt = !c || f(function () {
          var t = W();
          return "[null]" != H([t]) || "{}" != H({
            a: t
          }) || "{}" != H(Object(t));
        });
        n({
          target: "JSON",
          stat: !0,
          forced: vt
        }, {
          stringify: function (t, e, r) {
            var n,
                i = [t],
                o = 1;

            while (arguments.length > o) i.push(arguments[o++]);

            if (n = e, (d(e) || void 0 !== t) && !st(t)) return p(e) || (e = function (t, e) {
              if ("function" == typeof n && (e = n.call(this, t, e)), !st(e)) return e;
            }), i[1] = e, H.apply(null, i);
          }
        });
      }

      W[V][G] || O(W[V], G, W[V].valueOf), D(W, q), P[z] = !0;
    },
    a623: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("b727").every,
          o = r("a640"),
          a = r("ae40"),
          s = o("every"),
          c = a("every");
      n({
        target: "Array",
        proto: !0,
        forced: !s || !c
      }, {
        every: function (t) {
          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    a640: function (t, e, r) {
      "use strict";

      var n = r("d039");

      t.exports = function (t, e) {
        var r = [][t];
        return !!r && n(function () {
          r.call(null, e || function () {
            throw 1;
          }, 1);
        });
      };
    },
    a691: function (t, e) {
      var r = Math.ceil,
          n = Math.floor;

      t.exports = function (t) {
        return isNaN(t = +t) ? 0 : (t > 0 ? n : r)(t);
      };
    },
    a91a: function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, ".ep-circle--progress__dot-container[data-v-38ca167f]{position:absolute;-webkit-transform-origin:center center;transform-origin:center center}.ep-circle--progress__dot-container.hidden[data-v-38ca167f]{-webkit-transition-duration:0s;-o-transition-duration:0s;transition-duration:0s}.ep-circle--progress__dot-container>div[data-v-38ca167f]{position:relative}.ep-circle--progress__dot[data-v-38ca167f]{-webkit-transition-duration:.2s;-o-transition-duration:.2s;transition-duration:.2s;-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;margin:auto;right:0;left:0}.ep-circle--progress__dot.ep-hidden[data-v-38ca167f]{-webkit-transform:scale(0);transform:scale(0)}", ""]), t.exports = e;
    },
    a9e3: function (t, e, r) {
      "use strict";

      var n = r("83ab"),
          i = r("da84"),
          o = r("94ca"),
          a = r("6eeb"),
          s = r("5135"),
          c = r("c6b6"),
          u = r("7156"),
          f = r("c04e"),
          l = r("d039"),
          p = r("7c73"),
          d = r("241c").f,
          h = r("06cf").f,
          v = r("9bf2").f,
          m = r("58a8").trim,
          g = "Number",
          y = i[g],
          b = y.prototype,
          x = c(p(b)) == g,
          k = function (t) {
        var e,
            r,
            n,
            i,
            o,
            a,
            s,
            c,
            u = f(t, !1);
        if ("string" == typeof u && u.length > 2) if (u = m(u), e = u.charCodeAt(0), 43 === e || 45 === e) {
          if (r = u.charCodeAt(2), 88 === r || 120 === r) return NaN;
        } else if (48 === e) {
          switch (u.charCodeAt(1)) {
            case 66:
            case 98:
              n = 2, i = 49;
              break;

            case 79:
            case 111:
              n = 8, i = 55;
              break;

            default:
              return +u;
          }

          for (o = u.slice(2), a = o.length, s = 0; s < a; s++) if (c = o.charCodeAt(s), c < 48 || c > i) return NaN;

          return parseInt(o, n);
        }
        return +u;
      };

      if (o(g, !y(" 0o1") || !y("0b1") || y("+0x1"))) {
        for (var w, _ = function (t) {
          var e = arguments.length < 1 ? 0 : t,
              r = this;
          return r instanceof _ && (x ? l(function () {
            b.valueOf.call(r);
          }) : c(r) != g) ? u(new y(k(e)), r, _) : k(e);
        }, S = n ? d(y) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), E = 0; S.length > E; E++) s(y, w = S[E]) && !s(_, w) && v(_, w, h(y, w));

        _.prototype = b, b.constructor = _, a(i, g, _);
      }
    },
    ab13: function (t, e, r) {
      var n = r("b622"),
          i = n("match");

      t.exports = function (t) {
        var e = /./;

        try {
          "/./"[t](e);
        } catch (r) {
          try {
            return e[i] = !1, "/./"[t](e);
          } catch (n) {}
        }

        return !1;
      };
    },
    ac1f: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("9263");
      n({
        target: "RegExp",
        proto: !0,
        forced: /./.exec !== i
      }, {
        exec: i
      });
    },
    ad6d: function (t, e, r) {
      "use strict";

      var n = r("825a");

      t.exports = function () {
        var t = n(this),
            e = "";
        return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e;
      };
    },
    ae40: function (t, e, r) {
      var n = r("83ab"),
          i = r("d039"),
          o = r("5135"),
          a = Object.defineProperty,
          s = {},
          c = function (t) {
        throw t;
      };

      t.exports = function (t, e) {
        if (o(s, t)) return s[t];
        e || (e = {});
        var r = [][t],
            u = !!o(e, "ACCESSORS") && e.ACCESSORS,
            f = o(e, 0) ? e[0] : c,
            l = o(e, 1) ? e[1] : void 0;
        return s[t] = !!r && !i(function () {
          if (u && !n) return !0;
          var t = {
            length: -1
          };
          u ? a(t, 1, {
            enumerable: !0,
            get: c
          }) : t[1] = 1, r.call(t, f, l);
        });
      };
    },
    ae93: function (t, e, r) {
      "use strict";

      var n,
          i,
          o,
          a = r("e163"),
          s = r("9112"),
          c = r("5135"),
          u = r("b622"),
          f = r("c430"),
          l = u("iterator"),
          p = !1,
          d = function () {
        return this;
      };

      [].keys && (o = [].keys(), "next" in o ? (i = a(a(o)), i !== Object.prototype && (n = i)) : p = !0), void 0 == n && (n = {}), f || c(n, l) || s(n, l, d), t.exports = {
        IteratorPrototype: n,
        BUGGY_SAFARI_ITERATORS: p
      };
    },
    b041: function (t, e, r) {
      "use strict";

      var n = r("00ee"),
          i = r("f5df");
      t.exports = n ? {}.toString : function () {
        return "[object " + i(this) + "]";
      };
    },
    b575: function (t, e, r) {
      var n,
          i,
          o,
          a,
          s,
          c,
          u,
          f,
          l = r("da84"),
          p = r("06cf").f,
          d = r("c6b6"),
          h = r("2cf4").set,
          v = r("1cdc"),
          m = l.MutationObserver || l.WebKitMutationObserver,
          g = l.process,
          y = l.Promise,
          b = "process" == d(g),
          x = p(l, "queueMicrotask"),
          k = x && x.value;
      k || (n = function () {
        var t, e;
        b && (t = g.domain) && t.exit();

        while (i) {
          e = i.fn, i = i.next;

          try {
            e();
          } catch (r) {
            throw i ? a() : o = void 0, r;
          }
        }

        o = void 0, t && t.enter();
      }, b ? a = function () {
        g.nextTick(n);
      } : m && !v ? (s = !0, c = document.createTextNode(""), new m(n).observe(c, {
        characterData: !0
      }), a = function () {
        c.data = s = !s;
      }) : y && y.resolve ? (u = y.resolve(void 0), f = u.then, a = function () {
        f.call(u, n);
      }) : a = function () {
        h.call(l, n);
      }), t.exports = k || function (t) {
        var e = {
          fn: t,
          next: void 0
        };
        o && (o.next = e), i || (i = e, a()), o = e;
      };
    },
    b622: function (t, e, r) {
      var n = r("da84"),
          i = r("5692"),
          o = r("5135"),
          a = r("90e3"),
          s = r("4930"),
          c = r("fdbf"),
          u = i("wks"),
          f = n.Symbol,
          l = c ? f : f && f.withoutSetter || a;

      t.exports = function (t) {
        return o(u, t) || (s && o(f, t) ? u[t] = f[t] : u[t] = l("Symbol." + t)), u[t];
      };
    },
    b64b: function (t, e, r) {
      var n = r("23e7"),
          i = r("7b0b"),
          o = r("df75"),
          a = r("d039"),
          s = a(function () {
        o(1);
      });
      n({
        target: "Object",
        stat: !0,
        forced: s
      }, {
        keys: function (t) {
          return o(i(t));
        }
      });
    },
    b680: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("a691"),
          o = r("408a"),
          a = r("1148"),
          s = r("d039"),
          c = 1..toFixed,
          u = Math.floor,
          f = function (t, e, r) {
        return 0 === e ? r : e % 2 === 1 ? f(t, e - 1, r * t) : f(t * t, e / 2, r);
      },
          l = function (t) {
        var e = 0,
            r = t;

        while (r >= 4096) e += 12, r /= 4096;

        while (r >= 2) e += 1, r /= 2;

        return e;
      },
          p = c && ("0.000" !== 8e-5.toFixed(3) || "1" !== .9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 0xde0b6b3a7640080.toFixed(0)) || !s(function () {
        c.call({});
      });

      n({
        target: "Number",
        proto: !0,
        forced: p
      }, {
        toFixed: function (t) {
          var e,
              r,
              n,
              s,
              c = o(this),
              p = i(t),
              d = [0, 0, 0, 0, 0, 0],
              h = "",
              v = "0",
              m = function (t, e) {
            var r = -1,
                n = e;

            while (++r < 6) n += t * d[r], d[r] = n % 1e7, n = u(n / 1e7);
          },
              g = function (t) {
            var e = 6,
                r = 0;

            while (--e >= 0) r += d[e], d[e] = u(r / t), r = r % t * 1e7;
          },
              y = function () {
            var t = 6,
                e = "";

            while (--t >= 0) if ("" !== e || 0 === t || 0 !== d[t]) {
              var r = String(d[t]);
              e = "" === e ? r : e + a.call("0", 7 - r.length) + r;
            }

            return e;
          };

          if (p < 0 || p > 20) throw RangeError("Incorrect fraction digits");
          if (c != c) return "NaN";
          if (c <= -1e21 || c >= 1e21) return String(c);
          if (c < 0 && (h = "-", c = -c), c > 1e-21) if (e = l(c * f(2, 69, 1)) - 69, r = e < 0 ? c * f(2, -e, 1) : c / f(2, e, 1), r *= 4503599627370496, e = 52 - e, e > 0) {
            m(0, r), n = p;

            while (n >= 7) m(1e7, 0), n -= 7;

            m(f(10, n, 1), 0), n = e - 1;

            while (n >= 23) g(1 << 23), n -= 23;

            g(1 << n), m(1, 1), g(2), v = y();
          } else m(0, r), m(1 << -e, 0), v = y() + a.call("0", p);
          return p > 0 ? (s = v.length, v = h + (s <= p ? "0." + a.call("0", p - s) + v : v.slice(0, s - p) + "." + v.slice(s - p))) : v = h + v, v;
        }
      });
    },
    b727: function (t, e, r) {
      var n = r("0366"),
          i = r("44ad"),
          o = r("7b0b"),
          a = r("50c4"),
          s = r("65f0"),
          c = [].push,
          u = function (t) {
        var e = 1 == t,
            r = 2 == t,
            u = 3 == t,
            f = 4 == t,
            l = 6 == t,
            p = 5 == t || l;
        return function (d, h, v, m) {
          for (var g, y, b = o(d), x = i(b), k = n(h, v, 3), w = a(x.length), _ = 0, S = m || s, E = e ? S(d, w) : r ? S(d, 0) : void 0; w > _; _++) if ((p || _ in x) && (g = x[_], y = k(g, _, b), t)) if (e) E[_] = y;else if (y) switch (t) {
            case 3:
              return !0;

            case 5:
              return g;

            case 6:
              return _;

            case 2:
              c.call(E, g);
          } else if (f) return !1;

          return l ? -1 : u || f ? f : E;
        };
      };

      t.exports = {
        forEach: u(0),
        map: u(1),
        filter: u(2),
        some: u(3),
        every: u(4),
        find: u(5),
        findIndex: u(6)
      };
    },
    c04e: function (t, e, r) {
      var n = r("861d");

      t.exports = function (t, e) {
        if (!n(t)) return t;
        var r, i;
        if (e && "function" == typeof (r = t.toString) && !n(i = r.call(t))) return i;
        if ("function" == typeof (r = t.valueOf) && !n(i = r.call(t))) return i;
        if (!e && "function" == typeof (r = t.toString) && !n(i = r.call(t))) return i;
        throw TypeError("Can't convert object to primitive value");
      };
    },
    c430: function (t, e) {
      t.exports = !1;
    },
    c49e: function (t, e, r) {
      "use strict";

      var n = r("fec1"),
          i = r.n(n);
      i.a;
    },
    c6b6: function (t, e) {
      var r = {}.toString;

      t.exports = function (t) {
        return r.call(t).slice(8, -1);
      };
    },
    c6cd: function (t, e, r) {
      var n = r("da84"),
          i = r("ce4e"),
          o = "__core-js_shared__",
          a = n[o] || i(o, {});
      t.exports = a;
    },
    c8ba: function (t, e) {
      var r;

      r = function () {
        return this;
      }();

      try {
        r = r || new Function("return this")();
      } catch (n) {
        "object" === typeof window && (r = window);
      }

      t.exports = r;
    },
    c8d2: function (t, e, r) {
      var n = r("d039"),
          i = r("5899"),
          o = "​᠎";

      t.exports = function (t) {
        return n(function () {
          return !!i[t]() || o[t]() != o || i[t].name !== t;
        });
      };
    },
    ca84: function (t, e, r) {
      var n = r("5135"),
          i = r("fc6a"),
          o = r("4d64").indexOf,
          a = r("d012");

      t.exports = function (t, e) {
        var r,
            s = i(t),
            c = 0,
            u = [];

        for (r in s) !n(a, r) && n(s, r) && u.push(r);

        while (e.length > c) n(s, r = e[c++]) && (~o(u, r) || u.push(r));

        return u;
      };
    },
    caad: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("4d64").includes,
          o = r("44d2"),
          a = r("ae40"),
          s = a("indexOf", {
        ACCESSORS: !0,
        1: 0
      });
      n({
        target: "Array",
        proto: !0,
        forced: !s
      }, {
        includes: function (t) {
          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
      }), o("includes");
    },
    cc12: function (t, e, r) {
      var n = r("da84"),
          i = r("861d"),
          o = n.document,
          a = i(o) && i(o.createElement);

      t.exports = function (t) {
        return a ? o.createElement(t) : {};
      };
    },
    cdf9: function (t, e, r) {
      var n = r("825a"),
          i = r("861d"),
          o = r("f069");

      t.exports = function (t, e) {
        if (n(t), i(e) && e.constructor === t) return e;
        var r = o.f(t),
            a = r.resolve;
        return a(e), r.promise;
      };
    },
    ce4e: function (t, e, r) {
      var n = r("da84"),
          i = r("9112");

      t.exports = function (t, e) {
        try {
          i(n, t, e);
        } catch (r) {
          n[t] = e;
        }

        return e;
      };
    },
    d012: function (t, e) {
      t.exports = {};
    },
    d039: function (t, e) {
      t.exports = function (t) {
        try {
          return !!t();
        } catch (e) {
          return !0;
        }
      };
    },
    d066: function (t, e, r) {
      var n = r("428f"),
          i = r("da84"),
          o = function (t) {
        return "function" == typeof t ? t : void 0;
      };

      t.exports = function (t, e) {
        return arguments.length < 2 ? o(n[t]) || o(i[t]) : n[t] && n[t][e] || i[t] && i[t][e];
      };
    },
    d07f: function (t, e, r) {
      var n = r("a91a");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("a2fae2cc", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    },
    d1e7: function (t, e, r) {
      "use strict";

      var n = {}.propertyIsEnumerable,
          i = Object.getOwnPropertyDescriptor,
          o = i && !n.call({
        1: 2
      }, 1);
      e.f = o ? function (t) {
        var e = i(this, t);
        return !!e && e.enumerable;
      } : n;
    },
    d28b: function (t, e, r) {
      var n = r("746f");
      n("iterator");
    },
    d2bb: function (t, e, r) {
      var n = r("825a"),
          i = r("3bbe");
      t.exports = Object.setPrototypeOf || ("__proto__" in {} ? function () {
        var t,
            e = !1,
            r = {};

        try {
          t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set, t.call(r, []), e = r instanceof Array;
        } catch (o) {}

        return function (r, o) {
          return n(r), i(o), e ? t.call(r, o) : r.__proto__ = o, r;
        };
      }() : void 0);
    },
    d30c: function (t, e, r) {
      var n = r("d5a4");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("3d0aec29", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    },
    d3b7: function (t, e, r) {
      var n = r("00ee"),
          i = r("6eeb"),
          o = r("b041");
      n || i(Object.prototype, "toString", o, {
        unsafe: !0
      });
    },
    d44e: function (t, e, r) {
      var n = r("9bf2").f,
          i = r("5135"),
          o = r("b622"),
          a = o("toStringTag");

      t.exports = function (t, e, r) {
        t && !i(t = r ? t : t.prototype, a) && n(t, a, {
          configurable: !0,
          value: e
        });
      };
    },
    d58f: function (t, e, r) {
      var n = r("1c0b"),
          i = r("7b0b"),
          o = r("44ad"),
          a = r("50c4"),
          s = function (t) {
        return function (e, r, s, c) {
          n(r);
          var u = i(e),
              f = o(u),
              l = a(u.length),
              p = t ? l - 1 : 0,
              d = t ? -1 : 1;
          if (s < 2) while (1) {
            if (p in f) {
              c = f[p], p += d;
              break;
            }

            if (p += d, t ? p < 0 : l <= p) throw TypeError("Reduce of empty array with no initial value");
          }

          for (; t ? p >= 0 : l > p; p += d) p in f && (c = r(c, f[p], p, u));

          return c;
        };
      };

      t.exports = {
        left: s(!1),
        right: s(!0)
      };
    },
    d5a4: function (t, e, r) {
      var n = r("24fb");
      e = n(!1), e.push([t.i, ".ep-circle[data-v-7d0a0fbb]{-webkit-transform-origin:50% 50%;transform-origin:50% 50%}", ""]), t.exports = e;
    },
    d784: function (t, e, r) {
      "use strict";

      r("ac1f");

      var n = r("6eeb"),
          i = r("d039"),
          o = r("b622"),
          a = r("9263"),
          s = r("9112"),
          c = o("species"),
          u = !i(function () {
        var t = /./;
        return t.exec = function () {
          var t = [];
          return t.groups = {
            a: "7"
          }, t;
        }, "7" !== "".replace(t, "$<a>");
      }),
          f = function () {
        return "$0" === "a".replace(/./, "$0");
      }(),
          l = o("replace"),
          p = function () {
        return !!/./[l] && "" === /./[l]("a", "$0");
      }(),
          d = !i(function () {
        var t = /(?:)/,
            e = t.exec;

        t.exec = function () {
          return e.apply(this, arguments);
        };

        var r = "ab".split(t);
        return 2 !== r.length || "a" !== r[0] || "b" !== r[1];
      });

      t.exports = function (t, e, r, l) {
        var h = o(t),
            v = !i(function () {
          var e = {};
          return e[h] = function () {
            return 7;
          }, 7 != ""[t](e);
        }),
            m = v && !i(function () {
          var e = !1,
              r = /a/;
          return "split" === t && (r = {}, r.constructor = {}, r.constructor[c] = function () {
            return r;
          }, r.flags = "", r[h] = /./[h]), r.exec = function () {
            return e = !0, null;
          }, r[h](""), !e;
        });

        if (!v || !m || "replace" === t && (!u || !f || p) || "split" === t && !d) {
          var g = /./[h],
              y = r(h, ""[t], function (t, e, r, n, i) {
            return e.exec === a ? v && !i ? {
              done: !0,
              value: g.call(e, r, n)
            } : {
              done: !0,
              value: t.call(r, e, n)
            } : {
              done: !1
            };
          }, {
            REPLACE_KEEPS_$0: f,
            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p
          }),
              b = y[0],
              x = y[1];
          n(String.prototype, t, b), n(RegExp.prototype, h, 2 == e ? function (t, e) {
            return x.call(t, this, e);
          } : function (t) {
            return x.call(t, this);
          });
        }

        l && s(RegExp.prototype[h], "sham", !0);
      };
    },
    d81d: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("b727").map,
          o = r("1dde"),
          a = r("ae40"),
          s = o("map"),
          c = a("map");
      n({
        target: "Array",
        proto: !0,
        forced: !s || !c
      }, {
        map: function (t) {
          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    },
    da84: function (t, e, r) {
      (function (e) {
        var r = function (t) {
          return t && t.Math == Math && t;
        };

        t.exports = r("object" == typeof globalThis && globalThis) || r("object" == typeof window && window) || r("object" == typeof self && self) || r("object" == typeof e && e) || Function("return this")();
      }).call(this, r("c8ba"));
    },
    dbb4: function (t, e, r) {
      var n = r("23e7"),
          i = r("83ab"),
          o = r("56ef"),
          a = r("fc6a"),
          s = r("06cf"),
          c = r("8418");
      n({
        target: "Object",
        stat: !0,
        sham: !i
      }, {
        getOwnPropertyDescriptors: function (t) {
          var e,
              r,
              n = a(t),
              i = s.f,
              u = o(n),
              f = {},
              l = 0;

          while (u.length > l) r = i(n, e = u[l++]), void 0 !== r && c(f, e, r);

          return f;
        }
      });
    },
    ddb0: function (t, e, r) {
      var n = r("da84"),
          i = r("fdbc"),
          o = r("e260"),
          a = r("9112"),
          s = r("b622"),
          c = s("iterator"),
          u = s("toStringTag"),
          f = o.values;

      for (var l in i) {
        var p = n[l],
            d = p && p.prototype;

        if (d) {
          if (d[c] !== f) try {
            a(d, c, f);
          } catch (v) {
            d[c] = f;
          }
          if (d[u] || a(d, u, l), i[l]) for (var h in o) if (d[h] !== o[h]) try {
            a(d, h, o[h]);
          } catch (v) {
            d[h] = o[h];
          }
        }
      }
    },
    df75: function (t, e, r) {
      var n = r("ca84"),
          i = r("7839");

      t.exports = Object.keys || function (t) {
        return n(t, i);
      };
    },
    e01a: function (t, e, r) {
      "use strict";

      var n = r("23e7"),
          i = r("83ab"),
          o = r("da84"),
          a = r("5135"),
          s = r("861d"),
          c = r("9bf2").f,
          u = r("e893"),
          f = o.Symbol;

      if (i && "function" == typeof f && (!("description" in f.prototype) || void 0 !== f().description)) {
        var l = {},
            p = function () {
          var t = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),
              e = this instanceof p ? new f(t) : void 0 === t ? f() : f(t);
          return "" === t && (l[e] = !0), e;
        };

        u(p, f);
        var d = p.prototype = f.prototype;
        d.constructor = p;
        var h = d.toString,
            v = "Symbol(test)" == String(f("test")),
            m = /^Symbol\((.*)\)[^)]+$/;
        c(d, "description", {
          configurable: !0,
          get: function () {
            var t = s(this) ? this.valueOf() : this,
                e = h.call(t);
            if (a(l, t)) return "";
            var r = v ? e.slice(7, -1) : e.replace(m, "$1");
            return "" === r ? void 0 : r;
          }
        }), n({
          global: !0,
          forced: !0
        }, {
          Symbol: p
        });
      }
    },
    e163: function (t, e, r) {
      var n = r("5135"),
          i = r("7b0b"),
          o = r("f772"),
          a = r("e177"),
          s = o("IE_PROTO"),
          c = Object.prototype;
      t.exports = a ? Object.getPrototypeOf : function (t) {
        return t = i(t), n(t, s) ? t[s] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? c : null;
      };
    },
    e177: function (t, e, r) {
      var n = r("d039");
      t.exports = !n(function () {
        function t() {}

        return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;
      });
    },
    e260: function (t, e, r) {
      "use strict";

      var n = r("fc6a"),
          i = r("44d2"),
          o = r("3f8c"),
          a = r("69f3"),
          s = r("7dd0"),
          c = "Array Iterator",
          u = a.set,
          f = a.getterFor(c);
      t.exports = s(Array, "Array", function (t, e) {
        u(this, {
          type: c,
          target: n(t),
          index: 0,
          kind: e
        });
      }, function () {
        var t = f(this),
            e = t.target,
            r = t.kind,
            n = t.index++;
        return !e || n >= e.length ? (t.target = void 0, {
          value: void 0,
          done: !0
        }) : "keys" == r ? {
          value: n,
          done: !1
        } : "values" == r ? {
          value: e[n],
          done: !1
        } : {
          value: [n, e[n]],
          done: !1
        };
      }, "values"), o.Arguments = o.Array, i("keys"), i("values"), i("entries");
    },
    e2cc: function (t, e, r) {
      var n = r("6eeb");

      t.exports = function (t, e, r) {
        for (var i in e) n(t, i, e[i], r);

        return t;
      };
    },
    e439: function (t, e, r) {
      var n = r("23e7"),
          i = r("d039"),
          o = r("fc6a"),
          a = r("06cf").f,
          s = r("83ab"),
          c = i(function () {
        a(1);
      }),
          u = !s || c;
      n({
        target: "Object",
        stat: !0,
        forced: u,
        sham: !s
      }, {
        getOwnPropertyDescriptor: function (t, e) {
          return a(o(t), e);
        }
      });
    },
    e538: function (t, e, r) {
      var n = r("b622");
      e.f = n;
    },
    e667: function (t, e) {
      t.exports = function (t) {
        try {
          return {
            error: !1,
            value: t()
          };
        } catch (e) {
          return {
            error: !0,
            value: e
          };
        }
      };
    },
    e6cf: function (t, e, r) {
      "use strict";

      var n,
          i,
          o,
          a,
          s = r("23e7"),
          c = r("c430"),
          u = r("da84"),
          f = r("d066"),
          l = r("fea9"),
          p = r("6eeb"),
          d = r("e2cc"),
          h = r("d44e"),
          v = r("2626"),
          m = r("861d"),
          g = r("1c0b"),
          y = r("19aa"),
          b = r("c6b6"),
          x = r("8925"),
          k = r("2266"),
          w = r("1c7e"),
          _ = r("4840"),
          S = r("2cf4").set,
          E = r("b575"),
          T = r("cdf9"),
          O = r("44de"),
          C = r("f069"),
          j = r("e667"),
          A = r("69f3"),
          P = r("94ca"),
          R = r("b622"),
          F = r("2d00"),
          I = R("species"),
          N = "Promise",
          D = A.get,
          L = A.set,
          M = A.getterFor(N),
          z = l,
          q = u.TypeError,
          V = u.document,
          G = u.process,
          $ = f("fetch"),
          B = C.f,
          U = B,
          W = "process" == b(G),
          H = !!(V && V.createEvent && u.dispatchEvent),
          X = "unhandledrejection",
          Y = "rejectionhandled",
          K = 0,
          J = 1,
          Q = 2,
          Z = 1,
          tt = 2,
          et = P(N, function () {
        var t = x(z) !== String(z);

        if (!t) {
          if (66 === F) return !0;
          if (!W && "function" != typeof PromiseRejectionEvent) return !0;
        }

        if (c && !z.prototype["finally"]) return !0;
        if (F >= 51 && /native code/.test(z)) return !1;

        var e = z.resolve(1),
            r = function (t) {
          t(function () {}, function () {});
        },
            n = e.constructor = {};

        return n[I] = r, !(e.then(function () {}) instanceof r);
      }),
          rt = et || !w(function (t) {
        z.all(t)["catch"](function () {});
      }),
          nt = function (t) {
        var e;
        return !(!m(t) || "function" != typeof (e = t.then)) && e;
      },
          it = function (t, e, r) {
        if (!e.notified) {
          e.notified = !0;
          var n = e.reactions;
          E(function () {
            var i = e.value,
                o = e.state == J,
                a = 0;

            while (n.length > a) {
              var s,
                  c,
                  u,
                  f = n[a++],
                  l = o ? f.ok : f.fail,
                  p = f.resolve,
                  d = f.reject,
                  h = f.domain;

              try {
                l ? (o || (e.rejection === tt && ct(t, e), e.rejection = Z), !0 === l ? s = i : (h && h.enter(), s = l(i), h && (h.exit(), u = !0)), s === f.promise ? d(q("Promise-chain cycle")) : (c = nt(s)) ? c.call(s, p, d) : p(s)) : d(i);
              } catch (v) {
                h && !u && h.exit(), d(v);
              }
            }

            e.reactions = [], e.notified = !1, r && !e.rejection && at(t, e);
          });
        }
      },
          ot = function (t, e, r) {
        var n, i;
        H ? (n = V.createEvent("Event"), n.promise = e, n.reason = r, n.initEvent(t, !1, !0), u.dispatchEvent(n)) : n = {
          promise: e,
          reason: r
        }, (i = u["on" + t]) ? i(n) : t === X && O("Unhandled promise rejection", r);
      },
          at = function (t, e) {
        S.call(u, function () {
          var r,
              n = e.value,
              i = st(e);
          if (i && (r = j(function () {
            W ? G.emit("unhandledRejection", n, t) : ot(X, t, n);
          }), e.rejection = W || st(e) ? tt : Z, r.error)) throw r.value;
        });
      },
          st = function (t) {
        return t.rejection !== Z && !t.parent;
      },
          ct = function (t, e) {
        S.call(u, function () {
          W ? G.emit("rejectionHandled", t) : ot(Y, t, e.value);
        });
      },
          ut = function (t, e, r, n) {
        return function (i) {
          t(e, r, i, n);
        };
      },
          ft = function (t, e, r, n) {
        e.done || (e.done = !0, n && (e = n), e.value = r, e.state = Q, it(t, e, !0));
      },
          lt = function (t, e, r, n) {
        if (!e.done) {
          e.done = !0, n && (e = n);

          try {
            if (t === r) throw q("Promise can't be resolved itself");
            var i = nt(r);
            i ? E(function () {
              var n = {
                done: !1
              };

              try {
                i.call(r, ut(lt, t, n, e), ut(ft, t, n, e));
              } catch (o) {
                ft(t, n, o, e);
              }
            }) : (e.value = r, e.state = J, it(t, e, !1));
          } catch (o) {
            ft(t, {
              done: !1
            }, o, e);
          }
        }
      };

      et && (z = function (t) {
        y(this, z, N), g(t), n.call(this);
        var e = D(this);

        try {
          t(ut(lt, this, e), ut(ft, this, e));
        } catch (r) {
          ft(this, e, r);
        }
      }, n = function (t) {
        L(this, {
          type: N,
          done: !1,
          notified: !1,
          parent: !1,
          reactions: [],
          rejection: !1,
          state: K,
          value: void 0
        });
      }, n.prototype = d(z.prototype, {
        then: function (t, e) {
          var r = M(this),
              n = B(_(this, z));
          return n.ok = "function" != typeof t || t, n.fail = "function" == typeof e && e, n.domain = W ? G.domain : void 0, r.parent = !0, r.reactions.push(n), r.state != K && it(this, r, !1), n.promise;
        },
        catch: function (t) {
          return this.then(void 0, t);
        }
      }), i = function () {
        var t = new n(),
            e = D(t);
        this.promise = t, this.resolve = ut(lt, t, e), this.reject = ut(ft, t, e);
      }, C.f = B = function (t) {
        return t === z || t === o ? new i(t) : U(t);
      }, c || "function" != typeof l || (a = l.prototype.then, p(l.prototype, "then", function (t, e) {
        var r = this;
        return new z(function (t, e) {
          a.call(r, t, e);
        }).then(t, e);
      }, {
        unsafe: !0
      }), "function" == typeof $ && s({
        global: !0,
        enumerable: !0,
        forced: !0
      }, {
        fetch: function (t) {
          return T(z, $.apply(u, arguments));
        }
      }))), s({
        global: !0,
        wrap: !0,
        forced: et
      }, {
        Promise: z
      }), h(z, N, !1, !0), v(N), o = f(N), s({
        target: N,
        stat: !0,
        forced: et
      }, {
        reject: function (t) {
          var e = B(this);
          return e.reject.call(void 0, t), e.promise;
        }
      }), s({
        target: N,
        stat: !0,
        forced: c || et
      }, {
        resolve: function (t) {
          return T(c && this === o ? z : this, t);
        }
      }), s({
        target: N,
        stat: !0,
        forced: rt
      }, {
        all: function (t) {
          var e = this,
              r = B(e),
              n = r.resolve,
              i = r.reject,
              o = j(function () {
            var r = g(e.resolve),
                o = [],
                a = 0,
                s = 1;
            k(t, function (t) {
              var c = a++,
                  u = !1;
              o.push(void 0), s++, r.call(e, t).then(function (t) {
                u || (u = !0, o[c] = t, --s || n(o));
              }, i);
            }), --s || n(o);
          });
          return o.error && i(o.value), r.promise;
        },
        race: function (t) {
          var e = this,
              r = B(e),
              n = r.reject,
              i = j(function () {
            var i = g(e.resolve);
            k(t, function (t) {
              i.call(e, t).then(r.resolve, n);
            });
          });
          return i.error && n(i.value), r.promise;
        }
      });
    },
    e893: function (t, e, r) {
      var n = r("5135"),
          i = r("56ef"),
          o = r("06cf"),
          a = r("9bf2");

      t.exports = function (t, e) {
        for (var r = i(e), s = a.f, c = o.f, u = 0; u < r.length; u++) {
          var f = r[u];
          n(t, f) || s(t, f, c(e, f));
        }
      };
    },
    e8b5: function (t, e, r) {
      var n = r("c6b6");

      t.exports = Array.isArray || function (t) {
        return "Array" == n(t);
      };
    },
    e95a: function (t, e, r) {
      var n = r("b622"),
          i = r("3f8c"),
          o = n("iterator"),
          a = Array.prototype;

      t.exports = function (t) {
        return void 0 !== t && (i.Array === t || a[o] === t);
      };
    },
    f069: function (t, e, r) {
      "use strict";

      var n = r("1c0b"),
          i = function (t) {
        var e, r;
        this.promise = new t(function (t, n) {
          if (void 0 !== e || void 0 !== r) throw TypeError("Bad Promise constructor");
          e = t, r = n;
        }), this.resolve = n(e), this.reject = n(r);
      };

      t.exports.f = function (t) {
        return new i(t);
      };
    },
    f5df: function (t, e, r) {
      var n = r("00ee"),
          i = r("c6b6"),
          o = r("b622"),
          a = o("toStringTag"),
          s = "Arguments" == i(function () {
        return arguments;
      }()),
          c = function (t, e) {
        try {
          return t[e];
        } catch (r) {}
      };

      t.exports = n ? i : function (t) {
        var e, r, n;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = c(e = Object(t), a)) ? r : s ? i(e) : "Object" == (n = i(e)) && "function" == typeof e.callee ? "Arguments" : n;
      };
    },
    f772: function (t, e, r) {
      var n = r("5692"),
          i = r("90e3"),
          o = n("keys");

      t.exports = function (t) {
        return o[t] || (o[t] = i(t));
      };
    },
    fb15: function (t, e, r) {
      "use strict";

      if (r.r(e), "undefined" !== typeof window) {
        var n = window.document.currentScript,
            i = r("8875");
        n = i(), "currentScript" in document || Object.defineProperty(document, "currentScript", {
          get: i
        });
        var o = n && n.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
        o && (r.p = o[1]);
      }

      var a = r("fe83");
      e["default"] = a["a"];
    },
    fc6a: function (t, e, r) {
      var n = r("44ad"),
          i = r("1d80");

      t.exports = function (t) {
        return n(i(t));
      };
    },
    fdbc: function (t, e) {
      t.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    },
    fdbf: function (t, e, r) {
      var n = r("4930");
      t.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator;
    },
    fe83: function (t, e, r) {
      "use strict";

      (function (t) {
        var n = r("28ab"),
            i = function (t) {
          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "vue-ellipse-progress";
          return t.component(e, n["a"]);
        },
            o = null;

        "undefined" !== typeof window ? o = window.Vue : "undefined" !== typeof t && (o = t.Vue), o && o.use({
          install: i
        }), e["a"] = {
          install: i
        };
      }).call(this, r("c8ba"));
    },
    fea9: function (t, e, r) {
      var n = r("da84");
      t.exports = n.Promise;
    },
    fec1: function (t, e, r) {
      var n = r("02d4");
      "string" === typeof n && (n = [[t.i, n, ""]]), n.locals && (t.exports = n.locals);
      var i = r("499e").default;
      i("ec09b49c", n, !0, {
        sourceMap: !1,
        shadowMode: !1
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/vue-i18n/dist/vue-i18n.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/vue-i18n/dist/vue-i18n.esm.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
 * vue-i18n v8.24.4 
 * (c) 2021 kazuya kawaguchi
 * Released under the MIT License.
 */

/*  */

/**
 * constants
 */
var numberFormatKeys = ['compactDisplay', 'currency', 'currencyDisplay', 'currencySign', 'localeMatcher', 'notation', 'numberingSystem', 'signDisplay', 'style', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'];
/**
 * utilities
 */

function warn(msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */

    if (err) {
      console.warn(err.stack);
    }
  }
}

function error(msg, err) {
  if (typeof console !== 'undefined') {
    console.error('[vue-i18n] ' + msg);
    /* istanbul ignore if */

    if (err) {
      console.error(err.stack);
    }
  }
}

var isArray = Array.isArray;

function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

function isBoolean(val) {
  return typeof val === 'boolean';
}

function isString(val) {
  return typeof val === 'string';
}

var toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';

function isPlainObject(obj) {
  return toString.call(obj) === OBJECT_STRING;
}

function isNull(val) {
  return val === null || val === undefined;
}

function isFunction(val) {
  return typeof val === 'function';
}

function parseArgs() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  var locale = null;
  var params = null;

  if (args.length === 1) {
    if (isObject(args[0]) || isArray(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */


    if (isObject(args[1]) || isArray(args[1])) {
      params = args[1];
    }
  }

  return {
    locale: locale,
    params: params
  };
}

function looseClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function remove(arr, item) {
  if (arr.delete(item)) {
    return arr;
  }
}

function includes(arr, item) {
  return !!~arr.indexOf(item);
}

var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function merge(target) {
  var arguments$1 = arguments;
  var output = Object(target);

  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];

    if (source !== undefined && source !== null) {
      var key = void 0;

      for (key in source) {
        if (hasOwn(source, key)) {
          if (isObject(source[key])) {
            output[key] = merge(output[key], source[key]);
          } else {
            output[key] = source[key];
          }
        }
      }
    }
  }

  return output;
}

function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = isArray(a);
      var isArrayB = isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Sanitizes html special characters from input strings. For mitigating risk of XSS attacks.
 * @param rawText The raw input from the user that should be escaped.
 */


function escapeHtml(rawText) {
  return rawText.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
}
/**
 * Escapes html tags and special symbols from all provided params which were returned from parseArgs().params.
 * This method performs an in-place operation on the params object.
 *
 * @param {any} params Parameters as provided from `parseArgs().params`.
 *                     May be either an array of strings or a string->any map.
 *
 * @returns The manipulated `params` object.
 */


function escapeParams(params) {
  if (params != null) {
    Object.keys(params).forEach(function (key) {
      if (typeof params[key] == 'string') {
        params[key] = escapeHtml(params[key]);
      }
    });
  }

  return params;
}
/*  */


function extend(Vue) {
  if (!Vue.prototype.hasOwnProperty('$i18n')) {
    // $FlowFixMe
    Object.defineProperty(Vue.prototype, '$i18n', {
      get: function get() {
        return this._i18n;
      }
    });
  }

  Vue.prototype.$t = function (key) {
    var values = [],
        len = arguments.length - 1;

    while (len-- > 0) values[len] = arguments[len + 1];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [key, i18n.locale, i18n._getMessages(), this].concat(values));
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [],
        len = arguments.length - 2;

    while (len-- > 0) values[len] = arguments[len + 2];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [key, i18n.locale, i18n._getMessages(), this, choice].concat(values));
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale);
  };

  Vue.prototype.$d = function (value) {
    var ref;
    var args = [],
        len = arguments.length - 1;

    while (len-- > 0) args[len] = arguments[len + 1];

    return (ref = this.$i18n).d.apply(ref, [value].concat(args));
  };

  Vue.prototype.$n = function (value) {
    var ref;
    var args = [],
        len = arguments.length - 1;

    while (len-- > 0) args[len] = arguments[len + 1];

    return (ref = this.$i18n).n.apply(ref, [value].concat(args));
  };
}
/*  */


var mixin = {
  beforeCreate: function beforeCreate() {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            var localeMessages = options.i18n && options.i18n.messages ? options.i18n.messages : {};

            options.__i18n.forEach(function (resource) {
              localeMessages = merge(localeMessages, JSON.parse(resource));
            });

            Object.keys(localeMessages).forEach(function (locale) {
              options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);
            });
          } catch (e) {
            if (true) {
              error("Cannot parse locale messages via custom blocks.", e);
            }
          }
        }

        this._i18n = options.i18n;
        this._i18nWatcher = this._i18n.watchI18nData();
      } else if (isPlainObject(options.i18n)) {
        var rootI18n = this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n ? this.$root.$i18n : null; // component local i18n

        if (rootI18n) {
          options.i18n.root = this.$root;
          options.i18n.formatter = rootI18n.formatter;
          options.i18n.fallbackLocale = rootI18n.fallbackLocale;
          options.i18n.formatFallbackMessages = rootI18n.formatFallbackMessages;
          options.i18n.silentTranslationWarn = rootI18n.silentTranslationWarn;
          options.i18n.silentFallbackWarn = rootI18n.silentFallbackWarn;
          options.i18n.pluralizationRules = rootI18n.pluralizationRules;
          options.i18n.preserveDirectiveContent = rootI18n.preserveDirectiveContent;
        } // init locale messages via custom blocks


        if (options.__i18n) {
          try {
            var localeMessages$1 = options.i18n && options.i18n.messages ? options.i18n.messages : {};

            options.__i18n.forEach(function (resource) {
              localeMessages$1 = merge(localeMessages$1, JSON.parse(resource));
            });

            options.i18n.messages = localeMessages$1;
          } catch (e) {
            if (true) {
              warn("Cannot parse locale messages via custom blocks.", e);
            }
          }
        }

        var ref = options.i18n;
        var sharedMessages = ref.sharedMessages;

        if (sharedMessages && isPlainObject(sharedMessages)) {
          options.i18n.messages = merge(options.i18n.messages, sharedMessages);
        }

        this._i18n = new VueI18n(options.i18n);
        this._i18nWatcher = this._i18n.watchI18nData();

        if (options.i18n.sync === undefined || !!options.i18n.sync) {
          this._localeWatcher = this.$i18n.watchLocale();
        }

        if (rootI18n) {
          rootI18n.onComponentInstanceCreated(this._i18n);
        }
      } else {
        if (true) {
          warn("Cannot be interpreted 'i18n' option.");
        }
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      // root i18n
      this._i18n = this.$root.$i18n;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      // parent i18n
      this._i18n = options.parent.$i18n;
    }
  },
  beforeMount: function beforeMount() {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        this._i18n.subscribeDataChanging(this);

        this._subscribing = true;
      } else if (isPlainObject(options.i18n)) {
        this._i18n.subscribeDataChanging(this);

        this._subscribing = true;
      } else {
        if (true) {
          warn("Cannot be interpreted 'i18n' option.");
        }
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);

      this._subscribing = true;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);

      this._subscribing = true;
    }
  },
  mounted: function mounted() {
    if (this !== this.$root && this.$options.__INTLIFY_META__ && this.$el) {
      this.$el.setAttribute('data-intlify', this.$options.__INTLIFY_META__);
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (!this._i18n) {
      return;
    }

    var self = this;
    this.$nextTick(function () {
      if (self._subscribing) {
        self._i18n.unsubscribeDataChanging(self);

        delete self._subscribing;
      }

      if (self._i18nWatcher) {
        self._i18nWatcher();

        self._i18n.destroyVM();

        delete self._i18nWatcher;
      }

      if (self._localeWatcher) {
        self._localeWatcher();

        delete self._localeWatcher;
      }
    });
  }
};
/*  */

var interpolationComponent = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    },
    places: {
      type: [Array, Object]
    }
  },
  render: function render(h, ref) {
    var data = ref.data;
    var parent = ref.parent;
    var props = ref.props;
    var slots = ref.slots;
    var $i18n = parent.$i18n;

    if (!$i18n) {
      if (true) {
        warn('Cannot find VueI18n instance!');
      }

      return;
    }

    var path = props.path;
    var locale = props.locale;
    var places = props.places;
    var params = slots();
    var children = $i18n.i(path, locale, onlyHasDefaultPlace(params) || places ? useLegacyPlaces(params.default, places) : params);
    var tag = !!props.tag && props.tag !== true || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, data, children) : children;
  }
};

function onlyHasDefaultPlace(params) {
  var prop;

  for (prop in params) {
    if (prop !== 'default') {
      return false;
    }
  }

  return Boolean(prop);
}

function useLegacyPlaces(children, places) {
  var params = places ? createParamsFromPlaces(places) : {};

  if (!children) {
    return params;
  } // Filter empty text nodes


  children = children.filter(function (child) {
    return child.tag || child.text.trim() !== '';
  });
  var everyPlace = children.every(vnodeHasPlaceAttribute);

  if ( true && everyPlace) {
    warn('`place` attribute is deprecated in next major version. Please switch to Vue slots.');
  }

  return children.reduce(everyPlace ? assignChildPlace : assignChildIndex, params);
}

function createParamsFromPlaces(places) {
  if (true) {
    warn('`places` prop is deprecated in next major version. Please switch to Vue slots.');
  }

  return Array.isArray(places) ? places.reduce(assignChildIndex, {}) : Object.assign({}, places);
}

function assignChildPlace(params, child) {
  if (child.data && child.data.attrs && child.data.attrs.place) {
    params[child.data.attrs.place] = child;
  }

  return params;
}

function assignChildIndex(params, child, index) {
  params[index] = child;
  return params;
}

function vnodeHasPlaceAttribute(vnode) {
  return Boolean(vnode.data && vnode.data.attrs && vnode.data.attrs.place);
}
/*  */


var numberComponent = {
  name: 'i18n-n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    },
    locale: {
      type: String
    }
  },
  render: function render(h, ref) {
    var props = ref.props;
    var parent = ref.parent;
    var data = ref.data;
    var i18n = parent.$i18n;

    if (!i18n) {
      if (true) {
        warn('Cannot find VueI18n instance!');
      }

      return null;
    }

    var key = null;
    var options = null;

    if (isString(props.format)) {
      key = props.format;
    } else if (isObject(props.format)) {
      if (props.format.key) {
        key = props.format.key;
      } // Filter out number format options only


      options = Object.keys(props.format).reduce(function (acc, prop) {
        var obj;

        if (includes(numberFormatKeys, prop)) {
          return Object.assign({}, acc, (obj = {}, obj[prop] = props.format[prop], obj));
        }

        return acc;
      }, null);
    }

    var locale = props.locale || i18n.locale;

    var parts = i18n._ntp(props.value, locale, key, options);

    var values = parts.map(function (part, index) {
      var obj;
      var slot = data.scopedSlots && data.scopedSlots[part.type];
      return slot ? slot((obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj)) : part.value;
    });
    var tag = !!props.tag && props.tag !== true || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, {
      attrs: data.attrs,
      'class': data['class'],
      staticClass: data.staticClass
    }, values) : values;
  }
};
/*  */

function bind(el, binding, vnode) {
  if (!assert(el, vnode)) {
    return;
  }

  t(el, binding, vnode);
}

function update(el, binding, vnode, oldVNode) {
  if (!assert(el, vnode)) {
    return;
  }

  var i18n = vnode.context.$i18n;

  if (localeEqual(el, vnode) && looseEqual(binding.value, binding.oldValue) && looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale))) {
    return;
  }

  t(el, binding, vnode);
}

function unbind(el, binding, vnode, oldVNode) {
  var vm = vnode.context;

  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return;
  }

  var i18n = vnode.context.$i18n || {};

  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {
    el.textContent = '';
  }

  el._vt = undefined;
  delete el['_vt'];
  el._locale = undefined;
  delete el['_locale'];
  el._localeMessage = undefined;
  delete el['_localeMessage'];
}

function assert(el, vnode) {
  var vm = vnode.context;

  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return false;
  }

  if (!vm.$i18n) {
    warn('VueI18n instance does not exists in Vue instance');
    return false;
  }

  return true;
}

function localeEqual(el, vnode) {
  var vm = vnode.context;
  return el._locale === vm.$i18n.locale;
}

function t(el, binding, vnode) {
  var ref$1, ref$2;
  var value = binding.value;
  var ref = parseValue(value);
  var path = ref.path;
  var locale = ref.locale;
  var args = ref.args;
  var choice = ref.choice;

  if (!path && !locale && !args) {
    warn('value type not supported');
    return;
  }

  if (!path) {
    warn('`path` is required in v-t directive');
    return;
  }

  var vm = vnode.context;

  if (choice != null) {
    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [path, choice].concat(makeParams(locale, args)));
  } else {
    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [path].concat(makeParams(locale, args)));
  }

  el._locale = vm.$i18n.locale;
  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);
}

function parseValue(value) {
  var path;
  var locale;
  var args;
  var choice;

  if (isString(value)) {
    path = value;
  } else if (isPlainObject(value)) {
    path = value.path;
    locale = value.locale;
    args = value.args;
    choice = value.choice;
  }

  return {
    path: path,
    locale: locale,
    args: args,
    choice: choice
  };
}

function makeParams(locale, args) {
  var params = [];
  locale && params.push(locale);

  if (args && (Array.isArray(args) || isPlainObject(args))) {
    params.push(args);
  }

  return params;
}

var Vue;

function install(_Vue) {
  /* istanbul ignore if */
  if ( true && install.installed && _Vue === Vue) {
    warn('already installed.');
    return;
  }

  install.installed = true;
  Vue = _Vue;
  var version = Vue.version && Number(Vue.version.split('.')[0]) || -1;
  /* istanbul ignore if */

  if ( true && version < 2) {
    warn("vue-i18n (" + install.version + ") need to use Vue 2.0 or later (Vue: " + Vue.version + ").");
    return;
  }

  extend(Vue);
  Vue.mixin(mixin);
  Vue.directive('t', {
    bind: bind,
    update: update,
    unbind: unbind
  });
  Vue.component(interpolationComponent.name, interpolationComponent);
  Vue.component(numberComponent.name, numberComponent); // use simple mergeStrategies to prevent i18n instance lose '__proto__'

  var strats = Vue.config.optionMergeStrategies;

  strats.i18n = function (parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };
}
/*  */


var BaseFormatter = function BaseFormatter() {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate(message, values) {
  if (!values) {
    return [message];
  }

  var tokens = this._caches[message];

  if (!tokens) {
    tokens = parse(message);
    this._caches[message] = tokens;
  }

  return compile(tokens, values);
};

var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;

function parse(format) {
  var tokens = [];
  var position = 0;
  var text = '';

  while (position < format.length) {
    var char = format[position++];

    if (char === '{') {
      if (text) {
        tokens.push({
          type: 'text',
          value: text
        });
      }

      text = '';
      var sub = '';
      char = format[position++];

      while (char !== undefined && char !== '}') {
        sub += char;
        char = format[position++];
      }

      var isClosed = char === '}';
      var type = RE_TOKEN_LIST_VALUE.test(sub) ? 'list' : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? 'named' : 'unknown';
      tokens.push({
        value: sub,
        type: type
      });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
      if (format[position] !== '{') {
        text += char;
      }
    } else {
      text += char;
    }
  }

  text && tokens.push({
    type: 'text',
    value: text
  });
  return tokens;
}

function compile(tokens, values) {
  var compiled = [];
  var index = 0;
  var mode = Array.isArray(values) ? 'list' : isObject(values) ? 'named' : 'unknown';

  if (mode === 'unknown') {
    return compiled;
  }

  while (index < tokens.length) {
    var token = tokens[index];

    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break;

      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break;

      case 'named':
        if (mode === 'named') {
          compiled.push(values[token.value]);
        } else {
          if (true) {
            warn("Type of token '" + token.type + "' and format of value '" + mode + "' don't match!");
          }
        }

        break;

      case 'unknown':
        if (true) {
          warn("Detect 'unknown' type of token!");
        }

        break;
    }

    index++;
  }

  return compiled;
}
/*  */

/**
 *  Path parser
 *  - Inspired:
 *    Vue.js Path parser
 */
// actions


var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3; // states

var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;
var pathStateMachine = [];
pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};
pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};
pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};
pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};
pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};
pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};
pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};
/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;

function isLiteral(exp) {
  return literalValueRE.test(exp);
}
/**
 * Strip quotes from a string
 */


function stripQuotes(str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
}
/**
 * Determine the type of a character in a keypath.
 */


function getPathCharType(ch) {
  if (ch === undefined || ch === null) {
    return 'eof';
  }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [

    case 0x5D: // ]

    case 0x2E: // .

    case 0x22: // "

    case 0x27:
      // '
      return ch;

    case 0x5F: // _

    case 0x24: // $

    case 0x2D:
      // -
      return 'ident';

    case 0x09: // Tab

    case 0x0A: // Newline

    case 0x0D: // Return

    case 0xA0: // No-break space

    case 0xFEFF: // Byte Order Mark

    case 0x2028: // Line Separator

    case 0x2029:
      // Paragraph Separator
      return 'ws';
  }

  return 'ident';
}
/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */


function formatSubPath(path) {
  var trimmed = path.trim(); // invalid leading 0

  if (path.charAt(0) === '0' && isNaN(path)) {
    return false;
  }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
}
/**
 * Parse a string path into an array of segments
 */


function parse$1(path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;

      if (key === undefined) {
        return false;
      }

      key = formatSubPath(key);

      if (key === false) {
        return false;
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote() {
    var nextChar = path[index + 1];

    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true;
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue;
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return; // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];

    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined ? c : newChar;

      if (action() === false) {
        return;
      }
    }

    if (mode === AFTER_PATH) {
      return keys;
    }
  }
}

var I18nPath = function I18nPath() {
  this._cache = Object.create(null);
};
/**
 * External parse that check for a cache hit first
 */


I18nPath.prototype.parsePath = function parsePath(path) {
  var hit = this._cache[path];

  if (!hit) {
    hit = parse$1(path);

    if (hit) {
      this._cache[path] = hit;
    }
  }

  return hit || [];
};
/**
 * Get path value from path string
 */


I18nPath.prototype.getPathValue = function getPathValue(obj, path) {
  if (!isObject(obj)) {
    return null;
  }

  var paths = this.parsePath(path);

  if (paths.length === 0) {
    return null;
  } else {
    var length = paths.length;
    var last = obj;
    var i = 0;

    while (i < length) {
      var value = last[paths[i]];

      if (value === undefined || value === null) {
        return null;
      }

      last = value;
      i++;
    }

    return last;
  }
};
/*  */


var htmlTagMatcher = /<\/?[\w\s="/.':;#-\/]+>/;
var linkKeyMatcher = /(?:@(?:\.[a-z]+)?:(?:[\w\-_|.]+|\([\w\-_|.]+\)))/g;
var linkKeyPrefixMatcher = /^@(?:\.([a-z]+))?:/;
var bracketsMatcher = /[()]/g;
var defaultModifiers = {
  'upper': function (str) {
    return str.toLocaleUpperCase();
  },
  'lower': function (str) {
    return str.toLocaleLowerCase();
  },
  'capitalize': function (str) {
    return "" + str.charAt(0).toLocaleUpperCase() + str.substr(1);
  }
};
var defaultFormatter = new BaseFormatter();

var VueI18n = function VueI18n(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #290

  /* istanbul ignore if */

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale === false ? false : options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || {};
  var numberFormats = options.numberFormats || {};
  this._vm = null;
  this._formatter = options.formatter || defaultFormatter;
  this._modifiers = options.modifiers || {};
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined ? true : !!options.fallbackRoot;
  this._formatFallbackMessages = options.formatFallbackMessages === undefined ? false : !!options.formatFallbackMessages;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined ? false : options.silentTranslationWarn;
  this._silentFallbackWarn = options.silentFallbackWarn === undefined ? false : !!options.silentFallbackWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();
  this._dataListeners = new Set();
  this._componentInstanceCreatedListener = options.componentInstanceCreatedListener || null;
  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined ? false : !!options.preserveDirectiveContent;
  this.pluralizationRules = options.pluralizationRules || {};
  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';
  this._postTranslation = options.postTranslation || null;
  this._escapeParameterHtml = options.escapeParameterHtml || false;
  /**
   * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`
   * @param choicesLength {number} an overall amount of available choices
   * @returns a final choice index
  */

  this.getChoiceIndex = function (choice, choicesLength) {
    var thisPrototype = Object.getPrototypeOf(this$1);

    if (thisPrototype && thisPrototype.getChoiceIndex) {
      var prototypeGetChoiceIndex = thisPrototype.getChoiceIndex;
      return prototypeGetChoiceIndex.call(this$1, choice, choicesLength);
    } // Default (old) getChoiceIndex implementation - english-compatible


    var defaultImpl = function (_choice, _choicesLength) {
      _choice = Math.abs(_choice);

      if (_choicesLength === 2) {
        return _choice ? _choice > 1 ? 1 : 0 : 1;
      }

      return _choice ? Math.min(_choice, 2) : 0;
    };

    if (this$1.locale in this$1.pluralizationRules) {
      return this$1.pluralizationRules[this$1.locale].apply(this$1, [choice, choicesLength]);
    } else {
      return defaultImpl(choice, choicesLength);
    }
  };

  this._exist = function (message, key) {
    if (!message || !key) {
      return false;
    }

    if (!isNull(this$1._path.getPathValue(message, key))) {
      return true;
    } // fallback for flat key


    if (message[key]) {
      return true;
    }

    return false;
  };

  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var prototypeAccessors = {
  vm: {
    configurable: true
  },
  messages: {
    configurable: true
  },
  dateTimeFormats: {
    configurable: true
  },
  numberFormats: {
    configurable: true
  },
  availableLocales: {
    configurable: true
  },
  locale: {
    configurable: true
  },
  fallbackLocale: {
    configurable: true
  },
  formatFallbackMessages: {
    configurable: true
  },
  missing: {
    configurable: true
  },
  formatter: {
    configurable: true
  },
  silentTranslationWarn: {
    configurable: true
  },
  silentFallbackWarn: {
    configurable: true
  },
  preserveDirectiveContent: {
    configurable: true
  },
  warnHtmlInMessage: {
    configurable: true
  },
  postTranslation: {
    configurable: true
  }
};

VueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage(locale, level, message) {
  var paths = [];

  var fn = function (level, locale, message, paths) {
    if (isPlainObject(message)) {
      Object.keys(message).forEach(function (key) {
        var val = message[key];

        if (isPlainObject(val)) {
          paths.push(key);
          paths.push('.');
          fn(level, locale, val, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(key);
          fn(level, locale, val, paths);
          paths.pop();
        }
      });
    } else if (isArray(message)) {
      message.forEach(function (item, index) {
        if (isPlainObject(item)) {
          paths.push("[" + index + "]");
          paths.push('.');
          fn(level, locale, item, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push("[" + index + "]");
          fn(level, locale, item, paths);
          paths.pop();
        }
      });
    } else if (isString(message)) {
      var ret = htmlTagMatcher.test(message);

      if (ret) {
        var msg = "Detected HTML in message '" + message + "' of keypath '" + paths.join('') + "' at '" + locale + "'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";

        if (level === 'warn') {
          warn(msg);
        } else if (level === 'error') {
          error(msg);
        }
      }
    }
  };

  fn(level, locale, message, paths);
};

VueI18n.prototype._initVM = function _initVM(data) {
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  this._vm = new Vue({
    data: data
  });
  Vue.config.silent = silent;
};

VueI18n.prototype.destroyVM = function destroyVM() {
  this._vm.$destroy();
};

VueI18n.prototype.subscribeDataChanging = function subscribeDataChanging(vm) {
  this._dataListeners.add(vm);
};

VueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging(vm) {
  remove(this._dataListeners, vm);
};

VueI18n.prototype.watchI18nData = function watchI18nData() {
  var self = this;
  return this._vm.$watch('$data', function () {
    self._dataListeners.forEach(function (e) {
      Vue.nextTick(function () {
        e && e.$forceUpdate();
      });
    });
  }, {
    deep: true
  });
};

VueI18n.prototype.watchLocale = function watchLocale() {
  /* istanbul ignore if */
  if (!this._sync || !this._root) {
    return null;
  }

  var target = this._vm;
  return this._root.$i18n.vm.$watch('locale', function (val) {
    target.$set(target, 'locale', val);
    target.$forceUpdate();
  }, {
    immediate: true
  });
};

VueI18n.prototype.onComponentInstanceCreated = function onComponentInstanceCreated(newI18n) {
  if (this._componentInstanceCreatedListener) {
    this._componentInstanceCreatedListener(newI18n, this);
  }
};

prototypeAccessors.vm.get = function () {
  return this._vm;
};

prototypeAccessors.messages.get = function () {
  return looseClone(this._getMessages());
};

prototypeAccessors.dateTimeFormats.get = function () {
  return looseClone(this._getDateTimeFormats());
};

prototypeAccessors.numberFormats.get = function () {
  return looseClone(this._getNumberFormats());
};

prototypeAccessors.availableLocales.get = function () {
  return Object.keys(this.messages).sort();
};

prototypeAccessors.locale.get = function () {
  return this._vm.locale;
};

prototypeAccessors.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

prototypeAccessors.fallbackLocale.get = function () {
  return this._vm.fallbackLocale;
};

prototypeAccessors.fallbackLocale.set = function (locale) {
  this._localeChainCache = {};

  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

prototypeAccessors.formatFallbackMessages.get = function () {
  return this._formatFallbackMessages;
};

prototypeAccessors.formatFallbackMessages.set = function (fallback) {
  this._formatFallbackMessages = fallback;
};

prototypeAccessors.missing.get = function () {
  return this._missing;
};

prototypeAccessors.missing.set = function (handler) {
  this._missing = handler;
};

prototypeAccessors.formatter.get = function () {
  return this._formatter;
};

prototypeAccessors.formatter.set = function (formatter) {
  this._formatter = formatter;
};

prototypeAccessors.silentTranslationWarn.get = function () {
  return this._silentTranslationWarn;
};

prototypeAccessors.silentTranslationWarn.set = function (silent) {
  this._silentTranslationWarn = silent;
};

prototypeAccessors.silentFallbackWarn.get = function () {
  return this._silentFallbackWarn;
};

prototypeAccessors.silentFallbackWarn.set = function (silent) {
  this._silentFallbackWarn = silent;
};

prototypeAccessors.preserveDirectiveContent.get = function () {
  return this._preserveDirectiveContent;
};

prototypeAccessors.preserveDirectiveContent.set = function (preserve) {
  this._preserveDirectiveContent = preserve;
};

prototypeAccessors.warnHtmlInMessage.get = function () {
  return this._warnHtmlInMessage;
};

prototypeAccessors.warnHtmlInMessage.set = function (level) {
  var this$1 = this;
  var orgLevel = this._warnHtmlInMessage;
  this._warnHtmlInMessage = level;

  if (orgLevel !== level && (level === 'warn' || level === 'error')) {
    var messages = this._getMessages();

    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }
};

prototypeAccessors.postTranslation.get = function () {
  return this._postTranslation;
};

prototypeAccessors.postTranslation.set = function (handler) {
  this._postTranslation = handler;
};

VueI18n.prototype._getMessages = function _getMessages() {
  return this._vm.messages;
};

VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats() {
  return this._vm.dateTimeFormats;
};

VueI18n.prototype._getNumberFormats = function _getNumberFormats() {
  return this._vm.numberFormats;
};

VueI18n.prototype._warnDefault = function _warnDefault(locale, key, result, vm, values, interpolateMode) {
  if (!isNull(result)) {
    return result;
  }

  if (this._missing) {
    var missingRet = this._missing.apply(null, [locale, key, vm, values]);

    if (isString(missingRet)) {
      return missingRet;
    }
  } else {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn("Cannot translate the value of keypath '" + key + "'. " + 'Use the value of keypath as default.');
    }
  }

  if (this._formatFallbackMessages) {
    var parsedArgs = parseArgs.apply(void 0, values);
    return this._render(key, interpolateMode, parsedArgs.params, key);
  } else {
    return key;
  }
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot(val) {
  return !val && !isNull(this._root) && this._fallbackRoot;
};

VueI18n.prototype._isSilentFallbackWarn = function _isSilentFallbackWarn(key) {
  return this._silentFallbackWarn instanceof RegExp ? this._silentFallbackWarn.test(key) : this._silentFallbackWarn;
};

VueI18n.prototype._isSilentFallback = function _isSilentFallback(locale, key) {
  return this._isSilentFallbackWarn(key) && (this._isFallbackRoot() || locale !== this.fallbackLocale);
};

VueI18n.prototype._isSilentTranslationWarn = function _isSilentTranslationWarn(key) {
  return this._silentTranslationWarn instanceof RegExp ? this._silentTranslationWarn.test(key) : this._silentTranslationWarn;
};

VueI18n.prototype._interpolate = function _interpolate(locale, message, key, host, interpolateMode, values, visitedLinkStack) {
  if (!message) {
    return null;
  }

  var pathRet = this._path.getPathValue(message, key);

  if (isArray(pathRet) || isPlainObject(pathRet)) {
    return pathRet;
  }

  var ret;

  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject(message)) {
      ret = message[key];

      if (!(isString(ret) || isFunction(ret))) {
        if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallback(locale, key)) {
          warn("Value of key '" + key + "' is not a string or function !");
        }

        return null;
      }
    } else {
      return null;
    }
  } else {
    /* istanbul ignore else */
    if (isString(pathRet) || isFunction(pathRet)) {
      ret = pathRet;
    } else {
      if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallback(locale, key)) {
        warn("Value of key '" + key + "' is not a string or function!");
      }

      return null;
    }
  } // Check for the existence of links within the translated string


  if (isString(ret) && (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0)) {
    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);
  }

  return this._render(ret, interpolateMode, values, key);
};

VueI18n.prototype._link = function _link(locale, message, str, host, interpolateMode, values, visitedLinkStack) {
  var ret = str; // Match all the links within the local
  // We are going to replace each of
  // them with its translation

  var matches = ret.match(linkKeyMatcher);

  for (var idx in matches) {
    // ie compatible: filter custom array
    // prototype method
    if (!matches.hasOwnProperty(idx)) {
      continue;
    }

    var link = matches[idx];
    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);
    var linkPrefix = linkKeyPrefixMatches[0];
    var formatterName = linkKeyPrefixMatches[1]; // Remove the leading @:, @.case: and the brackets

    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');

    if (includes(visitedLinkStack, linkPlaceholder)) {
      if (true) {
        warn("Circular reference found. \"" + link + "\" is already visited in the chain of " + visitedLinkStack.reverse().join(' <- '));
      }

      return ret;
    }

    visitedLinkStack.push(linkPlaceholder); // Translate the link

    var translated = this._interpolate(locale, message, linkPlaceholder, host, interpolateMode === 'raw' ? 'string' : interpolateMode, interpolateMode === 'raw' ? undefined : values, visitedLinkStack);

    if (this._isFallbackRoot(translated)) {
      if ( true && !this._isSilentTranslationWarn(linkPlaceholder)) {
        warn("Fall back to translate the link placeholder '" + linkPlaceholder + "' with root locale.");
      }
      /* istanbul ignore if */


      if (!this._root) {
        throw Error('unexpected error');
      }

      var root = this._root.$i18n;
      translated = root._translate(root._getMessages(), root.locale, root.fallbackLocale, linkPlaceholder, host, interpolateMode, values);
    }

    translated = this._warnDefault(locale, linkPlaceholder, translated, host, isArray(values) ? values : [values], interpolateMode);

    if (this._modifiers.hasOwnProperty(formatterName)) {
      translated = this._modifiers[formatterName](translated);
    } else if (defaultModifiers.hasOwnProperty(formatterName)) {
      translated = defaultModifiers[formatterName](translated);
    }

    visitedLinkStack.pop(); // Replace the link with the translated

    ret = !translated ? ret : ret.replace(link, translated);
  }

  return ret;
};

VueI18n.prototype._createMessageContext = function _createMessageContext(values) {
  var _list = isArray(values) ? values : [];

  var _named = isObject(values) ? values : {};

  var list = function (index) {
    return _list[index];
  };

  var named = function (key) {
    return _named[key];
  };

  return {
    list: list,
    named: named
  };
};

VueI18n.prototype._render = function _render(message, interpolateMode, values, path) {
  if (isFunction(message)) {
    return message(this._createMessageContext(values));
  }

  var ret = this._formatter.interpolate(message, values, path); // If the custom formatter refuses to work - apply the default one


  if (!ret) {
    ret = defaultFormatter.interpolate(message, values, path);
  } // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter


  return interpolateMode === 'string' && !isString(ret) ? ret.join('') : ret;
};

VueI18n.prototype._appendItemToChain = function _appendItemToChain(chain, item, blocks) {
  var follow = false;

  if (!includes(chain, item)) {
    follow = true;

    if (item) {
      follow = item[item.length - 1] !== '!';
      item = item.replace(/!/g, '');
      chain.push(item);

      if (blocks && blocks[item]) {
        follow = blocks[item];
      }
    }
  }

  return follow;
};

VueI18n.prototype._appendLocaleToChain = function _appendLocaleToChain(chain, locale, blocks) {
  var follow;
  var tokens = locale.split('-');

  do {
    var item = tokens.join('-');
    follow = this._appendItemToChain(chain, item, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && follow === true);

  return follow;
};

VueI18n.prototype._appendBlockToChain = function _appendBlockToChain(chain, block, blocks) {
  var follow = true;

  for (var i = 0; i < block.length && isBoolean(follow); i++) {
    var locale = block[i];

    if (isString(locale)) {
      follow = this._appendLocaleToChain(chain, locale, blocks);
    }
  }

  return follow;
};

VueI18n.prototype._getLocaleChain = function _getLocaleChain(start, fallbackLocale) {
  if (start === '') {
    return [];
  }

  if (!this._localeChainCache) {
    this._localeChainCache = {};
  }

  var chain = this._localeChainCache[start];

  if (!chain) {
    if (!fallbackLocale) {
      fallbackLocale = this.fallbackLocale;
    }

    chain = []; // first block defined by start

    var block = [start]; // while any intervening block found

    while (isArray(block)) {
      block = this._appendBlockToChain(chain, block, fallbackLocale);
    } // last block defined by default


    var defaults;

    if (isArray(fallbackLocale)) {
      defaults = fallbackLocale;
    } else if (isObject(fallbackLocale)) {
      /* $FlowFixMe */
      if (fallbackLocale['default']) {
        defaults = fallbackLocale['default'];
      } else {
        defaults = null;
      }
    } else {
      defaults = fallbackLocale;
    } // convert defaults to array


    if (isString(defaults)) {
      block = [defaults];
    } else {
      block = defaults;
    }

    if (block) {
      this._appendBlockToChain(chain, block, null);
    }

    this._localeChainCache[start] = chain;
  }

  return chain;
};

VueI18n.prototype._translate = function _translate(messages, locale, fallback, key, host, interpolateMode, args) {
  var chain = this._getLocaleChain(locale, fallback);

  var res;

  for (var i = 0; i < chain.length; i++) {
    var step = chain[i];
    res = this._interpolate(step, messages[step], key, host, interpolateMode, args, [key]);

    if (!isNull(res)) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn("Fall back to translate the keypath '" + key + "' with '" + step + "' locale.");
      }

      return res;
    }
  }

  return null;
};

VueI18n.prototype._t = function _t(key, _locale, messages, host) {
  var ref;
  var values = [],
      len = arguments.length - 4;

  while (len-- > 0) values[len] = arguments[len + 4];

  if (!key) {
    return '';
  }

  var parsedArgs = parseArgs.apply(void 0, values);

  if (this._escapeParameterHtml) {
    parsedArgs.params = escapeParams(parsedArgs.params);
  }

  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(messages, locale, this.fallbackLocale, key, host, 'string', parsedArgs.params);

  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn("Fall back to translate the keypath '" + key + "' with root locale.");
    }
    /* istanbul ignore if */


    if (!this._root) {
      throw Error('unexpected error');
    }

    return (ref = this._root).$t.apply(ref, [key].concat(values));
  } else {
    ret = this._warnDefault(locale, key, ret, host, values, 'string');

    if (this._postTranslation && ret !== null && ret !== undefined) {
      ret = this._postTranslation(ret, key);
    }

    return ret;
  }
};

VueI18n.prototype.t = function t(key) {
  var ref;
  var values = [],
      len = arguments.length - 1;

  while (len-- > 0) values[len] = arguments[len + 1];

  return (ref = this)._t.apply(ref, [key, this.locale, this._getMessages(), null].concat(values));
};

VueI18n.prototype._i = function _i(key, locale, messages, host, values) {
  var ret = this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);

  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn("Fall back to interpolate the keypath '" + key + "' with root locale.");
    }

    if (!this._root) {
      throw Error('unexpected error');
    }

    return this._root.$i18n.i(key, locale, values);
  } else {
    return this._warnDefault(locale, key, ret, host, [values], 'raw');
  }
};

VueI18n.prototype.i = function i(key, locale, values) {
  /* istanbul ignore if */
  if (!key) {
    return '';
  }

  if (!isString(locale)) {
    locale = this.locale;
  }

  return this._i(key, locale, this._getMessages(), null, values);
};

VueI18n.prototype._tc = function _tc(key, _locale, messages, host, choice) {
  var ref;
  var values = [],
      len = arguments.length - 5;

  while (len-- > 0) values[len] = arguments[len + 5];

  if (!key) {
    return '';
  }

  if (choice === undefined) {
    choice = 1;
  }

  var predefined = {
    'count': choice,
    'n': choice
  };
  var parsedArgs = parseArgs.apply(void 0, values);
  parsedArgs.params = Object.assign(predefined, parsedArgs.params);
  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];
  return this.fetchChoice((ref = this)._t.apply(ref, [key, _locale, messages, host].concat(values)), choice);
};

VueI18n.prototype.fetchChoice = function fetchChoice(message, choice) {
  /* istanbul ignore if */
  if (!message || !isString(message)) {
    return null;
  }

  var choices = message.split('|');
  choice = this.getChoiceIndex(choice, choices.length);

  if (!choices[choice]) {
    return message;
  }

  return choices[choice].trim();
};

VueI18n.prototype.tc = function tc(key, choice) {
  var ref;
  var values = [],
      len = arguments.length - 2;

  while (len-- > 0) values[len] = arguments[len + 2];

  return (ref = this)._tc.apply(ref, [key, this.locale, this._getMessages(), null, choice].concat(values));
};

VueI18n.prototype._te = function _te(key, locale, messages) {
  var args = [],
      len = arguments.length - 3;

  while (len-- > 0) args[len] = arguments[len + 3];

  var _locale = parseArgs.apply(void 0, args).locale || locale;

  return this._exist(messages[_locale], key);
};

VueI18n.prototype.te = function te(key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale);
};

VueI18n.prototype.getLocaleMessage = function getLocaleMessage(locale) {
  return looseClone(this._vm.messages[locale] || {});
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage(locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }

  this._vm.$set(this._vm.messages, locale, message);
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage(locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }

  this._vm.$set(this._vm.messages, locale, merge(typeof this._vm.messages[locale] !== 'undefined' && Object.keys(this._vm.messages[locale]).length ? this._vm.messages[locale] : {}, message));
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat(locale) {
  return looseClone(this._vm.dateTimeFormats[locale] || {});
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat(locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, format);

  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat(locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, merge(this._vm.dateTimeFormats[locale] || {}, format));

  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype._clearDateTimeFormat = function _clearDateTimeFormat(locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._dateTimeFormatters.hasOwnProperty(id)) {
      continue;
    }

    delete this._dateTimeFormatters[id];
  }
};

VueI18n.prototype._localizeDateTime = function _localizeDateTime(value, locale, fallback, dateTimeFormats, key) {
  var _locale = locale;
  var formats = dateTimeFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);

  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = dateTimeFormats[step];
    _locale = step; // fallback locale

    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn("Fall back to '" + step + "' datetime formats from '" + current + "' datetime formats.");
      }
    } else {
      break;
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null;
  } else {
    var format = formats[key];
    var id = _locale + "__" + key;
    var formatter = this._dateTimeFormatters[id];

    if (!formatter) {
      formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);
    }

    return formatter.format(value);
  }
};

VueI18n.prototype._d = function _d(value, locale, key) {
  /* istanbul ignore if */
  if ( true && !VueI18n.availabilities.dateTimeFormat) {
    warn('Cannot format a Date value due to not supported Intl.DateTimeFormat.');
    return '';
  }

  if (!key) {
    return new Intl.DateTimeFormat(locale).format(value);
  }

  var ret = this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key);

  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn("Fall back to datetime localization of root: key '" + key + "'.");
    }
    /* istanbul ignore if */


    if (!this._root) {
      throw Error('unexpected error');
    }

    return this._root.$i18n.d(value, key, locale);
  } else {
    return ret || '';
  }
};

VueI18n.prototype.d = function d(value) {
  var args = [],
      len = arguments.length - 1;

  while (len-- > 0) args[len] = arguments[len + 1];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }

      if (args[0].key) {
        key = args[0].key;
      }
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }

    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._d(value, locale, key);
};

VueI18n.prototype.getNumberFormat = function getNumberFormat(locale) {
  return looseClone(this._vm.numberFormats[locale] || {});
};

VueI18n.prototype.setNumberFormat = function setNumberFormat(locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, format);

  this._clearNumberFormat(locale, format);
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat(locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, merge(this._vm.numberFormats[locale] || {}, format));

  this._clearNumberFormat(locale, format);
};

VueI18n.prototype._clearNumberFormat = function _clearNumberFormat(locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._numberFormatters.hasOwnProperty(id)) {
      continue;
    }

    delete this._numberFormatters[id];
  }
};

VueI18n.prototype._getNumberFormatter = function _getNumberFormatter(value, locale, fallback, numberFormats, key, options) {
  var _locale = locale;
  var formats = numberFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);

  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = numberFormats[step];
    _locale = step; // fallback locale

    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn("Fall back to '" + step + "' number formats from '" + current + "' number formats.");
      }
    } else {
      break;
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null;
  } else {
    var format = formats[key];
    var formatter;

    if (options) {
      // If options specified - create one time number formatter
      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._numberFormatters[id];

      if (!formatter) {
        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);
      }
    }

    return formatter;
  }
};

VueI18n.prototype._n = function _n(value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (true) {
      warn('Cannot format a Number value due to not supported Intl.NumberFormat.');
    }

    return '';
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.format(value);
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);

  var ret = formatter && formatter.format(value);

  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn("Fall back to number localization of root: key '" + key + "'.");
    }
    /* istanbul ignore if */


    if (!this._root) {
      throw Error('unexpected error');
    }

    return this._root.$i18n.n(value, Object.assign({}, {
      key: key,
      locale: locale
    }, options));
  } else {
    return ret || '';
  }
};

VueI18n.prototype.n = function n(value) {
  var args = [],
      len = arguments.length - 1;

  while (len-- > 0) args[len] = arguments[len + 1];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }

      if (args[0].key) {
        key = args[0].key;
      } // Filter out number format options only


      options = Object.keys(args[0]).reduce(function (acc, key) {
        var obj;

        if (includes(numberFormatKeys, key)) {
          return Object.assign({}, acc, (obj = {}, obj[key] = args[0][key], obj));
        }

        return acc;
      }, null);
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }

    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._n(value, locale, key, options);
};

VueI18n.prototype._ntp = function _ntp(value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (true) {
      warn('Cannot format to parts a Number value due to not supported Intl.NumberFormat.');
    }

    return [];
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.formatToParts(value);
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);

  var ret = formatter && formatter.formatToParts(value);

  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn("Fall back to format number to parts of root: key '" + key + "' .");
    }
    /* istanbul ignore if */


    if (!this._root) {
      throw Error('unexpected error');
    }

    return this._root.$i18n._ntp(value, locale, key, options);
  } else {
    return ret || [];
  }
};

Object.defineProperties(VueI18n.prototype, prototypeAccessors);
var availabilities; // $FlowFixMe

Object.defineProperty(VueI18n, 'availabilities', {
  get: function get() {
    if (!availabilities) {
      var intlDefined = typeof Intl !== 'undefined';
      availabilities = {
        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',
        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'
      };
    }

    return availabilities;
  }
});
VueI18n.install = install;
VueI18n.version = '8.24.4';
/* harmony default export */ __webpack_exports__["default"] = (VueI18n);

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
  * vue-router v3.5.1
  * (c) 2021 Evan You
  * @license MIT
  */

/*  */
function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if ( true && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function extend(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }

  return a;
}
/*  */


var encodeReserveRE = /[!'()*]/g;

var encodeReserveReplacer = function (c) {
  return '%' + c.charCodeAt(0).toString(16);
};

var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas

var encode = function (str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

function decode(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    if (true) {
      warn(false, "Error decoding \"" + str + "\". Leaving it intact.");
    }
  }

  return str;
}

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};
  var parse = _parseQuery || parseQuery;
  var parsedQuery;

  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     true && warn(false, e.message);
    parsedQuery = {};
  }

  for (var key in extraQuery) {
    var value = extraQuery[key];
    parsedQuery[key] = Array.isArray(value) ? value.map(castQueryParamValue) : castQueryParamValue(value);
  }

  return parsedQuery;
}

var castQueryParamValue = function (value) {
  return value == null || typeof value === 'object' ? value : String(value);
};

function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }

        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}
/*  */


var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery = router && router.options.stringifyQuery;
  var query = location.query || {};

  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };

  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }

  return Object.freeze(route);
}

function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && typeof value === 'object') {
    var res = {};

    for (var key in value) {
      res[key] = clone(value[key]);
    }

    return res;
  } else {
    return value;
  }
} // the starting route that represents the initial state


var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];

  while (record) {
    res.unshift(record);
    record = record.parent;
  }

  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0) query = {};
  var hash = ref.hash;
  if (hash === void 0) hash = '';
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b, onlyPath) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath || a.hash === b.hash && isObjectEqual(a.query, b.query));
  } else if (a.name && b.name) {
    return a.name === b.name && (onlyPath || a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params));
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {}; // handle null value #1566

  if (!a || !b) {
    return a === b;
  }

  var aKeys = Object.keys(a).sort();
  var bKeys = Object.keys(b).sort();

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  return aKeys.every(function (key, i) {
    var aVal = a[key];
    var bKey = bKeys[i];

    if (bKey !== key) {
      return false;
    }

    var bVal = b[key]; // query values can be null and undefined

    if (aVal == null || bVal == null) {
      return aVal === bVal;
    } // check nested equality


    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal);
    }

    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}

function handleRouteEntered(route) {
  for (var i = 0; i < route.matched.length; i++) {
    var record = route.matched[i];

    for (var name in record.instances) {
      var instance = record.instances[name];
      var cbs = record.enteredCbs[name];

      if (!instance || !cbs) {
        continue;
      }

      delete record.enteredCbs[name];

      for (var i$1 = 0; i$1 < cbs.length; i$1++) {
        if (!instance._isBeingDestroyed) {
          cbs[i$1](instance);
        }
      }
    }
  }
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data; // used by devtools to display a router-view badge

    data.routerView = true; // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots

    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.

    var depth = 0;
    var inactive = false;

    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode ? parent.$vnode.data : {};

      if (vnodeData.routerView) {
        depth++;
      }

      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {
        inactive = true;
      }

      parent = parent.$parent;
    }

    data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive

    if (inactive) {
      var cachedData = cache[name];
      var cachedComponent = cachedData && cachedData.component;

      if (cachedComponent) {
        // #2301
        // pass props
        if (cachedData.configProps) {
          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);
        }

        return h(cachedComponent, data, children);
      } else {
        // render previous empty view
        return h();
      }
    }

    var matched = route.matched[depth];
    var component = matched && matched.components[name]; // render empty node if no matched route or no config component

    if (!matched || !component) {
      cache[name] = null;
      return h();
    } // cache component


    cache[name] = {
      component: component
    }; // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks

    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];

      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    } // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;

    (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    }; // register instance in init hook
    // in case kept-alive component be actived when routes changed


    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive && vnode.componentInstance && vnode.componentInstance !== matched.instances[name]) {
        matched.instances[name] = vnode.componentInstance;
      } // if the route transition has already been confirmed then we weren't
      // able to call the cbs during confirmation as the component was not
      // registered yet, so we call it here.


      handleRouteEntered(route);
    };

    var configProps = matched.props && matched.props[name]; // save route and configProps in cache

    if (configProps) {
      extend(cache[name], {
        route: route,
        configProps: configProps
      });
      fillPropsinData(component, data, route, configProps);
    }

    return h(component, data, children);
  }
};

function fillPropsinData(component, data, route, configProps) {
  // resolve props
  var propsToPass = data.props = resolveProps(route, configProps);

  if (propsToPass) {
    // clone to prevent mutation
    propsToPass = data.props = extend({}, propsToPass); // pass non-declared props as attrs

    var attrs = data.attrs = data.attrs || {};

    for (var key in propsToPass) {
      if (!component.props || !(key in component.props)) {
        attrs[key] = propsToPass[key];
        delete propsToPass[key];
      }
    }
  }
}

function resolveProps(route, config) {
  switch (typeof config) {
    case 'undefined':
      return;

    case 'object':
      return config;

    case 'function':
      return config(route);

    case 'boolean':
      return config ? route.params : undefined;

    default:
      if (true) {
        warn(false, "props in \"" + route.path + "\" is a " + typeof config + ", " + "expecting an object, function or boolean.");
      }

  }
}
/*  */


function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);

  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/'); // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)

  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  } // resolve relative path


  var segments = relative.replace(/^\//, '').split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  } // ensure leading slash


  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';
  var hashIndex = path.indexOf('#');

  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');

  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
/**
 * Expose `pathToRegexp`.
 */


var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/*  */
// $flow-disable-line

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  params = params || {};

  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path)); // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string

    if (typeof params.pathMatch === 'string') {
      params[0] = params.pathMatch;
    }

    return filler(params, {
      pretty: true
    });
  } catch (e) {
    if (true) {
      // Fix #3072 no warn if `pathMatch` is string
      warn(typeof params.pathMatch === 'string', "missing param for " + routeMsg + ": " + e.message);
    }

    return '';
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}
/*  */


function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? {
    path: raw
  } : raw; // named target

  if (next._normalized) {
    return next;
  } else if (next.name) {
    next = extend({}, raw);
    var params = next.params;

    if (params && typeof params === 'object') {
      next.params = extend({}, params);
    }

    return next;
  } // relative params


  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params$1 = extend(extend({}, current.params), next.params);

    if (current.name) {
      next.name = current.name;
      next.params = params$1;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params$1, "path " + current.path);
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }

    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;

  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}
/*  */
// work around weird flow bug


var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function () {};

var warnedCustomSlot;
var warnedTagProp;
var warnedEventProp;
var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    custom: Boolean,
    exact: Boolean,
    exactPath: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    ariaCurrentValue: {
      type: String,
      default: 'page'
    },
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass; // Support global empty active class

    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = route.redirectedFrom ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);
    classes[activeClass] = this.exact || this.exactPath ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);
    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = {
      click: guardEvent
    };

    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };
    var scopedSlot = !this.$scopedSlots.$hasNormal && this.$scopedSlots.default && this.$scopedSlots.default({
      href: href,
      route: route,
      navigate: handler,
      isActive: classes[activeClass],
      isExactActive: classes[exactActiveClass]
    });

    if (scopedSlot) {
      if ( true && !this.custom) {
        !warnedCustomSlot && warn(false, 'In Vue Router 4, the v-slot API will by default wrap its content with an <a> element. Use the custom prop to remove this warning:\n<router-link v-slot="{ navigate, href }" custom></router-link>\n');
        warnedCustomSlot = true;
      }

      if (scopedSlot.length === 1) {
        return scopedSlot[0];
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        if (true) {
          warn(false, "<router-link> with to=\"" + this.to + "\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.");
        }

        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot);
      }
    }

    if (true) {
      if ('tag' in this.$options.propsData && !warnedTagProp) {
        warn(false, "<router-link>'s tag prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.");
        warnedTagProp = true;
      }

      if ('event' in this.$options.propsData && !warnedEventProp) {
        warn(false, "<router-link>'s event prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.");
        warnedEventProp = true;
      }
    }

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = {
        href: href,
        'aria-current': ariaCurrentValue
      };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);

      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = aData.on || {}; // transform existing events in both objects into arrays so we can push later

        for (var event in aData.on) {
          var handler$1 = aData.on[event];

          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        } // append new listeners for router-link


        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
        aAttrs['aria-current'] = ariaCurrentValue;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  } // don't redirect when preventDefault called


  if (e.defaultPrevented) {
    return;
  } // don't redirect on right click


  if (e.button !== undefined && e.button !== 0) {
    return;
  } // don't redirect if `target="_blank"`


  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');

    if (/\b_blank\b/i.test(target)) {
      return;
    }
  } // this may be a Weex event which doesn't have this method


  if (e.preventDefault) {
    e.preventDefault();
  }

  return true;
}

function findAnchor(children) {
  if (children) {
    var child;

    for (var i = 0; i < children.length; i++) {
      child = children[i];

      if (child.tag === 'a') {
        return child;
      }

      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }

  install.installed = true;
  _Vue = Vue;

  var isDef = function (v) {
    return v !== undefined;
  };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;

    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;

        this._router.init(this);

        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }

      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);
  var strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks

  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
/*  */


var inBrowser = typeof window !== 'undefined';
/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap, parentRoute) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || []; // $flow-disable-line

  var pathMap = oldPathMap || Object.create(null); // $flow-disable-line

  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);
  }); // ensure wildcard routes are always at the end

  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  if (true) {
    // warn if routes do not include leading slashes
    var found = pathList // check for missing leading slash
    .filter(function (path) {
      return path && path.charAt(0) !== '*' && path.charAt(0) !== '/';
    });

    if (found.length > 0) {
      var pathNames = found.map(function (path) {
        return "- " + path;
      }).join('\n');
      warn(false, "Non-nested routes must include a leading slash character. Fix the following routes: \n" + pathNames);
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;

  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
    warn( // eslint-disable-next-line no-control-regex
    !/[^\u0000-\u007F]+/.test(path), "Route with path \"" + path + "\" contains unencoded characters, make sure " + "your path is correctly encoded before passing it to the router. Use " + "encodeURI to encode static segments of your path.");
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {
      default: route.component
    },
    alias: route.alias ? typeof route.alias === 'string' ? [route.alias] : route.alias : [],
    instances: {},
    enteredCbs: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {
      default: route.props
    }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return /^\/?$/.test(child.path);
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }

    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];

      if ( true && alias === path) {
        warn(false, "Found an alias with the same value as the path: \"" + path + "\". You have to remove that alias. It will be ignored in development."); // skip in dev to make it work

        continue;
      }

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ( true && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);

  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }

  return regex;
}

function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\/$/, '');
  }

  if (path[0] === '/') {
    return path;
  }

  if (parent == null) {
    return path;
  }

  return cleanPath(parent.path + "/" + path);
}
/*  */


function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function addRoute(parentOrRoute, route) {
    var parent = typeof parentOrRoute !== 'object' ? nameMap[parentOrRoute] : undefined; // $flow-disable-line

    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent); // add aliases of parent

    if (parent) {
      createRouteMap( // $flow-disable-line route is defined if parent is
      parent.alias.map(function (alias) {
        return {
          path: alias,
          children: [route]
        };
      }), pathList, pathMap, nameMap, parent);
    }
  }

  function getRoutes() {
    return pathList.map(function (path) {
      return pathMap[path];
    });
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];

      if (true) {
        warn(record, "Route with name '" + name + "' does not exist");
      }

      if (!record) {
        return _createRoute(null, location);
      }

      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
      return _createRoute(record, location, redirectedFrom);
    } else if (location.path) {
      location.params = {};

      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];

        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    } // no match


    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = {
        path: redirect
      };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];

      if (true) {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }

      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record); // 2. resolve params

      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\""); // 3. rematch with existing query and hash

      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });

    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }

    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }

    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }

    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoute: addRoute,
    getRoutes: getRoutes,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];

    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}
/*  */
// use User Timing api (if present) for more accurate key precision


var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

function genStateKey() {
  return Time.now().toFixed(3);
}

var _key = genStateKey();

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  return _key = key;
}
/*  */


var positionStore = Object.create(null);

function setupScroll() {
  // Prevent browser scroll behavior on History popstate
  if ('scrollRestoration' in window.history) {
    window.history.scrollRestoration = 'manual';
  } // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't


  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, ''); // preserve existing history state as it could be overriden by the user

  var stateCopy = extend({}, window.history.state);
  stateCopy.key = getStateKey();
  window.history.replaceState(stateCopy, '', absolutePath);
  window.addEventListener('popstate', handlePopState);
  return function () {
    window.removeEventListener('popstate', handlePopState);
  };
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;

  if (!behavior) {
    return;
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  } // wait until re-render finishes before scrolling


  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return;
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition(shouldScroll, position);
      }).catch(function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();

  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function handlePopState(e) {
  saveScrollPosition();

  if (e.state && e.state.key) {
    setStateKey(e.state.key);
  }
}

function getScrollPosition() {
  var key = getStateKey();

  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition(shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';

  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
    ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
    : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    // $flow-disable-line
    if ('scrollBehavior' in document.documentElement.style) {
      window.scrollTo({
        left: position.x,
        top: position.y,
        // $flow-disable-line
        behavior: shouldScroll.behavior
      });
    } else {
      window.scrollTo(position.x, position.y);
    }
  }
}
/*  */


var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && typeof window.history.pushState === 'function';
}();

function pushState(url, replace) {
  saveScrollPosition(); // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls

  var history = window.history;

  try {
    if (replace) {
      // preserve existing history state as it could be overriden by the user
      var stateCopy = extend({}, history.state);
      stateCopy.key = getStateKey();
      history.replaceState(stateCopy, '', url);
    } else {
      history.pushState({
        key: setStateKey(genStateKey())
      }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}
/*  */


function runQueue(queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };

  step(0);
} // When changing thing, also edit router.d.ts


var NavigationFailureType = {
  redirected: 2,
  aborted: 4,
  cancelled: 8,
  duplicated: 16
};

function createNavigationRedirectedError(from, to) {
  return createRouterError(from, to, NavigationFailureType.redirected, "Redirected when going from \"" + from.fullPath + "\" to \"" + stringifyRoute(to) + "\" via a navigation guard.");
}

function createNavigationDuplicatedError(from, to) {
  var error = createRouterError(from, to, NavigationFailureType.duplicated, "Avoided redundant navigation to current location: \"" + from.fullPath + "\"."); // backwards compatible with the first introduction of Errors

  error.name = 'NavigationDuplicated';
  return error;
}

function createNavigationCancelledError(from, to) {
  return createRouterError(from, to, NavigationFailureType.cancelled, "Navigation cancelled from \"" + from.fullPath + "\" to \"" + to.fullPath + "\" with a new navigation.");
}

function createNavigationAbortedError(from, to) {
  return createRouterError(from, to, NavigationFailureType.aborted, "Navigation aborted from \"" + from.fullPath + "\" to \"" + to.fullPath + "\" via a navigation guard.");
}

function createRouterError(from, to, type, message) {
  var error = new Error(message);
  error._isRouter = true;
  error.from = from;
  error.to = to;
  error.type = type;
  return error;
}

var propertiesToLog = ['params', 'query', 'hash'];

function stringifyRoute(to) {
  if (typeof to === 'string') {
    return to;
  }

  if ('path' in to) {
    return to.path;
  }

  var location = {};
  propertiesToLog.forEach(function (key) {
    if (key in to) {
      location[key] = to[key];
    }
  });
  return JSON.stringify(location, null, 2);
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

function isNavigationFailure(err, errorType) {
  return isError(err) && err._isRouter && (errorType == null || err.type === errorType);
}
/*  */


function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;
        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          } // save resolved on async factory in case it's used elsewhere


          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;

          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           true && warn(false, msg);

          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;

        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }

        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;

            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

var hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
} // in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.


function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    if (called) {
      return;
    }

    called = true;
    return fn.apply(this, args);
  };
}
/*  */


var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base); // start with a route object that stands for "nowhere"

  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
  this.listeners = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);

    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route; // catch redirect option https://github.com/vuejs/vue-router/issues/3201

  try {
    route = this.router.match(location, this.current);
  } catch (e) {
    this.errorCbs.forEach(function (cb) {
      cb(e);
    }); // Exception should still be thrown

    throw e;
  }

  var prev = this.current;
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();
    this$1.router.afterHooks.forEach(function (hook) {
      hook && hook(route, prev);
    }); // fire ready cbs once

    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }

    if (err && !this$1.ready) {
      // Initial redirection should not mark the history as ready yet
      // because it's triggered by the redirection instead
      // https://github.com/vuejs/vue-router/issues/3225
      // https://github.com/vuejs/vue-router/issues/3331
      if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {
        this$1.ready = true;
        this$1.readyErrorCbs.forEach(function (cb) {
          cb(err);
        });
      }
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;
  this.pending = route;

  var abort = function (err) {
    // changed after adding errors with
    // https://github.com/vuejs/vue-router/pull/3047 before that change,
    // redirect and aborted navigation would produce an err == null
    if (!isNavigationFailure(err) && isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }

    onAbort && onAbort(err);
  };

  var lastRouteIndex = route.matched.length - 1;
  var lastCurrentIndex = current.matched.length - 1;

  if (isSameRoute(route, current) && // in the case the route map has been dynamically appended to
  lastRouteIndex === lastCurrentIndex && route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]) {
    this.ensureURL();
    return abort(createNavigationDuplicatedError(current, route));
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat( // in-component leave guards
  extractLeaveGuards(deactivated), // global before hooks
  this.router.beforeHooks, // in-component update hooks
  extractUpdateHooks(updated), // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }), // async components
  resolveAsyncComponents(activated));

  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort(createNavigationCancelledError(current, route));
    }

    try {
      hook(route, current, function (to) {
        if (to === false) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(createNavigationAbortedError(current, route));
        } else if (isError(to)) {
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || typeof to === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort(createNavigationRedirectedError(current, route));

          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort(createNavigationCancelledError(current, route));
      }

      this$1.pending = null;
      onComplete(route);

      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          handleRouteEntered(route);
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  this.current = route;
  this.cb && this.cb(route);
};

History.prototype.setupListeners = function setupListeners() {// Default implementation is empty
};

History.prototype.teardown = function teardown() {
  // clean up event listeners
  // https://github.com/vuejs/vue-router/issues/2341
  this.listeners.forEach(function (cleanupListener) {
    cleanupListener();
  });
  this.listeners = []; // reset current history route
  // https://github.com/vuejs/vue-router/issues/3294

  this.current = START;
  this.pending = null;
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin

      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  } // make sure there's the starting slash


  if (base.charAt(0) !== '/') {
    base = '/' + base;
  } // remove trailing slash


  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);

  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }

  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);

    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }

  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key);
  });
}

function bindEnterGuard(guard, match, key) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        if (!match.enteredCbs[key]) {
          match.enteredCbs[key] = [];
        }

        match.enteredCbs[key].push(cb);
      }

      next(cb);
    });
  };
}
/*  */


var HTML5History = /*@__PURE__*/function (History) {
  function HTML5History(router, base) {
    History.call(this, router, base);
    this._startLocation = getLocation(this.base);
  }

  if (History) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create(History && History.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return;
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current; // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.

      var location = getLocation(this$1.base);

      if (this$1.current === START && location === this$1._startLocation) {
        return;
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    };

    window.addEventListener('popstate', handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener('popstate', handleRoutingEvent);
    });
  };

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = window.location.pathname;

  if (base && path.toLowerCase().indexOf(base.toLowerCase()) === 0) {
    path = path.slice(base.length);
  }

  return (path || '/') + window.location.search + window.location.hash;
}
/*  */


var HashHistory = /*@__PURE__*/function (History) {
  function HashHistory(router, base, fallback) {
    History.call(this, router, base); // check history fallback deeplinking

    if (fallback && checkFallback(this.base)) {
      return;
    }

    ensureSlash();
  }

  if (History) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create(History && History.prototype);
  HashHistory.prototype.constructor = HashHistory; // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early

  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return;
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current;

      if (!ensureSlash()) {
        return;
      }

      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }

        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    };

    var eventType = supportsPushState ? 'popstate' : 'hashchange';
    window.addEventListener(eventType, handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener(eventType, handleRoutingEvent);
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;

    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);

  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();

  if (path.charAt(0) === '/') {
    return true;
  }

  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#'); // empty path

  if (index < 0) {
    return '';
  }

  href = href.slice(index + 1);
  return href;
}

function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + "#" + path;
}

function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
/*  */


var AbstractHistory = /*@__PURE__*/function (History) {
  function AbstractHistory(router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create(History && History.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;
    var targetIndex = this.index + n;

    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }

    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      var prev = this$1.current;
      this$1.index = targetIndex;
      this$1.updateRoute(route);
      this$1.router.afterHooks.forEach(function (hook) {
        hook && hook(route, prev);
      });
    }, function (err) {
      if (isNavigationFailure(err, NavigationFailureType.duplicated)) {
        this$1.index = targetIndex;
      }
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {// noop
  };

  return AbstractHistory;
}(History);
/*  */


var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;

  if (this.fallback) {
    mode = 'hash';
  }

  if (!inBrowser) {
    mode = 'abstract';
  }

  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;

    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;

    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;

    default:
      if (true) {
        assert(false, "invalid mode: " + mode);
      }

  }
};

var prototypeAccessors = {
  currentRoute: {
    configurable: true
  }
};

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app
/* Vue component instance */
) {
  var this$1 = this;
   true && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");
  this.apps.push(app); // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639

  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);

    if (index > -1) {
      this$1.apps.splice(index, 1);
    } // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused


    if (this$1.app === app) {
      this$1.app = this$1.apps[0] || null;
    }

    if (!this$1.app) {
      this$1.history.teardown();
    }
  }); // main app previously initialized
  // return as we don't need to set up new history listener

  if (this.app) {
    return;
  }

  this.app = app;
  var history = this.history;

  if (history instanceof HTML5History || history instanceof HashHistory) {
    var handleInitialScroll = function (routeOrError) {
      var from = history.current;
      var expectScroll = this$1.options.scrollBehavior;
      var supportsScroll = supportsPushState && expectScroll;

      if (supportsScroll && 'fullPath' in routeOrError) {
        handleScroll(this$1, routeOrError, from, false);
      }
    };

    var setupListeners = function (routeOrError) {
      history.setupListeners();
      handleInitialScroll(routeOrError);
    };

    history.transitionTo(history.getCurrentLocation(), setupListeners, setupListeners);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.push(location, resolve, reject);
    });
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.replace(location, resolve, reject);
    });
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;

  if (!route) {
    return [];
  }

  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.getRoutes = function getRoutes() {
  return this.matcher.getRoutes();
};

VueRouter.prototype.addRoute = function addRoute(parentOrRoute, route) {
  this.matcher.addRoute(parentOrRoute, route);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  if (true) {
    warn(false, 'router.addRoutes() is deprecated and has been removed in Vue Router 4. Use router.addRoute() instead.');
  }

  this.matcher.addRoutes(routes);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);

    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '3.5.1';
VueRouter.isNavigationFailure = isNavigationFailure;
VueRouter.NavigationFailureType = NavigationFailureType;
VueRouter.START_LOCATION = START;

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = ('__proto__' in {}); // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function () {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */


var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = (key in target);
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn)) {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.12';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isPreTag = function (tag) {
  return tag === 'pre';
};

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */


var warn$1; // in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model(el, dir, _warn) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (true) {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.", el.rawAttrsMap['v-model']);
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (true) {
    warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);
  } // ensure runtime directive metadata


  return true;
}

function genCheckboxModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
  addHandler(el, 'change', "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + genAssignmentCode(value, '$$a.concat([$$v])') + ")}" + "else{$$i>-1&&(" + genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))') + ")}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
}

function genRadioModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
  addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";
  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + genAssignmentCode(value, assignment);
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel(el, value, modifiers) {
  var type = el.attrsMap.type; // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type

  if (true) {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];

    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " + 'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';
  var valueExpression = '$event.target.value';

  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);

  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', "(" + value + ")");
  addHandler(el, event, code, null, true);

  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.


function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecessary `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */


function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var res = parseText(staticClass, options.delimiters);

    if (res) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.', el.rawAttrsMap['class']);
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};
/*  */

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');

  if (staticStyle) {
    /* istanbul ignore if */
    if (true) {
      var res = parseText(staticStyle, options.delimiters);

      if (res) {
        warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.', el.rawAttrsMap['style']);
      }
    }

    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:(" + el.styleBinding + "),";
  }

  return data;
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};
/*  */

var decoder;
var he = {
  decode: function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }
};
/*  */

var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being passed as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function (tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$2 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$2("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');

  if (once$$1 != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$2("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$2("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$2("<template v-slot> can only appear at the root level inside " + "the receiving component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$2("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$2("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$2("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true
  } // static name
  : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$2("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$2, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$2, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$2, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


function preTransformNode(el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;

    if (!map['v-model']) {
      return;
    }

    var typeBinding;

    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }

    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + map['v-bind'] + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? "&&(" + ifCondition + ")" : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true); // 1. checkbox

      var branch0 = cloneASTElement(el); // process for on the main node

      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed

      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      }); // 2. add radio else-if condition

      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      }); // 3. other

      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0;
    }
  }
}

function cloneASTElement(el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent);
}

var model$1 = {
  preTransformNode: preTransformNode
};
var modules$1 = [klass$1, style$1, model$1];
/*  */

function text(el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', "_s(" + dir.value + ")", dir);
  }
}
/*  */


function html(el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', "_s(" + dir.value + ")", dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};
/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};
/*  */

var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function (condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData$2(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el.if; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
        needsForceUpdate = true;
        break;
      }

      if (parent.if) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el.if && isLegacySyntax ? "(" + el.if + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind$$1 = el.attrsMap['v-bind'];

  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, name + "=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);

  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}

function checkFunctionParameterExpression(exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn("invalid function parameter expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});
/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;
/*  */
// check whether current browser encodes a char inside attribute values

var div;

function getShouldDecode(href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0;
} // #3663: IE encodes newlines inside attribute values while other browsers don't


var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false; // #6828: chrome encodes content in a[href]

var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML;
});
var mount = Vue.prototype.$mount;

Vue.prototype.$mount = function (el, hydrating) {
  el = el && query(el);
  /* istanbul ignore if */

  if (el === document.body || el === document.documentElement) {
     true && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
    return this;
  }

  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */

          if ( true && !template) {
            warn("Template element not found or is empty: " + options.template, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (true) {
          warn('invalid template option:' + template, this);
        }

        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }

    if (template) {
      /* istanbul ignore if */
      if ( true && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
      /* istanbul ignore if */

      if ( true && config.performance && mark) {
        mark('compile end');
        measure("vue " + this._name + " compile", 'compile', 'compile end');
      }
    }
  }

  return mount.call(this, el, hydrating);
};
/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */


function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

Vue.compile = compileToFunctions;
/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue2-touch-events/index.js":
/*!*************************************************!*\
  !*** ./node_modules/vue2-touch-events/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 *
 * @author    Jerry Bendy
 * @since     4/12/2017
 */
function touchX(event) {
  if (event.type.indexOf('mouse') !== -1) {
    return event.clientX;
  }

  return event.touches[0].clientX;
}

function touchY(event) {
  if (event.type.indexOf('mouse') !== -1) {
    return event.clientY;
  }

  return event.touches[0].clientY;
}

var isPassiveSupported = function () {
  var supportsPassive = false;

  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function () {
        supportsPassive = true;
      }
    });
    window.addEventListener('test', null, opts);
  } catch (e) {}

  return supportsPassive;
}(); // Save last touch time globally (touch start time or touch end time), if a `click` event triggered,
// and the time near by the last touch time, this `click` event will be ignored. This is used for
// resolve touch through issue.


var globalLastTouchTime = 0;
var vueTouchEvents = {
  install: function (Vue, constructorOptions) {
    var globalOptions = Object.assign({}, {
      disableClick: false,
      tapTolerance: 10,
      // px
      swipeTolerance: 30,
      // px
      touchHoldTolerance: 400,
      // ms
      longTapTimeInterval: 400,
      // ms
      touchClass: '',
      namespace: 'touch'
    }, constructorOptions);

    function touchStartEvent(event) {
      var $this = this.$$touchObj,
          isTouchEvent = event.type.indexOf('touch') >= 0,
          isMouseEvent = event.type.indexOf('mouse') >= 0,
          $el = this;

      if (isTouchEvent) {
        globalLastTouchTime = event.timeStamp;
      }

      if (isMouseEvent && globalLastTouchTime && event.timeStamp - globalLastTouchTime < 350) {
        return;
      }

      if ($this.touchStarted) {
        return;
      }

      addTouchClass(this);
      $this.touchStarted = true;
      $this.touchMoved = false;
      $this.swipeOutBounded = false;
      $this.startX = touchX(event);
      $this.startY = touchY(event);
      $this.currentX = 0;
      $this.currentY = 0;
      $this.touchStartTime = event.timeStamp; // Trigger touchhold event after `touchHoldTolerance`ms

      $this.touchHoldTimer = setTimeout(function () {
        $this.touchHoldTimer = null;
        triggerEvent(event, $el, 'touchhold');
      }, $this.options.touchHoldTolerance);
      triggerEvent(event, this, 'start');
    }

    function touchMoveEvent(event) {
      var $this = this.$$touchObj;
      $this.currentX = touchX(event);
      $this.currentY = touchY(event);

      if (!$this.touchMoved) {
        var tapTolerance = $this.options.tapTolerance;
        $this.touchMoved = Math.abs($this.startX - $this.currentX) > tapTolerance || Math.abs($this.startY - $this.currentY) > tapTolerance;

        if ($this.touchMoved) {
          cancelTouchHoldTimer($this);
          triggerEvent(event, this, 'moved');
        }
      } else if (!$this.swipeOutBounded) {
        var swipeOutBounded = $this.options.swipeTolerance;
        $this.swipeOutBounded = Math.abs($this.startX - $this.currentX) > swipeOutBounded && Math.abs($this.startY - $this.currentY) > swipeOutBounded;
      }

      if ($this.touchMoved) {
        triggerEvent(event, this, 'moving');
      }
    }

    function touchCancelEvent() {
      var $this = this.$$touchObj;
      cancelTouchHoldTimer($this);
      removeTouchClass(this);
      $this.touchStarted = $this.touchMoved = false;
      $this.startX = $this.startY = 0;
    }

    function touchEndEvent(event) {
      var $this = this.$$touchObj,
          isTouchEvent = event.type.indexOf('touch') >= 0,
          isMouseEvent = event.type.indexOf('mouse') >= 0;

      if (isTouchEvent) {
        globalLastTouchTime = event.timeStamp;
      }

      var touchholdEnd = isTouchEvent && !$this.touchHoldTimer;
      cancelTouchHoldTimer($this);
      $this.touchStarted = false;
      removeTouchClass(this);

      if (isMouseEvent && globalLastTouchTime && event.timeStamp - globalLastTouchTime < 350) {
        return;
      } // Fix #33, Trigger `end` event when touch stopped


      triggerEvent(event, this, 'end');

      if (!$this.touchMoved) {
        // detect if this is a longTap event or not
        if ($this.callbacks.longtap && event.timeStamp - $this.touchStartTime > $this.options.longTapTimeInterval) {
          if (event.cancelable) {
            event.preventDefault();
          }

          triggerEvent(event, this, 'longtap');
        } else if ($this.callbacks.touchhold && touchholdEnd) {
          if (event.cancelable) {
            event.preventDefault();
          }

          return;
        } else {
          // emit tap event
          triggerEvent(event, this, 'tap');
        }
      } else if (!$this.swipeOutBounded) {
        var swipeOutBounded = $this.options.swipeTolerance,
            direction,
            distanceY = Math.abs($this.startY - $this.currentY),
            distanceX = Math.abs($this.startX - $this.currentX);

        if (distanceY > swipeOutBounded || distanceX > swipeOutBounded) {
          if (distanceY > swipeOutBounded) {
            direction = $this.startY > $this.currentY ? 'top' : 'bottom';
          } else {
            direction = $this.startX > $this.currentX ? 'left' : 'right';
          } // Only emit the specified event when it has modifiers


          if ($this.callbacks['swipe.' + direction]) {
            triggerEvent(event, this, 'swipe.' + direction, direction);
          } else {
            // Emit a common event when it has no any modifier
            triggerEvent(event, this, 'swipe', direction);
          }
        }
      }
    }

    function mouseEnterEvent() {
      addTouchClass(this);
    }

    function mouseLeaveEvent() {
      removeTouchClass(this);
    }

    function triggerEvent(e, $el, eventType, param) {
      var $this = $el.$$touchObj; // get the callback list

      var callbacks = $this && $this.callbacks[eventType] || [];

      if (callbacks.length === 0) {
        return null;
      }

      for (var i = 0; i < callbacks.length; i++) {
        var binding = callbacks[i];

        if (binding.modifiers.stop) {
          e.stopPropagation();
        }

        if (binding.modifiers.prevent && e.cancelable) {
          e.preventDefault();
        } // handle `self` modifier`


        if (binding.modifiers.self && e.target !== e.currentTarget) {
          continue;
        }

        if (typeof binding.value === 'function') {
          if (param) {
            binding.value(param, e);
          } else {
            binding.value(e);
          }
        }
      }
    }

    function addTouchClass($el) {
      var className = $el.$$touchObj.options.touchClass;
      className && $el.classList.add(className);
    }

    function removeTouchClass($el) {
      var className = $el.$$touchObj.options.touchClass;
      className && $el.classList.remove(className);
    }

    function cancelTouchHoldTimer($this) {
      if ($this.touchHoldTimer) {
        clearTimeout($this.touchHoldTimer);
        $this.touchHoldTimer = null;
      }
    }

    function buildTouchObj($el, extraOptions) {
      var touchObj = $el.$$touchObj || {
        // an object contains all callbacks registered,
        // key is event name, value is an array
        callbacks: {},
        // prevent bind twice, set to true when event bound
        hasBindTouchEvents: false,
        // default options, would be override by v-touch-options
        options: globalOptions
      };

      if (extraOptions) {
        touchObj.options = Object.assign({}, touchObj.options, extraOptions);
      }

      $el.$$touchObj = touchObj;
      return $el.$$touchObj;
    }

    Vue.directive(globalOptions.namespace, {
      bind: function ($el, binding) {
        // build a touch configuration object
        var $this = buildTouchObj($el); // declare passive option for the event listener. Defaults to { passive: true } if supported

        var passiveOpt = isPassiveSupported ? {
          passive: true
        } : false; // register callback

        var eventType = binding.arg || 'tap';

        switch (eventType) {
          case 'swipe':
            var _m = binding.modifiers;

            if (_m.left || _m.right || _m.top || _m.bottom) {
              for (var i in binding.modifiers) {
                if (['left', 'right', 'top', 'bottom'].indexOf(i) >= 0) {
                  var _e = 'swipe.' + i;

                  $this.callbacks[_e] = $this.callbacks[_e] || [];

                  $this.callbacks[_e].push(binding);
                }
              }
            } else {
              $this.callbacks.swipe = $this.callbacks.swipe || [];
              $this.callbacks.swipe.push(binding);
            }

            break;

          case 'start':
          case 'moving':
            if (binding.modifiers.disablePassive) {
              // change the passive option for the moving event if disablePassive modifier exists
              passiveOpt = false;
            }

          // fallthrough

          default:
            $this.callbacks[eventType] = $this.callbacks[eventType] || [];
            $this.callbacks[eventType].push(binding);
        } // prevent bind twice


        if ($this.hasBindTouchEvents) {
          return;
        }

        $el.addEventListener('touchstart', touchStartEvent, passiveOpt);
        $el.addEventListener('touchmove', touchMoveEvent, passiveOpt);
        $el.addEventListener('touchcancel', touchCancelEvent);
        $el.addEventListener('touchend', touchEndEvent);

        if (!$this.options.disableClick) {
          $el.addEventListener('mousedown', touchStartEvent);
          $el.addEventListener('mousemove', touchMoveEvent);
          $el.addEventListener('mouseup', touchEndEvent);
          $el.addEventListener('mouseenter', mouseEnterEvent);
          $el.addEventListener('mouseleave', mouseLeaveEvent);
        } // set bind mark to true


        $this.hasBindTouchEvents = true;
      },
      unbind: function ($el) {
        $el.removeEventListener('touchstart', touchStartEvent);
        $el.removeEventListener('touchmove', touchMoveEvent);
        $el.removeEventListener('touchcancel', touchCancelEvent);
        $el.removeEventListener('touchend', touchEndEvent);

        if ($el.$$touchObj && !$el.$$touchObj.options.disableClick) {
          $el.removeEventListener('mousedown', touchStartEvent);
          $el.removeEventListener('mousemove', touchMoveEvent);
          $el.removeEventListener('mouseup', touchEndEvent);
          $el.removeEventListener('mouseenter', mouseEnterEvent);
          $el.removeEventListener('mouseleave', mouseLeaveEvent);
        } // remove vars


        delete $el.$$touchObj;
      }
    });
    Vue.directive(globalOptions.namespace + '-class', {
      bind: function ($el, binding) {
        buildTouchObj($el, {
          touchClass: binding.value
        });
      }
    });
    Vue.directive(globalOptions.namespace + '-options', {
      bind: function ($el, binding) {
        buildTouchObj($el, binding.value);
      }
    });
  }
};
/*
 * Exports
 */

if (true) {
  module.exports = vueTouchEvents;
} else {}

/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createLogger, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLogger", function() { return createLogger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */
function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({
      beforeCreate: vuexInit
    });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;

    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};
      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;

      _init.call(this, options);
    };
  }
  /**
   * Vuex init hook, injected into each instances init hooks list.
   */


  function vuexInit() {
    var options = this.$options; // store injection

    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;
  devtoolHook.emit('vuex:init', store);
  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });
  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, {
    prepend: true
  });
  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, {
    prepend: true
  });
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */


function find(list, f) {
  return list.filter(f)[0];
}
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */


function deepCopy(obj, cache) {
  if (cache === void 0) cache = []; // just return if obj is immutable value

  if (obj === null || typeof obj !== 'object') {
    return obj;
  } // if obj is hit, it is in circular structure


  var hit = find(cache, function (c) {
    return c.original === obj;
  });

  if (hit) {
    return hit.copy;
  }

  var copy = Array.isArray(obj) ? [] : {}; // put the copy into cache at first
  // because we want to refer it in recursive deepCopy

  cache.push({
    original: obj,
    copy: copy
  });
  Object.keys(obj).forEach(function (key) {
    copy[key] = deepCopy(obj[key], cache);
  });
  return copy;
}
/**
 * forEach for object
 */


function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
}

function partial(fn, arg) {
  return function () {
    return fn(arg);
  };
} // Base data struct for store's module, package with some attribute and method


var Module = function Module(rawModule, runtime) {
  this.runtime = runtime; // Store some children item

  this._children = Object.create(null); // Store the origin module object which passed by programmer

  this._rawModule = rawModule;
  var rawState = rawModule.state; // Store the origin module's state

  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = {
  namespaced: {
    configurable: true
  }
};

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.hasChild = function hasChild(key) {
  return key in this._children;
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;

  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }

  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }

  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);

  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  } // register nested modules


  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  var child = parent.getChild(key);

  if (!child) {
    if (true) {
      console.warn("[vuex] trying to unregister module '" + key + "', which is " + "not registered");
    }

    return;
  }

  if (!child.runtime) {
    return;
  }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (parent) {
    return parent.hasChild(key);
  }

  return false;
};

function update(path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  } // update target module


  targetModule.update(newModule); // update nested modules

  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }

        return;
      }

      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

var functionAssert = {
  assert: function (value) {
    return typeof value === 'function';
  },
  expected: 'function'
};
var objectAssert = {
  assert: function (value) {
    return typeof value === 'function' || typeof value === 'object' && typeof value.handler === 'function';
  },
  expected: 'function or object with "handler" function'
};
var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    var assertOptions = assertTypes[key];
    forEachValue(rawModule[key], function (value, type) {
      assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";

  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }

  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins;
  if (plugins === void 0) plugins = [];
  var strict = options.strict;
  if (strict === void 0) strict = false; // store internal state

  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null); // bind commit and dispatch to self

  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;

  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };

  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  }; // strict mode


  this.strict = strict;
  var state = this._modules.root.state; // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters

  installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)

  resetStoreVM(this, state); // apply plugins

  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });
  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;

  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = {
  state: {
    configurable: true
  }
};

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors$1.state.set = function (v) {
  if (true) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this; // check object-style commit

  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;
  var mutation = {
    type: type,
    payload: payload
  };
  var entry = this._mutations[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown mutation type: " + type);
    }

    return;
  }

  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });

  this._subscribers.slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
  .forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if ( true && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this; // check object-style dispatch

  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;
  var action = {
    type: type,
    payload: payload
  };
  var entry = this._actions[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown action type: " + type);
    }

    return;
  }

  try {
    this._actionSubscribers.slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .filter(function (sub) {
      return sub.before;
    }).forEach(function (sub) {
      return sub.before(action, this$1.state);
    });
  } catch (e) {
    if (true) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers.filter(function (sub) {
          return sub.after;
        }).forEach(function (sub) {
          return sub.after(action, this$1.state);
        });
      } catch (e) {
        if (true) {
          console.warn("[vuex] error in after action subscribers: ");
          console.error(e);
        }
      }

      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers.filter(function (sub) {
          return sub.error;
        }).forEach(function (sub) {
          return sub.error(action, this$1.state, error);
        });
      } catch (e) {
        if (true) {
          console.warn("[vuex] error in error action subscribers: ");
          console.error(e);
        }
      }

      reject(error);
    });
  });
};

Store.prototype.subscribe = function subscribe(fn, options) {
  return genericSubscribe(fn, this._subscribers, options);
};

Store.prototype.subscribeAction = function subscribeAction(fn, options) {
  var subs = typeof fn === 'function' ? {
    before: fn
  } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }

  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);

  installModule(this, this.state, path, this._modules.get(path), options.preserveState); // reset store to update getters...

  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);

  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });

  resetStore(this);
};

Store.prototype.hasModule = function hasModule(path) {
  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  return this._modules.isRegistered(path);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);

  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors$1);

function genericSubscribe(fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend ? subs.unshift(fn) : subs.push(fn);
  }

  return function () {
    var i = subs.indexOf(fn);

    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state; // init all modules

  installModule(store, state, [], store._modules.root, true); // reset vm

  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm; // bind store public getters

  store.getters = {}; // reset local getters cache

  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () {
        return store._vm[key];
      },
      enumerable: true // for local getters

    });
  }); // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins

  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent; // enable strict mode for new vm

  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }

    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;

  var namespace = store._modules.getNamespace(path); // register in namespace map


  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && "development" !== 'production') {
      console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join('/'));
    }

    store._modulesNamespaceMap[namespace] = module;
  } // set state


  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];

    store._withCommit(function () {
      if (true) {
        if (moduleName in parentState) {
          console.warn("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + path.join('.') + "\"");
        }
      }

      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);
  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });
  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });
  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });
  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */


function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';
  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },
    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  }; // getters and state object must be gotten lazily
  // because they will be changed by vm update

  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function () {
        return getNestedState(store.state, path);
      }
    }
  });
  return local;
}

function makeLocalGetters(store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) {
        return;
      } // extract local getter type


      var localType = type.slice(splitPos); // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.

      Object.defineProperty(gettersProxy, localType, {
        get: function () {
          return store.getters[type];
        },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace];
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);

    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }

    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);

        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error("[vuex] duplicate getter key: " + type);
    }

    return;
  }

  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if (true) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, {
    deep: true,
    sync: true
  });
}

function getNestedState(state, path) {
  return path.reduce(function (state, key) {
    return state[key];
  }, state);
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', "expects string as the type, but found " + typeof type + ".");
  }

  return {
    type: type,
    payload: payload,
    options: options
  };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }

    return;
  }

  Vue = _Vue;
  applyMixin(Vue);
}
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */


var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};

  if ( true && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }

  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);

        if (!module) {
          return;
        }

        state = module.context.state;
        getters = module.context.getters;
      }

      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};

  if ( true && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }

  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len]; // Get the commit method from store


      var commit = this.$store.commit;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);

        if (!module) {
          return;
        }

        commit = module.context.commit;
      }

      return typeof val === 'function' ? val.apply(this, [commit].concat(args)) : commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};

  if ( true && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }

  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val; // The namespace has been mutated by normalizeNamespace

    val = namespace + val;

    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }

      if ( true && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }

      return this.$store.getters[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};

  if ( true && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }

  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len]; // get dispatch function from store


      var dispatch = this.$store.dispatch;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);

        if (!module) {
          return;
        }

        dispatch = module.context.dispatch;
      }

      return typeof val === 'function' ? val.apply(this, [dispatch].concat(args)) : dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */

var createNamespacedHelpers = function (namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */


function normalizeMap(map) {
  if (!isValidMap(map)) {
    return [];
  }

  return Array.isArray(map) ? map.map(function (key) {
    return {
      key: key,
      val: key
    };
  }) : Object.keys(map).map(function (key) {
    return {
      key: key,
      val: map[key]
    };
  });
}
/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */


function isValidMap(map) {
  return Array.isArray(map) || isObject(map);
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */


function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }

    return fn(namespace, map);
  };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */


function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];

  if ( true && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }

  return module;
} // Credits: borrowed code from fcomb/redux-logger


function createLogger(ref) {
  if (ref === void 0) ref = {};
  var collapsed = ref.collapsed;
  if (collapsed === void 0) collapsed = true;
  var filter = ref.filter;
  if (filter === void 0) filter = function (mutation, stateBefore, stateAfter) {
    return true;
  };
  var transformer = ref.transformer;
  if (transformer === void 0) transformer = function (state) {
    return state;
  };
  var mutationTransformer = ref.mutationTransformer;
  if (mutationTransformer === void 0) mutationTransformer = function (mut) {
    return mut;
  };
  var actionFilter = ref.actionFilter;
  if (actionFilter === void 0) actionFilter = function (action, state) {
    return true;
  };
  var actionTransformer = ref.actionTransformer;
  if (actionTransformer === void 0) actionTransformer = function (act) {
    return act;
  };
  var logMutations = ref.logMutations;
  if (logMutations === void 0) logMutations = true;
  var logActions = ref.logActions;
  if (logActions === void 0) logActions = true;
  var logger = ref.logger;
  if (logger === void 0) logger = console;
  return function (store) {
    var prevState = deepCopy(store.state);

    if (typeof logger === 'undefined') {
      return;
    }

    if (logMutations) {
      store.subscribe(function (mutation, state) {
        var nextState = deepCopy(state);

        if (filter(mutation, prevState, nextState)) {
          var formattedTime = getFormattedTime();
          var formattedMutation = mutationTransformer(mutation);
          var message = "mutation " + mutation.type + formattedTime;
          startMessage(logger, message, collapsed);
          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
          endMessage(logger);
        }

        prevState = nextState;
      });
    }

    if (logActions) {
      store.subscribeAction(function (action, state) {
        if (actionFilter(action, state)) {
          var formattedTime = getFormattedTime();
          var formattedAction = actionTransformer(action);
          var message = "action " + action.type + formattedTime;
          startMessage(logger, message, collapsed);
          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
          endMessage(logger);
        }
      });
    }
  };
}

function startMessage(logger, message, collapsed) {
  var startMessage = collapsed ? logger.groupCollapsed : logger.group; // render

  try {
    startMessage.call(logger, message);
  } catch (e) {
    logger.log(message);
  }
}

function endMessage(logger) {
  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— log end ——');
  }
}

function getFormattedTime() {
  var time = new Date();
  return " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
}

function repeat(str, times) {
  return new Array(times + 1).join(str);
}

function pad(num, maxLength) {
  return repeat('0', maxLength - num.toString().length) + num;
}

var index = {
  Store: Store,
  install: install,
  version: '3.6.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers,
  createLogger: createLogger
};
/* harmony default export */ __webpack_exports__["default"] = (index);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2NoZWNrLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9wcm9taXNlLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3ZhbGlkYXRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1pbmplY3QvZGlzdC9zdHlsZS1pbmplY3QuZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9fX2pzY2FjaGVfXy9pY29ucy1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL19fanNjYWNoZV9fL2ljb25zLXR5cGVzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvSWNvbkNvbXB1dGVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGRiZXRrYS91dGlscy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvY29tcG9uZW50cy9pY29uLnZ1ZSIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1ydW50aW1lLWhlbHBlcnMvZGlzdC9ub3JtYWxpemUtY29tcG9uZW50Lm1qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pbnN0YWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLWNvb2tpZS9zcmMvanMuY29va2llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZWUtdmFsaWRhdGUvZGlzdC9ydWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmVlLXZhbGlkYXRlL2Rpc3QvdmVlLXZhbGlkYXRlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWVsbGlwc2UtcHJvZ3Jlc3MvZGlzdC92dWUtZWxsaXBzZS1wcm9ncmVzcy51bWQubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtaTE4bi9kaXN0L3Z1ZS1pMThuLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcm91dGVyL2Rpc3QvdnVlLXJvdXRlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZTItdG91Y2gtZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWV4L2Rpc3QvdnVleC5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyJdLCJuYW1lcyI6WyJjaGVjayIsImlzVW5kZWZpbmVkIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzTnVsbCIsInZhbHVlIiwiaXNPYmplY3QiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0Z1bmN0aW9uIiwiaXNCb29sZWFuIiwiaXNEZWZpbmVkIiwiaXNOb3RTdHJpbmciLCJpc05vdE51bWJlciIsImlzTm90TnVsbCIsImlzTm90T2JqZWN0IiwiaXNOb3RBcnJheSIsImlzTm90RnVuY3Rpb24iLCJpc05vdEJvb2xlYW4iLCJhcnJheSIsInJlbW92ZUl0ZW0iLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlSXRlbUJ5SW5kZXgiLCJudW1iZXIiLCJyb3VuZFRvIiwiTWF0aCIsIm9iamVjdCIsIm1lcmdlRGVlcCIsInNvdXJjZXMiLCJzb3VyY2UiLCJ0YXJnZXQiLCJPYmplY3QiLCJwcm9taXNlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJyZXNvbHZlIiwicmVxdWVzdEhvc3QiLCJ1cmwiLCJjb25maWciLCJmZXRjaCIsImhlYWRlcnMiLCJKU09OIiwicmVxdWVzdCIsInNldEhvc3QiLCJnZXRIb3N0IiwiZGF0YVRvUGF0aFZhcmlhYmxlcyIsInBhdGhEYXRhIiwia2V5IiwidmFsIiwiZ2V0IiwiZGF0YSIsInBhdGhWYXJpYWJsZXMiLCJmdWxsVXJsIiwibWFrZUZldGNoIiwibWV0aG9kIiwicG9zdCIsImFkZEJvZHlUb0NvbmZpZyIsInB1dCIsInZhbGlkYXRlIiwiaGFzTnVtYmVyIiwiaGFzTm90TnVtYmVyIiwiaXNFbWFpbCIsInJlIiwiU3RyaW5nIiwiaXNOb3RFbWFpbCIsImlzTG9uZ2VyIiwiaXNTaG9ydGVyIiwiaXNOdWxsT3JFbXB0eSIsImluUmFuZ2UiLCJpbk5vdFJhbmdlIiwiY29udGFpbiIsIm5vdENvbnRhaW4iLCJ1Q2hlY2siLCJ1T2JqZWN0IiwidUFycmF5IiwidU51bWJlciIsInVQcm9taXNlIiwidVJlcXVlc3QiLCJ1VmFsaWRhdGUiLCJJQ09OUyIsIklDT05TX1RZUEVTIiwiSUNPTlNfR0VUVEVSIiwiSUNPTlNfVFlQRVNfR0VUVEVSIiwiSWNvbkNvbXB1dGVkIiwiaW5zdGFsbCIsIlZ1ZSIsImNvbXB1dGVkIiwiY29tcG9uZW50cyIsIkFJY29uIiwiY29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJfaSIsInB1c2giLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3RyaW5naWZ5IiwiZmFjdG9yeSIsInJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciIsImRlZmluZSIsIk9sZENvb2tpZXMiLCJ3aW5kb3ciLCJDb29raWVzIiwiYXBpIiwibm9Db25mbGljdCIsImV4dGVuZCIsInJlc3VsdCIsImFyZ3VtZW50cyIsImF0dHJpYnV0ZXMiLCJkZWNvZGUiLCJzIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImluaXQiLCJjb252ZXJ0ZXIiLCJzZXQiLCJkb2N1bWVudCIsInBhdGgiLCJkZWZhdWx0cyIsImV4cGlyZXMiLCJEYXRlIiwidG9VVENTdHJpbmciLCJ0ZXN0IiwiZSIsIndyaXRlIiwiZXNjYXBlIiwic3RyaW5naWZpZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTmFtZSIsInNwbGl0IiwiY29va2llIiwianNvbiIsImphciIsImNvb2tpZXMiLCJwYXJ0cyIsInNsaWNlIiwiY2hhckF0IiwibmFtZSIsInJlYWQiLCJwYXJzZSIsImdldEpTT04iLCJyZW1vdmUiLCJ3aXRoQ29udmVydGVyIiwicHJvY2VzcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhbGwiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJuZXh0VGljayIsImFyZ3MiLCJJdGVtIiwicHJvdG90eXBlIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZ2xvYmFsIiwidW5kZWZpbmVkIiwic2V0SW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJyZWdpc3RlckltbWVkaWF0ZSIsImNhbGxiYWNrIiwiRnVuY3Rpb24iLCJ0YXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbiIsImNhblVzZVBvc3RNZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uIiwibWVzc2FnZVByZWZpeCIsInJhbmRvbSIsIm9uR2xvYmFsTWVzc2FnZSIsImV2ZW50IiwiaW5kZXhPZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiY2hhbm5lbCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uIiwiYXR0YWNoVG8iLCJnZXRQcm90b3R5cGVPZiIsInNlbGYiLCJzY29wZSIsIlRpbWVvdXQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwib25UaW1lb3V0IiwiX29uVGltZW91dCIsInJlcXVpcmUiLCJhbHBoYSIsImVuIiwiY3MiLCJkYSIsImRlIiwiZXMiLCJmYSIsImZyIiwiaXQiLCJsdCIsIm5sIiwiaHUiLCJwbCIsInB0Iiwicm8iLCJydSIsInNrIiwic3IiLCJzdiIsInRyIiwidWsiLCJhciIsImF6IiwiZWwiLCJhbHBoYVNwYWNlcyIsImFscGhhbnVtZXJpYyIsImFscGhhRGFzaCIsIl9hIiwiX2IiLCJsb2NhbGUiLCJldmVyeSIsImtleXMiLCJzb21lIiwibG9jIiwicGFyYW1zIiwiYWxwaGEkMSIsInZhbGlkYXRlJDEiLCJwYXJhbXMkMSIsImFscGhhX2Rhc2giLCJ2YWxpZGF0ZSQyIiwicGFyYW1zJDIiLCJhbHBoYV9udW0iLCJ2YWxpZGF0ZSQzIiwicGFyYW1zJDMiLCJhbHBoYV9zcGFjZXMiLCJ2YWxpZGF0ZSQ0IiwibWluIiwibWF4IiwiTnVtYmVyIiwicGFyYW1zJDQiLCJiZXR3ZWVuIiwidmFsaWRhdGUkNSIsInBhcmFtcyQ1IiwiaXNUYXJnZXQiLCJjb25maXJtZWQiLCJ2YWxpZGF0ZSQ2Iiwic3RyVmFsIiwicGFyYW1zJDYiLCJjYXN0IiwiZGlnaXRzIiwidmFsaWRhdGVJbWFnZSIsImZpbGUiLCJ3aWR0aCIsImhlaWdodCIsIlVSTCIsIndlYmtpdFVSTCIsIlByb21pc2UiLCJpbWFnZSIsIkltYWdlIiwib25lcnJvciIsIm9ubG9hZCIsInNyYyIsImNyZWF0ZU9iamVjdFVSTCIsInZhbGlkYXRlJDciLCJmaWxlcyIsImFsbCIsInRoZW4iLCJ2YWx1ZXMiLCJ2IiwicGFyYW1zJDciLCJkaW1lbnNpb25zIiwidmFsaWRhdGUkOCIsIm11bHRpcGxlIiwiZW1haWxTdHIiLCJ0cmltIiwicGFyYW1zJDgiLCJkZWZhdWx0IiwiZW1haWwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzRW1wdHlBcnJheSIsImFyciIsImlzQ2FsbGFibGUiLCJmbiIsImluY2x1ZGVzIiwiY29sbGVjdGlvbiIsInRvQXJyYXkiLCJhcnJheUxpa2UiLCJmcm9tIiwiX2NvcHlBcnJheSIsInZhbGlkYXRlJDkiLCJvcHRpb25zIiwib25lT2YiLCJ2YWxpZGF0ZSRhIiwiZXhjbHVkZWQiLCJ2YWxpZGF0ZSRiIiwiZXh0ZW5zaW9ucyIsInJlZ2V4IiwiUmVnRXhwIiwiZXh0IiwidmFsaWRhdGUkYyIsInZhbGlkYXRlJGQiLCJpbnRlZ2VyIiwidmFsaWRhdGUkZSIsIm90aGVyIiwicGFyYW1zJDkiLCJpcyIsInZhbGlkYXRlJGYiLCJwYXJhbXMkYSIsImlzX25vdCIsInZhbGlkYXRlJGciLCJwYXJhbXMkYiIsInZhbGlkYXRlJGgiLCJwYXJhbXMkYyIsInZhbGlkYXRlJGkiLCJwYXJhbXMkZCIsIm1heF92YWx1ZSIsInZhbGlkYXRlJGoiLCJtaW1lcyIsInR5cGUiLCJ2YWxpZGF0ZSRrIiwicGFyYW1zJGUiLCJ2YWxpZGF0ZSRsIiwicGFyYW1zJGYiLCJtaW5fdmFsdWUiLCJ2YWxpZGF0ZSRtIiwidGVzdFZhbHVlIiwic3RyVmFsdWUiLCJudW1lcmljIiwidmFsaWRhdGUkbiIsInBhcmFtcyRnIiwidmFsaWRhdGUkbyIsImFsbG93RmFsc2UiLCJ2YWxpZCIsInJlcXVpcmVkIiwiY29tcHV0ZXNSZXF1aXJlZCIsInBhcmFtcyRoIiwidGVzdEVtcHR5IiwidmFsaWRhdGUkcCIsInBhcmFtcyRpIiwiY29tcHV0ZXNSZXF1aXJlZCQxIiwicmVxdWlyZWRfaWYiLCJ2YWxpZGF0ZSRxIiwic2l6ZSIsImlzTmFOIiwiblNpemUiLCJwYXJhbXMkaiIsInZhbGlkYXRlJHIiLCJkZWNpbWFscyIsIl9jIiwic2VwYXJhdG9yIiwic2VwYXJhdG9ycyIsImRvdCIsImNvbW1hIiwicmVnZXhQYXJ0IiwicGFyYW1zJGsiLCJkb3VibGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJuIiwicCIsImhhc093blByb3BlcnR5IiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiZG9uZSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwiZiIsInkiLCJnIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiciIsImsiLCJhIiwiaiIsImpsIiwib2JqIiwiaXNSZWZFcXVhbCIsImxocyIsInJocyIsImlzRXF1YWwiLCJmbGFncyIsImlzU3BlY2lmaWVkIiwiaXNMb2NhdG9yIiwiX19sb2NhdG9yUmVmIiwiZmluZEluZGV4IiwicHJlZGljYXRlIiwiZmluZCIsImlkeCIsIm1lcmdlIiwiZm9yRWFjaCIsImNyZWF0ZUZsYWdzIiwidW50b3VjaGVkIiwidG91Y2hlZCIsImRpcnR5IiwicHJpc3RpbmUiLCJpbnZhbGlkIiwidmFsaWRhdGVkIiwicGVuZGluZyIsImNoYW5nZWQiLCJwYXNzZWQiLCJmYWlsZWQiLCJpZGVudGl0eSIsIngiLCJkZWJvdW5jZSIsIndhaXQiLCJ0b2tlbiIsImNhbmNlbGxlZCIsImxhdGVyIiwid2FybiIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiaW50ZXJwb2xhdGUiLCJ0ZW1wbGF0ZSIsIlJVTEVTIiwibm9ybWFsaXplU2NoZW1hIiwic2NoZW1hIiwicGFyYW0iLCJSdWxlQ29udGFpbmVyIiwicnVsZSIsImxhenkiLCJpc0xhenkiLCJpc1JlcXVpcmVSdWxlIiwiZ2V0UnVsZURlZmluaXRpb24iLCJydWxlTmFtZSIsImd1YXJkRXh0ZW5kIiwidmFsaWRhdG9yIiwiREVGQVVMVF9DT05GSUciLCJkZWZhdWx0TWVzc2FnZSIsInNraXBPcHRpb25hbCIsImNsYXNzZXMiLCJiYWlscyIsIm1vZGUiLCJ1c2VDb25zdHJhaW50QXR0cnMiLCJjdXJyZW50Q29uZmlnIiwiZ2V0Q29uZmlnIiwic2V0Q29uZmlnIiwibmV3Q29uZiIsImNvbmZpZ3VyZSIsImNmZyIsIm5vcm1hbGl6ZVJ1bGVzIiwicnVsZXMiLCJhY2MiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl8kJGlzTm9ybWFsaXplZCIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwiYnVpbGRQYXJhbXMiLCJwYXJzZWRSdWxlIiwicGFyc2VSdWxlIiwicHJvdmlkZWQiLCJydWxlU2NoZW1hIiwiZGVmaW5lZFBhcmFtcyIsImxhc3REZWZpbmVkUGFyYW1fMSIsImNyZWF0ZUxvY2F0b3IiLCJjYXN0Rm4iLCJsb2NhdG9yIiwiY3Jvc3NUYWJsZSIsImV4dHJhY3RMb2NhdG9ycyIsImZpbHRlciIsInNob3VsZEJhaWwiLCJza2lwSWZFbXB0eSIsImZpZWxkIiwiZXJyb3JzIiwiZmFpbGVkUnVsZXMiLCJyZWdlbmVyYXRlTWFwIiwiZm9yY2VSZXF1aXJlZCIsIm5hbWVzIiwiY3VzdG9tTWVzc2FnZXMiLCJfdmFsaWRhdGUiLCJtc2ciLCJpc0luaXRpYWwiLCJzaG91bGRTa2lwIiwiX2QiLCJfc2hvdWxkU2tpcCIsIl90ZXN0IiwiZXJyb3IiLCJyZXF1aXJlUnVsZXMiLCJpc0VtcHR5IiwiaXNFbXB0eUFuZE9wdGlvbmFsIiwiaXNSZXF1aXJlZCIsIm5vcm1hbGl6ZWRWYWx1ZSIsInZhbHVlc18xIiwiY2FzdFZhbHVlIiwiZmlsbFRhcmdldFZhbHVlcyIsIl9maWVsZF8iLCJfdmFsdWVfIiwiX3J1bGVfIiwiX2dlbmVyYXRlRmllbGRFcnJvciIsInJ1bGVUYXJnZXRzIiwiX2dldFJ1bGVUYXJnZXRzIiwiX2dldFVzZXJUYXJnZXRzIiwidXNlclRhcmdldHMiLCJ1c2VyTWVzc2FnZSIsIl9ub3JtYWxpemVNZXNzYWdlIiwibnVtVGFyZ2V0cyIsInJ1bGVDb25maWciLCJpbmRleCIsIm5hbWVfMSIsInRhcmdldFBhcnQiLCJub3JtYWxpemUiLCJhZ2dyZXNzaXZlIiwiZWFnZXIiLCJwYXNzaXZlIiwibW9kZXMiLCJzZXRJbnRlcmFjdGlvbk1vZGUiLCJpbXBsZW1lbnRhdGlvbiIsIkVWRU5UX0JVUyIsImxvY2FsZUNoYW5nZWQiLCIkZW1pdCIsIkRpY3Rpb25hcnkiLCJkaWN0aW9uYXJ5IiwiY29udGFpbmVyIiwiZm9ybWF0IiwiX2UiLCJfZiIsIl9nIiwiX2giLCJmaWVsZENvbnRhaW5lciIsImZpZWxkcyIsIm1lc3NhZ2VDb250YWluZXIiLCJtZXNzYWdlcyIsImhhc1J1bGUiLCJESUNUSU9OQVJZIiwibG9jYWxpemUiLCJpc0V2ZW50IiwiZXZ0IiwiRXZlbnQiLCJzcmNFbGVtZW50Iiwibm9ybWFsaXplRXZlbnRWYWx1ZSIsImlucHV0IiwiX3ZNb2RpZmllcnMiLCJ2YWx1ZUFzTnVtYmVyIiwicGFyc2VGbG9hdCIsInRyaW1tZWRWYWx1ZSIsImlzVGV4dElucHV0Iiwidm5vZGUiLCJhdHRycyIsImVsbSIsInRhZyIsImZpbmRNb2RlbCIsIm5vblN0YW5kYXJkVk5vZGVEYXRhIiwibW9kZWwiLCJkaXJlY3RpdmVzIiwiZCIsImZpbmRWYWx1ZSIsImZpbmRNb2RlbENvbmZpZyIsInByb3AiLCJjb21wb25lbnRPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcHNEYXRhV2l0aFZhbHVlIiwiZG9tUHJvcHMiLCJleHRyYWN0Q2hpbGRyZW4iLCJjaGlsZHJlbiIsImZpbmRJbnB1dE5vZGVzIiwibm9kZXMiLCJub2RlIiwiY2FuZGlkYXRlcyIsIkN0b3IiLCJtZXJnZVZOb2RlTGlzdGVuZXJzIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsImZucyIsImludm9rZXIiLCJhZGROYXRpdmVOb2RlTGlzdGVuZXIiLCJhZGRDb21wb25lbnROb2RlTGlzdGVuZXIiLCJhZGRWTm9kZUxpc3RlbmVyIiwiZ2V0SW5wdXRFdmVudE5hbWUiLCJldmVudF8xIiwibW9kaWZpZXJzIiwiaXNIVE1MTm9kZSIsIm5vcm1hbGl6ZVNsb3RzIiwic2xvdHMiLCJjdHgiLCJjb250ZXh0Iiwic2xvdCIsInJlc29sdmVUZXh0dWFsUnVsZXMiLCJwYXR0ZXJuIiwibWF4bGVuZ3RoIiwibWlubGVuZ3RoIiwicmVzb2x2ZVJ1bGVzIiwiaHRtbFRhZ3MiLCJub3JtYWxpemVDaGlsZHJlbiIsInNsb3RQcm9wcyIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsInNob3VsZFZhbGlkYXRlIiwiX2lnbm9yZUltbWVkaWF0ZSIsImltbWVkaWF0ZSIsIm5vcm1hbGl6ZWRFdmVudHMiLCJfbmVlZHNWYWxpZGF0aW9uIiwiaW5pdGlhbGl6ZWQiLCJjcmVhdGVWYWxpZGF0aW9uQ3R4IiwicmVzZXQiLCJhcmlhSW5wdXQiLCJhcmlhTXNnIiwib25SZW5kZXJVcGRhdGUiLCJ2bSIsImluaXRpYWxWYWx1ZSIsInZhbGlkYXRlTm93IiwidHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uIiwidmFsaWRhdGVTaWxlbnQiLCIkb25jZSIsImNvbXB1dGVNb2RlU2V0dGluZyIsImNvbXB1dGUiLCJwZW5kaW5nUHJvbWlzZSIsIl9wZW5kaW5nVmFsaWRhdGlvbiIsImFwcGx5UmVzdWx0IiwiY3JlYXRlQ29tbW9uSGFuZGxlcnMiLCIkdmVlT25JbnB1dCIsInN5bmNWYWx1ZSIsInNldEZsYWdzIiwib25JbnB1dCIsIiR2ZWVPbkJsdXIiLCJvbkJsdXIiLCJvblZhbGlkYXRlIiwiJHZlZUhhbmRsZXIiLCIkdmVlRGVib3VuY2UiLCIkbmV4dFRpY2siLCJfcGVuZGluZ1Jlc2V0IiwiYWRkTGlzdGVuZXJzIiwiX2lucHV0RXZlbnROYW1lIiwiUFJPVklERVJfQ09VTlRFUiIsImZpZWxkTmFtZSIsImRlZmF1bHRWYWx1ZXMiLCJpc0FjdGl2ZSIsIlZhbGlkYXRpb25Qcm92aWRlciIsImluamVjdCIsIiRfdmVlT2JzZXJ2ZXIiLCIkdm5vZGUiLCJjcmVhdGVPYnNlcnZlciIsInByb3BzIiwidmlkIiwiQm9vbGVhbiIsInNsaW0iLCJkaXNhYmxlZCIsImRldGVjdElucHV0Iiwid2F0Y2giLCJkZWVwIiwib2xkVmFsIiwiZmllbGREZXBzIiwiX3RoaXMiLCJub3JtYWxpemVkUnVsZXMiLCJkZXBzIiwiZGVwIiwiZGVwTmFtZSIsIndhdGNoQ3Jvc3NGaWVsZERlcCIsIl9yZXNvbHZlZFJ1bGVzIiwiY29tcHV0ZUNsYXNzT2JqIiwibW91bnRlZCIsIm9uTG9jYWxlQ2hhbmdlZCIsIl9yZWdlbmVyYXRlTWFwIiwiZXJyb3JzXzEiLCJmYWlsZWRSdWxlc18xIiwiJG9uIiwiJG9mZiIsInJlbmRlciIsImgiLCJyZWdpc3RlckZpZWxkIiwiaW5wdXRzIiwicmVzb2x2ZWQiLCJiZWZvcmVEZXN0cm95IiwidW5vYnNlcnZlIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJtZXRob2RzIiwiZmxhZyIsImNyZWF0ZUxvb2t1cCIsInNldEVycm9ycyIsInVwZGF0ZVJlbmRlcmluZ0NvbnRleHRSZWZzIiwiX2xvb3BfMSIsImNsYXNzTmFtZSIsImNscyIsInByb3ZpZGVycyIsInJlZnMiLCJyZWR1Y2VkIiwiZXh0cmFjdElkIiwicHJvdmlkZWRJZCIsIm9ic2VydmUiLCJ3aXRoSG9va3MiLCJfdmVlV2F0Y2hlcnMiLCIkd2F0Y2giLCJGTEFHU19TVFJBVEVHSUVTIiwiT0JTRVJWRVJfQ09VTlRFUiIsImRhdGEkMSIsImNyZWF0ZU9ic2VydmVyRmxhZ3MiLCJvYnNlcnZlcnMiLCJwcm92aWRlU2VsZiIsIlZhbGlkYXRpb25PYnNlcnZlciIsInByb3ZpZGUiLCJjcmVhdGVkIiwicmVnaXN0ZXIiLCJvbkNoYW5nZSIsImNvbXB1dGVPYnNlcnZlclN0YXRlIiwidW5yZWdpc3RlciIsInByZXBhcmVTbG90UHJvcHMiLCIkbGlzdGVuZXJzIiwic3Vic2NyaWJlciIsImtpbmQiLCJwcm92aWRlciIsIiRkZWxldGUiLCJvIiwic3BsaWNlIiwidmFsaWRhdGVXaXRoSW5mbyIsInNpbGVudCIsInJlc3VsdHMiLCJpc1ZhbGlkIiwib2JzIiwiaGFuZGxlU3VibWl0IiwiY2IiLCJlcnJvckFyciIsIm9ic2VydmVyIiwicGFzc2VzIiwidm1zIiwid2l0aFZhbGlkYXRpb24iLCJtYXBQcm9wcyIsInByb3ZpZGVyT3B0cyIsImhvYyIsInZjdHgiLCIkYXR0cnMiLCJzY29wZWRTbG90cyIsImwiLCJtIiwiYyIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsImNyZWF0ZSIsImJpbmQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlcGVhdCIsIlJhbmdlRXJyb3IiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsImxhc3RJbmRleCIsImIiLCJ3IiwiUyIsIkUiLCJUIiwibGVmdCIsInByb3RvIiwiZm9yY2VkIiwiZXhlYyIsInJldHVybiIsImNvbnN0cnVjdG9yIiwiZm9vIiwic3RvcHBlZCIsInN0b3AiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJzaGFtIiwidW5zYWZlIiwiJGNyZWF0ZUVsZW1lbnQiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwic3R5bGUiLCJfbCIsImNpcmNsZXNEYXRhIiwiaXNNdWx0aXBsZSIsImdsb2JhbFRoaWNrbmVzcyIsInRoaWNrbmVzcyIsImdsb2JhbEdhcCIsImdhcCIsImdsb2JhbERvdCIsIm1heFdpZHRoIiwibGVnZW5kIiwiY2xhc3MiLCJsZWdlbmRDbGFzcyIsInNob3VsZEhpZGVMZWdlbmRWYWx1ZSIsImZvbnRTaXplIiwiY29sb3IiLCJmb250Q29sb3IiLCJsZWdlbmRWYWwiLCJhbmltYXRpb24iLCJsb2FkaW5nIiwiX3UiLCJjb3VudGVyVGljayIsIl90IiwibGVnZW5kRm9ybWF0dGVyIiwiaXNIVE1MIiwiaW5uZXJIVE1MIiwiX3MiLCJfdiIsImN1cnJlbnRGb3JtYXR0ZWRWYWx1ZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29sb3JzIiwib2Zmc2V0IiwicHJvZ3Jlc3MiLCJsZWdlbmRWYWx1ZSIsImVtcHR5VGhpY2tuZXNzIiwibGluZSIsImxpbmVNb2RlIiwiZW1wdHlDb2xvciIsImNvbG9yRmlsbCIsImVtcHR5Q29sb3JGaWxsIiwiYW5nbGUiLCJub0RhdGEiLCJkYXNoIiwic3RhcnRzV2l0aCIsImhhbGYiLCJwYXJzZUludCIsImRldGVybWluYXRlIiwicmV2ZXJzZSIsInhtbG5zIiwiaXNDb2xvckdyYWRpZW50IiwiX3VpZCIsImlzQ29sb3JGaWxsR3JhZGllbnQiLCJpc0VtcHR5Q29sb3JHcmFkaWVudCIsImlzRW1wdHlDb2xvckZpbGxHcmFkaWVudCIsImNpcmNsZVR5cGUiLCIkcHJvcHMiLCJncmFkaWVudENvbXBvbmVudCIsIngxIiwieTEiLCJ4MiIsInkyIiwiaXNWYWxpZE51bWJlciIsIm9wYWNpdHkiLCJyYWRpYWwiLCJzdGF0aWNSZW5kZXJGbnMiLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsImJlZm9yZUNyZWF0ZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInN0eWxlcyIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsInRyYW5zZm9ybSIsImNvbXB1dGVkQW5nbGUiLCJkYXRhSXNBdmFpbGFibGUiLCJhbmltYXRpb25EdXJhdGlvbiIsImNvbXB1dGVkRW1wdHlUaGlja25lc3MiLCJmaWxsIiwiY29tcHV0ZWRDb2xvckZpbGwiLCJzdHJva2UiLCJjb21wdXRlZEVtcHR5Q29sb3IiLCJlbXB0eVBhdGgiLCJlbXB0eURhc2hhcnJheSIsImlzTG9hZGluZyIsInRyYW5zZm9ybU9yaWdpbiIsImNvbXB1dGVkVGhpY2tuZXNzIiwiY29tcHV0ZWRDb2xvciIsImNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25DbGFzcyIsIk8iLCJDIiwiZHVyYXRpb24iLCJkZWxheSIsIkEiLCJjb3VudCIsInNwYWNpbmciLCJSIiwiRiIsImlzSW5pdGlhbGl6ZWQiLCJjb21wdXRlZFByb2dyZXNzIiwicHJvZ3Jlc3NPZmZzZXQiLCJhYnMiLCJyYWRpdXMiLCJwYXJzZWRMaW5lTW9kZSIsImJhc2VSYWRpdXMiLCJwcmV2aW91c0NpcmNsZXNUaGlja25lc3MiLCJub3JtYWxMaW5lTW9kZVJhZGl1cyIsImVtcHR5UmFkaXVzIiwiZG90U2l6ZSIsImVtcHR5QmFzZVJhZGl1cyIsImRvdFRvVGhpY2tuZXNzRGlmZmVyZW5jZSIsInRoaWNrbmVzc1dpdGhEb3QiLCJwYXJzZWRBbmltYXRpb24iLCJwYXJzZWREYXNoIiwiY29tcHV0ZWRFbXB0eUNvbG9yRmlsbCIsImNhbGN1bGF0ZVRoaWNrbmVzcyIsImNvbXB1dGVkR2xvYmFsVGhpY2tuZXNzIiwiUEkiLCJnZXREYXNoUGVyY2VudCIsImdldERhc2hTcGFjaW5nUGVyY2VudCIsInN0cm9rZURhc2hPZmZzZXQiLCJnbG9iYWxEb3RTaXplIiwicGFyc2VkRG90IiwiZG90Q29sb3IiLCJ0cmFuc2l0aW9uIiwic3Ryb2tlRGFzaG9mZnNldCIsImdldE5lZ2F0aXZlQ2lyY3VtZmVyZW5jZSIsImdldERvdWJsZUNpcmN1bWZlcmVuY2UiLCJnZXRMb29wT2Zmc2V0IiwiZ2V0Qm91bmNlT3V0T2Zmc2V0IiwiZ2V0Qm91bmNlSW5PZmZzZXQiLCJnZXRSZXZlcnNlT2Zmc2V0IiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIndyYXAiLCJJIiwiYXBwZWFyIiwiTiIsIkQiLCJMIiwiTSIsInoiLCJxIiwiRmFkZUluVHJhbnNpdGlvbiIsIm1peGlucyIsInBvc2l0aW9uIiwiZW1wdHlQb3NpdGlvbiIsIlYiLCJHIiwiJCIsIkIiLCJjeCIsImN5IiwiVSIsIlciLCJIIiwiWCIsIlkiLCJLIiwiZG90Q29udGFpbmVyQ2xhc3NlcyIsImRvdENvbnRhaW5lclN0eWxlIiwiaXNIaWRkZW4iLCJkb3RTdHlsZSIsIkoiLCJRIiwiZG90Q29udGFpbmVyU2l6ZSIsImRvdENvbnRhaW5lclJvdGF0aW9uIiwiZG90RW5kIiwiZG90U3RhcnQiLCJkb3RDb250YWluZXJGdWxsUm90YXRpb25EZWciLCJkb3RDb250YWluZXJBbmltYXRpb25TdHlsZSIsImxvb3AiLCJib3VuY2UiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjYWxjdWxhdGVQcm9ncmVzcyIsIloiLCJ0dCIsImV0IiwicnQiLCJDaXJjbGVEb3QiLCJDaXJjbGVQcm9ncmVzcyIsIkhhbGZDaXJjbGVQcm9ncmVzcyIsIkdyYWRpZW50IiwibnQiLCJvdCIsImF0IiwiY291bnRlclByb3BzIiwiZm9ybWF0dGVkVmFsdWUiLCJzdCIsImN0Iiwic3RhcnQiLCJzdGFydFRpbWUiLCJjdXJyZW50VmFsdWUiLCJyYWYiLCJwcmV2aW91c0NvdW50U3RlcFZhbHVlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZW5kIiwiZGlmZmVyZW5jZSIsIm9uZVN0ZXBEaWZmZXJlbmNlIiwiZGVsaW1pdGVyIiwic2VhcmNoIiwidG9GaXhlZCIsImNvdW50RGVjaW1hbHMiLCJjdXJyZW50UmF3VmFsdWUiLCJlbGFwc2VkIiwiY291bnRVcCIsImNvdW50RG93biIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidXQiLCJmdCIsIkNvdW50ZXIiLCJDaXJjbGVDb250YWluZXIiLCJpc0RhdGFBdmFpbGFibGUiLCJkdCIsImh0IiwibG9jYXRpb24iLCJEaXNwYXRjaCIsInByb3RvY29sIiwiaG9zdCIsIm5vdyIsImNsZWFyIiwidjgiLCJtYXRjaCIsImdldHRlckZvciIsInN0cmluZyIsImxvY2FscyIsInNoYWRvd01vZGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNzcyIsIm1lZGlhIiwiREVCVUciLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJzZXRBdHRyaWJ1dGUiLCJzc3JJZCIsImZpcnN0Q2hpbGQiLCJmbG9vciIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiUkVQTEFDRV9LRUVQU18kMCIsImdyb3VwcyIsImNvcHlyaWdodCIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJXZWFrTWFwIiwiaGFzIiwiZW5mb3JjZSIsInBhcmVudFdpbmRvdyIsImRpc3BsYXkiLCJjb250ZW50V2luZG93Iiwib3BlbiIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJlbnRyaWVzIiwiY3VycmVudFNjcmlwdCIsInN0YWNrIiwiaHJlZiIsImhhc2giLCJvdXRlckhUTUwiLCJyZWFkeVN0YXRlIiwiaW5zcGVjdFNvdXJjZSIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOQVRJVkUiLCJQT0xZRklMTCIsImFzeW5jSXRlcmF0b3IiLCJfaW52b2tlIiwiYXJnIiwiX19hd2FpdCIsImRlbGVnYXRlIiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwiY29tcGxldGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJydmFsIiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhMjMxIiwiYTRkMyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJkZXNjcmlwdGlvbiIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInZ0IiwidmFsdWVPZiIsImE2MjMiLCJhNjQwIiwiYTY5MSIsImNlaWwiLCJhOTFhIiwiYTllMyIsIk5hTiIsImFiMTMiLCJhYzFmIiwiYWQ2ZCIsImRvdEFsbCIsImFlNDAiLCJBQ0NFU1NPUlMiLCJhZTkzIiwiYjA0MSIsImI1NzUiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImV4aXQiLCJlbnRlciIsImNoYXJhY3RlckRhdGEiLCJiNjIyIiwid2l0aG91dFNldHRlciIsImI2NGIiLCJiNjgwIiwiYjcyNyIsImMwNGUiLCJjNDMwIiwiYzQ5ZSIsImM2YjYiLCJjNmNkIiwiYzhiYSIsImM4ZDIiLCJjYTg0IiwiY2FhZCIsImNjMTIiLCJjZGY5IiwiY2U0ZSIsImQwMTIiLCJkMDM5IiwiZDA2NiIsImQwN2YiLCJkMWU3IiwiZDI4YiIsImQyYmIiLCJkMzBjIiwiZDNiNyIsImQ0NGUiLCJkNThmIiwicmlnaHQiLCJkNWE0IiwiZDc4NCIsImQ4MWQiLCJkYTg0IiwiZ2xvYmFsVGhpcyIsImRiYjQiLCJkZGIwIiwiZGY3NSIsImUwMWEiLCJlMTYzIiwiZTE3NyIsImUyNjAiLCJBcmd1bWVudHMiLCJlMmNjIiwiZTQzOSIsImU1MzgiLCJlNjY3IiwiZTZjZiIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIm5vdGlmaWVkIiwicmVhY3Rpb25zIiwic3RhdGUiLCJvayIsImZhaWwiLCJyZWplY3Rpb24iLCJyZWFzb24iLCJpbml0RXZlbnQiLCJyYWNlIiwiZTg5MyIsImU4YjUiLCJlOTVhIiwiZjA2OSIsImY1ZGYiLCJjYWxsZWUiLCJmNzcyIiwiZmIxNSIsImZjNmEiLCJmZGJjIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJmZGJmIiwiZmU4MyIsInVzZSIsImZlYTkiLCJmZWMxIiwibnVtYmVyRm9ybWF0S2V5cyIsImVyciIsIk9CSkVDVF9TVFJJTkciLCJpc1BsYWluT2JqZWN0IiwicGFyc2VBcmdzIiwibG9vc2VDbG9uZSIsImRlbGV0ZSIsImhhc093biIsImFyZ3VtZW50cyQxIiwib3V0cHV0IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJrZXlzQSIsImtleXNCIiwiZXNjYXBlSHRtbCIsInJhd1RleHQiLCJlc2NhcGVQYXJhbXMiLCJfaTE4biIsIiR0IiwiaTE4biIsIiRpMThuIiwiX2dldE1lc3NhZ2VzIiwiJHRjIiwiY2hvaWNlIiwiX3RjIiwiJHRlIiwiX3RlIiwiJGQiLCIkbiIsIm1peGluIiwiX19pMThuIiwiVnVlSTE4biIsImxvY2FsZU1lc3NhZ2VzIiwicmVzb3VyY2UiLCJtZXJnZUxvY2FsZU1lc3NhZ2UiLCJfaTE4bldhdGNoZXIiLCJ3YXRjaEkxOG5EYXRhIiwicm9vdEkxOG4iLCJyb290IiwiZm9ybWF0dGVyIiwiZmFsbGJhY2tMb2NhbGUiLCJmb3JtYXRGYWxsYmFja01lc3NhZ2VzIiwic2lsZW50VHJhbnNsYXRpb25XYXJuIiwic2lsZW50RmFsbGJhY2tXYXJuIiwicGx1cmFsaXphdGlvblJ1bGVzIiwicHJlc2VydmVEaXJlY3RpdmVDb250ZW50IiwibG9jYWxlTWVzc2FnZXMkMSIsInNoYXJlZE1lc3NhZ2VzIiwic3luYyIsIl9sb2NhbGVXYXRjaGVyIiwid2F0Y2hMb2NhbGUiLCJvbkNvbXBvbmVudEluc3RhbmNlQ3JlYXRlZCIsImJlZm9yZU1vdW50Iiwic3Vic2NyaWJlRGF0YUNoYW5naW5nIiwiX3N1YnNjcmliaW5nIiwiX19JTlRMSUZZX01FVEFfXyIsIiRlbCIsInVuc3Vic2NyaWJlRGF0YUNoYW5naW5nIiwiZGVzdHJveVZNIiwiaW50ZXJwb2xhdGlvbkNvbXBvbmVudCIsInBsYWNlcyIsIm9ubHlIYXNEZWZhdWx0UGxhY2UiLCJ1c2VMZWdhY3lQbGFjZXMiLCJjcmVhdGVQYXJhbXNGcm9tUGxhY2VzIiwiY2hpbGQiLCJ0ZXh0IiwiZXZlcnlQbGFjZSIsInZub2RlSGFzUGxhY2VBdHRyaWJ1dGUiLCJhc3NpZ25DaGlsZFBsYWNlIiwiYXNzaWduQ2hpbGRJbmRleCIsInBsYWNlIiwibnVtYmVyQ29tcG9uZW50IiwiX250cCIsInBhcnQiLCJhc3NlcnQiLCJ1cGRhdGUiLCJvbGRWTm9kZSIsImxvY2FsZUVxdWFsIiwib2xkVmFsdWUiLCJfbG9jYWxlTWVzc2FnZSIsImdldExvY2FsZU1lc3NhZ2UiLCJ1bmJpbmQiLCJwcmVzZXJ2ZSIsInRleHRDb250ZW50IiwiX3Z0IiwiX2xvY2FsZSIsInJlZiQxIiwicmVmJDIiLCJwYXJzZVZhbHVlIiwidGMiLCJtYWtlUGFyYW1zIiwiX1Z1ZSIsImluc3RhbGxlZCIsImRpcmVjdGl2ZSIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwiQmFzZUZvcm1hdHRlciIsIl9jYWNoZXMiLCJ0b2tlbnMiLCJjb21waWxlIiwiUkVfVE9LRU5fTElTVF9WQUxVRSIsIlJFX1RPS0VOX05BTUVEX1ZBTFVFIiwiY2hhciIsInN1YiIsImlzQ2xvc2VkIiwiY29tcGlsZWQiLCJBUFBFTkQiLCJQVVNIIiwiSU5DX1NVQl9QQVRIX0RFUFRIIiwiUFVTSF9TVUJfUEFUSCIsIkJFRk9SRV9QQVRIIiwiSU5fUEFUSCIsIkJFRk9SRV9JREVOVCIsIklOX0lERU5UIiwiSU5fU1VCX1BBVEgiLCJJTl9TSU5HTEVfUVVPVEUiLCJJTl9ET1VCTEVfUVVPVEUiLCJBRlRFUl9QQVRIIiwiRVJST1IiLCJwYXRoU3RhdGVNYWNoaW5lIiwibGl0ZXJhbFZhbHVlUkUiLCJpc0xpdGVyYWwiLCJleHAiLCJzdHJpcFF1b3RlcyIsInN0ciIsImdldFBhdGhDaGFyVHlwZSIsImNoIiwiY29kZSIsImZvcm1hdFN1YlBhdGgiLCJ0cmltbWVkIiwicGFyc2UkMSIsInN1YlBhdGhEZXB0aCIsIm5ld0NoYXIiLCJhY3Rpb24iLCJ0eXBlTWFwIiwiYWN0aW9ucyIsIm1heWJlVW5lc2NhcGVRdW90ZSIsIm5leHRDaGFyIiwiSTE4blBhdGgiLCJfY2FjaGUiLCJwYXJzZVBhdGgiLCJoaXQiLCJnZXRQYXRoVmFsdWUiLCJwYXRocyIsImxhc3QiLCJodG1sVGFnTWF0Y2hlciIsImxpbmtLZXlNYXRjaGVyIiwibGlua0tleVByZWZpeE1hdGNoZXIiLCJicmFja2V0c01hdGNoZXIiLCJkZWZhdWx0TW9kaWZpZXJzIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInN1YnN0ciIsImRlZmF1bHRGb3JtYXR0ZXIiLCJ0aGlzJDEiLCJkYXRlVGltZUZvcm1hdHMiLCJudW1iZXJGb3JtYXRzIiwiX3ZtIiwiX2Zvcm1hdHRlciIsIl9tb2RpZmllcnMiLCJfbWlzc2luZyIsIm1pc3NpbmciLCJfcm9vdCIsIl9zeW5jIiwiX2ZhbGxiYWNrUm9vdCIsImZhbGxiYWNrUm9vdCIsIl9mb3JtYXRGYWxsYmFja01lc3NhZ2VzIiwiX3NpbGVudFRyYW5zbGF0aW9uV2FybiIsIl9zaWxlbnRGYWxsYmFja1dhcm4iLCJfZGF0ZVRpbWVGb3JtYXR0ZXJzIiwiX251bWJlckZvcm1hdHRlcnMiLCJfcGF0aCIsIl9kYXRhTGlzdGVuZXJzIiwiU2V0IiwiX2NvbXBvbmVudEluc3RhbmNlQ3JlYXRlZExpc3RlbmVyIiwiY29tcG9uZW50SW5zdGFuY2VDcmVhdGVkTGlzdGVuZXIiLCJfcHJlc2VydmVEaXJlY3RpdmVDb250ZW50IiwiX3dhcm5IdG1sSW5NZXNzYWdlIiwid2Fybkh0bWxJbk1lc3NhZ2UiLCJfcG9zdFRyYW5zbGF0aW9uIiwicG9zdFRyYW5zbGF0aW9uIiwiX2VzY2FwZVBhcmFtZXRlckh0bWwiLCJlc2NhcGVQYXJhbWV0ZXJIdG1sIiwiZ2V0Q2hvaWNlSW5kZXgiLCJjaG9pY2VzTGVuZ3RoIiwidGhpc1Byb3RvdHlwZSIsInByb3RvdHlwZUdldENob2ljZUluZGV4IiwiZGVmYXVsdEltcGwiLCJfY2hvaWNlIiwiX2Nob2ljZXNMZW5ndGgiLCJfZXhpc3QiLCJfY2hlY2tMb2NhbGVNZXNzYWdlIiwiX2luaXRWTSIsInByb3RvdHlwZUFjY2Vzc29ycyIsImF2YWlsYWJsZUxvY2FsZXMiLCJsZXZlbCIsInJldCIsIiRkZXN0cm95IiwiJGZvcmNlVXBkYXRlIiwiJHNldCIsIm5ld0kxOG4iLCJfZ2V0RGF0ZVRpbWVGb3JtYXRzIiwiX2dldE51bWJlckZvcm1hdHMiLCJzb3J0IiwiX2xvY2FsZUNoYWluQ2FjaGUiLCJmYWxsYmFjayIsIm9yZ0xldmVsIiwiX3dhcm5EZWZhdWx0IiwiaW50ZXJwb2xhdGVNb2RlIiwibWlzc2luZ1JldCIsIl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybiIsInBhcnNlZEFyZ3MiLCJfcmVuZGVyIiwiX2lzRmFsbGJhY2tSb290IiwiX2lzU2lsZW50RmFsbGJhY2tXYXJuIiwiX2lzU2lsZW50RmFsbGJhY2siLCJfaW50ZXJwb2xhdGUiLCJ2aXNpdGVkTGlua1N0YWNrIiwicGF0aFJldCIsIl9saW5rIiwibWF0Y2hlcyIsImxpbmsiLCJsaW5rS2V5UHJlZml4TWF0Y2hlcyIsImxpbmtQcmVmaXgiLCJmb3JtYXR0ZXJOYW1lIiwibGlua1BsYWNlaG9sZGVyIiwidHJhbnNsYXRlZCIsIl90cmFuc2xhdGUiLCJfY3JlYXRlTWVzc2FnZUNvbnRleHQiLCJfbGlzdCIsIl9uYW1lZCIsIm5hbWVkIiwiX2FwcGVuZEl0ZW1Ub0NoYWluIiwiY2hhaW4iLCJibG9ja3MiLCJmb2xsb3ciLCJfYXBwZW5kTG9jYWxlVG9DaGFpbiIsIl9hcHBlbmRCbG9ja1RvQ2hhaW4iLCJibG9jayIsIl9nZXRMb2NhbGVDaGFpbiIsInJlcyIsInByZWRlZmluZWQiLCJmZXRjaENob2ljZSIsImNob2ljZXMiLCJ0ZSIsInNldExvY2FsZU1lc3NhZ2UiLCJnZXREYXRlVGltZUZvcm1hdCIsInNldERhdGVUaW1lRm9ybWF0IiwiX2NsZWFyRGF0ZVRpbWVGb3JtYXQiLCJtZXJnZURhdGVUaW1lRm9ybWF0IiwiX2xvY2FsaXplRGF0ZVRpbWUiLCJmb3JtYXRzIiwiY3VycmVudCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImF2YWlsYWJpbGl0aWVzIiwiZGF0ZVRpbWVGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJzZXROdW1iZXJGb3JtYXQiLCJfY2xlYXJOdW1iZXJGb3JtYXQiLCJtZXJnZU51bWJlckZvcm1hdCIsIl9nZXROdW1iZXJGb3JtYXR0ZXIiLCJOdW1iZXJGb3JtYXQiLCJfbiIsIm51bWJlckZvcm1hdCIsIm5mIiwiZm9ybWF0VG9QYXJ0cyIsImludGxEZWZpbmVkIiwiY29uZGl0aW9uIiwiZW5jb2RlUmVzZXJ2ZVJFIiwiZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyIiwiY29tbWFSRSIsImVuY29kZSIsInJlc29sdmVRdWVyeSIsInF1ZXJ5IiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VRdWVyeSIsInBhcnNlZFF1ZXJ5IiwiY2FzdFF1ZXJ5UGFyYW1WYWx1ZSIsInNoaWZ0Iiwic3RyaW5naWZ5UXVlcnkiLCJ2YWwyIiwidHJhaWxpbmdTbGFzaFJFIiwiY3JlYXRlUm91dGUiLCJyZWNvcmQiLCJyZWRpcmVjdGVkRnJvbSIsInJvdXRlciIsImNsb25lIiwicm91dGUiLCJtZXRhIiwiZnVsbFBhdGgiLCJnZXRGdWxsUGF0aCIsIm1hdGNoZWQiLCJmb3JtYXRNYXRjaCIsImZyZWV6ZSIsIlNUQVJUIiwidW5zaGlmdCIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwib25seVBhdGgiLCJpc09iamVjdEVxdWFsIiwiYUtleXMiLCJiS2V5cyIsImFWYWwiLCJiS2V5IiwiYlZhbCIsImlzSW5jbHVkZWRSb3V0ZSIsInF1ZXJ5SW5jbHVkZXMiLCJoYW5kbGVSb3V0ZUVudGVyZWQiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZSIsImNicyIsImVudGVyZWRDYnMiLCJpJDEiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIlZpZXciLCJyb3V0ZXJWaWV3IiwiJHJvdXRlIiwiY2FjaGUiLCJfcm91dGVyVmlld0NhY2hlIiwiZGVwdGgiLCJpbmFjdGl2ZSIsIl9yb3V0ZXJSb290Iiwidm5vZGVEYXRhIiwia2VlcEFsaXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2luYWN0aXZlIiwiJHBhcmVudCIsInJvdXRlclZpZXdEZXB0aCIsImNhY2hlZERhdGEiLCJjYWNoZWRDb21wb25lbnQiLCJjb25maWdQcm9wcyIsImZpbGxQcm9wc2luRGF0YSIsInJlZ2lzdGVyUm91dGVJbnN0YW5jZSIsImhvb2siLCJwcmVwYXRjaCIsImNvbXBvbmVudEluc3RhbmNlIiwicHJvcHNUb1Bhc3MiLCJyZXNvbHZlUHJvcHMiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiYmFzZSIsImFwcGVuZCIsImZpcnN0Q2hhciIsInNlZ21lbnRzIiwic2VnbWVudCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwiY29tcGlsZV8xIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwXzEiLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiZGVmYXVsdERlbGltaXRlciIsImVzY2FwZWQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJ0b1VwcGVyQ2FzZSIsImVuY29kZUFzdGVyaXNrIiwib3B0cyIsInByZXR0eSIsImF0dGFjaEtleXMiLCJzZW5zaXRpdmUiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJyZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInN0cmljdCIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwQ29tcGlsZUNhY2hlIiwiZmlsbFBhcmFtcyIsInJvdXRlTXNnIiwiZmlsbGVyIiwicGF0aE1hdGNoIiwibm9ybWFsaXplTG9jYXRpb24iLCJyYXciLCJfbm9ybWFsaXplZCIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiYmFzZVBhdGgiLCJ0b1R5cGVzIiwiZXZlbnRUeXBlcyIsIndhcm5lZEN1c3RvbVNsb3QiLCJ3YXJuZWRUYWdQcm9wIiwid2FybmVkRXZlbnRQcm9wIiwiTGluayIsInRvIiwiY3VzdG9tIiwiZXhhY3QiLCJleGFjdFBhdGgiLCJhY3RpdmVDbGFzcyIsImV4YWN0QWN0aXZlQ2xhc3MiLCJhcmlhQ3VycmVudFZhbHVlIiwiJHJvdXRlciIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJndWFyZEV2ZW50IiwiY2xpY2siLCJzY29wZWRTbG90IiwiJGhhc05vcm1hbCIsIm5hdmlnYXRlIiwiaXNFeGFjdEFjdGl2ZSIsImZpbmRBbmNob3IiLCJpc1N0YXRpYyIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0IiwiaXNEZWYiLCJyZWdpc3Rlckluc3RhbmNlIiwiY2FsbFZhbCIsIl9wYXJlbnRWbm9kZSIsIl9yb3V0ZXIiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJoaXN0b3J5IiwiZGVzdHJveWVkIiwiX3JvdXRlIiwiYmVmb3JlUm91dGVFbnRlciIsImJlZm9yZVJvdXRlTGVhdmUiLCJiZWZvcmVSb3V0ZVVwZGF0ZSIsImluQnJvd3NlciIsImNyZWF0ZVJvdXRlTWFwIiwicm91dGVzIiwib2xkUGF0aExpc3QiLCJvbGRQYXRoTWFwIiwib2xkTmFtZU1hcCIsInBhcmVudFJvdXRlIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwiZm91bmQiLCJwYXRoTmFtZXMiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJjb21waWxlUm91dGVSZWdleCIsImFsaWFzIiwicmVkaXJlY3QiLCJiZWZvcmVFbnRlciIsImNoaWxkTWF0Y2hBcyIsImFsaWFzZXMiLCJhbGlhc1JvdXRlIiwiY3JlYXRlTWF0Y2hlciIsImFkZFJvdXRlcyIsImFkZFJvdXRlIiwicGFyZW50T3JSb3V0ZSIsImdldFJvdXRlcyIsImN1cnJlbnRSb3V0ZSIsIl9jcmVhdGVSb3V0ZSIsInBhcmFtTmFtZXMiLCJyZWNvcmQkMSIsIm1hdGNoUm91dGUiLCJvcmlnaW5hbFJlZGlyZWN0IiwidGFyZ2V0UmVjb3JkIiwicmVzb2x2ZVJlY29yZFBhdGgiLCJyZXNvbHZlZFBhdGgiLCJhbGlhc2VkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJUaW1lIiwicGVyZm9ybWFuY2UiLCJnZW5TdGF0ZUtleSIsIl9rZXkiLCJnZXRTdGF0ZUtleSIsInNldFN0YXRlS2V5IiwicG9zaXRpb25TdG9yZSIsInNldHVwU2Nyb2xsIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJwcm90b2NvbEFuZFBhdGgiLCJhYnNvbHV0ZVBhdGgiLCJzdGF0ZUNvcHkiLCJyZXBsYWNlU3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVTY3JvbGwiLCJpc1BvcCIsImFwcCIsImJlaGF2aW9yIiwic2Nyb2xsQmVoYXZpb3IiLCJnZXRTY3JvbGxQb3NpdGlvbiIsInNob3VsZFNjcm9sbCIsInNjcm9sbFRvUG9zaXRpb24iLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwiZG9jRWwiLCJkb2NSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxSZWN0IiwidG9wIiwiaXNWYWxpZFBvc2l0aW9uIiwibm9ybWFsaXplUG9zaXRpb24iLCJub3JtYWxpemVPZmZzZXQiLCJoYXNoU3RhcnRzV2l0aE51bWJlclJFIiwic2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbFRvIiwic3VwcG9ydHNQdXNoU3RhdGUiLCJ1YSIsInB1c2hTdGF0ZSIsInJ1blF1ZXVlIiwiTmF2aWdhdGlvbkZhaWx1cmVUeXBlIiwicmVkaXJlY3RlZCIsImFib3J0ZWQiLCJkdXBsaWNhdGVkIiwiY3JlYXRlTmF2aWdhdGlvblJlZGlyZWN0ZWRFcnJvciIsImNyZWF0ZVJvdXRlckVycm9yIiwic3RyaW5naWZ5Um91dGUiLCJjcmVhdGVOYXZpZ2F0aW9uRHVwbGljYXRlZEVycm9yIiwiY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yIiwiY3JlYXRlTmF2aWdhdGlvbkFib3J0ZWRFcnJvciIsIl9pc1JvdXRlciIsInByb3BlcnRpZXNUb0xvZyIsImlzRXJyb3IiLCJpc05hdmlnYXRpb25GYWlsdXJlIiwiZXJyb3JUeXBlIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50cyIsImhhc0FzeW5jIiwiZmxhdE1hcENvbXBvbmVudHMiLCJkZWYiLCJjaWQiLCJyZXNvbHZlZERlZiIsImlzRVNNb2R1bGUiLCJjb21wIiwiZmxhdHRlbiIsImhhc1N5bWJvbCIsImNhbGxlZCIsIkhpc3RvcnkiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImxpc3RlbiIsIm9uUmVhZHkiLCJlcnJvckNiIiwib25FcnJvciIsInRyYW5zaXRpb25UbyIsIm9uQ29tcGxldGUiLCJvbkFib3J0IiwiY29uZmlybVRyYW5zaXRpb24iLCJ1cGRhdGVSb3V0ZSIsImVuc3VyZVVSTCIsImFmdGVySG9va3MiLCJhYm9ydCIsImxhc3RSb3V0ZUluZGV4IiwibGFzdEN1cnJlbnRJbmRleCIsInJlc29sdmVRdWV1ZSIsInVwZGF0ZWQiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsImVudGVyR3VhcmRzIiwiZXh0cmFjdEVudGVyR3VhcmRzIiwicmVzb2x2ZUhvb2tzIiwic2V0dXBMaXN0ZW5lcnMiLCJ0ZWFyZG93biIsImNsZWFudXBMaXN0ZW5lciIsImJhc2VFbCIsImV4dHJhY3RHdWFyZHMiLCJyZWNvcmRzIiwiZ3VhcmRzIiwiZ3VhcmQiLCJleHRyYWN0R3VhcmQiLCJiaW5kR3VhcmQiLCJib3VuZFJvdXRlR3VhcmQiLCJiaW5kRW50ZXJHdWFyZCIsInJvdXRlRW50ZXJHdWFyZCIsIkhUTUw1SGlzdG9yeSIsIl9zdGFydExvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJleHBlY3RTY3JvbGwiLCJzdXBwb3J0c1Njcm9sbCIsImhhbmRsZVJvdXRpbmdFdmVudCIsImdvIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwicGF0aG5hbWUiLCJIYXNoSGlzdG9yeSIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsImdldEhhc2giLCJyZXBsYWNlSGFzaCIsImV2ZW50VHlwZSIsInB1c2hIYXNoIiwiZ2V0VXJsIiwiQWJzdHJhY3RIaXN0b3J5IiwidGFyZ2V0SW5kZXgiLCJWdWVSb3V0ZXIiLCJhcHBzIiwibWF0Y2hlciIsImhhbmRsZUluaXRpYWxTY3JvbGwiLCJyb3V0ZU9yRXJyb3IiLCJiZWZvcmVFYWNoIiwicmVnaXN0ZXJIb29rIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImJhY2siLCJmb3J3YXJkIiwiZ2V0TWF0Y2hlZENvbXBvbmVudHMiLCJjcmVhdGVIcmVmIiwibm9ybWFsaXplZFRvIiwiU1RBUlRfTE9DQVRJT04iLCJlbXB0eU9iamVjdCIsImlzVW5kZWYiLCJpc1RydWUiLCJpc0ZhbHNlIiwiaXNQcmltaXRpdmUiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJ0b051bWJlciIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImNhY2hlZCIsImNhY2hlZEZuIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwicG9seWZpbGxCaW5kIiwiYm91bmRGbiIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiX2Zyb20iLCJ0b09iamVjdCIsIm5vIiwiZ2VuU3RhdGljS2V5cyIsInN0YXRpY0tleXMiLCJnZXRUaW1lIiwibG9vc2VJbmRleE9mIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiYmFpbFJFIiwiaGFzUHJvdG8iLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiaXNDaHJvbWUiLCJpc1BoYW50b21KUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIl9pc1NlcnZlciIsImlzU2VydmVyUmVuZGVyaW5nIiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIlJlZmxlY3QiLCJvd25LZXlzIiwiX1NldCIsInRpcCIsImdlbmVyYXRlQ29tcG9uZW50VHJhY2UiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiaGFzQ29uc29sZSIsImNsYXNzaWZ5UkUiLCJjbGFzc2lmeSIsInRyYWNlIiwiaW5jbHVkZUZpbGUiLCJfaXNWdWUiLCJfY29tcG9uZW50VGFnIiwiX19maWxlIiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJWTm9kZSIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJjcmVhdGVFbXB0eVZOb2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2RzVG9QYXRjaCIsIm9yaWdpbmFsIiwibXV0YXRvciIsIm9iIiwiX19vYl9fIiwiaW5zZXJ0ZWQiLCJvYnNlcnZlQXJyYXkiLCJhcnJheUtleXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJpdGVtcyIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwibmV3VmFsIiwiZGVsIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsIm1lcmdlZERhdGFGbiIsIm1lcmdlZEluc3RhbmNlRGF0YUZuIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsImhvb2tzIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwia2V5JDEiLCJjaGVja0NvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRlZiQkMSIsIm1lcmdlT3B0aW9ucyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiYXNzZXJ0UHJvcCIsIl9wcm9wcyIsImdldFR5cGUiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsImdldEludmFsaWRUeXBlTWVzc2FnZSIsInNpbXBsZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiZXhwbGljaXRUeXBlcyIsImVsZW0iLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ0aW1lckZ1bmMiLCJjb3VudGVyIiwidGV4dE5vZGUiLCJfcmVzb2x2ZSIsIm1lYXN1cmUiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJvbmNlJCQxIiwiY3JlYXRlRm5JbnZva2VyIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJrZXlJbkxvd2VyQ2FzZSIsImNoZWNrUHJvcCIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5Iiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwicmVuZGVyU2xvdCIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX3EiLCJfbSIsIl9rIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiZGV2dG9vbHNNZXRhIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsIm1vdW50ZWROb2RlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwidHJhbnNmb3JtTW9kZWwiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiX2lzQ29tcG9uZW50IiwiaW5saW5lVGVtcGxhdGUiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiZjEiLCJmMiIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwiaW5pdFJlbmRlciIsIl92bm9kZSIsInBhcmVudFZub2RlIiwiX3JlbmRlckNoaWxkcmVuIiwicGFyZW50RGF0YSIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImVycm9yQ29tcCIsIm93bmVyIiwib3duZXJzIiwibG9hZGluZ0NvbXAiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsIm9sZExpc3RlbmVycyIsImV2ZW50c01peGluIiwiaG9va1JFIiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwibGlmZWN5Y2xlTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsIl93YXRjaGVycyIsIl9kYXRhIiwibW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJfbmFtZSIsIldhdGNoZXIiLCJiZWZvcmUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJNQVhfVVBEQVRFX0NPVU5UIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImNsZWFudXBEZXBzIiwidG1wIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJwcm94eUdldHRlciIsInByb3h5U2V0dGVyIiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJpbml0RGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsImlzUm9vdCIsImdldERhdGEiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImRlZmluZUNvbXB1dGVkIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCJjb21wdXRlZEdldHRlciIsImNyZWF0ZVdhdGNoZXIiLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwidW53YXRjaEZuIiwidWlkJDMiLCJpbml0TWl4aW4iLCJfaW5pdCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5pdE1peGluJDEiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJidWlsdEluQ29tcG9uZW50cyIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJvYnNlcnZhYmxlIiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJpc1ByZVRhZyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzVGV4dElucHV0VHlwZSIsInNlbGVjdGVkIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsIm5vZGVPcHMiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJlbXB0eU5vZGVBdCIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJpc1Vua25vd25FbGVtZW50JCQxIiwiaW5WUHJlIiwiaWdub3JlIiwiY3JlYXRpbmdFbG1JblZQcmUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWYkJDEiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiZmluZElkeEluT2xkIiwic2VlbktleXMiLCJoeWRyYXRlIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwibm9kZVR5cGUiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJrbGFzcyIsInZhbGlkRGl2aXNpb25DaGFyUkUiLCJwYXJzZUZpbHRlcnMiLCJpblNpbmdsZSIsImluRG91YmxlIiwiaW5UZW1wbGF0ZVN0cmluZyIsImluUmVnZXgiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwibGFzdEZpbHRlckluZGV4IiwiZmlsdGVycyIsInB1c2hGaWx0ZXIiLCJ3cmFwRmlsdGVyIiwiYmFzZVdhcm4iLCJyYW5nZSIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiZHluYW1pYyIsInJhbmdlU2V0SXRlbSIsInBsYWluIiwiYWRkQXR0ciIsImR5bmFtaWNBdHRycyIsImFkZFJhd0F0dHIiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImFkZERpcmVjdGl2ZSIsImlzRHluYW1pY0FyZyIsInByZXBlbmRNb2RpZmllck1hcmtlciIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJwcmV2ZW50IiwibWlkZGxlIiwiZXZlbnRzIiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldFJhd0JpbmRpbmdBdHRyIiwicmF3QXR0cnNNYXAiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCIsImdlbkNvbXBvbmVudE1vZGVsIiwiYmFzZVZhbHVlRXhwcmVzc2lvbiIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsInBhcnNlTW9kZWwiLCJjaHIiLCJpbmRleCQxIiwiZXhwcmVzc2lvblBvcyIsImV4cHJlc3Npb25FbmRQb3MiLCJsYXN0SW5kZXhPZiIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwid2FybiQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsIl93YXJuIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJzZWxlY3RlZFZhbCIsInZhbHVlJDEiLCJ0eXBlQmluZGluZyIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJwYXJzZVN0eWxlVGV4dCIsImxpc3REZWxpbWl0ZXIiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwidmVuZG9yTmFtZXMiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJ0b2dnbGVEaXNwbGF5IiwiX2VudGVyQ2IiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJjaGVja0R1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwbGF0Zm9ybU1vZHVsZXMiLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJuZWVkUmVzZXQiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInBvcyIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJtb3ZlZCIsIldlYmtpdFRyYW5zZm9ybSIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwiZHkiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInJhd1Rva2VucyIsInRva2VuVmFsdWUiLCJ0cmFuc2Zvcm1Ob2RlIiwiY2xhc3NCaW5kaW5nIiwiZ2VuRGF0YSIsImtsYXNzJDEiLCJ0cmFuc2Zvcm1Ob2RlJDEiLCJzdHlsZUJpbmRpbmciLCJnZW5EYXRhJDEiLCJzdHlsZSQxIiwiZGVjb2RlciIsImhlIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJwYXJzZUhUTUwiLCJleHBlY3RIVE1MIiwiaXNVbmFyeVRhZyQkMSIsImNhbkJlTGVmdE9wZW5UYWckJDEiLCJsYXN0VGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJwYXJzZUVuZFRhZyIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiaGFuZGxlU3RhcnRUYWciLCJyZXN0IiwiY2hhcnMiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwidW5hcnlTbGFzaCIsInVuYXJ5Iiwic2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmIiwib3V0cHV0U291cmNlUmFuZ2UiLCJsb3dlckNhc2VkVGFnIiwibG93ZXJDYXNlZFRhZ05hbWUiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJkeW5hbWljQXJnUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJzbG90UkUiLCJsaW5lQnJlYWtSRSIsIndoaXRlc3BhY2VSRSQxIiwiaW52YWxpZEF0dHJpYnV0ZVJFIiwiZGVjb2RlSFRNTENhY2hlZCIsImVtcHR5U2xvdFNjb3BlVG9rZW4iLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zIiwicHJlVHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwicGxhdGZvcm1Jc1ByZVRhZyIsInBsYXRmb3JtTXVzdFVzZVByb3AiLCJwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSIsIm1heWJlQ29tcG9uZW50IiwiY3JlYXRlQVNURWxlbWVudCIsIm1ha2VBdHRyc01hcCIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJ3aGl0ZXNwYWNlIiwiY3VycmVudFBhcmVudCIsImluUHJlIiwid2FybmVkIiwid2Fybk9uY2UiLCJjbG9zZUVsZW1lbnQiLCJlbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJwcm9jZXNzZWQiLCJwcm9jZXNzRWxlbWVudCIsImlmIiwiZWxzZWlmIiwiZWxzZSIsImNoZWNrUm9vdENvbnN0cmFpbnRzIiwiYWRkSWZDb25kaXRpb24iLCJmb3JiaWRkZW4iLCJwcm9jZXNzSWZDb25kaXRpb25zIiwic2xvdFNjb3BlIiwic2xvdFRhcmdldCIsImxhc3ROb2RlIiwiY29tbWVudHMiLCJzdGFydCQxIiwiZ3VhcmRJRVNWR0J1ZyIsImN1bXVsYXRlZCIsImlzRm9yYmlkZGVuVGFnIiwicHJvY2Vzc1ByZSIsInByb2Nlc3NSYXdBdHRycyIsInByb2Nlc3NGb3IiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsImVuZCQxIiwiaXNUZXh0VGFnIiwicHJvY2Vzc0tleSIsInByb2Nlc3NSZWYiLCJwcm9jZXNzU2xvdENvbnRlbnQiLCJwcm9jZXNzU2xvdE91dGxldCIsInByb2Nlc3NDb21wb25lbnQiLCJwcm9jZXNzQXR0cnMiLCJpdGVyYXRvcjIiLCJpdGVyYXRvcjEiLCJjaGVja0luRm9yIiwicGFyc2VGb3IiLCJpbk1hdGNoIiwiaXRlcmF0b3JNYXRjaCIsImZpbmRQcmV2RWxlbWVudCIsImlmQ29uZGl0aW9ucyIsInNsb3RUYXJnZXREeW5hbWljIiwic2xvdEJpbmRpbmciLCJnZXRTbG90TmFtZSIsInNsb3RCaW5kaW5nJDEiLCJkeW5hbWljJDEiLCJzbG90Q29udGFpbmVyIiwic2xvdE5hbWUiLCJzeW5jR2VuIiwiaXNEeW5hbWljIiwiaGFzQmluZGluZ3MiLCJwYXJzZU1vZGlmaWVycyIsImNhbWVsIiwiYXJnTWF0Y2giLCJjaGVja0ZvckFsaWFzTW9kZWwiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsIl9lbCIsInByZVRyYW5zZm9ybU5vZGUiLCJpZkNvbmRpdGlvbiIsImlmQ29uZGl0aW9uRXh0cmEiLCJoYXNFbHNlIiwiZWxzZUlmQ29uZGl0aW9uIiwiYnJhbmNoMCIsImNsb25lQVNURWxlbWVudCIsImJyYW5jaDEiLCJicmFuY2gyIiwibW9kZWwkMSIsIm1vZHVsZXMkMSIsImRpcmVjdGl2ZXMkMSIsImJhc2VPcHRpb25zIiwiaXNTdGF0aWNLZXkiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwiZ2VuU3RhdGljS2V5cyQxIiwib3B0aW1pemUiLCJtYXJrU3RhdGljJDEiLCJtYXJrU3RhdGljUm9vdHMiLCJzdGF0aWMiLCJsJDEiLCJzdGF0aWNJbkZvciIsInN0YXRpY1Jvb3QiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImZuRXhwUkUiLCJmbkludm9rZVJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwic3BhY2UiLCJ1cCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwiY3RybCIsImFsdCIsImdlbkhhbmRsZXJzIiwic3RhdGljSGFuZGxlcnMiLCJkeW5hbWljSGFuZGxlcnMiLCJoYW5kbGVyQ29kZSIsImdlbkhhbmRsZXIiLCJpc01ldGhvZFBhdGgiLCJpc0Z1bmN0aW9uRXhwcmVzc2lvbiIsImlzRnVuY3Rpb25JbnZvY2F0aW9uIiwiZ2VuTW9kaWZpZXJDb2RlIiwia2V5TW9kaWZpZXIiLCJnZW5LZXlGaWx0ZXIiLCJnZW5GaWx0ZXJDb2RlIiwia2V5VmFsIiwia2V5Q29kZSIsImtleU5hbWUiLCJ3cmFwTGlzdGVuZXJzIiwiYmluZCQxIiwid3JhcERhdGEiLCJiYXNlRGlyZWN0aXZlcyIsImNsb2FrIiwiQ29kZWdlblN0YXRlIiwiZGF0YUdlbkZucyIsIm9uY2VJZCIsImdlbmVyYXRlIiwiYXN0IiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEkMiIsIm9yaWdpbmFsUHJlU3RhdGUiLCJhbHRHZW4iLCJhbHRFbXB0eSIsImdlbklmQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZW5UZXJuYXJ5RXhwIiwiYWx0SGVscGVyIiwiZ2VuRGlyZWN0aXZlcyIsImdlblByb3BzIiwiZ2VuU2NvcGVkU2xvdHMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsImhhc1J1bnRpbWUiLCJuZWVkUnVudGltZSIsImdlbiIsImlubGluZVJlbmRlckZucyIsImNvbnRhaW5zU2xvdENoaWxkIiwibmVlZHNLZXkiLCJnZW5lcmF0ZWRTbG90cyIsImdlblNjb3BlZFNsb3QiLCJpc0xlZ2FjeVN5bnRheCIsInJldmVyc2VQcm94eSIsImNoZWNrU2tpcCIsImFsdEdlbkVsZW1lbnQiLCJhbHRHZW5Ob2RlIiwiZWwkMSIsIm5vcm1hbGl6YXRpb25UeXBlJDEiLCJnZXROb3JtYWxpemF0aW9uVHlwZSIsImdlbk5vZGUiLCJuZWVkc05vcm1hbGl6YXRpb24iLCJnZW5Db21tZW50IiwiZ2VuVGV4dCIsInRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyIsImJpbmQkJDEiLCJjb21wb25lbnROYW1lIiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uIiwiY2hlY2tFdmVudCIsImNoZWNrRXhwcmVzc2lvbiIsInN0cmlwcGVkIiwia2V5d29yZE1hdGNoIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsImxpbmVzIiwicmVwZWF0JDEiLCJsaW5lTGVuZ3RoIiwicGFkIiwibGVuZ3RoJDEiLCJjcmVhdGVGdW5jdGlvbiIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjb21waWxlVG9GdW5jdGlvbnMiLCJ3YXJuJCQxIiwidGlwcyIsImZuR2VuRXJyb3JzIiwiY3JlYXRlQ29tcGlsZXJDcmVhdG9yIiwiYmFzZUNvbXBpbGUiLCJjcmVhdGVDb21waWxlciIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsImRpdiIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiZ2V0T3V0ZXJIVE1MIiwidG91Y2hYIiwiY2xpZW50WCIsInRvdWNoZXMiLCJ0b3VjaFkiLCJjbGllbnRZIiwiaXNQYXNzaXZlU3VwcG9ydGVkIiwiZ2xvYmFsTGFzdFRvdWNoVGltZSIsInZ1ZVRvdWNoRXZlbnRzIiwiY29uc3RydWN0b3JPcHRpb25zIiwiZ2xvYmFsT3B0aW9ucyIsImRpc2FibGVDbGljayIsInRhcFRvbGVyYW5jZSIsInN3aXBlVG9sZXJhbmNlIiwidG91Y2hIb2xkVG9sZXJhbmNlIiwibG9uZ1RhcFRpbWVJbnRlcnZhbCIsInRvdWNoQ2xhc3MiLCJ0b3VjaFN0YXJ0RXZlbnQiLCIkdGhpcyIsIiQkdG91Y2hPYmoiLCJpc1RvdWNoRXZlbnQiLCJpc01vdXNlRXZlbnQiLCJ0b3VjaFN0YXJ0ZWQiLCJhZGRUb3VjaENsYXNzIiwidG91Y2hNb3ZlZCIsInN3aXBlT3V0Qm91bmRlZCIsInN0YXJ0WCIsInN0YXJ0WSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJ0b3VjaFN0YXJ0VGltZSIsInRvdWNoSG9sZFRpbWVyIiwidHJpZ2dlckV2ZW50IiwidG91Y2hNb3ZlRXZlbnQiLCJjYW5jZWxUb3VjaEhvbGRUaW1lciIsInRvdWNoQ2FuY2VsRXZlbnQiLCJyZW1vdmVUb3VjaENsYXNzIiwidG91Y2hFbmRFdmVudCIsInRvdWNoaG9sZEVuZCIsImxvbmd0YXAiLCJjYW5jZWxhYmxlIiwidG91Y2hob2xkIiwiZGlyZWN0aW9uIiwiZGlzdGFuY2VZIiwiZGlzdGFuY2VYIiwibW91c2VFbnRlckV2ZW50IiwibW91c2VMZWF2ZUV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiYnVpbGRUb3VjaE9iaiIsImV4dHJhT3B0aW9ucyIsInRvdWNoT2JqIiwiaGFzQmluZFRvdWNoRXZlbnRzIiwicGFzc2l2ZU9wdCIsImJvdHRvbSIsInN3aXBlIiwiZGlzYWJsZVBhc3NpdmUiLCJhcHBseU1peGluIiwidnVleEluaXQiLCJzdG9yZSIsIiRzdG9yZSIsImRldnRvb2xIb29rIiwiZGV2dG9vbFBsdWdpbiIsIl9kZXZ0b29sSG9vayIsInRhcmdldFN0YXRlIiwic3Vic2NyaWJlIiwibXV0YXRpb24iLCJwcmVwZW5kIiwic3Vic2NyaWJlQWN0aW9uIiwiZGVlcENvcHkiLCJjb3B5IiwiZm9yRWFjaFZhbHVlIiwiTW9kdWxlIiwicmF3TW9kdWxlIiwicnVudGltZSIsIl9jaGlsZHJlbiIsIl9yYXdNb2R1bGUiLCJyYXdTdGF0ZSIsIm5hbWVzcGFjZWQiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiaGFzQ2hpbGQiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsImdldE5hbWVzcGFjZSIsInVwZGF0ZSQxIiwiYXNzZXJ0UmF3TW9kdWxlIiwibmV3TW9kdWxlIiwicmF3Q2hpbGRNb2R1bGUiLCJpc1JlZ2lzdGVyZWQiLCJ0YXJnZXRNb2R1bGUiLCJmdW5jdGlvbkFzc2VydCIsImV4cGVjdGVkIiwib2JqZWN0QXNzZXJ0IiwiYXNzZXJ0VHlwZXMiLCJhc3NlcnRPcHRpb25zIiwibWFrZUFzc2VydGlvbk1lc3NhZ2UiLCJidWYiLCJTdG9yZSIsInBsdWdpbnMiLCJfY29tbWl0dGluZyIsIl9hY3Rpb25zIiwiX2FjdGlvblN1YnNjcmliZXJzIiwiX211dGF0aW9ucyIsIl93cmFwcGVkR2V0dGVycyIsIl9tb2R1bGVzIiwiX21vZHVsZXNOYW1lc3BhY2VNYXAiLCJfc3Vic2NyaWJlcnMiLCJfd2F0Y2hlclZNIiwiX21ha2VMb2NhbEdldHRlcnNDYWNoZSIsImRpc3BhdGNoIiwiY29tbWl0IiwiYm91bmREaXNwYXRjaCIsInBheWxvYWQiLCJib3VuZENvbW1pdCIsImluc3RhbGxNb2R1bGUiLCJyZXNldFN0b3JlVk0iLCJ1c2VEZXZ0b29scyIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiJCRzdGF0ZSIsIl90eXBlIiwiX3BheWxvYWQiLCJfb3B0aW9ucyIsInVuaWZ5T2JqZWN0U3R5bGUiLCJlbnRyeSIsIl93aXRoQ29tbWl0IiwiY29tbWl0SXRlcmF0b3IiLCJhZnRlciIsImdlbmVyaWNTdWJzY3JpYmUiLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwicGFyZW50U3RhdGUiLCJnZXROZXN0ZWRTdGF0ZSIsInJlc2V0U3RvcmUiLCJoYXNNb2R1bGUiLCJob3RVcGRhdGUiLCJuZXdPcHRpb25zIiwiY29tbWl0dGluZyIsImhvdCIsIm9sZFZtIiwid3JhcHBlZEdldHRlcnMiLCJlbmFibGVTdHJpY3RNb2RlIiwicm9vdFN0YXRlIiwibW9kdWxlTmFtZSIsImxvY2FsIiwibWFrZUxvY2FsQ29udGV4dCIsIm5hbWVzcGFjZWRUeXBlIiwicmVnaXN0ZXJNdXRhdGlvbiIsInJlZ2lzdGVyQWN0aW9uIiwicmVnaXN0ZXJHZXR0ZXIiLCJub05hbWVzcGFjZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsIndyYXBwZWRNdXRhdGlvbkhhbmRsZXIiLCJ3cmFwcGVkQWN0aW9uSGFuZGxlciIsInJvb3RHZXR0ZXJzIiwicmF3R2V0dGVyIiwid3JhcHBlZEdldHRlciIsIm1hcFN0YXRlIiwibm9ybWFsaXplTmFtZXNwYWNlIiwic3RhdGVzIiwiaXNWYWxpZE1hcCIsIm5vcm1hbGl6ZU1hcCIsIm1hcHBlZFN0YXRlIiwiZ2V0TW9kdWxlQnlOYW1lc3BhY2UiLCJ2dWV4IiwibWFwTXV0YXRpb25zIiwibWFwcGVkTXV0YXRpb24iLCJtYXBHZXR0ZXJzIiwibWFwcGVkR2V0dGVyIiwibWFwQWN0aW9ucyIsIm1hcHBlZEFjdGlvbiIsImNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIiwiaGVscGVyIiwiY3JlYXRlTG9nZ2VyIiwiY29sbGFwc2VkIiwic3RhdGVCZWZvcmUiLCJzdGF0ZUFmdGVyIiwidHJhbnNmb3JtZXIiLCJtdXRhdGlvblRyYW5zZm9ybWVyIiwibXV0IiwiYWN0aW9uRmlsdGVyIiwiYWN0aW9uVHJhbnNmb3JtZXIiLCJhY3QiLCJsb2dNdXRhdGlvbnMiLCJsb2dBY3Rpb25zIiwibG9nZ2VyIiwicHJldlN0YXRlIiwibmV4dFN0YXRlIiwiZm9ybWF0dGVkVGltZSIsImdldEZvcm1hdHRlZFRpbWUiLCJmb3JtYXR0ZWRNdXRhdGlvbiIsInN0YXJ0TWVzc2FnZSIsImxvZyIsImVuZE1lc3NhZ2UiLCJmb3JtYXR0ZWRBY3Rpb24iLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJ0aW1lcyIsIm51bSIsIm1heExlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBTUEsS0FBSyxHQUFHO0FBQ25CQyxhQUFXLEVBQUUsNEJBQUs7QUFBQSxXQUFJLGlCQUFKO0FBREM7QUFFbkJDLFVBQVEsRUFBRSx5QkFBSztBQUFBLFdBQUksaUJBQUo7QUFGSTtBQUduQkMsVUFBUSxFQUFFLHlCQUFLO0FBQUEsV0FBSSxpQkFBSjtBQUhJO0FBSW5CQyxRQUFNLEVBQUUsdUJBQUs7QUFBQSxXQUFJQyxLQUFLLEtBQVQ7QUFKTTtBQUtuQkMsVUFBUSxFQUFFLHlCQUFLO0FBQUEsV0FBSSwrQkFBNkJOLEtBQUssQ0FBTEEsVUFBakMsS0FBaUNBLENBQWpDO0FBTEk7QUFNbkJPLFNBQU8sRUFBRSx3QkFBSztBQUFBLFdBQUlDLEtBQUssQ0FBTEEsUUFBSixLQUFJQSxDQUFKO0FBTks7QUFPbkJDLFlBQVUsRUFBRSwyQkFBSztBQUFBLFdBQUksaUJBQUo7QUFQRTtBQVFuQkMsV0FBUyxFQUFFLDBCQUFLO0FBQUEsV0FBSSxpQkFBSjtBQVJHO0FBU25CQyxXQUFTLEVBQUUsMEJBQUs7QUFBQSxXQUFJWCxLQUFLLENBQUxBLHVCQUFKO0FBVEc7QUFXbkJZLGFBQVcsRUFBRSw0QkFBSztBQUFBLFdBQUlaLEtBQUssQ0FBTEEsb0JBQUo7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QUcsQ0FBQ3p5RyxRQUFKLEdBQWVZLE1BQWpDLENBQU4sR0FBaUQ2eEcsR0FBeEQ7QUFDRDs7QUFFRCxJQUFJcHlGLEtBQUssR0FBRztBQUNWdXJGLE9BQUssRUFBRUEsS0FERztBQUVWdHNHLFNBQU8sRUFBRUEsT0FGQztBQUdWK0csU0FBTyxFQUFFLE9BSEM7QUFJVnNwRyxVQUFRLEVBQUVBLFFBSkE7QUFLVlEsY0FBWSxFQUFFQSxZQUxKO0FBTVZFLFlBQVUsRUFBRUEsVUFORjtBQU9WRSxZQUFVLEVBQUVBLFVBUEY7QUFRVkUseUJBQXVCLEVBQUVBLHVCQVJmO0FBU1ZFLGNBQVksRUFBRUE7QUFUSixDQUFaO0FBWWV0d0Ysb0VBQWY7Ozs7Ozs7Ozs7Ozs7QUN6dENBLElBQUkzSSxDQUFKLEMsQ0FFQTs7QUFDQUEsQ0FBQyxHQUFJLFlBQVc7QUFDZixTQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEdBQUMsR0FBR0EsQ0FBQyxJQUFJLElBQUkxUCxRQUFKLENBQWEsYUFBYixHQUFUO0FBQ0EsQ0FIRCxDQUdFLE9BQU8zRSxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT3RCLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0MyVixDQUFDLEdBQUczVixNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBbkMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCNlgsQ0FBakIsQyIsImZpbGUiOiJ2ZW5kb3Jzfm1haW4uYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNoZWNrID0ge1xuICBpc1VuZGVmaW5lZDogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyxcbiAgaXNTdHJpbmc6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gIGlzTnVtYmVyOiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICBpc051bGw6IHZhbHVlID0+IHZhbHVlID09PSBudWxsLFxuICBpc09iamVjdDogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBjaGVjay5pc05vdE51bGwodmFsdWUpLFxuICBpc0FycmF5OiB2YWx1ZSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSxcbiAgaXNGdW5jdGlvbjogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nLFxuICBpc0Jvb2xlYW46IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nLFxuICBpc0RlZmluZWQ6IHZhbHVlID0+IGNoZWNrLmlzVW5kZWZpbmVkKHZhbHVlKSA9PT0gZmFsc2UsXG5cbiAgaXNOb3RTdHJpbmc6IHZhbHVlID0+IGNoZWNrLmlzU3RyaW5nKHZhbHVlKSA9PT0gZmFsc2UsXG4gIGlzTm90TnVtYmVyOiB2YWx1ZSA9PiBjaGVjay5pc051bWJlcih2YWx1ZSkgPT09IGZhbHNlLFxuICBpc05vdE51bGw6IHZhbHVlID0+IGNoZWNrLmlzTnVsbCh2YWx1ZSkgPT09IGZhbHNlLFxuICBpc05vdE9iamVjdDogdmFsdWUgPT4gY2hlY2suaXNPYmplY3QodmFsdWUpID09PSBmYWxzZSxcbiAgaXNOb3RBcnJheTogdmFsdWUgPT4gY2hlY2suaXNBcnJheSh2YWx1ZSkgPT09IGZhbHNlLFxuICBpc05vdEZ1bmN0aW9uOiB2YWx1ZSA9PiBjaGVjay5pc0Z1bmN0aW9uKHZhbHVlKSA9PT0gZmFsc2UsXG4gIGlzTm90Qm9vbGVhbjogdmFsdWUgPT4gY2hlY2suaXNCb29sZWFuKHZhbHVlKSA9PT0gZmFsc2UsXG59O1xuIiwiZXhwb3J0IGNvbnN0IGFycmF5ID0ge1xuICByZW1vdmVJdGVtIChhcnJheSwgdG9SZW1vdmUpIHtcbiAgICBjb25zdCBpbmRleFRvUmVtb3ZlID0gYXJyYXkuaW5kZXhPZih0b1JlbW92ZSk7XG4gICAgcmV0dXJuIGFycmF5LnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgfSxcbiAgcmVtb3ZlSXRlbUJ5SW5kZXggKGFycmF5LCBpbmRleFRvUmVtb3ZlKSB7XG4gICAgcmV0dXJuIGFycmF5LnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgfSxcbn07XG4iLCJleHBvcnQgY29uc3QgbnVtYmVyID0ge1xuICByb3VuZFRvICh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKSkgLyBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJy4vY2hlY2snO1xuXG5leHBvcnQgY29uc3Qgb2JqZWN0ID0ge1xuICAvKipcbiAgICogRGVlcCBtZXJnZSB0d28gb2JqZWN0cy5cbiAgICogQHBhcmFtIHRhcmdldFxuICAgKiBAcGFyYW0gc291cmNlc1xuICAgKi9cbiAgbWVyZ2VEZWVwICh0YXJnZXQsIC4uLnNvdXJjZXMpIHtcbiAgICBpZiAoIXNvdXJjZXMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcblxuICAgIGlmIChjaGVjay5pc09iamVjdCh0YXJnZXQpICYmIGNoZWNrLmlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoY2hlY2suaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHsgW2tleV06IHt9IH0pO1xuICAgICAgICAgIG9iamVjdC5tZXJnZURlZXAodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgeyBba2V5XTogc291cmNlW2tleV0gfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0Lm1lcmdlRGVlcCh0YXJnZXQsIC4uLnNvdXJjZXMpO1xuICB9LFxufTtcbiIsImV4cG9ydCBjb25zdCBwcm9taXNlID0ge1xuICB0aW1lb3V0ICh0aW1lb3V0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSwgdGltZW91dCk7XG4gICAgfSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICcuL2NoZWNrJztcblxubGV0IHJlcXVlc3RIb3N0ID0gJyc7XG5cbmZ1bmN0aW9uIG1ha2VGZXRjaCAoeyB1cmwsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZmV0Y2godXJsLCB7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pXG4gICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgLmNhdGNoKHJlamVjdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRCb2R5VG9Db25maWcgKGNvbmZpZywgZGF0YSkge1xuICBpZiAoY2hlY2suaXNEZWZpbmVkKGRhdGEpKSB7XG4gICAgY29uZmlnLmJvZHkgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVxdWVzdCA9IHtcbiAgc2V0SG9zdChuZXdIb3N0KSB7XG4gICAgcmVxdWVzdEhvc3QgPSBuZXdIb3N0O1xuICB9LFxuICBnZXRIb3N0KCkge1xuICAgIHJldHVybiByZXF1ZXN0SG9zdDtcbiAgfSxcbiAgZGF0YVRvUGF0aFZhcmlhYmxlcyAoZGF0YSkge1xuICAgIGxldCBwYXRoRGF0YSA9ICcnO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhdGhEYXRhICs9ICc/JztcbiAgICAgIHBhdGhEYXRhICs9IE9iamVjdFxuICAgICAgICAuZW50cmllcyhkYXRhKVxuICAgICAgICAubWFwKChba2V5LCB2YWxdKSA9PiBrZXkgKyAnPScgKyB2YWwpXG4gICAgICAgIC5qb2luKCcmJyk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoRGF0YTtcbiAgfSxcbiAgZ2V0ICh7IHVybCA9ICcvJywgZGF0YSA9IHt9LCBjb25maWcgPSB7fSB9KSB7XG4gICAgY29uc3QgcGF0aFZhcmlhYmxlcyA9IHJlcXVlc3QuZGF0YVRvUGF0aFZhcmlhYmxlcyhkYXRhKTtcbiAgICBjb25zdCBmdWxsVXJsID0gcmVxdWVzdEhvc3QgKyB1cmwgKyBwYXRoVmFyaWFibGVzO1xuXG4gICAgcmV0dXJuIG1ha2VGZXRjaCh7XG4gICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgcG9zdCAoeyB1cmwgPSAnLycsIGRhdGEsIGNvbmZpZyA9IHt9IH0pIHtcbiAgICBjb25zdCBmdWxsVXJsID0gcmVxdWVzdEhvc3QgKyB1cmw7XG4gICAgYWRkQm9keVRvQ29uZmlnKGNvbmZpZywgZGF0YSk7XG5cbiAgICByZXR1cm4gbWFrZUZldGNoKHtcbiAgICAgIHVybDogZnVsbFVybCxcbiAgICAgIGNvbmZpZzoge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgcHV0ICh7IHVybCA9ICcvJywgZGF0YSA9IHt9LCBjb25maWcgPSB7fSB9KSB7XG4gICAgY29uc3QgZnVsbFVybCA9IHJlcXVlc3RIb3N0ICsgdXJsO1xuICAgIGFkZEJvZHlUb0NvbmZpZyhjb25maWcsIGRhdGEpO1xuXG4gICAgcmV0dXJuIG1ha2VGZXRjaCh7XG4gICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgZGVsZXRlICh7IHVybCA9ICcvJywgZGF0YSA9IHt9LCBjb25maWcgPSB7fSB9KSB7XG4gICAgY29uc3QgZnVsbFVybCA9IHJlcXVlc3RIb3N0ICsgdXJsO1xuICAgIGFkZEJvZHlUb0NvbmZpZyhjb25maWcsIGRhdGEpO1xuXG4gICAgcmV0dXJuIG1ha2VGZXRjaCh7XG4gICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJy4vY2hlY2snO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSB7XG4gIGhhc051bWJlciAoZGF0YSkge1xuICAgIHJldHVybiAvXFxkLy50ZXN0KGRhdGEpO1xuICB9LFxuXG4gIGhhc05vdE51bWJlciAoZGF0YSkge1xuICAgIHJldHVybiAhdGhpcy5oYXNOdW1iZXIoZGF0YSk7XG4gIH0sXG5cbiAgaXNFbWFpbCAoZW1haWwpIHtcbiAgICBjb25zdCByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XG4gICAgcmV0dXJuIHJlLnRlc3QoU3RyaW5nKGVtYWlsKS50b0xvd2VyQ2FzZSgpKTtcbiAgfSxcblxuICBpc05vdEVtYWlsIChlbWFpbCkge1xuICAgIHJldHVybiAhdGhpcy5pc0VtYWlsKGVtYWlsKTtcbiAgfSxcblxuICBpc0xvbmdlciAoZGF0YSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID4gbGVuZ3RoO1xuICB9LFxuXG4gIGlzU2hvcnRlciAoZGF0YSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIChkYXRhICYmIGRhdGEubGVuZ3RoKSA/IGRhdGEubGVuZ3RoIDwgbGVuZ3RoIDogdHJ1ZTtcbiAgfSxcblxuICBpc051bGxPckVtcHR5IChkYXRhKSB7XG4gICAgcmV0dXJuIFsnJywgdW5kZWZpbmVkLCBudWxsXS5pbmNsdWRlcyhkYXRhKTtcbiAgfSxcblxuICBpc1VuZGVmaW5lZCAoZGF0YSkge1xuICAgIHJldHVybiBjaGVjay5pc1VuZGVmaW5lZChkYXRhKTtcbiAgfSxcblxuICBpblJhbmdlICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB2YWx1ZSA+PSBzdGFydCAmJiB2YWx1ZSA8PSBlbmQ7XG4gIH0sXG5cbiAgaW5Ob3RSYW5nZSAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gIXRoaXMuaW5SYW5nZSh2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gIH0sXG5cbiAgY29udGFpbiAodmFsdWUsIGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LmluY2x1ZGVzKHZhbHVlKTtcbiAgfSxcblxuICBub3RDb250YWluICh2YWx1ZSwgYXJyYXkpIHtcbiAgICByZXR1cm4gIXRoaXMuY29udGFpbih2YWx1ZSwgYXJyYXkpO1xuICB9LFxuXG4gIGlzQm9vbGVhbiAodmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNCb29sZWFuKHZhbHVlKTtcbiAgfSxcblxuICBpc05vdEJvb2xlYW4gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNoZWNrLmlzTm90Qm9vbGVhbih2YWx1ZSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zYXNzJztcbmltcG9ydCB7IGluc3RhbGwgfSBmcm9tICd1dGlscy9pbnN0YWxsJztcbmV4cG9ydCAqIGZyb20gJ3V0aWxzL2V4cG9ydC1saXN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbnN0YWxsLFxufTtcbiIsImZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzcywgcmVmKSB7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuXG4gIGlmICghY3NzIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG5cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gIGlmIChpbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICBpZiAoaGVhZC5maXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVJbmplY3Q7XG4iLCJleHBvcnQgY29uc3QgSUNPTlMgPSB7XG4gICcxMGsnOiAnMTBrJyxcbiAgJzEwbXAnOiAnMTBtcCcsXG4gICcxMW1wJzogJzExbXAnLFxuICAnMTJtcCc6ICcxMm1wJyxcbiAgJzEzbXAnOiAnMTNtcCcsXG4gICcxNG1wJzogJzE0bXAnLFxuICAnMTVtcCc6ICcxNW1wJyxcbiAgJzE2bXAnOiAnMTZtcCcsXG4gICcxN21wJzogJzE3bXAnLFxuICAnMThtcCc6ICcxOG1wJyxcbiAgJzE5bXAnOiAnMTltcCcsXG4gICcxayc6ICcxaycsXG4gICcxa19wbHVzJzogJzFrX3BsdXMnLFxuICAnMXhfbW9iaWxlZGF0YSc6ICcxeF9tb2JpbGVkYXRhJyxcbiAgJzIwbXAnOiAnMjBtcCcsXG4gICcyMW1wJzogJzIxbXAnLFxuICAnMjJtcCc6ICcyMm1wJyxcbiAgJzIzbXAnOiAnMjNtcCcsXG4gICcyNG1wJzogJzI0bXAnLFxuICAnMmsnOiAnMmsnLFxuICAnMmtfcGx1cyc6ICcya19wbHVzJyxcbiAgJzJtcCc6ICcybXAnLFxuICAnMzBmcHMnOiAnMzBmcHMnLFxuICAnMzBmcHNfc2VsZWN0JzogJzMwZnBzX3NlbGVjdCcsXG4gICczNjAnOiAnMzYwJyxcbiAgJzNkX3JvdGF0aW9uJzogJzNkX3JvdGF0aW9uJyxcbiAgJzNnX21vYmlsZWRhdGEnOiAnM2dfbW9iaWxlZGF0YScsXG4gICczayc6ICczaycsXG4gICcza19wbHVzJzogJzNrX3BsdXMnLFxuICAnM21wJzogJzNtcCcsXG4gICczcCc6ICczcCcsXG4gICc0Z19tb2JpbGVkYXRhJzogJzRnX21vYmlsZWRhdGEnLFxuICAnNGdfcGx1c19tb2JpbGVkYXRhJzogJzRnX3BsdXNfbW9iaWxlZGF0YScsXG4gICc0ayc6ICc0aycsXG4gICc0a19wbHVzJzogJzRrX3BsdXMnLFxuICAnNG1wJzogJzRtcCcsXG4gICc1Zyc6ICc1ZycsXG4gICc1ayc6ICc1aycsXG4gICc1a19wbHVzJzogJzVrX3BsdXMnLFxuICAnNW1wJzogJzVtcCcsXG4gICc2MGZwcyc6ICc2MGZwcycsXG4gICc2MGZwc19zZWxlY3QnOiAnNjBmcHNfc2VsZWN0JyxcbiAgJzZfZnRfYXBhcnQnOiAnNl9mdF9hcGFydCcsXG4gICc2ayc6ICc2aycsXG4gICc2a19wbHVzJzogJzZrX3BsdXMnLFxuICAnNm1wJzogJzZtcCcsXG4gICc3ayc6ICc3aycsXG4gICc3a19wbHVzJzogJzdrX3BsdXMnLFxuICAnN21wJzogJzdtcCcsXG4gICc4ayc6ICc4aycsXG4gICc4a19wbHVzJzogJzhrX3BsdXMnLFxuICAnOG1wJzogJzhtcCcsXG4gICc5ayc6ICc5aycsXG4gICc5a19wbHVzJzogJzlrX3BsdXMnLFxuICAnOW1wJzogJzltcCcsXG4gICdhY191bml0JzogJ2FjX3VuaXQnLFxuICAnYWNjZXNzX2FsYXJtJzogJ2FjY2Vzc19hbGFybScsXG4gICdhY2Nlc3NfYWxhcm1zJzogJ2FjY2Vzc19hbGFybXMnLFxuICAnYWNjZXNzX3RpbWUnOiAnYWNjZXNzX3RpbWUnLFxuICAnYWNjZXNzX3RpbWVfZmlsbGVkJzogJ2FjY2Vzc190aW1lX2ZpbGxlZCcsXG4gICdhY2Nlc3NpYmlsaXR5JzogJ2FjY2Vzc2liaWxpdHknLFxuICAnYWNjZXNzaWJpbGl0eV9uZXcnOiAnYWNjZXNzaWJpbGl0eV9uZXcnLFxuICAnYWNjZXNzaWJsZSc6ICdhY2Nlc3NpYmxlJyxcbiAgJ2FjY2Vzc2libGVfZm9yd2FyZCc6ICdhY2Nlc3NpYmxlX2ZvcndhcmQnLFxuICAnYWNjb3VudF9iYWxhbmNlJzogJ2FjY291bnRfYmFsYW5jZScsXG4gICdhY2NvdW50X2JhbGFuY2Vfd2FsbGV0JzogJ2FjY291bnRfYmFsYW5jZV93YWxsZXQnLFxuICAnYWNjb3VudF9ib3gnOiAnYWNjb3VudF9ib3gnLFxuICAnYWNjb3VudF9jaXJjbGUnOiAnYWNjb3VudF9jaXJjbGUnLFxuICAnYWNjb3VudF90cmVlJzogJ2FjY291bnRfdHJlZScsXG4gICdhZF91bml0cyc6ICdhZF91bml0cycsXG4gICdhZGInOiAnYWRiJyxcbiAgJ2FkZCc6ICdhZGQnLFxuICAnYWRkX2FfcGhvdG8nOiAnYWRkX2FfcGhvdG8nLFxuICAnYWRkX2FsYXJtJzogJ2FkZF9hbGFybScsXG4gICdhZGRfYWxlcnQnOiAnYWRkX2FsZXJ0JyxcbiAgJ2FkZF9ib3gnOiAnYWRkX2JveCcsXG4gICdhZGRfYnVzaW5lc3MnOiAnYWRkX2J1c2luZXNzJyxcbiAgJ2FkZF9jaGFydCc6ICdhZGRfY2hhcnQnLFxuICAnYWRkX2NpcmNsZSc6ICdhZGRfY2lyY2xlJyxcbiAgJ2FkZF9jaXJjbGVfb3V0bGluZSc6ICdhZGRfY2lyY2xlX291dGxpbmUnLFxuICAnYWRkX2NvbW1lbnQnOiAnYWRkX2NvbW1lbnQnLFxuICAnYWRkX2ljX2NhbGwnOiAnYWRkX2ljX2NhbGwnLFxuICAnYWRkX2xpbmsnOiAnYWRkX2xpbmsnLFxuICAnYWRkX2xvY2F0aW9uJzogJ2FkZF9sb2NhdGlvbicsXG4gICdhZGRfbG9jYXRpb25fYWx0JzogJ2FkZF9sb2NhdGlvbl9hbHQnLFxuICAnYWRkX21vZGVyYXRvcic6ICdhZGRfbW9kZXJhdG9yJyxcbiAgJ2FkZF9waG90b19hbHRlcm5hdGUnOiAnYWRkX3Bob3RvX2FsdGVybmF0ZScsXG4gICdhZGRfcmVhY3Rpb24nOiAnYWRkX3JlYWN0aW9uJyxcbiAgJ2FkZF9yb2FkJzogJ2FkZF9yb2FkJyxcbiAgJ2FkZF9zaG9wcGluZ19jYXJ0JzogJ2FkZF9zaG9wcGluZ19jYXJ0JyxcbiAgJ2FkZF90YXNrJzogJ2FkZF90YXNrJyxcbiAgJ2FkZF90b19kcml2ZSc6ICdhZGRfdG9fZHJpdmUnLFxuICAnYWRkX3RvX2hvbWVfc2NyZWVuJzogJ2FkZF90b19ob21lX3NjcmVlbicsXG4gICdhZGRfdG9fcGhvdG9zJzogJ2FkZF90b19waG90b3MnLFxuICAnYWRkX3RvX3F1ZXVlJzogJ2FkZF90b19xdWV1ZScsXG4gICdhZGRjaGFydCc6ICdhZGRjaGFydCcsXG4gICdhZGp1c3QnOiAnYWRqdXN0JyxcbiAgJ2FkbWluX3BhbmVsX3NldHRpbmdzJzogJ2FkbWluX3BhbmVsX3NldHRpbmdzJyxcbiAgJ2Fkc19jbGljayc6ICdhZHNfY2xpY2snLFxuICAnYWdyaWN1bHR1cmUnOiAnYWdyaWN1bHR1cmUnLFxuICAnYWlyJzogJ2FpcicsXG4gICdhaXJsaW5lX3NlYXRfZmxhdCc6ICdhaXJsaW5lX3NlYXRfZmxhdCcsXG4gICdhaXJsaW5lX3NlYXRfZmxhdF9hbmdsZWQnOiAnYWlybGluZV9zZWF0X2ZsYXRfYW5nbGVkJyxcbiAgJ2FpcmxpbmVfc2VhdF9pbmRpdmlkdWFsX3N1aXRlJzogJ2FpcmxpbmVfc2VhdF9pbmRpdmlkdWFsX3N1aXRlJyxcbiAgJ2FpcmxpbmVfc2VhdF9sZWdyb29tX2V4dHJhJzogJ2FpcmxpbmVfc2VhdF9sZWdyb29tX2V4dHJhJyxcbiAgJ2FpcmxpbmVfc2VhdF9sZWdyb29tX25vcm1hbCc6ICdhaXJsaW5lX3NlYXRfbGVncm9vbV9ub3JtYWwnLFxuICAnYWlybGluZV9zZWF0X2xlZ3Jvb21fcmVkdWNlZCc6ICdhaXJsaW5lX3NlYXRfbGVncm9vbV9yZWR1Y2VkJyxcbiAgJ2FpcmxpbmVfc2VhdF9yZWNsaW5lX2V4dHJhJzogJ2FpcmxpbmVfc2VhdF9yZWNsaW5lX2V4dHJhJyxcbiAgJ2FpcmxpbmVfc2VhdF9yZWNsaW5lX25vcm1hbCc6ICdhaXJsaW5lX3NlYXRfcmVjbGluZV9ub3JtYWwnLFxuICAnYWlycGxhbmVfdGlja2V0JzogJ2FpcnBsYW5lX3RpY2tldCcsXG4gICdhaXJwbGFuZW1vZGVfYWN0aXZlJzogJ2FpcnBsYW5lbW9kZV9hY3RpdmUnLFxuICAnYWlycGxhbmVtb2RlX2luYWN0aXZlJzogJ2FpcnBsYW5lbW9kZV9pbmFjdGl2ZScsXG4gICdhaXJwbGF5JzogJ2FpcnBsYXknLFxuICAnYWlycG9ydF9zaHV0dGxlJzogJ2FpcnBvcnRfc2h1dHRsZScsXG4gICdhbGFybSc6ICdhbGFybScsXG4gICdhbGFybV9hZGQnOiAnYWxhcm1fYWRkJyxcbiAgJ2FsYXJtX29mZic6ICdhbGFybV9vZmYnLFxuICAnYWxhcm1fb24nOiAnYWxhcm1fb24nLFxuICAnYWxidW0nOiAnYWxidW0nLFxuICAnYWxpZ25faG9yaXpvbnRhbF9jZW50ZXInOiAnYWxpZ25faG9yaXpvbnRhbF9jZW50ZXInLFxuICAnYWxpZ25faG9yaXpvbnRhbF9sZWZ0JzogJ2FsaWduX2hvcml6b250YWxfbGVmdCcsXG4gICdhbGlnbl9ob3Jpem9udGFsX3JpZ2h0JzogJ2FsaWduX2hvcml6b250YWxfcmlnaHQnLFxuICAnYWxpZ25fdmVydGljYWxfYm90dG9tJzogJ2FsaWduX3ZlcnRpY2FsX2JvdHRvbScsXG4gICdhbGlnbl92ZXJ0aWNhbF9jZW50ZXInOiAnYWxpZ25fdmVydGljYWxfY2VudGVyJyxcbiAgJ2FsaWduX3ZlcnRpY2FsX3RvcCc6ICdhbGlnbl92ZXJ0aWNhbF90b3AnLFxuICAnYWxsX2luYm94JzogJ2FsbF9pbmJveCcsXG4gICdhbGxfaW5jbHVzaXZlJzogJ2FsbF9pbmNsdXNpdmUnLFxuICAnYWxsX291dCc6ICdhbGxfb3V0JyxcbiAgJ2FsdF9yb3V0ZSc6ICdhbHRfcm91dGUnLFxuICAnYWx0ZXJuYXRlX2VtYWlsJzogJ2FsdGVybmF0ZV9lbWFpbCcsXG4gICdhbmFseXRpY3MnOiAnYW5hbHl0aWNzJyxcbiAgJ2FuY2hvcic6ICdhbmNob3InLFxuICAnYW5kcm9pZCc6ICdhbmRyb2lkJyxcbiAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb24nLFxuICAnYW5ub3VuY2VtZW50JzogJ2Fubm91bmNlbWVudCcsXG4gICdhb2QnOiAnYW9kJyxcbiAgJ2FwYXJ0bWVudCc6ICdhcGFydG1lbnQnLFxuICAnYXBpJzogJ2FwaScsXG4gICdhcHBfYmxvY2tpbmcnOiAnYXBwX2Jsb2NraW5nJyxcbiAgJ2FwcF9yZWdpc3RyYXRpb24nOiAnYXBwX3JlZ2lzdHJhdGlvbicsXG4gICdhcHBfc2V0dGluZ3NfYWx0JzogJ2FwcF9zZXR0aW5nc19hbHQnLFxuICAnYXBwcm92YWwnOiAnYXBwcm92YWwnLFxuICAnYXBwcyc6ICdhcHBzJyxcbiAgJ2FyY2hpdGVjdHVyZSc6ICdhcmNoaXRlY3R1cmUnLFxuICAnYXJjaGl2ZSc6ICdhcmNoaXZlJyxcbiAgJ2FyZWFfY2hhcnQnOiAnYXJlYV9jaGFydCcsXG4gICdhcnJvd19iYWNrJzogJ2Fycm93X2JhY2snLFxuICAnYXJyb3dfYmFja19pb3MnOiAnYXJyb3dfYmFja19pb3MnLFxuICAnYXJyb3dfYmFja19pb3NfbmV3JzogJ2Fycm93X2JhY2tfaW9zX25ldycsXG4gICdhcnJvd19jaXJjbGVfZG93bic6ICdhcnJvd19jaXJjbGVfZG93bicsXG4gICdhcnJvd19jaXJjbGVfdXAnOiAnYXJyb3dfY2lyY2xlX3VwJyxcbiAgJ2Fycm93X2Rvd253YXJkJzogJ2Fycm93X2Rvd253YXJkJyxcbiAgJ2Fycm93X2Ryb3BfZG93bic6ICdhcnJvd19kcm9wX2Rvd24nLFxuICAnYXJyb3dfZHJvcF9kb3duX2NpcmNsZSc6ICdhcnJvd19kcm9wX2Rvd25fY2lyY2xlJyxcbiAgJ2Fycm93X2Ryb3BfdXAnOiAnYXJyb3dfZHJvcF91cCcsXG4gICdhcnJvd19mb3J3YXJkJzogJ2Fycm93X2ZvcndhcmQnLFxuICAnYXJyb3dfZm9yd2FyZF9pb3MnOiAnYXJyb3dfZm9yd2FyZF9pb3MnLFxuICAnYXJyb3dfbGVmdCc6ICdhcnJvd19sZWZ0JyxcbiAgJ2Fycm93X3JpZ2h0JzogJ2Fycm93X3JpZ2h0JyxcbiAgJ2Fycm93X3JpZ2h0X2FsdCc6ICdhcnJvd19yaWdodF9hbHQnLFxuICAnYXJyb3dfdXB3YXJkJzogJ2Fycm93X3Vwd2FyZCcsXG4gICdhcnRfdHJhY2snOiAnYXJ0X3RyYWNrJyxcbiAgJ2FydGljbGUnOiAnYXJ0aWNsZScsXG4gICdhc3BlY3RfcmF0aW8nOiAnYXNwZWN0X3JhdGlvJyxcbiAgJ2Fzc2Vzc21lbnQnOiAnYXNzZXNzbWVudCcsXG4gICdhc3NpZ25tZW50JzogJ2Fzc2lnbm1lbnQnLFxuICAnYXNzaWdubWVudF9pbmQnOiAnYXNzaWdubWVudF9pbmQnLFxuICAnYXNzaWdubWVudF9sYXRlJzogJ2Fzc2lnbm1lbnRfbGF0ZScsXG4gICdhc3NpZ25tZW50X3JldHVybic6ICdhc3NpZ25tZW50X3JldHVybicsXG4gICdhc3NpZ25tZW50X3JldHVybmVkJzogJ2Fzc2lnbm1lbnRfcmV0dXJuZWQnLFxuICAnYXNzaWdubWVudF90dXJuZWRfaW4nOiAnYXNzaWdubWVudF90dXJuZWRfaW4nLFxuICAnYXNzaXN0YW50JzogJ2Fzc2lzdGFudCcsXG4gICdhc3Npc3RhbnRfZGlyZWN0aW9uJzogJ2Fzc2lzdGFudF9kaXJlY3Rpb24nLFxuICAnYXNzaXN0YW50X3Bob3RvJzogJ2Fzc2lzdGFudF9waG90bycsXG4gICdhdG0nOiAnYXRtJyxcbiAgJ2F0dGFjaF9lbWFpbCc6ICdhdHRhY2hfZW1haWwnLFxuICAnYXR0YWNoX2ZpbGUnOiAnYXR0YWNoX2ZpbGUnLFxuICAnYXR0YWNoX21vbmV5JzogJ2F0dGFjaF9tb25leScsXG4gICdhdHRhY2htZW50JzogJ2F0dGFjaG1lbnQnLFxuICAnYXR0cmFjdGlvbnMnOiAnYXR0cmFjdGlvbnMnLFxuICAnYXR0cmlidXRpb24nOiAnYXR0cmlidXRpb24nLFxuICAnYXVkaW90cmFjayc6ICdhdWRpb3RyYWNrJyxcbiAgJ2F1dG9fYXdlc29tZSc6ICdhdXRvX2F3ZXNvbWUnLFxuICAnYXV0b19hd2Vzb21lX21vc2FpYyc6ICdhdXRvX2F3ZXNvbWVfbW9zYWljJyxcbiAgJ2F1dG9fYXdlc29tZV9tb3Rpb24nOiAnYXV0b19hd2Vzb21lX21vdGlvbicsXG4gICdhdXRvX2RlbGV0ZSc6ICdhdXRvX2RlbGV0ZScsXG4gICdhdXRvX2ZpeF9oaWdoJzogJ2F1dG9fZml4X2hpZ2gnLFxuICAnYXV0b19maXhfbm9ybWFsJzogJ2F1dG9fZml4X25vcm1hbCcsXG4gICdhdXRvX2ZpeF9vZmYnOiAnYXV0b19maXhfb2ZmJyxcbiAgJ2F1dG9fZ3JhcGgnOiAnYXV0b19ncmFwaCcsXG4gICdhdXRvX3N0b3JpZXMnOiAnYXV0b19zdG9yaWVzJyxcbiAgJ2F1dG9mcHNfc2VsZWN0JzogJ2F1dG9mcHNfc2VsZWN0JyxcbiAgJ2F1dG9yZW5ldyc6ICdhdXRvcmVuZXcnLFxuICAnYXZfdGltZXInOiAnYXZfdGltZXInLFxuICAnYmFieV9jaGFuZ2luZ19zdGF0aW9uJzogJ2JhYnlfY2hhbmdpbmdfc3RhdGlvbicsXG4gICdiYWNrX2hhbmQnOiAnYmFja19oYW5kJyxcbiAgJ2JhY2twYWNrJzogJ2JhY2twYWNrJyxcbiAgJ2JhY2tzcGFjZSc6ICdiYWNrc3BhY2UnLFxuICAnYmFja3VwJzogJ2JhY2t1cCcsXG4gICdiYWNrdXBfdGFibGUnOiAnYmFja3VwX3RhYmxlJyxcbiAgJ2JhZGdlJzogJ2JhZGdlJyxcbiAgJ2Jha2VyeV9kaW5pbmcnOiAnYmFrZXJ5X2RpbmluZycsXG4gICdiYWxjb255JzogJ2JhbGNvbnknLFxuICAnYmFsbG90JzogJ2JhbGxvdCcsXG4gICdiYXJfY2hhcnQnOiAnYmFyX2NoYXJ0JyxcbiAgJ2JhdGNoX3ByZWRpY3Rpb24nOiAnYmF0Y2hfcHJlZGljdGlvbicsXG4gICdiYXRocm9vbSc6ICdiYXRocm9vbScsXG4gICdiYXRodHViJzogJ2JhdGh0dWInLFxuICAnYmF0dGVyeV9hbGVydCc6ICdiYXR0ZXJ5X2FsZXJ0JyxcbiAgJ2JhdHRlcnlfY2hhcmdpbmdfZnVsbCc6ICdiYXR0ZXJ5X2NoYXJnaW5nX2Z1bGwnLFxuICAnYmF0dGVyeV9mdWxsJzogJ2JhdHRlcnlfZnVsbCcsXG4gICdiYXR0ZXJ5X3NhdmVyJzogJ2JhdHRlcnlfc2F2ZXInLFxuICAnYmF0dGVyeV9zdGQnOiAnYmF0dGVyeV9zdGQnLFxuICAnYmF0dGVyeV91bmtub3duJzogJ2JhdHRlcnlfdW5rbm93bicsXG4gICdiZWFjaF9hY2Nlc3MnOiAnYmVhY2hfYWNjZXNzJyxcbiAgJ2JlZCc6ICdiZWQnLFxuICAnYmVkcm9vbV9iYWJ5JzogJ2JlZHJvb21fYmFieScsXG4gICdiZWRyb29tX2NoaWxkJzogJ2JlZHJvb21fY2hpbGQnLFxuICAnYmVkcm9vbV9wYXJlbnQnOiAnYmVkcm9vbV9wYXJlbnQnLFxuICAnYmVkdGltZSc6ICdiZWR0aW1lJyxcbiAgJ2JlZW5oZXJlJzogJ2JlZW5oZXJlJyxcbiAgJ2JlbnRvJzogJ2JlbnRvJyxcbiAgJ2Jpa2Vfc2Nvb3Rlcic6ICdiaWtlX3Njb290ZXInLFxuICAnYmlvdGVjaCc6ICdiaW90ZWNoJyxcbiAgJ2JsZW5kZXInOiAnYmxlbmRlcicsXG4gICdibG9jayc6ICdibG9jaycsXG4gICdibG9vZHR5cGUnOiAnYmxvb2R0eXBlJyxcbiAgJ2JsdWV0b290aCc6ICdibHVldG9vdGgnLFxuICAnYmx1ZXRvb3RoX2F1ZGlvJzogJ2JsdWV0b290aF9hdWRpbycsXG4gICdibHVldG9vdGhfY29ubmVjdGVkJzogJ2JsdWV0b290aF9jb25uZWN0ZWQnLFxuICAnYmx1ZXRvb3RoX2Rpc2FibGVkJzogJ2JsdWV0b290aF9kaXNhYmxlZCcsXG4gICdibHVldG9vdGhfZHJpdmUnOiAnYmx1ZXRvb3RoX2RyaXZlJyxcbiAgJ2JsdWV0b290aF9zZWFyY2hpbmcnOiAnYmx1ZXRvb3RoX3NlYXJjaGluZycsXG4gICdibHVyX2NpcmN1bGFyJzogJ2JsdXJfY2lyY3VsYXInLFxuICAnYmx1cl9saW5lYXInOiAnYmx1cl9saW5lYXInLFxuICAnYmx1cl9vZmYnOiAnYmx1cl9vZmYnLFxuICAnYmx1cl9vbic6ICdibHVyX29uJyxcbiAgJ2JvbHQnOiAnYm9sdCcsXG4gICdib29rJzogJ2Jvb2snLFxuICAnYm9va19vbmxpbmUnOiAnYm9va19vbmxpbmUnLFxuICAnYm9va21hcmsnOiAnYm9va21hcmsnLFxuICAnYm9va21hcmtfYWRkJzogJ2Jvb2ttYXJrX2FkZCcsXG4gICdib29rbWFya19hZGRlZCc6ICdib29rbWFya19hZGRlZCcsXG4gICdib29rbWFya19ib3JkZXInOiAnYm9va21hcmtfYm9yZGVyJyxcbiAgJ2Jvb2ttYXJrX3JlbW92ZSc6ICdib29rbWFya19yZW1vdmUnLFxuICAnYm9va21hcmtzJzogJ2Jvb2ttYXJrcycsXG4gICdib3JkZXJfYWxsJzogJ2JvcmRlcl9hbGwnLFxuICAnYm9yZGVyX2JvdHRvbSc6ICdib3JkZXJfYm90dG9tJyxcbiAgJ2JvcmRlcl9jbGVhcic6ICdib3JkZXJfY2xlYXInLFxuICAnYm9yZGVyX2NvbG9yJzogJ2JvcmRlcl9jb2xvcicsXG4gICdib3JkZXJfaG9yaXpvbnRhbCc6ICdib3JkZXJfaG9yaXpvbnRhbCcsXG4gICdib3JkZXJfaW5uZXInOiAnYm9yZGVyX2lubmVyJyxcbiAgJ2JvcmRlcl9sZWZ0JzogJ2JvcmRlcl9sZWZ0JyxcbiAgJ2JvcmRlcl9vdXRlcic6ICdib3JkZXJfb3V0ZXInLFxuICAnYm9yZGVyX3JpZ2h0JzogJ2JvcmRlcl9yaWdodCcsXG4gICdib3JkZXJfc3R5bGUnOiAnYm9yZGVyX3N0eWxlJyxcbiAgJ2JvcmRlcl90b3AnOiAnYm9yZGVyX3RvcCcsXG4gICdib3JkZXJfdmVydGljYWwnOiAnYm9yZGVyX3ZlcnRpY2FsJyxcbiAgJ2JyYW5kaW5nX3dhdGVybWFyayc6ICdicmFuZGluZ193YXRlcm1hcmsnLFxuICAnYnJlYWtmYXN0X2RpbmluZyc6ICdicmVha2Zhc3RfZGluaW5nJyxcbiAgJ2JyaWdodG5lc3NfMSc6ICdicmlnaHRuZXNzXzEnLFxuICAnYnJpZ2h0bmVzc18yJzogJ2JyaWdodG5lc3NfMicsXG4gICdicmlnaHRuZXNzXzMnOiAnYnJpZ2h0bmVzc18zJyxcbiAgJ2JyaWdodG5lc3NfNCc6ICdicmlnaHRuZXNzXzQnLFxuICAnYnJpZ2h0bmVzc181JzogJ2JyaWdodG5lc3NfNScsXG4gICdicmlnaHRuZXNzXzYnOiAnYnJpZ2h0bmVzc182JyxcbiAgJ2JyaWdodG5lc3NfNyc6ICdicmlnaHRuZXNzXzcnLFxuICAnYnJpZ2h0bmVzc19hdXRvJzogJ2JyaWdodG5lc3NfYXV0bycsXG4gICdicmlnaHRuZXNzX2hpZ2gnOiAnYnJpZ2h0bmVzc19oaWdoJyxcbiAgJ2JyaWdodG5lc3NfbG93JzogJ2JyaWdodG5lc3NfbG93JyxcbiAgJ2JyaWdodG5lc3NfbWVkaXVtJzogJ2JyaWdodG5lc3NfbWVkaXVtJyxcbiAgJ2Jyb2tlbl9pbWFnZSc6ICdicm9rZW5faW1hZ2UnLFxuICAnYnJvd3Nlcl9ub3Rfc3VwcG9ydGVkJzogJ2Jyb3dzZXJfbm90X3N1cHBvcnRlZCcsXG4gICdicnVuY2hfZGluaW5nJzogJ2JydW5jaF9kaW5pbmcnLFxuICAnYnJ1c2gnOiAnYnJ1c2gnLFxuICAnYnViYmxlX2NoYXJ0JzogJ2J1YmJsZV9jaGFydCcsXG4gICdidWdfcmVwb3J0JzogJ2J1Z19yZXBvcnQnLFxuICAnYnVpbGQnOiAnYnVpbGQnLFxuICAnYnVpbGRfY2lyY2xlJzogJ2J1aWxkX2NpcmNsZScsXG4gICdidW5nYWxvdyc6ICdidW5nYWxvdycsXG4gICdidXJzdF9tb2RlJzogJ2J1cnN0X21vZGUnLFxuICAnYnVzX2FsZXJ0JzogJ2J1c19hbGVydCcsXG4gICdidXNpbmVzcyc6ICdidXNpbmVzcycsXG4gICdidXNpbmVzc19jZW50ZXInOiAnYnVzaW5lc3NfY2VudGVyJyxcbiAgJ2NhYmluJzogJ2NhYmluJyxcbiAgJ2NhYmxlJzogJ2NhYmxlJyxcbiAgJ2NhY2hlZCc6ICdjYWNoZWQnLFxuICAnY2FrZSc6ICdjYWtlJyxcbiAgJ2NhbGN1bGF0ZSc6ICdjYWxjdWxhdGUnLFxuICAnY2FsZW5kYXJfdG9kYXknOiAnY2FsZW5kYXJfdG9kYXknLFxuICAnY2FsZW5kYXJfdmlld19kYXknOiAnY2FsZW5kYXJfdmlld19kYXknLFxuICAnY2FsZW5kYXJfdmlld19tb250aCc6ICdjYWxlbmRhcl92aWV3X21vbnRoJyxcbiAgJ2NhbGVuZGFyX3ZpZXdfd2Vlayc6ICdjYWxlbmRhcl92aWV3X3dlZWsnLFxuICAnY2FsbCc6ICdjYWxsJyxcbiAgJ2NhbGxfZW5kJzogJ2NhbGxfZW5kJyxcbiAgJ2NhbGxfbWFkZSc6ICdjYWxsX21hZGUnLFxuICAnY2FsbF9tZXJnZSc6ICdjYWxsX21lcmdlJyxcbiAgJ2NhbGxfbWlzc2VkJzogJ2NhbGxfbWlzc2VkJyxcbiAgJ2NhbGxfbWlzc2VkX291dGdvaW5nJzogJ2NhbGxfbWlzc2VkX291dGdvaW5nJyxcbiAgJ2NhbGxfcmVjZWl2ZWQnOiAnY2FsbF9yZWNlaXZlZCcsXG4gICdjYWxsX3NwbGl0JzogJ2NhbGxfc3BsaXQnLFxuICAnY2FsbF90b19hY3Rpb24nOiAnY2FsbF90b19hY3Rpb24nLFxuICAnY2FtZXJhJzogJ2NhbWVyYScsXG4gICdjYW1lcmFfYWx0JzogJ2NhbWVyYV9hbHQnLFxuICAnY2FtZXJhX2VuaGFuY2UnOiAnY2FtZXJhX2VuaGFuY2UnLFxuICAnY2FtZXJhX2Zyb250JzogJ2NhbWVyYV9mcm9udCcsXG4gICdjYW1lcmFfaW5kb29yJzogJ2NhbWVyYV9pbmRvb3InLFxuICAnY2FtZXJhX291dGRvb3InOiAnY2FtZXJhX291dGRvb3InLFxuICAnY2FtZXJhX3JlYXInOiAnY2FtZXJhX3JlYXInLFxuICAnY2FtZXJhX3JvbGwnOiAnY2FtZXJhX3JvbGwnLFxuICAnY2FtZXJhc3dpdGNoJzogJ2NhbWVyYXN3aXRjaCcsXG4gICdjYW1wYWlnbic6ICdjYW1wYWlnbicsXG4gICdjYW5jZWwnOiAnY2FuY2VsJyxcbiAgJ2NhbmNlbF9wcmVzZW50YXRpb24nOiAnY2FuY2VsX3ByZXNlbnRhdGlvbicsXG4gICdjYW5jZWxfc2NoZWR1bGVfc2VuZCc6ICdjYW5jZWxfc2NoZWR1bGVfc2VuZCcsXG4gICdjYXJfcmVudGFsJzogJ2Nhcl9yZW50YWwnLFxuICAnY2FyX3JlcGFpcic6ICdjYXJfcmVwYWlyJyxcbiAgJ2NhcmRfZ2lmdGNhcmQnOiAnY2FyZF9naWZ0Y2FyZCcsXG4gICdjYXJkX21lbWJlcnNoaXAnOiAnY2FyZF9tZW1iZXJzaGlwJyxcbiAgJ2NhcmRfdHJhdmVsJzogJ2NhcmRfdHJhdmVsJyxcbiAgJ2NhcnBlbnRlcic6ICdjYXJwZW50ZXInLFxuICAnY2FzZXMnOiAnY2FzZXMnLFxuICAnY2FzaW5vJzogJ2Nhc2lubycsXG4gICdjYXN0JzogJ2Nhc3QnLFxuICAnY2FzdF9jb25uZWN0ZWQnOiAnY2FzdF9jb25uZWN0ZWQnLFxuICAnY2FzdF9mb3JfZWR1Y2F0aW9uJzogJ2Nhc3RfZm9yX2VkdWNhdGlvbicsXG4gICdjYXRjaGluZ19wb2tlbW9uJzogJ2NhdGNoaW5nX3Bva2Vtb24nLFxuICAnY2F0ZWdvcnknOiAnY2F0ZWdvcnknLFxuICAnY2VsZWJyYXRpb24nOiAnY2VsZWJyYXRpb24nLFxuICAnY2VsbF93aWZpJzogJ2NlbGxfd2lmaScsXG4gICdjZW50ZXJfZm9jdXNfc3Ryb25nJzogJ2NlbnRlcl9mb2N1c19zdHJvbmcnLFxuICAnY2VudGVyX2ZvY3VzX3dlYWsnOiAnY2VudGVyX2ZvY3VzX3dlYWsnLFxuICAnY2hhaXInOiAnY2hhaXInLFxuICAnY2hhaXJfYWx0JzogJ2NoYWlyX2FsdCcsXG4gICdjaGFsZXQnOiAnY2hhbGV0JyxcbiAgJ2NoYW5nZV9jaXJjbGUnOiAnY2hhbmdlX2NpcmNsZScsXG4gICdjaGFuZ2VfaGlzdG9yeSc6ICdjaGFuZ2VfaGlzdG9yeScsXG4gICdjaGFyZ2luZ19zdGF0aW9uJzogJ2NoYXJnaW5nX3N0YXRpb24nLFxuICAnY2hhdCc6ICdjaGF0JyxcbiAgJ2NoYXRfYnViYmxlJzogJ2NoYXRfYnViYmxlJyxcbiAgJ2NoYXRfYnViYmxlX291dGxpbmUnOiAnY2hhdF9idWJibGVfb3V0bGluZScsXG4gICdjaGVjayc6ICdjaGVjaycsXG4gICdjaGVja19ib3gnOiAnY2hlY2tfYm94JyxcbiAgJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJzogJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJyxcbiAgJ2NoZWNrX2NpcmNsZSc6ICdjaGVja19jaXJjbGUnLFxuICAnY2hlY2tfY2lyY2xlX291dGxpbmUnOiAnY2hlY2tfY2lyY2xlX291dGxpbmUnLFxuICAnY2hlY2tsaXN0JzogJ2NoZWNrbGlzdCcsXG4gICdjaGVja2xpc3RfcnRsJzogJ2NoZWNrbGlzdF9ydGwnLFxuICAnY2hlY2tyb29tJzogJ2NoZWNrcm9vbScsXG4gICdjaGV2cm9uX2xlZnQnOiAnY2hldnJvbl9sZWZ0JyxcbiAgJ2NoZXZyb25fcmlnaHQnOiAnY2hldnJvbl9yaWdodCcsXG4gICdjaGlsZF9jYXJlJzogJ2NoaWxkX2NhcmUnLFxuICAnY2hpbGRfZnJpZW5kbHknOiAnY2hpbGRfZnJpZW5kbHknLFxuICAnY2hyb21lX3JlYWRlcl9tb2RlJzogJ2Nocm9tZV9yZWFkZXJfbW9kZScsXG4gICdjaXJjbGUnOiAnY2lyY2xlJyxcbiAgJ2NpcmNsZV9ub3RpZmljYXRpb25zJzogJ2NpcmNsZV9ub3RpZmljYXRpb25zJyxcbiAgJ2NsYXNzJzogJ2NsYXNzJyxcbiAgJ2NsZWFuX2hhbmRzJzogJ2NsZWFuX2hhbmRzJyxcbiAgJ2NsZWFuaW5nX3NlcnZpY2VzJzogJ2NsZWFuaW5nX3NlcnZpY2VzJyxcbiAgJ2NsZWFyJzogJ2NsZWFyJyxcbiAgJ2NsZWFyX2FsbCc6ICdjbGVhcl9hbGwnLFxuICAnY2xvc2UnOiAnY2xvc2UnLFxuICAnY2xvc2VfZnVsbHNjcmVlbic6ICdjbG9zZV9mdWxsc2NyZWVuJyxcbiAgJ2Nsb3NlZF9jYXB0aW9uJzogJ2Nsb3NlZF9jYXB0aW9uJyxcbiAgJ2Nsb3NlZF9jYXB0aW9uX2Rpc2FibGVkJzogJ2Nsb3NlZF9jYXB0aW9uX2Rpc2FibGVkJyxcbiAgJ2Nsb3NlZF9jYXB0aW9uX29mZic6ICdjbG9zZWRfY2FwdGlvbl9vZmYnLFxuICAnY2xvdWQnOiAnY2xvdWQnLFxuICAnY2xvdWRfY2lyY2xlJzogJ2Nsb3VkX2NpcmNsZScsXG4gICdjbG91ZF9kb25lJzogJ2Nsb3VkX2RvbmUnLFxuICAnY2xvdWRfZG93bmxvYWQnOiAnY2xvdWRfZG93bmxvYWQnLFxuICAnY2xvdWRfb2ZmJzogJ2Nsb3VkX29mZicsXG4gICdjbG91ZF9xdWV1ZSc6ICdjbG91ZF9xdWV1ZScsXG4gICdjbG91ZF91cGxvYWQnOiAnY2xvdWRfdXBsb2FkJyxcbiAgJ2NvZGUnOiAnY29kZScsXG4gICdjb2RlX29mZic6ICdjb2RlX29mZicsXG4gICdjb2ZmZWUnOiAnY29mZmVlJyxcbiAgJ2NvZmZlZV9tYWtlcic6ICdjb2ZmZWVfbWFrZXInLFxuICAnY29sbGVjdGlvbnMnOiAnY29sbGVjdGlvbnMnLFxuICAnY29sbGVjdGlvbnNfYm9va21hcmsnOiAnY29sbGVjdGlvbnNfYm9va21hcmsnLFxuICAnY29sb3JfbGVucyc6ICdjb2xvcl9sZW5zJyxcbiAgJ2NvbG9yaXplJzogJ2NvbG9yaXplJyxcbiAgJ2NvbW1lbnQnOiAnY29tbWVudCcsXG4gICdjb21tZW50X2JhbmsnOiAnY29tbWVudF9iYW5rJyxcbiAgJ2NvbW11dGUnOiAnY29tbXV0ZScsXG4gICdjb21wYXJlJzogJ2NvbXBhcmUnLFxuICAnY29tcGFyZV9hcnJvd3MnOiAnY29tcGFyZV9hcnJvd3MnLFxuICAnY29tcGFzc19jYWxpYnJhdGlvbic6ICdjb21wYXNzX2NhbGlicmF0aW9uJyxcbiAgJ2NvbXBvc3QnOiAnY29tcG9zdCcsXG4gICdjb21wcmVzcyc6ICdjb21wcmVzcycsXG4gICdjb21wdXRlcic6ICdjb21wdXRlcicsXG4gICdjb25maXJtYXRpb25fbnVtYmVyJzogJ2NvbmZpcm1hdGlvbl9udW1iZXInLFxuICAnY29ubmVjdF93aXRob3V0X2NvbnRhY3QnOiAnY29ubmVjdF93aXRob3V0X2NvbnRhY3QnLFxuICAnY29ubmVjdGVkX3R2JzogJ2Nvbm5lY3RlZF90dicsXG4gICdjb25zdHJ1Y3Rpb24nOiAnY29uc3RydWN0aW9uJyxcbiAgJ2NvbnRhY3RfbWFpbCc6ICdjb250YWN0X21haWwnLFxuICAnY29udGFjdF9wYWdlJzogJ2NvbnRhY3RfcGFnZScsXG4gICdjb250YWN0X3Bob25lJzogJ2NvbnRhY3RfcGhvbmUnLFxuICAnY29udGFjdF9zdXBwb3J0JzogJ2NvbnRhY3Rfc3VwcG9ydCcsXG4gICdjb250YWN0bGVzcyc6ICdjb250YWN0bGVzcycsXG4gICdjb250YWN0cyc6ICdjb250YWN0cycsXG4gICdjb250ZW50X2NvcHknOiAnY29udGVudF9jb3B5JyxcbiAgJ2NvbnRlbnRfY3V0JzogJ2NvbnRlbnRfY3V0JyxcbiAgJ2NvbnRlbnRfcGFzdGUnOiAnY29udGVudF9wYXN0ZScsXG4gICdjb250ZW50X3Bhc3RlX29mZic6ICdjb250ZW50X3Bhc3RlX29mZicsXG4gICdjb250cm9sX2NhbWVyYSc6ICdjb250cm9sX2NhbWVyYScsXG4gICdjb250cm9sX3BvaW50JzogJ2NvbnRyb2xfcG9pbnQnLFxuICAnY29udHJvbF9wb2ludF9kdXBsaWNhdGUnOiAnY29udHJvbF9wb2ludF9kdXBsaWNhdGUnLFxuICAnY29weV9hbGwnOiAnY29weV9hbGwnLFxuICAnY29weXJpZ2h0JzogJ2NvcHlyaWdodCcsXG4gICdjb3JvbmF2aXJ1cyc6ICdjb3JvbmF2aXJ1cycsXG4gICdjb3Jwb3JhdGVfZmFyZSc6ICdjb3Jwb3JhdGVfZmFyZScsXG4gICdjb3R0YWdlJzogJ2NvdHRhZ2UnLFxuICAnY291bnRlcnRvcHMnOiAnY291bnRlcnRvcHMnLFxuICAnY3JlYXRlJzogJ2NyZWF0ZScsXG4gICdjcmVhdGVfbmV3X2ZvbGRlcic6ICdjcmVhdGVfbmV3X2ZvbGRlcicsXG4gICdjcmVkaXRfY2FyZCc6ICdjcmVkaXRfY2FyZCcsXG4gICdjcmVkaXRfY2FyZF9vZmYnOiAnY3JlZGl0X2NhcmRfb2ZmJyxcbiAgJ2NyZWRpdF9zY29yZSc6ICdjcmVkaXRfc2NvcmUnLFxuICAnY3JpYic6ICdjcmliJyxcbiAgJ2Nyb3AnOiAnY3JvcCcsXG4gICdjcm9wXzE2XzknOiAnY3JvcF8xNl85JyxcbiAgJ2Nyb3BfM18yJzogJ2Nyb3BfM18yJyxcbiAgJ2Nyb3BfNV80JzogJ2Nyb3BfNV80JyxcbiAgJ2Nyb3BfN181JzogJ2Nyb3BfN181JyxcbiAgJ2Nyb3BfZGluJzogJ2Nyb3BfZGluJyxcbiAgJ2Nyb3BfZnJlZSc6ICdjcm9wX2ZyZWUnLFxuICAnY3JvcF9sYW5kc2NhcGUnOiAnY3JvcF9sYW5kc2NhcGUnLFxuICAnY3JvcF9vcmlnaW5hbCc6ICdjcm9wX29yaWdpbmFsJyxcbiAgJ2Nyb3BfcG9ydHJhaXQnOiAnY3JvcF9wb3J0cmFpdCcsXG4gICdjcm9wX3JvdGF0ZSc6ICdjcm9wX3JvdGF0ZScsXG4gICdjcm9wX3NxdWFyZSc6ICdjcm9wX3NxdWFyZScsXG4gICdjcnVlbHR5X2ZyZWUnOiAnY3J1ZWx0eV9mcmVlJyxcbiAgJ2Rhbmdlcm91cyc6ICdkYW5nZXJvdXMnLFxuICAnZGFya19tb2RlJzogJ2RhcmtfbW9kZScsXG4gICdkYXNoYm9hcmQnOiAnZGFzaGJvYXJkJyxcbiAgJ2Rhc2hib2FyZF9jdXN0b21pemUnOiAnZGFzaGJvYXJkX2N1c3RvbWl6ZScsXG4gICdkYXRhX2V4cGxvcmF0aW9uJzogJ2RhdGFfZXhwbG9yYXRpb24nLFxuICAnZGF0YV9zYXZlcl9vZmYnOiAnZGF0YV9zYXZlcl9vZmYnLFxuICAnZGF0YV9zYXZlcl9vbic6ICdkYXRhX3NhdmVyX29uJyxcbiAgJ2RhdGFfdXNhZ2UnOiAnZGF0YV91c2FnZScsXG4gICdkYXRlX3JhbmdlJzogJ2RhdGVfcmFuZ2UnLFxuICAnZGVjayc6ICdkZWNrJyxcbiAgJ2RlaGF6ZSc6ICdkZWhhemUnLFxuICAnZGVsZXRlJzogJ2RlbGV0ZScsXG4gICdkZWxldGVfZm9yZXZlcic6ICdkZWxldGVfZm9yZXZlcicsXG4gICdkZWxldGVfb3V0bGluZSc6ICdkZWxldGVfb3V0bGluZScsXG4gICdkZWxldGVfc3dlZXAnOiAnZGVsZXRlX3N3ZWVwJyxcbiAgJ2RlbGl2ZXJ5X2RpbmluZyc6ICdkZWxpdmVyeV9kaW5pbmcnLFxuICAnZGVwYXJ0dXJlX2JvYXJkJzogJ2RlcGFydHVyZV9ib2FyZCcsXG4gICdkZXNjcmlwdGlvbic6ICdkZXNjcmlwdGlvbicsXG4gICdkZXNpZ25fc2VydmljZXMnOiAnZGVzaWduX3NlcnZpY2VzJyxcbiAgJ2Rlc2t0b3BfYWNjZXNzX2Rpc2FibGVkJzogJ2Rlc2t0b3BfYWNjZXNzX2Rpc2FibGVkJyxcbiAgJ2Rlc2t0b3BfbWFjJzogJ2Rlc2t0b3BfbWFjJyxcbiAgJ2Rlc2t0b3Bfd2luZG93cyc6ICdkZXNrdG9wX3dpbmRvd3MnLFxuICAnZGV0YWlscyc6ICdkZXRhaWxzJyxcbiAgJ2RldmVsb3Blcl9ib2FyZCc6ICdkZXZlbG9wZXJfYm9hcmQnLFxuICAnZGV2ZWxvcGVyX2JvYXJkX29mZic6ICdkZXZlbG9wZXJfYm9hcmRfb2ZmJyxcbiAgJ2RldmVsb3Blcl9tb2RlJzogJ2RldmVsb3Blcl9tb2RlJyxcbiAgJ2RldmljZV9odWInOiAnZGV2aWNlX2h1YicsXG4gICdkZXZpY2VfdGhlcm1vc3RhdCc6ICdkZXZpY2VfdGhlcm1vc3RhdCcsXG4gICdkZXZpY2VfdW5rbm93bic6ICdkZXZpY2VfdW5rbm93bicsXG4gICdkZXZpY2VzJzogJ2RldmljZXMnLFxuICAnZGV2aWNlc19vdGhlcic6ICdkZXZpY2VzX290aGVyJyxcbiAgJ2RpYWxlcl9zaXAnOiAnZGlhbGVyX3NpcCcsXG4gICdkaWFscGFkJzogJ2RpYWxwYWQnLFxuICAnZGluaW5nJzogJ2RpbmluZycsXG4gICdkaW5uZXJfZGluaW5nJzogJ2Rpbm5lcl9kaW5pbmcnLFxuICAnZGlyZWN0aW9ucyc6ICdkaXJlY3Rpb25zJyxcbiAgJ2RpcmVjdGlvbnNfYmlrZSc6ICdkaXJlY3Rpb25zX2Jpa2UnLFxuICAnZGlyZWN0aW9uc19ib2F0JzogJ2RpcmVjdGlvbnNfYm9hdCcsXG4gICdkaXJlY3Rpb25zX2JvYXRfZmlsbGVkJzogJ2RpcmVjdGlvbnNfYm9hdF9maWxsZWQnLFxuICAnZGlyZWN0aW9uc19idXMnOiAnZGlyZWN0aW9uc19idXMnLFxuICAnZGlyZWN0aW9uc19idXNfZmlsbGVkJzogJ2RpcmVjdGlvbnNfYnVzX2ZpbGxlZCcsXG4gICdkaXJlY3Rpb25zX2Nhcic6ICdkaXJlY3Rpb25zX2NhcicsXG4gICdkaXJlY3Rpb25zX2Nhcl9maWxsZWQnOiAnZGlyZWN0aW9uc19jYXJfZmlsbGVkJyxcbiAgJ2RpcmVjdGlvbnNfb2ZmJzogJ2RpcmVjdGlvbnNfb2ZmJyxcbiAgJ2RpcmVjdGlvbnNfcmFpbHdheSc6ICdkaXJlY3Rpb25zX3JhaWx3YXknLFxuICAnZGlyZWN0aW9uc19yYWlsd2F5X2ZpbGxlZCc6ICdkaXJlY3Rpb25zX3JhaWx3YXlfZmlsbGVkJyxcbiAgJ2RpcmVjdGlvbnNfcnVuJzogJ2RpcmVjdGlvbnNfcnVuJyxcbiAgJ2RpcmVjdGlvbnNfc3Vid2F5JzogJ2RpcmVjdGlvbnNfc3Vid2F5JyxcbiAgJ2RpcmVjdGlvbnNfc3Vid2F5X2ZpbGxlZCc6ICdkaXJlY3Rpb25zX3N1YndheV9maWxsZWQnLFxuICAnZGlyZWN0aW9uc190cmFuc2l0JzogJ2RpcmVjdGlvbnNfdHJhbnNpdCcsXG4gICdkaXJlY3Rpb25zX3RyYW5zaXRfZmlsbGVkJzogJ2RpcmVjdGlvbnNfdHJhbnNpdF9maWxsZWQnLFxuICAnZGlyZWN0aW9uc193YWxrJzogJ2RpcmVjdGlvbnNfd2FsaycsXG4gICdkaXJ0eV9sZW5zJzogJ2RpcnR5X2xlbnMnLFxuICAnZGlzYWJsZWRfYnlfZGVmYXVsdCc6ICdkaXNhYmxlZF9ieV9kZWZhdWx0JyxcbiAgJ2Rpc2FibGVkX3Zpc2libGUnOiAnZGlzYWJsZWRfdmlzaWJsZScsXG4gICdkaXNjX2Z1bGwnOiAnZGlzY19mdWxsJyxcbiAgJ2Rucyc6ICdkbnMnLFxuICAnZG9fZGlzdHVyYic6ICdkb19kaXN0dXJiJyxcbiAgJ2RvX2Rpc3R1cmJfYWx0JzogJ2RvX2Rpc3R1cmJfYWx0JyxcbiAgJ2RvX2Rpc3R1cmJfb2ZmJzogJ2RvX2Rpc3R1cmJfb2ZmJyxcbiAgJ2RvX2Rpc3R1cmJfb24nOiAnZG9fZGlzdHVyYl9vbicsXG4gICdkb19ub3RfZGlzdHVyYic6ICdkb19ub3RfZGlzdHVyYicsXG4gICdkb19ub3RfZGlzdHVyYl9hbHQnOiAnZG9fbm90X2Rpc3R1cmJfYWx0JyxcbiAgJ2RvX25vdF9kaXN0dXJiX29mZic6ICdkb19ub3RfZGlzdHVyYl9vZmYnLFxuICAnZG9fbm90X2Rpc3R1cmJfb24nOiAnZG9fbm90X2Rpc3R1cmJfb24nLFxuICAnZG9fbm90X2Rpc3R1cmJfb25fdG90YWxfc2lsZW5jZSc6ICdkb19ub3RfZGlzdHVyYl9vbl90b3RhbF9zaWxlbmNlJyxcbiAgJ2RvX25vdF9zdGVwJzogJ2RvX25vdF9zdGVwJyxcbiAgJ2RvX25vdF90b3VjaCc6ICdkb19ub3RfdG91Y2gnLFxuICAnZG9jayc6ICdkb2NrJyxcbiAgJ2RvY3VtZW50X3NjYW5uZXInOiAnZG9jdW1lbnRfc2Nhbm5lcicsXG4gICdkb21haW4nOiAnZG9tYWluJyxcbiAgJ2RvbWFpbl9kaXNhYmxlZCc6ICdkb21haW5fZGlzYWJsZWQnLFxuICAnZG9tYWluX3ZlcmlmaWNhdGlvbic6ICdkb21haW5fdmVyaWZpY2F0aW9uJyxcbiAgJ2RvbmUnOiAnZG9uZScsXG4gICdkb25lX2FsbCc6ICdkb25lX2FsbCcsXG4gICdkb25lX291dGxpbmUnOiAnZG9uZV9vdXRsaW5lJyxcbiAgJ2RvbnV0X2xhcmdlJzogJ2RvbnV0X2xhcmdlJyxcbiAgJ2RvbnV0X3NtYWxsJzogJ2RvbnV0X3NtYWxsJyxcbiAgJ2Rvb3JfYmFjayc6ICdkb29yX2JhY2snLFxuICAnZG9vcl9mcm9udCc6ICdkb29yX2Zyb250JyxcbiAgJ2Rvb3Jfc2xpZGluZyc6ICdkb29yX3NsaWRpbmcnLFxuICAnZG9vcmJlbGwnOiAnZG9vcmJlbGwnLFxuICAnZG91YmxlX2Fycm93JzogJ2RvdWJsZV9hcnJvdycsXG4gICdkb3duaGlsbF9za2lpbmcnOiAnZG93bmhpbGxfc2tpaW5nJyxcbiAgJ2Rvd25sb2FkJzogJ2Rvd25sb2FkJyxcbiAgJ2Rvd25sb2FkX2RvbmUnOiAnZG93bmxvYWRfZG9uZScsXG4gICdkb3dubG9hZF9mb3Jfb2ZmbGluZSc6ICdkb3dubG9hZF9mb3Jfb2ZmbGluZScsXG4gICdkb3dubG9hZGluZyc6ICdkb3dubG9hZGluZycsXG4gICdkcmFmdHMnOiAnZHJhZnRzJyxcbiAgJ2RyYWdfaGFuZGxlJzogJ2RyYWdfaGFuZGxlJyxcbiAgJ2RyYWdfaW5kaWNhdG9yJzogJ2RyYWdfaW5kaWNhdG9yJyxcbiAgJ2RyYXcnOiAnZHJhdycsXG4gICdkcml2ZV9ldGEnOiAnZHJpdmVfZXRhJyxcbiAgJ2RyaXZlX2ZpbGVfbW92ZSc6ICdkcml2ZV9maWxlX21vdmUnLFxuICAnZHJpdmVfZmlsZV9tb3ZlX3J0bCc6ICdkcml2ZV9maWxlX21vdmVfcnRsJyxcbiAgJ2RyaXZlX2ZpbGVfcmVuYW1lX291dGxpbmUnOiAnZHJpdmVfZmlsZV9yZW5hbWVfb3V0bGluZScsXG4gICdkcml2ZV9mb2xkZXJfdXBsb2FkJzogJ2RyaXZlX2ZvbGRlcl91cGxvYWQnLFxuICAnZHJ5JzogJ2RyeScsXG4gICdkcnlfY2xlYW5pbmcnOiAnZHJ5X2NsZWFuaW5nJyxcbiAgJ2R1byc6ICdkdW8nLFxuICAnZHZyJzogJ2R2cicsXG4gICdkeW5hbWljX2ZlZWQnOiAnZHluYW1pY19mZWVkJyxcbiAgJ2R5bmFtaWNfZm9ybSc6ICdkeW5hbWljX2Zvcm0nLFxuICAnZV9tb2JpbGVkYXRhJzogJ2VfbW9iaWxlZGF0YScsXG4gICdlYXJidWRzJzogJ2VhcmJ1ZHMnLFxuICAnZWFyYnVkc19iYXR0ZXJ5JzogJ2VhcmJ1ZHNfYmF0dGVyeScsXG4gICdlYXN0JzogJ2Vhc3QnLFxuICAnZWRnZXNlbnNvcl9oaWdoJzogJ2VkZ2VzZW5zb3JfaGlnaCcsXG4gICdlZGdlc2Vuc29yX2xvdyc6ICdlZGdlc2Vuc29yX2xvdycsXG4gICdlZGl0JzogJ2VkaXQnLFxuICAnZWRpdF9hdHRyaWJ1dGVzJzogJ2VkaXRfYXR0cmlidXRlcycsXG4gICdlZGl0X2NhbGVuZGFyJzogJ2VkaXRfY2FsZW5kYXInLFxuICAnZWRpdF9sb2NhdGlvbic6ICdlZGl0X2xvY2F0aW9uJyxcbiAgJ2VkaXRfbG9jYXRpb25fYWx0JzogJ2VkaXRfbG9jYXRpb25fYWx0JyxcbiAgJ2VkaXRfbm90ZSc6ICdlZGl0X25vdGUnLFxuICAnZWRpdF9ub3RpZmljYXRpb25zJzogJ2VkaXRfbm90aWZpY2F0aW9ucycsXG4gICdlZGl0X29mZic6ICdlZGl0X29mZicsXG4gICdlZGl0X3JvYWQnOiAnZWRpdF9yb2FkJyxcbiAgJ2VqZWN0JzogJ2VqZWN0JyxcbiAgJ2VsZGVybHknOiAnZWxkZXJseScsXG4gICdlbGVjdHJpY19iaWtlJzogJ2VsZWN0cmljX2Jpa2UnLFxuICAnZWxlY3RyaWNfY2FyJzogJ2VsZWN0cmljX2NhcicsXG4gICdlbGVjdHJpY19tb3BlZCc6ICdlbGVjdHJpY19tb3BlZCcsXG4gICdlbGVjdHJpY19yaWNrc2hhdyc6ICdlbGVjdHJpY19yaWNrc2hhdycsXG4gICdlbGVjdHJpY19zY29vdGVyJzogJ2VsZWN0cmljX3Njb290ZXInLFxuICAnZWxlY3RyaWNhbF9zZXJ2aWNlcyc6ICdlbGVjdHJpY2FsX3NlcnZpY2VzJyxcbiAgJ2VsZXZhdG9yJzogJ2VsZXZhdG9yJyxcbiAgJ2VtYWlsJzogJ2VtYWlsJyxcbiAgJ2VtZXJnZW5jeSc6ICdlbWVyZ2VuY3knLFxuICAnZW1vamlfZW1vdGlvbnMnOiAnZW1vamlfZW1vdGlvbnMnLFxuICAnZW1vamlfZXZlbnRzJzogJ2Vtb2ppX2V2ZW50cycsXG4gICdlbW9qaV9mbGFncyc6ICdlbW9qaV9mbGFncycsXG4gICdlbW9qaV9mb29kX2JldmVyYWdlJzogJ2Vtb2ppX2Zvb2RfYmV2ZXJhZ2UnLFxuICAnZW1vamlfbmF0dXJlJzogJ2Vtb2ppX25hdHVyZScsXG4gICdlbW9qaV9vYmplY3RzJzogJ2Vtb2ppX29iamVjdHMnLFxuICAnZW1vamlfcGVvcGxlJzogJ2Vtb2ppX3Blb3BsZScsXG4gICdlbW9qaV9zeW1ib2xzJzogJ2Vtb2ppX3N5bWJvbHMnLFxuICAnZW1vamlfdHJhbnNwb3J0YXRpb24nOiAnZW1vamlfdHJhbnNwb3J0YXRpb24nLFxuICAnZW5naW5lZXJpbmcnOiAnZW5naW5lZXJpbmcnLFxuICAnZW5oYW5jZWRfZW5jcnlwdGlvbic6ICdlbmhhbmNlZF9lbmNyeXB0aW9uJyxcbiAgJ2VxdWFsaXplcic6ICdlcXVhbGl6ZXInLFxuICAnZXJyb3InOiAnZXJyb3InLFxuICAnZXJyb3Jfb3V0bGluZSc6ICdlcnJvcl9vdXRsaW5lJyxcbiAgJ2VzY2FsYXRvcic6ICdlc2NhbGF0b3InLFxuICAnZXNjYWxhdG9yX3dhcm5pbmcnOiAnZXNjYWxhdG9yX3dhcm5pbmcnLFxuICAnZXVybyc6ICdldXJvJyxcbiAgJ2V1cm9fc3ltYm9sJzogJ2V1cm9fc3ltYm9sJyxcbiAgJ2V2X3N0YXRpb24nOiAnZXZfc3RhdGlvbicsXG4gICdldmVudCc6ICdldmVudCcsXG4gICdldmVudF9hdmFpbGFibGUnOiAnZXZlbnRfYXZhaWxhYmxlJyxcbiAgJ2V2ZW50X2J1c3knOiAnZXZlbnRfYnVzeScsXG4gICdldmVudF9ub3RlJzogJ2V2ZW50X25vdGUnLFxuICAnZXZlbnRfc2VhdCc6ICdldmVudF9zZWF0JyxcbiAgJ2V4aXRfdG9fYXBwJzogJ2V4aXRfdG9fYXBwJyxcbiAgJ2V4cGFuZCc6ICdleHBhbmQnLFxuICAnZXhwYW5kX2xlc3MnOiAnZXhwYW5kX2xlc3MnLFxuICAnZXhwYW5kX21vcmUnOiAnZXhwYW5kX21vcmUnLFxuICAnZXhwbGljaXQnOiAnZXhwbGljaXQnLFxuICAnZXhwbG9yZSc6ICdleHBsb3JlJyxcbiAgJ2V4cGxvcmVfb2ZmJzogJ2V4cGxvcmVfb2ZmJyxcbiAgJ2V4cG9zdXJlJzogJ2V4cG9zdXJlJyxcbiAgJ2V4cG9zdXJlX25lZ18xJzogJ2V4cG9zdXJlX25lZ18xJyxcbiAgJ2V4cG9zdXJlX25lZ18yJzogJ2V4cG9zdXJlX25lZ18yJyxcbiAgJ2V4cG9zdXJlX3BsdXNfMSc6ICdleHBvc3VyZV9wbHVzXzEnLFxuICAnZXhwb3N1cmVfcGx1c18yJzogJ2V4cG9zdXJlX3BsdXNfMicsXG4gICdleHBvc3VyZV96ZXJvJzogJ2V4cG9zdXJlX3plcm8nLFxuICAnZXh0ZW5zaW9uJzogJ2V4dGVuc2lvbicsXG4gICdleHRlbnNpb25fb2ZmJzogJ2V4dGVuc2lvbl9vZmYnLFxuICAnZmFjZSc6ICdmYWNlJyxcbiAgJ2ZhY2VfcmV0b3VjaGluZ19uYXR1cmFsJzogJ2ZhY2VfcmV0b3VjaGluZ19uYXR1cmFsJyxcbiAgJ2ZhY2VfcmV0b3VjaGluZ19vZmYnOiAnZmFjZV9yZXRvdWNoaW5nX29mZicsXG4gICdmYWNlYm9vayc6ICdmYWNlYm9vaycsXG4gICdmYWN0X2NoZWNrJzogJ2ZhY3RfY2hlY2snLFxuICAnZmFtaWx5X3Jlc3Ryb29tJzogJ2ZhbWlseV9yZXN0cm9vbScsXG4gICdmYXN0X2ZvcndhcmQnOiAnZmFzdF9mb3J3YXJkJyxcbiAgJ2Zhc3RfcmV3aW5kJzogJ2Zhc3RfcmV3aW5kJyxcbiAgJ2Zhc3Rmb29kJzogJ2Zhc3Rmb29kJyxcbiAgJ2Zhdm9yaXRlJzogJ2Zhdm9yaXRlJyxcbiAgJ2Zhdm9yaXRlX2JvcmRlcic6ICdmYXZvcml0ZV9ib3JkZXInLFxuICAnZmVhdHVyZWRfcGxheV9saXN0JzogJ2ZlYXR1cmVkX3BsYXlfbGlzdCcsXG4gICdmZWF0dXJlZF92aWRlbyc6ICdmZWF0dXJlZF92aWRlbycsXG4gICdmZWVkJzogJ2ZlZWQnLFxuICAnZmVlZGJhY2snOiAnZmVlZGJhY2snLFxuICAnZmVtYWxlJzogJ2ZlbWFsZScsXG4gICdmZW5jZSc6ICdmZW5jZScsXG4gICdmZXN0aXZhbCc6ICdmZXN0aXZhbCcsXG4gICdmaWJlcl9kdnInOiAnZmliZXJfZHZyJyxcbiAgJ2ZpYmVyX21hbnVhbF9yZWNvcmQnOiAnZmliZXJfbWFudWFsX3JlY29yZCcsXG4gICdmaWJlcl9uZXcnOiAnZmliZXJfbmV3JyxcbiAgJ2ZpYmVyX3Bpbic6ICdmaWJlcl9waW4nLFxuICAnZmliZXJfc21hcnRfcmVjb3JkJzogJ2ZpYmVyX3NtYXJ0X3JlY29yZCcsXG4gICdmaWxlX2NvcHknOiAnZmlsZV9jb3B5JyxcbiAgJ2ZpbGVfZG93bmxvYWQnOiAnZmlsZV9kb3dubG9hZCcsXG4gICdmaWxlX2Rvd25sb2FkX2RvbmUnOiAnZmlsZV9kb3dubG9hZF9kb25lJyxcbiAgJ2ZpbGVfZG93bmxvYWRfb2ZmJzogJ2ZpbGVfZG93bmxvYWRfb2ZmJyxcbiAgJ2ZpbGVfcHJlc2VudCc6ICdmaWxlX3ByZXNlbnQnLFxuICAnZmlsZV91cGxvYWQnOiAnZmlsZV91cGxvYWQnLFxuICAnZmlsdGVyJzogJ2ZpbHRlcicsXG4gICdmaWx0ZXJfMSc6ICdmaWx0ZXJfMScsXG4gICdmaWx0ZXJfMic6ICdmaWx0ZXJfMicsXG4gICdmaWx0ZXJfMyc6ICdmaWx0ZXJfMycsXG4gICdmaWx0ZXJfNCc6ICdmaWx0ZXJfNCcsXG4gICdmaWx0ZXJfNSc6ICdmaWx0ZXJfNScsXG4gICdmaWx0ZXJfNic6ICdmaWx0ZXJfNicsXG4gICdmaWx0ZXJfNyc6ICdmaWx0ZXJfNycsXG4gICdmaWx0ZXJfOCc6ICdmaWx0ZXJfOCcsXG4gICdmaWx0ZXJfOSc6ICdmaWx0ZXJfOScsXG4gICdmaWx0ZXJfOV9wbHVzJzogJ2ZpbHRlcl85X3BsdXMnLFxuICAnZmlsdGVyX2FsdCc6ICdmaWx0ZXJfYWx0JyxcbiAgJ2ZpbHRlcl9iX2FuZF93JzogJ2ZpbHRlcl9iX2FuZF93JyxcbiAgJ2ZpbHRlcl9jZW50ZXJfZm9jdXMnOiAnZmlsdGVyX2NlbnRlcl9mb2N1cycsXG4gICdmaWx0ZXJfZHJhbWEnOiAnZmlsdGVyX2RyYW1hJyxcbiAgJ2ZpbHRlcl9mcmFtZXMnOiAnZmlsdGVyX2ZyYW1lcycsXG4gICdmaWx0ZXJfaGRyJzogJ2ZpbHRlcl9oZHInLFxuICAnZmlsdGVyX2xpc3QnOiAnZmlsdGVyX2xpc3QnLFxuICAnZmlsdGVyX25vbmUnOiAnZmlsdGVyX25vbmUnLFxuICAnZmlsdGVyX3RpbHRfc2hpZnQnOiAnZmlsdGVyX3RpbHRfc2hpZnQnLFxuICAnZmlsdGVyX3ZpbnRhZ2UnOiAnZmlsdGVyX3ZpbnRhZ2UnLFxuICAnZmluZF9pbl9wYWdlJzogJ2ZpbmRfaW5fcGFnZScsXG4gICdmaW5kX3JlcGxhY2UnOiAnZmluZF9yZXBsYWNlJyxcbiAgJ2ZpbmdlcnByaW50JzogJ2ZpbmdlcnByaW50JyxcbiAgJ2ZpcmVfZXh0aW5ndWlzaGVyJzogJ2ZpcmVfZXh0aW5ndWlzaGVyJyxcbiAgJ2ZpcmVwbGFjZSc6ICdmaXJlcGxhY2UnLFxuICAnZmlyc3RfcGFnZSc6ICdmaXJzdF9wYWdlJyxcbiAgJ2ZpdF9zY3JlZW4nOiAnZml0X3NjcmVlbicsXG4gICdmaXRuZXNzX2NlbnRlcic6ICdmaXRuZXNzX2NlbnRlcicsXG4gICdmbGFnJzogJ2ZsYWcnLFxuICAnZmxha3knOiAnZmxha3knLFxuICAnZmxhcmUnOiAnZmxhcmUnLFxuICAnZmxhc2hfYXV0byc6ICdmbGFzaF9hdXRvJyxcbiAgJ2ZsYXNoX29mZic6ICdmbGFzaF9vZmYnLFxuICAnZmxhc2hfb24nOiAnZmxhc2hfb24nLFxuICAnZmxhc2hsaWdodF9vZmYnOiAnZmxhc2hsaWdodF9vZmYnLFxuICAnZmxhc2hsaWdodF9vbic6ICdmbGFzaGxpZ2h0X29uJyxcbiAgJ2ZsYXR3YXJlJzogJ2ZsYXR3YXJlJyxcbiAgJ2ZsaWdodCc6ICdmbGlnaHQnLFxuICAnZmxpZ2h0X2xhbmQnOiAnZmxpZ2h0X2xhbmQnLFxuICAnZmxpZ2h0X3Rha2VvZmYnOiAnZmxpZ2h0X3Rha2VvZmYnLFxuICAnZmxpcCc6ICdmbGlwJyxcbiAgJ2ZsaXBfY2FtZXJhX2FuZHJvaWQnOiAnZmxpcF9jYW1lcmFfYW5kcm9pZCcsXG4gICdmbGlwX2NhbWVyYV9pb3MnOiAnZmxpcF9jYW1lcmFfaW9zJyxcbiAgJ2ZsaXBfdG9fYmFjayc6ICdmbGlwX3RvX2JhY2snLFxuICAnZmxpcF90b19mcm9udCc6ICdmbGlwX3RvX2Zyb250JyxcbiAgJ2Zsb3VyZXNjZW50JzogJ2Zsb3VyZXNjZW50JyxcbiAgJ2ZsdXR0ZXJfZGFzaCc6ICdmbHV0dGVyX2Rhc2gnLFxuICAnZm1kX2JhZCc6ICdmbWRfYmFkJyxcbiAgJ2ZtZF9nb29kJzogJ2ZtZF9nb29kJyxcbiAgJ2ZvbGRlcic6ICdmb2xkZXInLFxuICAnZm9sZGVyX29wZW4nOiAnZm9sZGVyX29wZW4nLFxuICAnZm9sZGVyX3NoYXJlZCc6ICdmb2xkZXJfc2hhcmVkJyxcbiAgJ2ZvbGRlcl9zcGVjaWFsJzogJ2ZvbGRlcl9zcGVjaWFsJyxcbiAgJ2ZvbGxvd190aGVfc2lnbnMnOiAnZm9sbG93X3RoZV9zaWducycsXG4gICdmb250X2Rvd25sb2FkJzogJ2ZvbnRfZG93bmxvYWQnLFxuICAnZm9udF9kb3dubG9hZF9vZmYnOiAnZm9udF9kb3dubG9hZF9vZmYnLFxuICAnZm9vZF9iYW5rJzogJ2Zvb2RfYmFuaycsXG4gICdmb3JtYXRfYWxpZ25fY2VudGVyJzogJ2Zvcm1hdF9hbGlnbl9jZW50ZXInLFxuICAnZm9ybWF0X2FsaWduX2p1c3RpZnknOiAnZm9ybWF0X2FsaWduX2p1c3RpZnknLFxuICAnZm9ybWF0X2FsaWduX2xlZnQnOiAnZm9ybWF0X2FsaWduX2xlZnQnLFxuICAnZm9ybWF0X2FsaWduX3JpZ2h0JzogJ2Zvcm1hdF9hbGlnbl9yaWdodCcsXG4gICdmb3JtYXRfYm9sZCc6ICdmb3JtYXRfYm9sZCcsXG4gICdmb3JtYXRfY2xlYXInOiAnZm9ybWF0X2NsZWFyJyxcbiAgJ2Zvcm1hdF9jb2xvcl9maWxsJzogJ2Zvcm1hdF9jb2xvcl9maWxsJyxcbiAgJ2Zvcm1hdF9jb2xvcl9yZXNldCc6ICdmb3JtYXRfY29sb3JfcmVzZXQnLFxuICAnZm9ybWF0X2NvbG9yX3RleHQnOiAnZm9ybWF0X2NvbG9yX3RleHQnLFxuICAnZm9ybWF0X2luZGVudF9kZWNyZWFzZSc6ICdmb3JtYXRfaW5kZW50X2RlY3JlYXNlJyxcbiAgJ2Zvcm1hdF9pbmRlbnRfaW5jcmVhc2UnOiAnZm9ybWF0X2luZGVudF9pbmNyZWFzZScsXG4gICdmb3JtYXRfaXRhbGljJzogJ2Zvcm1hdF9pdGFsaWMnLFxuICAnZm9ybWF0X2xpbmVfc3BhY2luZyc6ICdmb3JtYXRfbGluZV9zcGFjaW5nJyxcbiAgJ2Zvcm1hdF9saXN0X2J1bGxldGVkJzogJ2Zvcm1hdF9saXN0X2J1bGxldGVkJyxcbiAgJ2Zvcm1hdF9saXN0X251bWJlcmVkJzogJ2Zvcm1hdF9saXN0X251bWJlcmVkJyxcbiAgJ2Zvcm1hdF9saXN0X251bWJlcmVkX3J0bCc6ICdmb3JtYXRfbGlzdF9udW1iZXJlZF9ydGwnLFxuICAnZm9ybWF0X3BhaW50JzogJ2Zvcm1hdF9wYWludCcsXG4gICdmb3JtYXRfcXVvdGUnOiAnZm9ybWF0X3F1b3RlJyxcbiAgJ2Zvcm1hdF9zaGFwZXMnOiAnZm9ybWF0X3NoYXBlcycsXG4gICdmb3JtYXRfc2l6ZSc6ICdmb3JtYXRfc2l6ZScsXG4gICdmb3JtYXRfc3RyaWtldGhyb3VnaCc6ICdmb3JtYXRfc3RyaWtldGhyb3VnaCcsXG4gICdmb3JtYXRfdGV4dGRpcmVjdGlvbl9sX3RvX3InOiAnZm9ybWF0X3RleHRkaXJlY3Rpb25fbF90b19yJyxcbiAgJ2Zvcm1hdF90ZXh0ZGlyZWN0aW9uX3JfdG9fbCc6ICdmb3JtYXRfdGV4dGRpcmVjdGlvbl9yX3RvX2wnLFxuICAnZm9ybWF0X3VuZGVybGluZWQnOiAnZm9ybWF0X3VuZGVybGluZWQnLFxuICAnZm9ydW0nOiAnZm9ydW0nLFxuICAnZm9yd2FyZCc6ICdmb3J3YXJkJyxcbiAgJ2ZvcndhcmRfMTAnOiAnZm9yd2FyZF8xMCcsXG4gICdmb3J3YXJkXzMwJzogJ2ZvcndhcmRfMzAnLFxuICAnZm9yd2FyZF81JzogJ2ZvcndhcmRfNScsXG4gICdmb3J3YXJkX3RvX2luYm94JzogJ2ZvcndhcmRfdG9faW5ib3gnLFxuICAnZm91bmRhdGlvbic6ICdmb3VuZGF0aW9uJyxcbiAgJ2ZyZWVfYnJlYWtmYXN0JzogJ2ZyZWVfYnJlYWtmYXN0JyxcbiAgJ2ZyZWVfY2FuY2VsbGF0aW9uJzogJ2ZyZWVfY2FuY2VsbGF0aW9uJyxcbiAgJ2Zyb250X2hhbmQnOiAnZnJvbnRfaGFuZCcsXG4gICdmdWxsc2NyZWVuJzogJ2Z1bGxzY3JlZW4nLFxuICAnZnVsbHNjcmVlbl9leGl0JzogJ2Z1bGxzY3JlZW5fZXhpdCcsXG4gICdmdW5jdGlvbnMnOiAnZnVuY3Rpb25zJyxcbiAgJ2dfbW9iaWxlZGF0YSc6ICdnX21vYmlsZWRhdGEnLFxuICAnZ190cmFuc2xhdGUnOiAnZ190cmFuc2xhdGUnLFxuICAnZ2FtZXBhZCc6ICdnYW1lcGFkJyxcbiAgJ2dhbWVzJzogJ2dhbWVzJyxcbiAgJ2dhcmFnZSc6ICdnYXJhZ2UnLFxuICAnZ2F2ZWwnOiAnZ2F2ZWwnLFxuICAnZ2VuZXJhdGluZ190b2tlbnMnOiAnZ2VuZXJhdGluZ190b2tlbnMnLFxuICAnZ2VzdHVyZSc6ICdnZXN0dXJlJyxcbiAgJ2dldF9hcHAnOiAnZ2V0X2FwcCcsXG4gICdnaWYnOiAnZ2lmJyxcbiAgJ2dpdGUnOiAnZ2l0ZScsXG4gICdnb2xmX2NvdXJzZSc6ICdnb2xmX2NvdXJzZScsXG4gICdncHBfYmFkJzogJ2dwcF9iYWQnLFxuICAnZ3BwX2dvb2QnOiAnZ3BwX2dvb2QnLFxuICAnZ3BwX21heWJlJzogJ2dwcF9tYXliZScsXG4gICdncHNfZml4ZWQnOiAnZ3BzX2ZpeGVkJyxcbiAgJ2dwc19ub3RfZml4ZWQnOiAnZ3BzX25vdF9maXhlZCcsXG4gICdncHNfb2ZmJzogJ2dwc19vZmYnLFxuICAnZ3JhZGUnOiAnZ3JhZGUnLFxuICAnZ3JhZGllbnQnOiAnZ3JhZGllbnQnLFxuICAnZ3JhZGluZyc6ICdncmFkaW5nJyxcbiAgJ2dyYWluJzogJ2dyYWluJyxcbiAgJ2dyYXBoaWNfZXEnOiAnZ3JhcGhpY19lcScsXG4gICdncmFzcyc6ICdncmFzcycsXG4gICdncmlkXzN4Myc6ICdncmlkXzN4MycsXG4gICdncmlkXzR4NCc6ICdncmlkXzR4NCcsXG4gICdncmlkX2dvbGRlbnJhdGlvJzogJ2dyaWRfZ29sZGVucmF0aW8nLFxuICAnZ3JpZF9vZmYnOiAnZ3JpZF9vZmYnLFxuICAnZ3JpZF9vbic6ICdncmlkX29uJyxcbiAgJ2dyaWRfdmlldyc6ICdncmlkX3ZpZXcnLFxuICAnZ3JvdXAnOiAnZ3JvdXAnLFxuICAnZ3JvdXBfYWRkJzogJ2dyb3VwX2FkZCcsXG4gICdncm91cF9vZmYnOiAnZ3JvdXBfb2ZmJyxcbiAgJ2dyb3VwX3dvcmsnOiAnZ3JvdXBfd29yaycsXG4gICdncm91cHMnOiAnZ3JvdXBzJyxcbiAgJ2hfbW9iaWxlZGF0YSc6ICdoX21vYmlsZWRhdGEnLFxuICAnaF9wbHVzX21vYmlsZWRhdGEnOiAnaF9wbHVzX21vYmlsZWRhdGEnLFxuICAnaGFpbCc6ICdoYWlsJyxcbiAgJ2hhbmR5bWFuJzogJ2hhbmR5bWFuJyxcbiAgJ2hhcmR3YXJlJzogJ2hhcmR3YXJlJyxcbiAgJ2hkJzogJ2hkJyxcbiAgJ2hkcl9hdXRvJzogJ2hkcl9hdXRvJyxcbiAgJ2hkcl9hdXRvX3NlbGVjdCc6ICdoZHJfYXV0b19zZWxlY3QnLFxuICAnaGRyX2VuaGFuY2VkX3NlbGVjdCc6ICdoZHJfZW5oYW5jZWRfc2VsZWN0JyxcbiAgJ2hkcl9vZmYnOiAnaGRyX29mZicsXG4gICdoZHJfb2ZmX3NlbGVjdCc6ICdoZHJfb2ZmX3NlbGVjdCcsXG4gICdoZHJfb24nOiAnaGRyX29uJyxcbiAgJ2hkcl9vbl9zZWxlY3QnOiAnaGRyX29uX3NlbGVjdCcsXG4gICdoZHJfcGx1cyc6ICdoZHJfcGx1cycsXG4gICdoZHJfc3Ryb25nJzogJ2hkcl9zdHJvbmcnLFxuICAnaGRyX3dlYWsnOiAnaGRyX3dlYWsnLFxuICAnaGVhZHBob25lcyc6ICdoZWFkcGhvbmVzJyxcbiAgJ2hlYWRwaG9uZXNfYmF0dGVyeSc6ICdoZWFkcGhvbmVzX2JhdHRlcnknLFxuICAnaGVhZHNldCc6ICdoZWFkc2V0JyxcbiAgJ2hlYWRzZXRfbWljJzogJ2hlYWRzZXRfbWljJyxcbiAgJ2hlYWRzZXRfb2ZmJzogJ2hlYWRzZXRfb2ZmJyxcbiAgJ2hlYWxpbmcnOiAnaGVhbGluZycsXG4gICdoZWFsdGhfYW5kX3NhZmV0eSc6ICdoZWFsdGhfYW5kX3NhZmV0eScsXG4gICdoZWFyaW5nJzogJ2hlYXJpbmcnLFxuICAnaGVhcmluZ19kaXNhYmxlZCc6ICdoZWFyaW5nX2Rpc2FibGVkJyxcbiAgJ2hlaWdodCc6ICdoZWlnaHQnLFxuICAnaGVscCc6ICdoZWxwJyxcbiAgJ2hlbHBfY2VudGVyJzogJ2hlbHBfY2VudGVyJyxcbiAgJ2hlbHBfb3V0bGluZSc6ICdoZWxwX291dGxpbmUnLFxuICAnaGV2Yyc6ICdoZXZjJyxcbiAgJ2hpZGVfaW1hZ2UnOiAnaGlkZV9pbWFnZScsXG4gICdoaWRlX3NvdXJjZSc6ICdoaWRlX3NvdXJjZScsXG4gICdoaWdoX3F1YWxpdHknOiAnaGlnaF9xdWFsaXR5JyxcbiAgJ2hpZ2hsaWdodCc6ICdoaWdobGlnaHQnLFxuICAnaGlnaGxpZ2h0X2FsdCc6ICdoaWdobGlnaHRfYWx0JyxcbiAgJ2hpZ2hsaWdodF9vZmYnOiAnaGlnaGxpZ2h0X29mZicsXG4gICdoaWtpbmcnOiAnaGlraW5nJyxcbiAgJ2hpc3RvcnknOiAnaGlzdG9yeScsXG4gICdoaXN0b3J5X2VkdSc6ICdoaXN0b3J5X2VkdScsXG4gICdoaXN0b3J5X3RvZ2dsZV9vZmYnOiAnaGlzdG9yeV90b2dnbGVfb2ZmJyxcbiAgJ2hvbGlkYXlfdmlsbGFnZSc6ICdob2xpZGF5X3ZpbGxhZ2UnLFxuICAnaG9tZSc6ICdob21lJyxcbiAgJ2hvbWVfbWF4JzogJ2hvbWVfbWF4JyxcbiAgJ2hvbWVfbWluaSc6ICdob21lX21pbmknLFxuICAnaG9tZV9yZXBhaXJfc2VydmljZSc6ICdob21lX3JlcGFpcl9zZXJ2aWNlJyxcbiAgJ2hvbWVfd29yayc6ICdob21lX3dvcmsnLFxuICAnaG9yaXpvbnRhbF9kaXN0cmlidXRlJzogJ2hvcml6b250YWxfZGlzdHJpYnV0ZScsXG4gICdob3Jpem9udGFsX3J1bGUnOiAnaG9yaXpvbnRhbF9ydWxlJyxcbiAgJ2hvcml6b250YWxfc3BsaXQnOiAnaG9yaXpvbnRhbF9zcGxpdCcsXG4gICdob3RfdHViJzogJ2hvdF90dWInLFxuICAnaG90ZWwnOiAnaG90ZWwnLFxuICAnaG90ZWxfY2xhc3MnOiAnaG90ZWxfY2xhc3MnLFxuICAnaG91cmdsYXNzX2JvdHRvbSc6ICdob3VyZ2xhc3NfYm90dG9tJyxcbiAgJ2hvdXJnbGFzc19kaXNhYmxlZCc6ICdob3VyZ2xhc3NfZGlzYWJsZWQnLFxuICAnaG91cmdsYXNzX2VtcHR5JzogJ2hvdXJnbGFzc19lbXB0eScsXG4gICdob3VyZ2xhc3NfZnVsbCc6ICdob3VyZ2xhc3NfZnVsbCcsXG4gICdob3VyZ2xhc3NfdG9wJzogJ2hvdXJnbGFzc190b3AnLFxuICAnaG91c2UnOiAnaG91c2UnLFxuICAnaG91c2Vfc2lkaW5nJzogJ2hvdXNlX3NpZGluZycsXG4gICdob3VzZWJvYXQnOiAnaG91c2Vib2F0JyxcbiAgJ2hvd190b19yZWcnOiAnaG93X3RvX3JlZycsXG4gICdob3dfdG9fdm90ZSc6ICdob3dfdG9fdm90ZScsXG4gICdodHRwJzogJ2h0dHAnLFxuICAnaHR0cHMnOiAnaHR0cHMnLFxuICAnaHZhYyc6ICdodmFjJyxcbiAgJ2ljZV9za2F0aW5nJzogJ2ljZV9za2F0aW5nJyxcbiAgJ2ljZWNyZWFtJzogJ2ljZWNyZWFtJyxcbiAgJ2ltYWdlJzogJ2ltYWdlJyxcbiAgJ2ltYWdlX2FzcGVjdF9yYXRpbyc6ICdpbWFnZV9hc3BlY3RfcmF0aW8nLFxuICAnaW1hZ2Vfbm90X3N1cHBvcnRlZCc6ICdpbWFnZV9ub3Rfc3VwcG9ydGVkJyxcbiAgJ2ltYWdlX3NlYXJjaCc6ICdpbWFnZV9zZWFyY2gnLFxuICAnaW1hZ2VzZWFyY2hfcm9sbGVyJzogJ2ltYWdlc2VhcmNoX3JvbGxlcicsXG4gICdpbXBvcnRfY29udGFjdHMnOiAnaW1wb3J0X2NvbnRhY3RzJyxcbiAgJ2ltcG9ydF9leHBvcnQnOiAnaW1wb3J0X2V4cG9ydCcsXG4gICdpbXBvcnRhbnRfZGV2aWNlcyc6ICdpbXBvcnRhbnRfZGV2aWNlcycsXG4gICdpbmJveCc6ICdpbmJveCcsXG4gICdpbmNvbXBsZXRlX2NpcmNsZSc6ICdpbmNvbXBsZXRlX2NpcmNsZScsXG4gICdpbmRldGVybWluYXRlX2NoZWNrX2JveCc6ICdpbmRldGVybWluYXRlX2NoZWNrX2JveCcsXG4gICdpbmZvJzogJ2luZm8nLFxuICAnaW5wdXQnOiAnaW5wdXQnLFxuICAnaW5zZXJ0X2NoYXJ0JzogJ2luc2VydF9jaGFydCcsXG4gICdpbnNlcnRfY2hhcnRfb3V0bGluZWQnOiAnaW5zZXJ0X2NoYXJ0X291dGxpbmVkJyxcbiAgJ2luc2VydF9jb21tZW50JzogJ2luc2VydF9jb21tZW50JyxcbiAgJ2luc2VydF9kcml2ZV9maWxlJzogJ2luc2VydF9kcml2ZV9maWxlJyxcbiAgJ2luc2VydF9lbW90aWNvbic6ICdpbnNlcnRfZW1vdGljb24nLFxuICAnaW5zZXJ0X2ludml0YXRpb24nOiAnaW5zZXJ0X2ludml0YXRpb24nLFxuICAnaW5zZXJ0X2xpbmsnOiAnaW5zZXJ0X2xpbmsnLFxuICAnaW5zZXJ0X3Bob3RvJzogJ2luc2VydF9waG90bycsXG4gICdpbnNpZ2h0cyc6ICdpbnNpZ2h0cycsXG4gICdpbnRlZ3JhdGlvbl9pbnN0cnVjdGlvbnMnOiAnaW50ZWdyYXRpb25faW5zdHJ1Y3Rpb25zJyxcbiAgJ2ludmVudG9yeSc6ICdpbnZlbnRvcnknLFxuICAnaW52ZW50b3J5XzInOiAnaW52ZW50b3J5XzInLFxuICAnaW52ZXJ0X2NvbG9ycyc6ICdpbnZlcnRfY29sb3JzJyxcbiAgJ2ludmVydF9jb2xvcnNfb2ZmJzogJ2ludmVydF9jb2xvcnNfb2ZmJyxcbiAgJ2lvc19zaGFyZSc6ICdpb3Nfc2hhcmUnLFxuICAnaXJvbic6ICdpcm9uJyxcbiAgJ2lzbyc6ICdpc28nLFxuICAna2F5YWtpbmcnOiAna2F5YWtpbmcnLFxuICAna2V5Ym9hcmQnOiAna2V5Ym9hcmQnLFxuICAna2V5Ym9hcmRfYWx0JzogJ2tleWJvYXJkX2FsdCcsXG4gICdrZXlib2FyZF9hcnJvd19kb3duJzogJ2tleWJvYXJkX2Fycm93X2Rvd24nLFxuICAna2V5Ym9hcmRfYXJyb3dfbGVmdCc6ICdrZXlib2FyZF9hcnJvd19sZWZ0JyxcbiAgJ2tleWJvYXJkX2Fycm93X3JpZ2h0JzogJ2tleWJvYXJkX2Fycm93X3JpZ2h0JyxcbiAgJ2tleWJvYXJkX2Fycm93X3VwJzogJ2tleWJvYXJkX2Fycm93X3VwJyxcbiAgJ2tleWJvYXJkX2JhY2tzcGFjZSc6ICdrZXlib2FyZF9iYWNrc3BhY2UnLFxuICAna2V5Ym9hcmRfY2Fwc2xvY2snOiAna2V5Ym9hcmRfY2Fwc2xvY2snLFxuICAna2V5Ym9hcmRfaGlkZSc6ICdrZXlib2FyZF9oaWRlJyxcbiAgJ2tleWJvYXJkX3JldHVybic6ICdrZXlib2FyZF9yZXR1cm4nLFxuICAna2V5Ym9hcmRfdGFiJzogJ2tleWJvYXJkX3RhYicsXG4gICdrZXlib2FyZF92b2ljZSc6ICdrZXlib2FyZF92b2ljZScsXG4gICdraW5nX2JlZCc6ICdraW5nX2JlZCcsXG4gICdraXRjaGVuJzogJ2tpdGNoZW4nLFxuICAna2l0ZXN1cmZpbmcnOiAna2l0ZXN1cmZpbmcnLFxuICAnbGFiZWwnOiAnbGFiZWwnLFxuICAnbGFiZWxfaW1wb3J0YW50JzogJ2xhYmVsX2ltcG9ydGFudCcsXG4gICdsYWJlbF9vZmYnOiAnbGFiZWxfb2ZmJyxcbiAgJ2xhbmRzY2FwZSc6ICdsYW5kc2NhcGUnLFxuICAnbGFuZ3VhZ2UnOiAnbGFuZ3VhZ2UnLFxuICAnbGFwdG9wJzogJ2xhcHRvcCcsXG4gICdsYXB0b3BfY2hyb21lYm9vayc6ICdsYXB0b3BfY2hyb21lYm9vaycsXG4gICdsYXB0b3BfbWFjJzogJ2xhcHRvcF9tYWMnLFxuICAnbGFwdG9wX3dpbmRvd3MnOiAnbGFwdG9wX3dpbmRvd3MnLFxuICAnbGFzdF9wYWdlJzogJ2xhc3RfcGFnZScsXG4gICdsYXVuY2gnOiAnbGF1bmNoJyxcbiAgJ2xheWVycyc6ICdsYXllcnMnLFxuICAnbGF5ZXJzX2NsZWFyJzogJ2xheWVyc19jbGVhcicsXG4gICdsZWFkZXJib2FyZCc6ICdsZWFkZXJib2FyZCcsXG4gICdsZWFrX2FkZCc6ICdsZWFrX2FkZCcsXG4gICdsZWFrX3JlbW92ZSc6ICdsZWFrX3JlbW92ZScsXG4gICdsZWdlbmRfdG9nZ2xlJzogJ2xlZ2VuZF90b2dnbGUnLFxuICAnbGVucyc6ICdsZW5zJyxcbiAgJ2xlbnNfYmx1cic6ICdsZW5zX2JsdXInLFxuICAnbGlicmFyeV9hZGQnOiAnbGlicmFyeV9hZGQnLFxuICAnbGlicmFyeV9hZGRfY2hlY2snOiAnbGlicmFyeV9hZGRfY2hlY2snLFxuICAnbGlicmFyeV9ib29rcyc6ICdsaWJyYXJ5X2Jvb2tzJyxcbiAgJ2xpYnJhcnlfbXVzaWMnOiAnbGlicmFyeV9tdXNpYycsXG4gICdsaWdodCc6ICdsaWdodCcsXG4gICdsaWdodF9tb2RlJzogJ2xpZ2h0X21vZGUnLFxuICAnbGlnaHRidWxiJzogJ2xpZ2h0YnVsYicsXG4gICdsaW5lX3N0eWxlJzogJ2xpbmVfc3R5bGUnLFxuICAnbGluZV93ZWlnaHQnOiAnbGluZV93ZWlnaHQnLFxuICAnbGluZWFyX3NjYWxlJzogJ2xpbmVhcl9zY2FsZScsXG4gICdsaW5rJzogJ2xpbmsnLFxuICAnbGlua19vZmYnOiAnbGlua19vZmYnLFxuICAnbGlua2VkX2NhbWVyYSc6ICdsaW5rZWRfY2FtZXJhJyxcbiAgJ2xpcXVvcic6ICdsaXF1b3InLFxuICAnbGlzdCc6ICdsaXN0JyxcbiAgJ2xpc3RfYWx0JzogJ2xpc3RfYWx0JyxcbiAgJ2xpdmVfaGVscCc6ICdsaXZlX2hlbHAnLFxuICAnbGl2ZV90dic6ICdsaXZlX3R2JyxcbiAgJ2xpdmluZyc6ICdsaXZpbmcnLFxuICAnbG9jYWxfYWN0aXZpdHknOiAnbG9jYWxfYWN0aXZpdHknLFxuICAnbG9jYWxfYWlycG9ydCc6ICdsb2NhbF9haXJwb3J0JyxcbiAgJ2xvY2FsX2F0bSc6ICdsb2NhbF9hdG0nLFxuICAnbG9jYWxfYmFyJzogJ2xvY2FsX2JhcicsXG4gICdsb2NhbF9jYWZlJzogJ2xvY2FsX2NhZmUnLFxuICAnbG9jYWxfY2FyX3dhc2gnOiAnbG9jYWxfY2FyX3dhc2gnLFxuICAnbG9jYWxfY29udmVuaWVuY2Vfc3RvcmUnOiAnbG9jYWxfY29udmVuaWVuY2Vfc3RvcmUnLFxuICAnbG9jYWxfZGluaW5nJzogJ2xvY2FsX2RpbmluZycsXG4gICdsb2NhbF9kcmluayc6ICdsb2NhbF9kcmluaycsXG4gICdsb2NhbF9maXJlX2RlcGFydG1lbnQnOiAnbG9jYWxfZmlyZV9kZXBhcnRtZW50JyxcbiAgJ2xvY2FsX2Zsb3Jpc3QnOiAnbG9jYWxfZmxvcmlzdCcsXG4gICdsb2NhbF9nYXNfc3RhdGlvbic6ICdsb2NhbF9nYXNfc3RhdGlvbicsXG4gICdsb2NhbF9ncm9jZXJ5X3N0b3JlJzogJ2xvY2FsX2dyb2Nlcnlfc3RvcmUnLFxuICAnbG9jYWxfaG9zcGl0YWwnOiAnbG9jYWxfaG9zcGl0YWwnLFxuICAnbG9jYWxfaG90ZWwnOiAnbG9jYWxfaG90ZWwnLFxuICAnbG9jYWxfbGF1bmRyeV9zZXJ2aWNlJzogJ2xvY2FsX2xhdW5kcnlfc2VydmljZScsXG4gICdsb2NhbF9saWJyYXJ5JzogJ2xvY2FsX2xpYnJhcnknLFxuICAnbG9jYWxfbWFsbCc6ICdsb2NhbF9tYWxsJyxcbiAgJ2xvY2FsX21vdmllcyc6ICdsb2NhbF9tb3ZpZXMnLFxuICAnbG9jYWxfb2ZmZXInOiAnbG9jYWxfb2ZmZXInLFxuICAnbG9jYWxfcGFya2luZyc6ICdsb2NhbF9wYXJraW5nJyxcbiAgJ2xvY2FsX3BoYXJtYWN5JzogJ2xvY2FsX3BoYXJtYWN5JyxcbiAgJ2xvY2FsX3Bob25lJzogJ2xvY2FsX3Bob25lJyxcbiAgJ2xvY2FsX3BpenphJzogJ2xvY2FsX3BpenphJyxcbiAgJ2xvY2FsX3BsYXknOiAnbG9jYWxfcGxheScsXG4gICdsb2NhbF9wb2xpY2UnOiAnbG9jYWxfcG9saWNlJyxcbiAgJ2xvY2FsX3Bvc3Rfb2ZmaWNlJzogJ2xvY2FsX3Bvc3Rfb2ZmaWNlJyxcbiAgJ2xvY2FsX3ByaW50c2hvcCc6ICdsb2NhbF9wcmludHNob3AnLFxuICAnbG9jYWxfc2VlJzogJ2xvY2FsX3NlZScsXG4gICdsb2NhbF9zaGlwcGluZyc6ICdsb2NhbF9zaGlwcGluZycsXG4gICdsb2NhbF90YXhpJzogJ2xvY2FsX3RheGknLFxuICAnbG9jYXRpb25fY2l0eSc6ICdsb2NhdGlvbl9jaXR5JyxcbiAgJ2xvY2F0aW9uX2Rpc2FibGVkJzogJ2xvY2F0aW9uX2Rpc2FibGVkJyxcbiAgJ2xvY2F0aW9uX29mZic6ICdsb2NhdGlvbl9vZmYnLFxuICAnbG9jYXRpb25fb24nOiAnbG9jYXRpb25fb24nLFxuICAnbG9jYXRpb25fc2VhcmNoaW5nJzogJ2xvY2F0aW9uX3NlYXJjaGluZycsXG4gICdsb2NrJzogJ2xvY2snLFxuICAnbG9ja19jbG9jayc6ICdsb2NrX2Nsb2NrJyxcbiAgJ2xvY2tfb3Blbic6ICdsb2NrX29wZW4nLFxuICAnbG9naW4nOiAnbG9naW4nLFxuICAnbG9nb3V0JzogJ2xvZ291dCcsXG4gICdsb29rcyc6ICdsb29rcycsXG4gICdsb29rc18zJzogJ2xvb2tzXzMnLFxuICAnbG9va3NfNCc6ICdsb29rc180JyxcbiAgJ2xvb2tzXzUnOiAnbG9va3NfNScsXG4gICdsb29rc182JzogJ2xvb2tzXzYnLFxuICAnbG9va3Nfb25lJzogJ2xvb2tzX29uZScsXG4gICdsb29rc190d28nOiAnbG9va3NfdHdvJyxcbiAgJ2xvb3AnOiAnbG9vcCcsXG4gICdsb3VwZSc6ICdsb3VwZScsXG4gICdsb3dfcHJpb3JpdHknOiAnbG93X3ByaW9yaXR5JyxcbiAgJ2xveWFsdHknOiAnbG95YWx0eScsXG4gICdsdGVfbW9iaWxlZGF0YSc6ICdsdGVfbW9iaWxlZGF0YScsXG4gICdsdGVfcGx1c19tb2JpbGVkYXRhJzogJ2x0ZV9wbHVzX21vYmlsZWRhdGEnLFxuICAnbHVnZ2FnZSc6ICdsdWdnYWdlJyxcbiAgJ2x1bmNoX2RpbmluZyc6ICdsdW5jaF9kaW5pbmcnLFxuICAnbWFpbCc6ICdtYWlsJyxcbiAgJ21haWxfb3V0bGluZSc6ICdtYWlsX291dGxpbmUnLFxuICAnbWFsZSc6ICdtYWxlJyxcbiAgJ21hbmFnZV9hY2NvdW50cyc6ICdtYW5hZ2VfYWNjb3VudHMnLFxuICAnbWFuYWdlX3NlYXJjaCc6ICdtYW5hZ2Vfc2VhcmNoJyxcbiAgJ21hcCc6ICdtYXAnLFxuICAnbWFwc19ob21lX3dvcmsnOiAnbWFwc19ob21lX3dvcmsnLFxuICAnbWFwc191Z2MnOiAnbWFwc191Z2MnLFxuICAnbWFyZ2luJzogJ21hcmdpbicsXG4gICdtYXJrX2FzX3VucmVhZCc6ICdtYXJrX2FzX3VucmVhZCcsXG4gICdtYXJrX2NoYXRfcmVhZCc6ICdtYXJrX2NoYXRfcmVhZCcsXG4gICdtYXJrX2NoYXRfdW5yZWFkJzogJ21hcmtfY2hhdF91bnJlYWQnLFxuICAnbWFya19lbWFpbF9yZWFkJzogJ21hcmtfZW1haWxfcmVhZCcsXG4gICdtYXJrX2VtYWlsX3VucmVhZCc6ICdtYXJrX2VtYWlsX3VucmVhZCcsXG4gICdtYXJrdW5yZWFkJzogJ21hcmt1bnJlYWQnLFxuICAnbWFya3VucmVhZF9tYWlsYm94JzogJ21hcmt1bnJlYWRfbWFpbGJveCcsXG4gICdtYXNrcyc6ICdtYXNrcycsXG4gICdtYXhpbWl6ZSc6ICdtYXhpbWl6ZScsXG4gICdtZWRpYV9ibHVldG9vdGhfb2ZmJzogJ21lZGlhX2JsdWV0b290aF9vZmYnLFxuICAnbWVkaWFfYmx1ZXRvb3RoX29uJzogJ21lZGlhX2JsdWV0b290aF9vbicsXG4gICdtZWRpYXRpb24nOiAnbWVkaWF0aW9uJyxcbiAgJ21lZGljYWxfc2VydmljZXMnOiAnbWVkaWNhbF9zZXJ2aWNlcycsXG4gICdtZWRpY2F0aW9uJzogJ21lZGljYXRpb24nLFxuICAnbWVldGluZ19yb29tJzogJ21lZXRpbmdfcm9vbScsXG4gICdtZW1vcnknOiAnbWVtb3J5JyxcbiAgJ21lbnUnOiAnbWVudScsXG4gICdtZW51X2Jvb2snOiAnbWVudV9ib29rJyxcbiAgJ21lbnVfb3Blbic6ICdtZW51X29wZW4nLFxuICAnbWVyZ2VfdHlwZSc6ICdtZXJnZV90eXBlJyxcbiAgJ21lc3NhZ2UnOiAnbWVzc2FnZScsXG4gICdtaWMnOiAnbWljJyxcbiAgJ21pY19leHRlcm5hbF9vZmYnOiAnbWljX2V4dGVybmFsX29mZicsXG4gICdtaWNfZXh0ZXJuYWxfb24nOiAnbWljX2V4dGVybmFsX29uJyxcbiAgJ21pY19ub25lJzogJ21pY19ub25lJyxcbiAgJ21pY19vZmYnOiAnbWljX29mZicsXG4gICdtaWNyb3dhdmUnOiAnbWljcm93YXZlJyxcbiAgJ21pbGl0YXJ5X3RlY2gnOiAnbWlsaXRhcnlfdGVjaCcsXG4gICdtaW5pbWl6ZSc6ICdtaW5pbWl6ZScsXG4gICdtaXNjZWxsYW5lb3VzX3NlcnZpY2VzJzogJ21pc2NlbGxhbmVvdXNfc2VydmljZXMnLFxuICAnbWlzc2VkX3ZpZGVvX2NhbGwnOiAnbWlzc2VkX3ZpZGVvX2NhbGwnLFxuICAnbW1zJzogJ21tcycsXG4gICdtb2JpbGVfZnJpZW5kbHknOiAnbW9iaWxlX2ZyaWVuZGx5JyxcbiAgJ21vYmlsZV9vZmYnOiAnbW9iaWxlX29mZicsXG4gICdtb2JpbGVfc2NyZWVuX3NoYXJlJzogJ21vYmlsZV9zY3JlZW5fc2hhcmUnLFxuICAnbW9iaWxlZGF0YV9vZmYnOiAnbW9iaWxlZGF0YV9vZmYnLFxuICAnbW9kZSc6ICdtb2RlJyxcbiAgJ21vZGVfY29tbWVudCc6ICdtb2RlX2NvbW1lbnQnLFxuICAnbW9kZV9lZGl0JzogJ21vZGVfZWRpdCcsXG4gICdtb2RlX2VkaXRfb3V0bGluZSc6ICdtb2RlX2VkaXRfb3V0bGluZScsXG4gICdtb2RlX25pZ2h0JzogJ21vZGVfbmlnaHQnLFxuICAnbW9kZV9zdGFuZGJ5JzogJ21vZGVfc3RhbmRieScsXG4gICdtb2RlbF90cmFpbmluZyc6ICdtb2RlbF90cmFpbmluZycsXG4gICdtb25ldGl6YXRpb25fb24nOiAnbW9uZXRpemF0aW9uX29uJyxcbiAgJ21vbmV5JzogJ21vbmV5JyxcbiAgJ21vbmV5X29mZic6ICdtb25leV9vZmYnLFxuICAnbW9uZXlfb2ZmX2NzcmVkJzogJ21vbmV5X29mZl9jc3JlZCcsXG4gICdtb25pdG9yJzogJ21vbml0b3InLFxuICAnbW9uaXRvcl93ZWlnaHQnOiAnbW9uaXRvcl93ZWlnaHQnLFxuICAnbW9ub2Nocm9tZV9waG90b3MnOiAnbW9ub2Nocm9tZV9waG90b3MnLFxuICAnbW9vZCc6ICdtb29kJyxcbiAgJ21vb2RfYmFkJzogJ21vb2RfYmFkJyxcbiAgJ21vcGVkJzogJ21vcGVkJyxcbiAgJ21vcmUnOiAnbW9yZScsXG4gICdtb3JlX2hvcml6JzogJ21vcmVfaG9yaXonLFxuICAnbW9yZV90aW1lJzogJ21vcmVfdGltZScsXG4gICdtb3JlX3ZlcnQnOiAnbW9yZV92ZXJ0JyxcbiAgJ21vdGlvbl9waG90b3NfYXV0byc6ICdtb3Rpb25fcGhvdG9zX2F1dG8nLFxuICAnbW90aW9uX3Bob3Rvc19vZmYnOiAnbW90aW9uX3Bob3Rvc19vZmYnLFxuICAnbW90aW9uX3Bob3Rvc19vbic6ICdtb3Rpb25fcGhvdG9zX29uJyxcbiAgJ21vdGlvbl9waG90b3NfcGF1c2UnOiAnbW90aW9uX3Bob3Rvc19wYXVzZScsXG4gICdtb3Rpb25fcGhvdG9zX3BhdXNlZCc6ICdtb3Rpb25fcGhvdG9zX3BhdXNlZCcsXG4gICdtb3VzZSc6ICdtb3VzZScsXG4gICdtb3ZlX3RvX2luYm94JzogJ21vdmVfdG9faW5ib3gnLFxuICAnbW92aWUnOiAnbW92aWUnLFxuICAnbW92aWVfY3JlYXRpb24nOiAnbW92aWVfY3JlYXRpb24nLFxuICAnbW92aWVfZmlsdGVyJzogJ21vdmllX2ZpbHRlcicsXG4gICdtb3ZpbmcnOiAnbW92aW5nJyxcbiAgJ21wJzogJ21wJyxcbiAgJ211bHRpbGluZV9jaGFydCc6ICdtdWx0aWxpbmVfY2hhcnQnLFxuICAnbXVsdGlwbGVfc3RvcCc6ICdtdWx0aXBsZV9zdG9wJyxcbiAgJ211c2V1bSc6ICdtdXNldW0nLFxuICAnbXVzaWNfbm90ZSc6ICdtdXNpY19ub3RlJyxcbiAgJ211c2ljX29mZic6ICdtdXNpY19vZmYnLFxuICAnbXVzaWNfdmlkZW8nOiAnbXVzaWNfdmlkZW8nLFxuICAnbXlfbG9jYXRpb24nOiAnbXlfbG9jYXRpb24nLFxuICAnbmF0JzogJ25hdCcsXG4gICduYXR1cmUnOiAnbmF0dXJlJyxcbiAgJ25hdHVyZV9wZW9wbGUnOiAnbmF0dXJlX3Blb3BsZScsXG4gICduYXZpZ2F0ZV9iZWZvcmUnOiAnbmF2aWdhdGVfYmVmb3JlJyxcbiAgJ25hdmlnYXRlX25leHQnOiAnbmF2aWdhdGVfbmV4dCcsXG4gICduYXZpZ2F0aW9uJzogJ25hdmlnYXRpb24nLFxuICAnbmVhcl9tZSc6ICduZWFyX21lJyxcbiAgJ25lYXJfbWVfZGlzYWJsZWQnOiAnbmVhcl9tZV9kaXNhYmxlZCcsXG4gICduZWFyYnlfZXJyb3InOiAnbmVhcmJ5X2Vycm9yJyxcbiAgJ25lYXJieV9vZmYnOiAnbmVhcmJ5X29mZicsXG4gICduZXR3b3JrX2NlbGwnOiAnbmV0d29ya19jZWxsJyxcbiAgJ25ldHdvcmtfY2hlY2snOiAnbmV0d29ya19jaGVjaycsXG4gICduZXR3b3JrX2xvY2tlZCc6ICduZXR3b3JrX2xvY2tlZCcsXG4gICduZXR3b3JrX3dpZmknOiAnbmV0d29ya193aWZpJyxcbiAgJ25ld19sYWJlbCc6ICduZXdfbGFiZWwnLFxuICAnbmV3X3JlbGVhc2VzJzogJ25ld19yZWxlYXNlcycsXG4gICduZXh0X3BsYW4nOiAnbmV4dF9wbGFuJyxcbiAgJ25leHRfd2Vlayc6ICduZXh0X3dlZWsnLFxuICAnbmZjJzogJ25mYycsXG4gICduaWdodF9zaGVsdGVyJzogJ25pZ2h0X3NoZWx0ZXInLFxuICAnbmlnaHRsaWZlJzogJ25pZ2h0bGlmZScsXG4gICduaWdodGxpZ2h0JzogJ25pZ2h0bGlnaHQnLFxuICAnbmlnaHRsaWdodF9yb3VuZCc6ICduaWdodGxpZ2h0X3JvdW5kJyxcbiAgJ25pZ2h0c19zdGF5JzogJ25pZ2h0c19zdGF5JyxcbiAgJ25vX2FjY291bnRzJzogJ25vX2FjY291bnRzJyxcbiAgJ25vX2JhY2twYWNrJzogJ25vX2JhY2twYWNrJyxcbiAgJ25vX2NlbGwnOiAnbm9fY2VsbCcsXG4gICdub19kcmlua3MnOiAnbm9fZHJpbmtzJyxcbiAgJ25vX2VuY3J5cHRpb24nOiAnbm9fZW5jcnlwdGlvbicsXG4gICdub19lbmNyeXB0aW9uX2dtYWlsZXJyb3JyZWQnOiAnbm9fZW5jcnlwdGlvbl9nbWFpbGVycm9ycmVkJyxcbiAgJ25vX2ZsYXNoJzogJ25vX2ZsYXNoJyxcbiAgJ25vX2Zvb2QnOiAnbm9fZm9vZCcsXG4gICdub19sdWdnYWdlJzogJ25vX2x1Z2dhZ2UnLFxuICAnbm9fbWVhbHMnOiAnbm9fbWVhbHMnLFxuICAnbm9fbWVldGluZ19yb29tJzogJ25vX21lZXRpbmdfcm9vbScsXG4gICdub19waG90b2dyYXBoeSc6ICdub19waG90b2dyYXBoeScsXG4gICdub19zaW0nOiAnbm9fc2ltJyxcbiAgJ25vX3N0cm9sbGVyJzogJ25vX3N0cm9sbGVyJyxcbiAgJ25vX3RyYW5zZmVyJzogJ25vX3RyYW5zZmVyJyxcbiAgJ25vcmRpY193YWxraW5nJzogJ25vcmRpY193YWxraW5nJyxcbiAgJ25vcnRoJzogJ25vcnRoJyxcbiAgJ25vcnRoX2Vhc3QnOiAnbm9ydGhfZWFzdCcsXG4gICdub3J0aF93ZXN0JzogJ25vcnRoX3dlc3QnLFxuICAnbm90X2FjY2Vzc2libGUnOiAnbm90X2FjY2Vzc2libGUnLFxuICAnbm90X2ludGVyZXN0ZWQnOiAnbm90X2ludGVyZXN0ZWQnLFxuICAnbm90X2xpc3RlZF9sb2NhdGlvbic6ICdub3RfbGlzdGVkX2xvY2F0aW9uJyxcbiAgJ25vdF9zdGFydGVkJzogJ25vdF9zdGFydGVkJyxcbiAgJ25vdGUnOiAnbm90ZScsXG4gICdub3RlX2FkZCc6ICdub3RlX2FkZCcsXG4gICdub3RlX2FsdCc6ICdub3RlX2FsdCcsXG4gICdub3Rlcyc6ICdub3RlcycsXG4gICdub3RpZmljYXRpb25fYWRkJzogJ25vdGlmaWNhdGlvbl9hZGQnLFxuICAnbm90aWZpY2F0aW9uX2ltcG9ydGFudCc6ICdub3RpZmljYXRpb25faW1wb3J0YW50JyxcbiAgJ25vdGlmaWNhdGlvbnMnOiAnbm90aWZpY2F0aW9ucycsXG4gICdub3RpZmljYXRpb25zX2FjdGl2ZSc6ICdub3RpZmljYXRpb25zX2FjdGl2ZScsXG4gICdub3RpZmljYXRpb25zX25vbmUnOiAnbm90aWZpY2F0aW9uc19ub25lJyxcbiAgJ25vdGlmaWNhdGlvbnNfb2ZmJzogJ25vdGlmaWNhdGlvbnNfb2ZmJyxcbiAgJ25vdGlmaWNhdGlvbnNfcGF1c2VkJzogJ25vdGlmaWNhdGlvbnNfcGF1c2VkJyxcbiAgJ29mZmxpbmVfYm9sdCc6ICdvZmZsaW5lX2JvbHQnLFxuICAnb2ZmbGluZV9waW4nOiAnb2ZmbGluZV9waW4nLFxuICAnb2ZmbGluZV9zaGFyZSc6ICdvZmZsaW5lX3NoYXJlJyxcbiAgJ29uZGVtYW5kX3ZpZGVvJzogJ29uZGVtYW5kX3ZpZGVvJyxcbiAgJ29ubGluZV9wcmVkaWN0aW9uJzogJ29ubGluZV9wcmVkaWN0aW9uJyxcbiAgJ29wYWNpdHknOiAnb3BhY2l0eScsXG4gICdvcGVuX2luX2Jyb3dzZXInOiAnb3Blbl9pbl9icm93c2VyJyxcbiAgJ29wZW5faW5fZnVsbCc6ICdvcGVuX2luX2Z1bGwnLFxuICAnb3Blbl9pbl9uZXcnOiAnb3Blbl9pbl9uZXcnLFxuICAnb3Blbl9pbl9uZXdfb2ZmJzogJ29wZW5faW5fbmV3X29mZicsXG4gICdvcGVuX3dpdGgnOiAnb3Blbl93aXRoJyxcbiAgJ290aGVyX2hvdXNlcyc6ICdvdGhlcl9ob3VzZXMnLFxuICAnb3V0Ym91bmQnOiAnb3V0Ym91bmQnLFxuICAnb3V0Ym94JzogJ291dGJveCcsXG4gICdvdXRkb29yX2dyaWxsJzogJ291dGRvb3JfZ3JpbGwnLFxuICAnb3V0bGV0JzogJ291dGxldCcsXG4gICdvdXRsaW5lZF9mbGFnJzogJ291dGxpbmVkX2ZsYWcnLFxuICAncGFkZGluZyc6ICdwYWRkaW5nJyxcbiAgJ3BhZ2VzJzogJ3BhZ2VzJyxcbiAgJ3BhZ2V2aWV3JzogJ3BhZ2V2aWV3JyxcbiAgJ3BhaWQnOiAncGFpZCcsXG4gICdwYWxldHRlJzogJ3BhbGV0dGUnLFxuICAncGFuX3Rvb2wnOiAncGFuX3Rvb2wnLFxuICAncGFub3JhbWEnOiAncGFub3JhbWEnLFxuICAncGFub3JhbWFfZmlzaF9leWUnOiAncGFub3JhbWFfZmlzaF9leWUnLFxuICAncGFub3JhbWFfaG9yaXpvbnRhbCc6ICdwYW5vcmFtYV9ob3Jpem9udGFsJyxcbiAgJ3Bhbm9yYW1hX2hvcml6b250YWxfc2VsZWN0JzogJ3Bhbm9yYW1hX2hvcml6b250YWxfc2VsZWN0JyxcbiAgJ3Bhbm9yYW1hX3Bob3Rvc3BoZXJlJzogJ3Bhbm9yYW1hX3Bob3Rvc3BoZXJlJyxcbiAgJ3Bhbm9yYW1hX3Bob3Rvc3BoZXJlX3NlbGVjdCc6ICdwYW5vcmFtYV9waG90b3NwaGVyZV9zZWxlY3QnLFxuICAncGFub3JhbWFfdmVydGljYWwnOiAncGFub3JhbWFfdmVydGljYWwnLFxuICAncGFub3JhbWFfdmVydGljYWxfc2VsZWN0JzogJ3Bhbm9yYW1hX3ZlcnRpY2FsX3NlbGVjdCcsXG4gICdwYW5vcmFtYV93aWRlX2FuZ2xlJzogJ3Bhbm9yYW1hX3dpZGVfYW5nbGUnLFxuICAncGFub3JhbWFfd2lkZV9hbmdsZV9zZWxlY3QnOiAncGFub3JhbWFfd2lkZV9hbmdsZV9zZWxlY3QnLFxuICAncGFyYWdsaWRpbmcnOiAncGFyYWdsaWRpbmcnLFxuICAncGFyayc6ICdwYXJrJyxcbiAgJ3BhcnR5X21vZGUnOiAncGFydHlfbW9kZScsXG4gICdwYXNzd29yZCc6ICdwYXNzd29yZCcsXG4gICdwYXR0ZXJuJzogJ3BhdHRlcm4nLFxuICAncGF1c2UnOiAncGF1c2UnLFxuICAncGF1c2VfY2lyY2xlJzogJ3BhdXNlX2NpcmNsZScsXG4gICdwYXVzZV9jaXJjbGVfZmlsbGVkJzogJ3BhdXNlX2NpcmNsZV9maWxsZWQnLFxuICAncGF1c2VfY2lyY2xlX291dGxpbmUnOiAncGF1c2VfY2lyY2xlX291dGxpbmUnLFxuICAncGF1c2VfcHJlc2VudGF0aW9uJzogJ3BhdXNlX3ByZXNlbnRhdGlvbicsXG4gICdwYXltZW50JzogJ3BheW1lbnQnLFxuICAncGF5bWVudHMnOiAncGF5bWVudHMnLFxuICAncGVkYWxfYmlrZSc6ICdwZWRhbF9iaWtlJyxcbiAgJ3BlbmRpbmcnOiAncGVuZGluZycsXG4gICdwZW5kaW5nX2FjdGlvbnMnOiAncGVuZGluZ19hY3Rpb25zJyxcbiAgJ3Blb3BsZSc6ICdwZW9wbGUnLFxuICAncGVvcGxlX2FsdCc6ICdwZW9wbGVfYWx0JyxcbiAgJ3Blb3BsZV9vdXRsaW5lJzogJ3Blb3BsZV9vdXRsaW5lJyxcbiAgJ3Blcm1fY2FtZXJhX21pYyc6ICdwZXJtX2NhbWVyYV9taWMnLFxuICAncGVybV9jb250YWN0X2NhbGVuZGFyJzogJ3Blcm1fY29udGFjdF9jYWxlbmRhcicsXG4gICdwZXJtX2RhdGFfc2V0dGluZyc6ICdwZXJtX2RhdGFfc2V0dGluZycsXG4gICdwZXJtX2RldmljZV9pbmZvcm1hdGlvbic6ICdwZXJtX2RldmljZV9pbmZvcm1hdGlvbicsXG4gICdwZXJtX2lkZW50aXR5JzogJ3Blcm1faWRlbnRpdHknLFxuICAncGVybV9tZWRpYSc6ICdwZXJtX21lZGlhJyxcbiAgJ3Blcm1fcGhvbmVfbXNnJzogJ3Blcm1fcGhvbmVfbXNnJyxcbiAgJ3Blcm1fc2Nhbl93aWZpJzogJ3Blcm1fc2Nhbl93aWZpJyxcbiAgJ3BlcnNvbic6ICdwZXJzb24nLFxuICAncGVyc29uX2FkZCc6ICdwZXJzb25fYWRkJyxcbiAgJ3BlcnNvbl9hZGRfYWx0JzogJ3BlcnNvbl9hZGRfYWx0JyxcbiAgJ3BlcnNvbl9hZGRfYWx0XzEnOiAncGVyc29uX2FkZF9hbHRfMScsXG4gICdwZXJzb25fYWRkX2Rpc2FibGVkJzogJ3BlcnNvbl9hZGRfZGlzYWJsZWQnLFxuICAncGVyc29uX29mZic6ICdwZXJzb25fb2ZmJyxcbiAgJ3BlcnNvbl9vdXRsaW5lJzogJ3BlcnNvbl9vdXRsaW5lJyxcbiAgJ3BlcnNvbl9waW4nOiAncGVyc29uX3BpbicsXG4gICdwZXJzb25fcGluX2NpcmNsZSc6ICdwZXJzb25fcGluX2NpcmNsZScsXG4gICdwZXJzb25fcmVtb3ZlJzogJ3BlcnNvbl9yZW1vdmUnLFxuICAncGVyc29uX3JlbW92ZV9hbHRfMSc6ICdwZXJzb25fcmVtb3ZlX2FsdF8xJyxcbiAgJ3BlcnNvbl9zZWFyY2gnOiAncGVyc29uX3NlYXJjaCcsXG4gICdwZXJzb25hbF9pbmp1cnknOiAncGVyc29uYWxfaW5qdXJ5JyxcbiAgJ3BlcnNvbmFsX3ZpZGVvJzogJ3BlcnNvbmFsX3ZpZGVvJyxcbiAgJ3Blc3RfY29udHJvbCc6ICdwZXN0X2NvbnRyb2wnLFxuICAncGVzdF9jb250cm9sX3JvZGVudCc6ICdwZXN0X2NvbnRyb2xfcm9kZW50JyxcbiAgJ3BldHMnOiAncGV0cycsXG4gICdwaG9uZSc6ICdwaG9uZScsXG4gICdwaG9uZV9hbmRyb2lkJzogJ3Bob25lX2FuZHJvaWQnLFxuICAncGhvbmVfYmx1ZXRvb3RoX3NwZWFrZXInOiAncGhvbmVfYmx1ZXRvb3RoX3NwZWFrZXInLFxuICAncGhvbmVfY2FsbGJhY2snOiAncGhvbmVfY2FsbGJhY2snLFxuICAncGhvbmVfZGlzYWJsZWQnOiAncGhvbmVfZGlzYWJsZWQnLFxuICAncGhvbmVfZW5hYmxlZCc6ICdwaG9uZV9lbmFibGVkJyxcbiAgJ3Bob25lX2ZvcndhcmRlZCc6ICdwaG9uZV9mb3J3YXJkZWQnLFxuICAncGhvbmVfaW5fdGFsayc6ICdwaG9uZV9pbl90YWxrJyxcbiAgJ3Bob25lX2lwaG9uZSc6ICdwaG9uZV9pcGhvbmUnLFxuICAncGhvbmVfbG9ja2VkJzogJ3Bob25lX2xvY2tlZCcsXG4gICdwaG9uZV9taXNzZWQnOiAncGhvbmVfbWlzc2VkJyxcbiAgJ3Bob25lX3BhdXNlZCc6ICdwaG9uZV9wYXVzZWQnLFxuICAncGhvbmVsaW5rJzogJ3Bob25lbGluaycsXG4gICdwaG9uZWxpbmtfZXJhc2UnOiAncGhvbmVsaW5rX2VyYXNlJyxcbiAgJ3Bob25lbGlua19sb2NrJzogJ3Bob25lbGlua19sb2NrJyxcbiAgJ3Bob25lbGlua19vZmYnOiAncGhvbmVsaW5rX29mZicsXG4gICdwaG9uZWxpbmtfcmluZyc6ICdwaG9uZWxpbmtfcmluZycsXG4gICdwaG9uZWxpbmtfc2V0dXAnOiAncGhvbmVsaW5rX3NldHVwJyxcbiAgJ3Bob3RvJzogJ3Bob3RvJyxcbiAgJ3Bob3RvX2FsYnVtJzogJ3Bob3RvX2FsYnVtJyxcbiAgJ3Bob3RvX2NhbWVyYSc6ICdwaG90b19jYW1lcmEnLFxuICAncGhvdG9fY2FtZXJhX2JhY2snOiAncGhvdG9fY2FtZXJhX2JhY2snLFxuICAncGhvdG9fY2FtZXJhX2Zyb250JzogJ3Bob3RvX2NhbWVyYV9mcm9udCcsXG4gICdwaG90b19maWx0ZXInOiAncGhvdG9fZmlsdGVyJyxcbiAgJ3Bob3RvX2xpYnJhcnknOiAncGhvdG9fbGlicmFyeScsXG4gICdwaG90b19zaXplX3NlbGVjdF9hY3R1YWwnOiAncGhvdG9fc2l6ZV9zZWxlY3RfYWN0dWFsJyxcbiAgJ3Bob3RvX3NpemVfc2VsZWN0X2xhcmdlJzogJ3Bob3RvX3NpemVfc2VsZWN0X2xhcmdlJyxcbiAgJ3Bob3RvX3NpemVfc2VsZWN0X3NtYWxsJzogJ3Bob3RvX3NpemVfc2VsZWN0X3NtYWxsJyxcbiAgJ3BpYW5vJzogJ3BpYW5vJyxcbiAgJ3BpYW5vX29mZic6ICdwaWFub19vZmYnLFxuICAncGljdHVyZV9hc19wZGYnOiAncGljdHVyZV9hc19wZGYnLFxuICAncGljdHVyZV9pbl9waWN0dXJlJzogJ3BpY3R1cmVfaW5fcGljdHVyZScsXG4gICdwaWN0dXJlX2luX3BpY3R1cmVfYWx0JzogJ3BpY3R1cmVfaW5fcGljdHVyZV9hbHQnLFxuICAncGllX2NoYXJ0JzogJ3BpZV9jaGFydCcsXG4gICdwaWVfY2hhcnRfb3V0bGluZSc6ICdwaWVfY2hhcnRfb3V0bGluZScsXG4gICdwaW4nOiAncGluJyxcbiAgJ3Bpbl9kcm9wJzogJ3Bpbl9kcm9wJyxcbiAgJ3Bpbl9lbmQnOiAncGluX2VuZCcsXG4gICdwaW5faW52b2tlJzogJ3Bpbl9pbnZva2UnLFxuICAncGl2b3RfdGFibGVfY2hhcnQnOiAncGl2b3RfdGFibGVfY2hhcnQnLFxuICAncGxhY2UnOiAncGxhY2UnLFxuICAncGxhZ2lhcmlzbSc6ICdwbGFnaWFyaXNtJyxcbiAgJ3BsYXlfYXJyb3cnOiAncGxheV9hcnJvdycsXG4gICdwbGF5X2NpcmNsZSc6ICdwbGF5X2NpcmNsZScsXG4gICdwbGF5X2NpcmNsZV9maWxsZWQnOiAncGxheV9jaXJjbGVfZmlsbGVkJyxcbiAgJ3BsYXlfY2lyY2xlX291dGxpbmUnOiAncGxheV9jaXJjbGVfb3V0bGluZScsXG4gICdwbGF5X2Rpc2FibGVkJzogJ3BsYXlfZGlzYWJsZWQnLFxuICAncGxheV9mb3Jfd29yayc6ICdwbGF5X2Zvcl93b3JrJyxcbiAgJ3BsYXlfbGVzc29uJzogJ3BsYXlfbGVzc29uJyxcbiAgJ3BsYXlsaXN0X2FkZCc6ICdwbGF5bGlzdF9hZGQnLFxuICAncGxheWxpc3RfYWRkX2NoZWNrJzogJ3BsYXlsaXN0X2FkZF9jaGVjaycsXG4gICdwbGF5bGlzdF9wbGF5JzogJ3BsYXlsaXN0X3BsYXknLFxuICAncGx1bWJpbmcnOiAncGx1bWJpbmcnLFxuICAncGx1c19vbmUnOiAncGx1c19vbmUnLFxuICAncG9kY2FzdHMnOiAncG9kY2FzdHMnLFxuICAncG9pbnRfb2Zfc2FsZSc6ICdwb2ludF9vZl9zYWxlJyxcbiAgJ3BvbGljeSc6ICdwb2xpY3knLFxuICAncG9sbCc6ICdwb2xsJyxcbiAgJ3BvbHltZXInOiAncG9seW1lcicsXG4gICdwb29sJzogJ3Bvb2wnLFxuICAncG9ydGFibGVfd2lmaV9vZmYnOiAncG9ydGFibGVfd2lmaV9vZmYnLFxuICAncG9ydHJhaXQnOiAncG9ydHJhaXQnLFxuICAncG9zdF9hZGQnOiAncG9zdF9hZGQnLFxuICAncG93ZXInOiAncG93ZXInLFxuICAncG93ZXJfaW5wdXQnOiAncG93ZXJfaW5wdXQnLFxuICAncG93ZXJfb2ZmJzogJ3Bvd2VyX29mZicsXG4gICdwb3dlcl9zZXR0aW5nc19uZXcnOiAncG93ZXJfc2V0dGluZ3NfbmV3JyxcbiAgJ3ByZWNpc2lvbl9tYW51ZmFjdHVyaW5nJzogJ3ByZWNpc2lvbl9tYW51ZmFjdHVyaW5nJyxcbiAgJ3ByZWduYW50X3dvbWFuJzogJ3ByZWduYW50X3dvbWFuJyxcbiAgJ3ByZXNlbnRfdG9fYWxsJzogJ3ByZXNlbnRfdG9fYWxsJyxcbiAgJ3ByZXZpZXcnOiAncHJldmlldycsXG4gICdwcmljZV9jaGFuZ2UnOiAncHJpY2VfY2hhbmdlJyxcbiAgJ3ByaWNlX2NoZWNrJzogJ3ByaWNlX2NoZWNrJyxcbiAgJ3ByaW50JzogJ3ByaW50JyxcbiAgJ3ByaW50X2Rpc2FibGVkJzogJ3ByaW50X2Rpc2FibGVkJyxcbiAgJ3ByaW9yaXR5X2hpZ2gnOiAncHJpb3JpdHlfaGlnaCcsXG4gICdwcml2YWN5X3RpcCc6ICdwcml2YWN5X3RpcCcsXG4gICdwcml2YXRlX2Nvbm5lY3Rpdml0eSc6ICdwcml2YXRlX2Nvbm5lY3Rpdml0eScsXG4gICdwcm9kdWN0aW9uX3F1YW50aXR5X2xpbWl0cyc6ICdwcm9kdWN0aW9uX3F1YW50aXR5X2xpbWl0cycsXG4gICdwc3ljaG9sb2d5JzogJ3BzeWNob2xvZ3knLFxuICAncHVibGljJzogJ3B1YmxpYycsXG4gICdwdWJsaWNfb2ZmJzogJ3B1YmxpY19vZmYnLFxuICAncHVibGlzaCc6ICdwdWJsaXNoJyxcbiAgJ3B1Ymxpc2hlZF93aXRoX2NoYW5nZXMnOiAncHVibGlzaGVkX3dpdGhfY2hhbmdlcycsXG4gICdwdXNoX3Bpbic6ICdwdXNoX3BpbicsXG4gICdxcl9jb2RlJzogJ3FyX2NvZGUnLFxuICAncXJfY29kZV8yJzogJ3FyX2NvZGVfMicsXG4gICdxcl9jb2RlX3NjYW5uZXInOiAncXJfY29kZV9zY2FubmVyJyxcbiAgJ3F1ZXJ5X2J1aWxkZXInOiAncXVlcnlfYnVpbGRlcicsXG4gICdxdWVyeV9zdGF0cyc6ICdxdWVyeV9zdGF0cycsXG4gICdxdWVzdGlvbl9hbnN3ZXInOiAncXVlc3Rpb25fYW5zd2VyJyxcbiAgJ3F1ZXVlJzogJ3F1ZXVlJyxcbiAgJ3F1ZXVlX211c2ljJzogJ3F1ZXVlX211c2ljJyxcbiAgJ3F1ZXVlX3BsYXlfbmV4dCc6ICdxdWV1ZV9wbGF5X25leHQnLFxuICAncXVpY2tyZXBseSc6ICdxdWlja3JlcGx5JyxcbiAgJ3F1aXonOiAncXVpeicsXG4gICdyX21vYmlsZWRhdGEnOiAncl9tb2JpbGVkYXRhJyxcbiAgJ3JhZGFyJzogJ3JhZGFyJyxcbiAgJ3JhZGlvJzogJ3JhZGlvJyxcbiAgJ3JhZGlvX2J1dHRvbl9jaGVja2VkJzogJ3JhZGlvX2J1dHRvbl9jaGVja2VkJyxcbiAgJ3JhZGlvX2J1dHRvbl91bmNoZWNrZWQnOiAncmFkaW9fYnV0dG9uX3VuY2hlY2tlZCcsXG4gICdyYWlsd2F5X2FsZXJ0JzogJ3JhaWx3YXlfYWxlcnQnLFxuICAncmFtZW5fZGluaW5nJzogJ3JhbWVuX2RpbmluZycsXG4gICdyYXRlX3Jldmlldyc6ICdyYXRlX3JldmlldycsXG4gICdyYXdfb2ZmJzogJ3Jhd19vZmYnLFxuICAncmF3X29uJzogJ3Jhd19vbicsXG4gICdyZWFkX21vcmUnOiAncmVhZF9tb3JlJyxcbiAgJ3JlYWxfZXN0YXRlX2FnZW50JzogJ3JlYWxfZXN0YXRlX2FnZW50JyxcbiAgJ3JlY2VpcHQnOiAncmVjZWlwdCcsXG4gICdyZWNlaXB0X2xvbmcnOiAncmVjZWlwdF9sb25nJyxcbiAgJ3JlY2VudF9hY3RvcnMnOiAncmVjZW50X2FjdG9ycycsXG4gICdyZWNvbW1lbmQnOiAncmVjb21tZW5kJyxcbiAgJ3JlY29yZF92b2ljZV9vdmVyJzogJ3JlY29yZF92b2ljZV9vdmVyJyxcbiAgJ3JlY3ljbGluZyc6ICdyZWN5Y2xpbmcnLFxuICAncmVkZWVtJzogJ3JlZGVlbScsXG4gICdyZWRvJzogJ3JlZG8nLFxuICAncmVkdWNlX2NhcGFjaXR5JzogJ3JlZHVjZV9jYXBhY2l0eScsXG4gICdyZWZyZXNoJzogJ3JlZnJlc2gnLFxuICAncmVtZW1iZXJfbWUnOiAncmVtZW1iZXJfbWUnLFxuICAncmVtb3ZlJzogJ3JlbW92ZScsXG4gICdyZW1vdmVfY2lyY2xlJzogJ3JlbW92ZV9jaXJjbGUnLFxuICAncmVtb3ZlX2NpcmNsZV9vdXRsaW5lJzogJ3JlbW92ZV9jaXJjbGVfb3V0bGluZScsXG4gICdyZW1vdmVfZG9uZSc6ICdyZW1vdmVfZG9uZScsXG4gICdyZW1vdmVfZnJvbV9xdWV1ZSc6ICdyZW1vdmVfZnJvbV9xdWV1ZScsXG4gICdyZW1vdmVfbW9kZXJhdG9yJzogJ3JlbW92ZV9tb2RlcmF0b3InLFxuICAncmVtb3ZlX3JlZF9leWUnOiAncmVtb3ZlX3JlZF9leWUnLFxuICAncmVtb3ZlX3Nob3BwaW5nX2NhcnQnOiAncmVtb3ZlX3Nob3BwaW5nX2NhcnQnLFxuICAncmVvcmRlcic6ICdyZW9yZGVyJyxcbiAgJ3JlcGVhdCc6ICdyZXBlYXQnLFxuICAncmVwZWF0X29uJzogJ3JlcGVhdF9vbicsXG4gICdyZXBlYXRfb25lJzogJ3JlcGVhdF9vbmUnLFxuICAncmVwZWF0X29uZV9vbic6ICdyZXBlYXRfb25lX29uJyxcbiAgJ3JlcGxheSc6ICdyZXBsYXknLFxuICAncmVwbGF5XzEwJzogJ3JlcGxheV8xMCcsXG4gICdyZXBsYXlfMzAnOiAncmVwbGF5XzMwJyxcbiAgJ3JlcGxheV81JzogJ3JlcGxheV81JyxcbiAgJ3JlcGxheV9jaXJjbGVfZmlsbGVkJzogJ3JlcGxheV9jaXJjbGVfZmlsbGVkJyxcbiAgJ3JlcGx5JzogJ3JlcGx5JyxcbiAgJ3JlcGx5X2FsbCc6ICdyZXBseV9hbGwnLFxuICAncmVwb3J0JzogJ3JlcG9ydCcsXG4gICdyZXBvcnRfZ21haWxlcnJvcnJlZCc6ICdyZXBvcnRfZ21haWxlcnJvcnJlZCcsXG4gICdyZXBvcnRfb2ZmJzogJ3JlcG9ydF9vZmYnLFxuICAncmVwb3J0X3Byb2JsZW0nOiAncmVwb3J0X3Byb2JsZW0nLFxuICAncmVxdWVzdF9wYWdlJzogJ3JlcXVlc3RfcGFnZScsXG4gICdyZXF1ZXN0X3F1b3RlJzogJ3JlcXVlc3RfcXVvdGUnLFxuICAncmVzZXRfdHYnOiAncmVzZXRfdHYnLFxuICAncmVzdGFydF9hbHQnOiAncmVzdGFydF9hbHQnLFxuICAncmVzdGF1cmFudCc6ICdyZXN0YXVyYW50JyxcbiAgJ3Jlc3RhdXJhbnRfbWVudSc6ICdyZXN0YXVyYW50X21lbnUnLFxuICAncmVzdG9yZSc6ICdyZXN0b3JlJyxcbiAgJ3Jlc3RvcmVfZnJvbV90cmFzaCc6ICdyZXN0b3JlX2Zyb21fdHJhc2gnLFxuICAncmVzdG9yZV9wYWdlJzogJ3Jlc3RvcmVfcGFnZScsXG4gICdyZXZpZXdzJzogJ3Jldmlld3MnLFxuICAncmljZV9ib3dsJzogJ3JpY2VfYm93bCcsXG4gICdyaW5nX3ZvbHVtZSc6ICdyaW5nX3ZvbHVtZScsXG4gICdyb29maW5nJzogJ3Jvb2ZpbmcnLFxuICAncm9vbSc6ICdyb29tJyxcbiAgJ3Jvb21fcHJlZmVyZW5jZXMnOiAncm9vbV9wcmVmZXJlbmNlcycsXG4gICdyb29tX3NlcnZpY2UnOiAncm9vbV9zZXJ2aWNlJyxcbiAgJ3JvdGF0ZV85MF9kZWdyZWVzX2Njdyc6ICdyb3RhdGVfOTBfZGVncmVlc19jY3cnLFxuICAncm90YXRlX2xlZnQnOiAncm90YXRlX2xlZnQnLFxuICAncm90YXRlX3JpZ2h0JzogJ3JvdGF0ZV9yaWdodCcsXG4gICdyb3VuZGVkX2Nvcm5lcic6ICdyb3VuZGVkX2Nvcm5lcicsXG4gICdyb3V0ZXInOiAncm91dGVyJyxcbiAgJ3Jvd2luZyc6ICdyb3dpbmcnLFxuICAncnNzX2ZlZWQnOiAncnNzX2ZlZWQnLFxuICAncnN2cCc6ICdyc3ZwJyxcbiAgJ3J0dCc6ICdydHQnLFxuICAncnVsZSc6ICdydWxlJyxcbiAgJ3J1bGVfZm9sZGVyJzogJ3J1bGVfZm9sZGVyJyxcbiAgJ3J1bl9jaXJjbGUnOiAncnVuX2NpcmNsZScsXG4gICdydW5uaW5nX3dpdGhfZXJyb3JzJzogJ3J1bm5pbmdfd2l0aF9lcnJvcnMnLFxuICAncnZfaG9va3VwJzogJ3J2X2hvb2t1cCcsXG4gICdzYWZldHlfZGl2aWRlcic6ICdzYWZldHlfZGl2aWRlcicsXG4gICdzYWlsaW5nJzogJ3NhaWxpbmcnLFxuICAnc2FuaXRpemVyJzogJ3Nhbml0aXplcicsXG4gICdzYXRlbGxpdGUnOiAnc2F0ZWxsaXRlJyxcbiAgJ3NhdmUnOiAnc2F2ZScsXG4gICdzYXZlX2FsdCc6ICdzYXZlX2FsdCcsXG4gICdzYXZlZF9zZWFyY2gnOiAnc2F2ZWRfc2VhcmNoJyxcbiAgJ3NhdmluZ3MnOiAnc2F2aW5ncycsXG4gICdzY2FubmVyJzogJ3NjYW5uZXInLFxuICAnc2NhdHRlcl9wbG90JzogJ3NjYXR0ZXJfcGxvdCcsXG4gICdzY2hlZHVsZSc6ICdzY2hlZHVsZScsXG4gICdzY2hlZHVsZV9zZW5kJzogJ3NjaGVkdWxlX3NlbmQnLFxuICAnc2NoZW1hJzogJ3NjaGVtYScsXG4gICdzY2hvb2wnOiAnc2Nob29sJyxcbiAgJ3NjaWVuY2UnOiAnc2NpZW5jZScsXG4gICdzY29yZSc6ICdzY29yZScsXG4gICdzY3JlZW5fbG9ja19sYW5kc2NhcGUnOiAnc2NyZWVuX2xvY2tfbGFuZHNjYXBlJyxcbiAgJ3NjcmVlbl9sb2NrX3BvcnRyYWl0JzogJ3NjcmVlbl9sb2NrX3BvcnRyYWl0JyxcbiAgJ3NjcmVlbl9sb2NrX3JvdGF0aW9uJzogJ3NjcmVlbl9sb2NrX3JvdGF0aW9uJyxcbiAgJ3NjcmVlbl9yb3RhdGlvbic6ICdzY3JlZW5fcm90YXRpb24nLFxuICAnc2NyZWVuX3NlYXJjaF9kZXNrdG9wJzogJ3NjcmVlbl9zZWFyY2hfZGVza3RvcCcsXG4gICdzY3JlZW5fc2hhcmUnOiAnc2NyZWVuX3NoYXJlJyxcbiAgJ3NjcmVlbnNob3QnOiAnc2NyZWVuc2hvdCcsXG4gICdzZCc6ICdzZCcsXG4gICdzZF9jYXJkJzogJ3NkX2NhcmQnLFxuICAnc2RfY2FyZF9hbGVydCc6ICdzZF9jYXJkX2FsZXJ0JyxcbiAgJ3NkX3N0b3JhZ2UnOiAnc2Rfc3RvcmFnZScsXG4gICdzZWFyY2gnOiAnc2VhcmNoJyxcbiAgJ3NlYXJjaF9vZmYnOiAnc2VhcmNoX29mZicsXG4gICdzZWN1cml0eSc6ICdzZWN1cml0eScsXG4gICdzZWN1cml0eV91cGRhdGUnOiAnc2VjdXJpdHlfdXBkYXRlJyxcbiAgJ3NlY3VyaXR5X3VwZGF0ZV9nb29kJzogJ3NlY3VyaXR5X3VwZGF0ZV9nb29kJyxcbiAgJ3NlY3VyaXR5X3VwZGF0ZV93YXJuaW5nJzogJ3NlY3VyaXR5X3VwZGF0ZV93YXJuaW5nJyxcbiAgJ3NlZ21lbnQnOiAnc2VnbWVudCcsXG4gICdzZWxlY3RfYWxsJzogJ3NlbGVjdF9hbGwnLFxuICAnc2VsZl9pbXByb3ZlbWVudCc6ICdzZWxmX2ltcHJvdmVtZW50JyxcbiAgJ3NlbGwnOiAnc2VsbCcsXG4gICdzZW5kJzogJ3NlbmQnLFxuICAnc2VuZF9hbmRfYXJjaGl2ZSc6ICdzZW5kX2FuZF9hcmNoaXZlJyxcbiAgJ3NlbmRfdG9fbW9iaWxlJzogJ3NlbmRfdG9fbW9iaWxlJyxcbiAgJ3NlbnNvcl9kb29yJzogJ3NlbnNvcl9kb29yJyxcbiAgJ3NlbnNvcl93aW5kb3cnOiAnc2Vuc29yX3dpbmRvdycsXG4gICdzZW5zb3JzJzogJ3NlbnNvcnMnLFxuICAnc2Vuc29yc19vZmYnOiAnc2Vuc29yc19vZmYnLFxuICAnc2VudGltZW50X2Rpc3NhdGlzZmllZCc6ICdzZW50aW1lbnRfZGlzc2F0aXNmaWVkJyxcbiAgJ3NlbnRpbWVudF9uZXV0cmFsJzogJ3NlbnRpbWVudF9uZXV0cmFsJyxcbiAgJ3NlbnRpbWVudF9zYXRpc2ZpZWQnOiAnc2VudGltZW50X3NhdGlzZmllZCcsXG4gICdzZW50aW1lbnRfc2F0aXNmaWVkX2FsdCc6ICdzZW50aW1lbnRfc2F0aXNmaWVkX2FsdCcsXG4gICdzZW50aW1lbnRfdmVyeV9kaXNzYXRpc2ZpZWQnOiAnc2VudGltZW50X3ZlcnlfZGlzc2F0aXNmaWVkJyxcbiAgJ3NlbnRpbWVudF92ZXJ5X3NhdGlzZmllZCc6ICdzZW50aW1lbnRfdmVyeV9zYXRpc2ZpZWQnLFxuICAnc2V0X21lYWwnOiAnc2V0X21lYWwnLFxuICAnc2V0dGluZ3MnOiAnc2V0dGluZ3MnLFxuICAnc2V0dGluZ3NfYWNjZXNzaWJpbGl0eSc6ICdzZXR0aW5nc19hY2Nlc3NpYmlsaXR5JyxcbiAgJ3NldHRpbmdzX2FwcGxpY2F0aW9ucyc6ICdzZXR0aW5nc19hcHBsaWNhdGlvbnMnLFxuICAnc2V0dGluZ3NfYmFja3VwX3Jlc3RvcmUnOiAnc2V0dGluZ3NfYmFja3VwX3Jlc3RvcmUnLFxuICAnc2V0dGluZ3NfYmx1ZXRvb3RoJzogJ3NldHRpbmdzX2JsdWV0b290aCcsXG4gICdzZXR0aW5nc19icmlnaHRuZXNzJzogJ3NldHRpbmdzX2JyaWdodG5lc3MnLFxuICAnc2V0dGluZ3NfY2VsbCc6ICdzZXR0aW5nc19jZWxsJyxcbiAgJ3NldHRpbmdzX2V0aGVybmV0JzogJ3NldHRpbmdzX2V0aGVybmV0JyxcbiAgJ3NldHRpbmdzX2lucHV0X2FudGVubmEnOiAnc2V0dGluZ3NfaW5wdXRfYW50ZW5uYScsXG4gICdzZXR0aW5nc19pbnB1dF9jb21wb25lbnQnOiAnc2V0dGluZ3NfaW5wdXRfY29tcG9uZW50JyxcbiAgJ3NldHRpbmdzX2lucHV0X2NvbXBvc2l0ZSc6ICdzZXR0aW5nc19pbnB1dF9jb21wb3NpdGUnLFxuICAnc2V0dGluZ3NfaW5wdXRfaGRtaSc6ICdzZXR0aW5nc19pbnB1dF9oZG1pJyxcbiAgJ3NldHRpbmdzX2lucHV0X3N2aWRlbyc6ICdzZXR0aW5nc19pbnB1dF9zdmlkZW8nLFxuICAnc2V0dGluZ3Nfb3ZlcnNjYW4nOiAnc2V0dGluZ3Nfb3ZlcnNjYW4nLFxuICAnc2V0dGluZ3NfcGhvbmUnOiAnc2V0dGluZ3NfcGhvbmUnLFxuICAnc2V0dGluZ3NfcG93ZXInOiAnc2V0dGluZ3NfcG93ZXInLFxuICAnc2V0dGluZ3NfcmVtb3RlJzogJ3NldHRpbmdzX3JlbW90ZScsXG4gICdzZXR0aW5nc19zdWdnZXN0JzogJ3NldHRpbmdzX3N1Z2dlc3QnLFxuICAnc2V0dGluZ3Nfc3lzdGVtX2RheWRyZWFtJzogJ3NldHRpbmdzX3N5c3RlbV9kYXlkcmVhbScsXG4gICdzZXR0aW5nc192b2ljZSc6ICdzZXR0aW5nc192b2ljZScsXG4gICdzaGFyZSc6ICdzaGFyZScsXG4gICdzaGFyZV9sb2NhdGlvbic6ICdzaGFyZV9sb2NhdGlvbicsXG4gICdzaGllbGQnOiAnc2hpZWxkJyxcbiAgJ3Nob3AnOiAnc2hvcCcsXG4gICdzaG9wXzInOiAnc2hvcF8yJyxcbiAgJ3Nob3BfdHdvJzogJ3Nob3BfdHdvJyxcbiAgJ3Nob3BwaW5nX2JhZyc6ICdzaG9wcGluZ19iYWcnLFxuICAnc2hvcHBpbmdfYmFza2V0JzogJ3Nob3BwaW5nX2Jhc2tldCcsXG4gICdzaG9wcGluZ19jYXJ0JzogJ3Nob3BwaW5nX2NhcnQnLFxuICAnc2hvcnRfdGV4dCc6ICdzaG9ydF90ZXh0JyxcbiAgJ3Nob3J0Y3V0JzogJ3Nob3J0Y3V0JyxcbiAgJ3Nob3dfY2hhcnQnOiAnc2hvd19jaGFydCcsXG4gICdzaG93ZXInOiAnc2hvd2VyJyxcbiAgJ3NodWZmbGUnOiAnc2h1ZmZsZScsXG4gICdzaHVmZmxlX29uJzogJ3NodWZmbGVfb24nLFxuICAnc2h1dHRlcl9zcGVlZCc6ICdzaHV0dGVyX3NwZWVkJyxcbiAgJ3NpY2snOiAnc2ljaycsXG4gICdzaWduYWxfY2VsbHVsYXJfMF9iYXInOiAnc2lnbmFsX2NlbGx1bGFyXzBfYmFyJyxcbiAgJ3NpZ25hbF9jZWxsdWxhcl80X2Jhcic6ICdzaWduYWxfY2VsbHVsYXJfNF9iYXInLFxuICAnc2lnbmFsX2NlbGx1bGFyX2FsdCc6ICdzaWduYWxfY2VsbHVsYXJfYWx0JyxcbiAgJ3NpZ25hbF9jZWxsdWxhcl9jb25uZWN0ZWRfbm9faW50ZXJuZXRfMF9iYXInOiAnc2lnbmFsX2NlbGx1bGFyX2Nvbm5lY3RlZF9ub19pbnRlcm5ldF8wX2JhcicsXG4gICdzaWduYWxfY2VsbHVsYXJfY29ubmVjdGVkX25vX2ludGVybmV0XzRfYmFyJzogJ3NpZ25hbF9jZWxsdWxhcl9jb25uZWN0ZWRfbm9faW50ZXJuZXRfNF9iYXInLFxuICAnc2lnbmFsX2NlbGx1bGFyX25vX3NpbSc6ICdzaWduYWxfY2VsbHVsYXJfbm9fc2ltJyxcbiAgJ3NpZ25hbF9jZWxsdWxhcl9ub2RhdGEnOiAnc2lnbmFsX2NlbGx1bGFyX25vZGF0YScsXG4gICdzaWduYWxfY2VsbHVsYXJfbnVsbCc6ICdzaWduYWxfY2VsbHVsYXJfbnVsbCcsXG4gICdzaWduYWxfY2VsbHVsYXJfb2ZmJzogJ3NpZ25hbF9jZWxsdWxhcl9vZmYnLFxuICAnc2lnbmFsX3dpZmlfMF9iYXInOiAnc2lnbmFsX3dpZmlfMF9iYXInLFxuICAnc2lnbmFsX3dpZmlfNF9iYXInOiAnc2lnbmFsX3dpZmlfNF9iYXInLFxuICAnc2lnbmFsX3dpZmlfNF9iYXJfbG9jayc6ICdzaWduYWxfd2lmaV80X2Jhcl9sb2NrJyxcbiAgJ3NpZ25hbF93aWZpX2JhZCc6ICdzaWduYWxfd2lmaV9iYWQnLFxuICAnc2lnbmFsX3dpZmlfY29ubmVjdGVkX25vX2ludGVybmV0XzQnOiAnc2lnbmFsX3dpZmlfY29ubmVjdGVkX25vX2ludGVybmV0XzQnLFxuICAnc2lnbmFsX3dpZmlfb2ZmJzogJ3NpZ25hbF93aWZpX29mZicsXG4gICdzaWduYWxfd2lmaV9zdGF0dXNiYXJfNF9iYXInOiAnc2lnbmFsX3dpZmlfc3RhdHVzYmFyXzRfYmFyJyxcbiAgJ3NpZ25hbF93aWZpX3N0YXR1c2Jhcl9jb25uZWN0ZWRfbm9faW50ZXJuZXRfNCc6ICdzaWduYWxfd2lmaV9zdGF0dXNiYXJfY29ubmVjdGVkX25vX2ludGVybmV0XzQnLFxuICAnc2lnbmFsX3dpZmlfc3RhdHVzYmFyX251bGwnOiAnc2lnbmFsX3dpZmlfc3RhdHVzYmFyX251bGwnLFxuICAnc2ltX2NhcmQnOiAnc2ltX2NhcmQnLFxuICAnc2ltX2NhcmRfYWxlcnQnOiAnc2ltX2NhcmRfYWxlcnQnLFxuICAnc2ltX2NhcmRfZG93bmxvYWQnOiAnc2ltX2NhcmRfZG93bmxvYWQnLFxuICAnc2luZ2xlX2JlZCc6ICdzaW5nbGVfYmVkJyxcbiAgJ3NpcCc6ICdzaXAnLFxuICAnc2thdGVib2FyZGluZyc6ICdza2F0ZWJvYXJkaW5nJyxcbiAgJ3NraXBfbmV4dCc6ICdza2lwX25leHQnLFxuICAnc2tpcF9wcmV2aW91cyc6ICdza2lwX3ByZXZpb3VzJyxcbiAgJ3NsZWRkaW5nJzogJ3NsZWRkaW5nJyxcbiAgJ3NsaWRlc2hvdyc6ICdzbGlkZXNob3cnLFxuICAnc2xvd19tb3Rpb25fdmlkZW8nOiAnc2xvd19tb3Rpb25fdmlkZW8nLFxuICAnc21hcnRfYnV0dG9uJzogJ3NtYXJ0X2J1dHRvbicsXG4gICdzbWFydF9kaXNwbGF5JzogJ3NtYXJ0X2Rpc3BsYXknLFxuICAnc21hcnRfc2NyZWVuJzogJ3NtYXJ0X3NjcmVlbicsXG4gICdzbWFydF90b3knOiAnc21hcnRfdG95JyxcbiAgJ3NtYXJ0cGhvbmUnOiAnc21hcnRwaG9uZScsXG4gICdzbW9rZV9mcmVlJzogJ3Ntb2tlX2ZyZWUnLFxuICAnc21va2luZ19yb29tcyc6ICdzbW9raW5nX3Jvb21zJyxcbiAgJ3Ntcyc6ICdzbXMnLFxuICAnc21zX2ZhaWxlZCc6ICdzbXNfZmFpbGVkJyxcbiAgJ3NuaXBwZXRfZm9sZGVyJzogJ3NuaXBwZXRfZm9sZGVyJyxcbiAgJ3Nub296ZSc6ICdzbm9vemUnLFxuICAnc25vd2JvYXJkaW5nJzogJ3Nub3dib2FyZGluZycsXG4gICdzbm93bW9iaWxlJzogJ3Nub3dtb2JpbGUnLFxuICAnc25vd3Nob2VpbmcnOiAnc25vd3Nob2VpbmcnLFxuICAnc29hcCc6ICdzb2FwJyxcbiAgJ3NvY2lhbF9kaXN0YW5jZSc6ICdzb2NpYWxfZGlzdGFuY2UnLFxuICAnc29ydCc6ICdzb3J0JyxcbiAgJ3NvcnRfYnlfYWxwaGEnOiAnc29ydF9ieV9hbHBoYScsXG4gICdzb3VyY2UnOiAnc291cmNlJyxcbiAgJ3NvdXRoJzogJ3NvdXRoJyxcbiAgJ3NvdXRoX2Vhc3QnOiAnc291dGhfZWFzdCcsXG4gICdzb3V0aF93ZXN0JzogJ3NvdXRoX3dlc3QnLFxuICAnc3BhJzogJ3NwYScsXG4gICdzcGFjZV9iYXInOiAnc3BhY2VfYmFyJyxcbiAgJ3NwYWNlX2Rhc2hib2FyZCc6ICdzcGFjZV9kYXNoYm9hcmQnLFxuICAnc3BlYWtlcic6ICdzcGVha2VyJyxcbiAgJ3NwZWFrZXJfZ3JvdXAnOiAnc3BlYWtlcl9ncm91cCcsXG4gICdzcGVha2VyX25vdGVzJzogJ3NwZWFrZXJfbm90ZXMnLFxuICAnc3BlYWtlcl9ub3Rlc19vZmYnOiAnc3BlYWtlcl9ub3Rlc19vZmYnLFxuICAnc3BlYWtlcl9waG9uZSc6ICdzcGVha2VyX3Bob25lJyxcbiAgJ3NwZWVkJzogJ3NwZWVkJyxcbiAgJ3NwZWxsY2hlY2snOiAnc3BlbGxjaGVjaycsXG4gICdzcGxpdHNjcmVlbic6ICdzcGxpdHNjcmVlbicsXG4gICdzcG9ydHMnOiAnc3BvcnRzJyxcbiAgJ3Nwb3J0c19iYXInOiAnc3BvcnRzX2JhcicsXG4gICdzcG9ydHNfYmFzZWJhbGwnOiAnc3BvcnRzX2Jhc2ViYWxsJyxcbiAgJ3Nwb3J0c19iYXNrZXRiYWxsJzogJ3Nwb3J0c19iYXNrZXRiYWxsJyxcbiAgJ3Nwb3J0c19jcmlja2V0JzogJ3Nwb3J0c19jcmlja2V0JyxcbiAgJ3Nwb3J0c19lc3BvcnRzJzogJ3Nwb3J0c19lc3BvcnRzJyxcbiAgJ3Nwb3J0c19mb290YmFsbCc6ICdzcG9ydHNfZm9vdGJhbGwnLFxuICAnc3BvcnRzX2dvbGYnOiAnc3BvcnRzX2dvbGYnLFxuICAnc3BvcnRzX2hhbmRiYWxsJzogJ3Nwb3J0c19oYW5kYmFsbCcsXG4gICdzcG9ydHNfaG9ja2V5JzogJ3Nwb3J0c19ob2NrZXknLFxuICAnc3BvcnRzX2thYmFkZGknOiAnc3BvcnRzX2thYmFkZGknLFxuICAnc3BvcnRzX21tYSc6ICdzcG9ydHNfbW1hJyxcbiAgJ3Nwb3J0c19tb3RvcnNwb3J0cyc6ICdzcG9ydHNfbW90b3JzcG9ydHMnLFxuICAnc3BvcnRzX3J1Z2J5JzogJ3Nwb3J0c19ydWdieScsXG4gICdzcG9ydHNfc2NvcmUnOiAnc3BvcnRzX3Njb3JlJyxcbiAgJ3Nwb3J0c19zb2NjZXInOiAnc3BvcnRzX3NvY2NlcicsXG4gICdzcG9ydHNfdGVubmlzJzogJ3Nwb3J0c190ZW5uaXMnLFxuICAnc3BvcnRzX3ZvbGxleWJhbGwnOiAnc3BvcnRzX3ZvbGxleWJhbGwnLFxuICAnc3F1YXJlX2Zvb3QnOiAnc3F1YXJlX2Zvb3QnLFxuICAnc3RhY2tlZF9iYXJfY2hhcnQnOiAnc3RhY2tlZF9iYXJfY2hhcnQnLFxuICAnc3RhY2tlZF9saW5lX2NoYXJ0JzogJ3N0YWNrZWRfbGluZV9jaGFydCcsXG4gICdzdGFpcnMnOiAnc3RhaXJzJyxcbiAgJ3N0YXInOiAnc3RhcicsXG4gICdzdGFyX2JvcmRlcic6ICdzdGFyX2JvcmRlcicsXG4gICdzdGFyX2JvcmRlcl9wdXJwbGU1MDAnOiAnc3Rhcl9ib3JkZXJfcHVycGxlNTAwJyxcbiAgJ3N0YXJfaGFsZic6ICdzdGFyX2hhbGYnLFxuICAnc3Rhcl9vdXRsaW5lJzogJ3N0YXJfb3V0bGluZScsXG4gICdzdGFyX3B1cnBsZTUwMCc6ICdzdGFyX3B1cnBsZTUwMCcsXG4gICdzdGFyX3JhdGUnOiAnc3Rhcl9yYXRlJyxcbiAgJ3N0YXJzJzogJ3N0YXJzJyxcbiAgJ3N0YXlfY3VycmVudF9sYW5kc2NhcGUnOiAnc3RheV9jdXJyZW50X2xhbmRzY2FwZScsXG4gICdzdGF5X2N1cnJlbnRfcG9ydHJhaXQnOiAnc3RheV9jdXJyZW50X3BvcnRyYWl0JyxcbiAgJ3N0YXlfcHJpbWFyeV9sYW5kc2NhcGUnOiAnc3RheV9wcmltYXJ5X2xhbmRzY2FwZScsXG4gICdzdGF5X3ByaW1hcnlfcG9ydHJhaXQnOiAnc3RheV9wcmltYXJ5X3BvcnRyYWl0JyxcbiAgJ3N0aWNreV9ub3RlXzInOiAnc3RpY2t5X25vdGVfMicsXG4gICdzdG9wJzogJ3N0b3AnLFxuICAnc3RvcF9jaXJjbGUnOiAnc3RvcF9jaXJjbGUnLFxuICAnc3RvcF9zY3JlZW5fc2hhcmUnOiAnc3RvcF9zY3JlZW5fc2hhcmUnLFxuICAnc3RvcmFnZSc6ICdzdG9yYWdlJyxcbiAgJ3N0b3JlJzogJ3N0b3JlJyxcbiAgJ3N0b3JlX21hbGxfZGlyZWN0b3J5JzogJ3N0b3JlX21hbGxfZGlyZWN0b3J5JyxcbiAgJ3N0b3JlZnJvbnQnOiAnc3RvcmVmcm9udCcsXG4gICdzdG9ybSc6ICdzdG9ybScsXG4gICdzdHJhaWdodGVuJzogJ3N0cmFpZ2h0ZW4nLFxuICAnc3RyZWFtJzogJ3N0cmVhbScsXG4gICdzdHJlZXR2aWV3JzogJ3N0cmVldHZpZXcnLFxuICAnc3RyaWtldGhyb3VnaF9zJzogJ3N0cmlrZXRocm91Z2hfcycsXG4gICdzdHJvbGxlcic6ICdzdHJvbGxlcicsXG4gICdzdHlsZSc6ICdzdHlsZScsXG4gICdzdWJkaXJlY3RvcnlfYXJyb3dfbGVmdCc6ICdzdWJkaXJlY3RvcnlfYXJyb3dfbGVmdCcsXG4gICdzdWJkaXJlY3RvcnlfYXJyb3dfcmlnaHQnOiAnc3ViZGlyZWN0b3J5X2Fycm93X3JpZ2h0JyxcbiAgJ3N1YmplY3QnOiAnc3ViamVjdCcsXG4gICdzdWJzY3JpcHQnOiAnc3Vic2NyaXB0JyxcbiAgJ3N1YnNjcmlwdGlvbnMnOiAnc3Vic2NyaXB0aW9ucycsXG4gICdzdWJ0aXRsZXMnOiAnc3VidGl0bGVzJyxcbiAgJ3N1YnRpdGxlc19vZmYnOiAnc3VidGl0bGVzX29mZicsXG4gICdzdWJ3YXknOiAnc3Vid2F5JyxcbiAgJ3N1bW1hcml6ZSc6ICdzdW1tYXJpemUnLFxuICAnc3VwZXJzY3JpcHQnOiAnc3VwZXJzY3JpcHQnLFxuICAnc3VwZXJ2aXNlZF91c2VyX2NpcmNsZSc6ICdzdXBlcnZpc2VkX3VzZXJfY2lyY2xlJyxcbiAgJ3N1cGVydmlzb3JfYWNjb3VudCc6ICdzdXBlcnZpc29yX2FjY291bnQnLFxuICAnc3VwcG9ydCc6ICdzdXBwb3J0JyxcbiAgJ3N1cHBvcnRfYWdlbnQnOiAnc3VwcG9ydF9hZ2VudCcsXG4gICdzdXJmaW5nJzogJ3N1cmZpbmcnLFxuICAnc3Vycm91bmRfc291bmQnOiAnc3Vycm91bmRfc291bmQnLFxuICAnc3dhcF9jYWxscyc6ICdzd2FwX2NhbGxzJyxcbiAgJ3N3YXBfaG9yaXonOiAnc3dhcF9ob3JpeicsXG4gICdzd2FwX2hvcml6b250YWxfY2lyY2xlJzogJ3N3YXBfaG9yaXpvbnRhbF9jaXJjbGUnLFxuICAnc3dhcF92ZXJ0JzogJ3N3YXBfdmVydCcsXG4gICdzd2FwX3ZlcnRpY2FsX2NpcmNsZSc6ICdzd2FwX3ZlcnRpY2FsX2NpcmNsZScsXG4gICdzd2lwZSc6ICdzd2lwZScsXG4gICdzd2l0Y2hfYWNjb3VudCc6ICdzd2l0Y2hfYWNjb3VudCcsXG4gICdzd2l0Y2hfY2FtZXJhJzogJ3N3aXRjaF9jYW1lcmEnLFxuICAnc3dpdGNoX2xlZnQnOiAnc3dpdGNoX2xlZnQnLFxuICAnc3dpdGNoX3JpZ2h0JzogJ3N3aXRjaF9yaWdodCcsXG4gICdzd2l0Y2hfdmlkZW8nOiAnc3dpdGNoX3ZpZGVvJyxcbiAgJ3N5bmMnOiAnc3luYycsXG4gICdzeW5jX2FsdCc6ICdzeW5jX2FsdCcsXG4gICdzeW5jX2Rpc2FibGVkJzogJ3N5bmNfZGlzYWJsZWQnLFxuICAnc3luY19wcm9ibGVtJzogJ3N5bmNfcHJvYmxlbScsXG4gICdzeXN0ZW1fc2VjdXJpdHlfdXBkYXRlJzogJ3N5c3RlbV9zZWN1cml0eV91cGRhdGUnLFxuICAnc3lzdGVtX3NlY3VyaXR5X3VwZGF0ZV9nb29kJzogJ3N5c3RlbV9zZWN1cml0eV91cGRhdGVfZ29vZCcsXG4gICdzeXN0ZW1fc2VjdXJpdHlfdXBkYXRlX3dhcm5pbmcnOiAnc3lzdGVtX3NlY3VyaXR5X3VwZGF0ZV93YXJuaW5nJyxcbiAgJ3N5c3RlbV91cGRhdGUnOiAnc3lzdGVtX3VwZGF0ZScsXG4gICdzeXN0ZW1fdXBkYXRlX2FsdCc6ICdzeXN0ZW1fdXBkYXRlX2FsdCcsXG4gICd0YWInOiAndGFiJyxcbiAgJ3RhYl91bnNlbGVjdGVkJzogJ3RhYl91bnNlbGVjdGVkJyxcbiAgJ3RhYmxlX2NoYXJ0JzogJ3RhYmxlX2NoYXJ0JyxcbiAgJ3RhYmxlX3Jvd3MnOiAndGFibGVfcm93cycsXG4gICd0YWJsZV92aWV3JzogJ3RhYmxlX3ZpZXcnLFxuICAndGFibGV0JzogJ3RhYmxldCcsXG4gICd0YWJsZXRfYW5kcm9pZCc6ICd0YWJsZXRfYW5kcm9pZCcsXG4gICd0YWJsZXRfbWFjJzogJ3RhYmxldF9tYWMnLFxuICAndGFnJzogJ3RhZycsXG4gICd0YWdfZmFjZXMnOiAndGFnX2ZhY2VzJyxcbiAgJ3Rha2VvdXRfZGluaW5nJzogJ3Rha2VvdXRfZGluaW5nJyxcbiAgJ3RhcF9hbmRfcGxheSc6ICd0YXBfYW5kX3BsYXknLFxuICAndGFwYXMnOiAndGFwYXMnLFxuICAndGFzayc6ICd0YXNrJyxcbiAgJ3Rhc2tfYWx0JzogJ3Rhc2tfYWx0JyxcbiAgJ3RheGlfYWxlcnQnOiAndGF4aV9hbGVydCcsXG4gICd0ZXJyYWluJzogJ3RlcnJhaW4nLFxuICAndGV4dF9maWVsZHMnOiAndGV4dF9maWVsZHMnLFxuICAndGV4dF9mb3JtYXQnOiAndGV4dF9mb3JtYXQnLFxuICAndGV4dF9yb3RhdGVfdXAnOiAndGV4dF9yb3RhdGVfdXAnLFxuICAndGV4dF9yb3RhdGVfdmVydGljYWwnOiAndGV4dF9yb3RhdGVfdmVydGljYWwnLFxuICAndGV4dF9yb3RhdGlvbl9hbmdsZWRvd24nOiAndGV4dF9yb3RhdGlvbl9hbmdsZWRvd24nLFxuICAndGV4dF9yb3RhdGlvbl9hbmdsZXVwJzogJ3RleHRfcm90YXRpb25fYW5nbGV1cCcsXG4gICd0ZXh0X3JvdGF0aW9uX2Rvd24nOiAndGV4dF9yb3RhdGlvbl9kb3duJyxcbiAgJ3RleHRfcm90YXRpb25fbm9uZSc6ICd0ZXh0X3JvdGF0aW9uX25vbmUnLFxuICAndGV4dF9zbmlwcGV0JzogJ3RleHRfc25pcHBldCcsXG4gICd0ZXh0c21zJzogJ3RleHRzbXMnLFxuICAndGV4dHVyZSc6ICd0ZXh0dXJlJyxcbiAgJ3RoZWF0ZXJfY29tZWR5JzogJ3RoZWF0ZXJfY29tZWR5JyxcbiAgJ3RoZWF0ZXJzJzogJ3RoZWF0ZXJzJyxcbiAgJ3RoZXJtb3N0YXQnOiAndGhlcm1vc3RhdCcsXG4gICd0aGVybW9zdGF0X2F1dG8nOiAndGhlcm1vc3RhdF9hdXRvJyxcbiAgJ3RodW1iX2Rvd24nOiAndGh1bWJfZG93bicsXG4gICd0aHVtYl9kb3duX2FsdCc6ICd0aHVtYl9kb3duX2FsdCcsXG4gICd0aHVtYl9kb3duX29mZl9hbHQnOiAndGh1bWJfZG93bl9vZmZfYWx0JyxcbiAgJ3RodW1iX3VwJzogJ3RodW1iX3VwJyxcbiAgJ3RodW1iX3VwX2FsdCc6ICd0aHVtYl91cF9hbHQnLFxuICAndGh1bWJfdXBfb2ZmX2FsdCc6ICd0aHVtYl91cF9vZmZfYWx0JyxcbiAgJ3RodW1ic191cF9kb3duJzogJ3RodW1ic191cF9kb3duJyxcbiAgJ3RpbWVfdG9fbGVhdmUnOiAndGltZV90b19sZWF2ZScsXG4gICd0aW1lbGFwc2UnOiAndGltZWxhcHNlJyxcbiAgJ3RpbWVsaW5lJzogJ3RpbWVsaW5lJyxcbiAgJ3RpbWVyJzogJ3RpbWVyJyxcbiAgJ3RpbWVyXzEwJzogJ3RpbWVyXzEwJyxcbiAgJ3RpbWVyXzEwX3NlbGVjdCc6ICd0aW1lcl8xMF9zZWxlY3QnLFxuICAndGltZXJfMyc6ICd0aW1lcl8zJyxcbiAgJ3RpbWVyXzNfc2VsZWN0JzogJ3RpbWVyXzNfc2VsZWN0JyxcbiAgJ3RpbWVyX29mZic6ICd0aW1lcl9vZmYnLFxuICAndGlwc19hbmRfdXBkYXRlcyc6ICd0aXBzX2FuZF91cGRhdGVzJyxcbiAgJ3RpdGxlJzogJ3RpdGxlJyxcbiAgJ3RvYyc6ICd0b2MnLFxuICAndG9kYXknOiAndG9kYXknLFxuICAndG9nZ2xlX29mZic6ICd0b2dnbGVfb2ZmJyxcbiAgJ3RvZ2dsZV9vbic6ICd0b2dnbGVfb24nLFxuICAndG9sbCc6ICd0b2xsJyxcbiAgJ3RvbmFsaXR5JzogJ3RvbmFsaXR5JyxcbiAgJ3RvcGljJzogJ3RvcGljJyxcbiAgJ3RvdWNoX2FwcCc6ICd0b3VjaF9hcHAnLFxuICAndG91cic6ICd0b3VyJyxcbiAgJ3RveXMnOiAndG95cycsXG4gICd0cmFja19jaGFuZ2VzJzogJ3RyYWNrX2NoYW5nZXMnLFxuICAndHJhZmZpYyc6ICd0cmFmZmljJyxcbiAgJ3RyYWluJzogJ3RyYWluJyxcbiAgJ3RyYW0nOiAndHJhbScsXG4gICd0cmFuc2Zlcl93aXRoaW5fYV9zdGF0aW9uJzogJ3RyYW5zZmVyX3dpdGhpbl9hX3N0YXRpb24nLFxuICAndHJhbnNmb3JtJzogJ3RyYW5zZm9ybScsXG4gICd0cmFuc2dlbmRlcic6ICd0cmFuc2dlbmRlcicsXG4gICd0cmFuc2l0X2VudGVyZXhpdCc6ICd0cmFuc2l0X2VudGVyZXhpdCcsXG4gICd0cmFuc2xhdGUnOiAndHJhbnNsYXRlJyxcbiAgJ3RyYXZlbF9leHBsb3JlJzogJ3RyYXZlbF9leHBsb3JlJyxcbiAgJ3RyZW5kaW5nX2Rvd24nOiAndHJlbmRpbmdfZG93bicsXG4gICd0cmVuZGluZ19mbGF0JzogJ3RyZW5kaW5nX2ZsYXQnLFxuICAndHJlbmRpbmdfdXAnOiAndHJlbmRpbmdfdXAnLFxuICAndHJpcF9vcmlnaW4nOiAndHJpcF9vcmlnaW4nLFxuICAndHJ5JzogJ3RyeScsXG4gICd0dHknOiAndHR5JyxcbiAgJ3R1bmUnOiAndHVuZScsXG4gICd0dW5nc3Rlbic6ICd0dW5nc3RlbicsXG4gICd0dXJuZWRfaW4nOiAndHVybmVkX2luJyxcbiAgJ3R1cm5lZF9pbl9ub3QnOiAndHVybmVkX2luX25vdCcsXG4gICd0dic6ICd0dicsXG4gICd0dl9vZmYnOiAndHZfb2ZmJyxcbiAgJ3R3b193aGVlbGVyJzogJ3R3b193aGVlbGVyJyxcbiAgJ3VtYnJlbGxhJzogJ3VtYnJlbGxhJyxcbiAgJ3VuYXJjaGl2ZSc6ICd1bmFyY2hpdmUnLFxuICAndW5kbyc6ICd1bmRvJyxcbiAgJ3VuZm9sZF9sZXNzJzogJ3VuZm9sZF9sZXNzJyxcbiAgJ3VuZm9sZF9tb3JlJzogJ3VuZm9sZF9tb3JlJyxcbiAgJ3VucHVibGlzaGVkJzogJ3VucHVibGlzaGVkJyxcbiAgJ3Vuc3Vic2NyaWJlJzogJ3Vuc3Vic2NyaWJlJyxcbiAgJ3VwY29taW5nJzogJ3VwY29taW5nJyxcbiAgJ3VwZGF0ZSc6ICd1cGRhdGUnLFxuICAndXBkYXRlX2Rpc2FibGVkJzogJ3VwZGF0ZV9kaXNhYmxlZCcsXG4gICd1cGdyYWRlJzogJ3VwZ3JhZGUnLFxuICAndXBsb2FkJzogJ3VwbG9hZCcsXG4gICd1cGxvYWRfZmlsZSc6ICd1cGxvYWRfZmlsZScsXG4gICd1c2InOiAndXNiJyxcbiAgJ3VzYl9vZmYnOiAndXNiX29mZicsXG4gICd2ZXJpZmllZCc6ICd2ZXJpZmllZCcsXG4gICd2ZXJpZmllZF91c2VyJzogJ3ZlcmlmaWVkX3VzZXInLFxuICAndmVydGljYWxfYWxpZ25fYm90dG9tJzogJ3ZlcnRpY2FsX2FsaWduX2JvdHRvbScsXG4gICd2ZXJ0aWNhbF9hbGlnbl9jZW50ZXInOiAndmVydGljYWxfYWxpZ25fY2VudGVyJyxcbiAgJ3ZlcnRpY2FsX2FsaWduX3RvcCc6ICd2ZXJ0aWNhbF9hbGlnbl90b3AnLFxuICAndmVydGljYWxfZGlzdHJpYnV0ZSc6ICd2ZXJ0aWNhbF9kaXN0cmlidXRlJyxcbiAgJ3ZlcnRpY2FsX3NwbGl0JzogJ3ZlcnRpY2FsX3NwbGl0JyxcbiAgJ3ZpYnJhdGlvbic6ICd2aWJyYXRpb24nLFxuICAndmlkZW9fY2FsbCc6ICd2aWRlb19jYWxsJyxcbiAgJ3ZpZGVvX2NhbWVyYV9iYWNrJzogJ3ZpZGVvX2NhbWVyYV9iYWNrJyxcbiAgJ3ZpZGVvX2NhbWVyYV9mcm9udCc6ICd2aWRlb19jYW1lcmFfZnJvbnQnLFxuICAndmlkZW9fbGFiZWwnOiAndmlkZW9fbGFiZWwnLFxuICAndmlkZW9fbGlicmFyeSc6ICd2aWRlb19saWJyYXJ5JyxcbiAgJ3ZpZGVvX3NldHRpbmdzJzogJ3ZpZGVvX3NldHRpbmdzJyxcbiAgJ3ZpZGVvX3N0YWJsZSc6ICd2aWRlb19zdGFibGUnLFxuICAndmlkZW9jYW0nOiAndmlkZW9jYW0nLFxuICAndmlkZW9jYW1fb2ZmJzogJ3ZpZGVvY2FtX29mZicsXG4gICd2aWRlb2dhbWVfYXNzZXQnOiAndmlkZW9nYW1lX2Fzc2V0JyxcbiAgJ3ZpZGVvZ2FtZV9hc3NldF9vZmYnOiAndmlkZW9nYW1lX2Fzc2V0X29mZicsXG4gICd2aWV3X2FnZW5kYSc6ICd2aWV3X2FnZW5kYScsXG4gICd2aWV3X2FycmF5JzogJ3ZpZXdfYXJyYXknLFxuICAndmlld19jYXJvdXNlbCc6ICd2aWV3X2Nhcm91c2VsJyxcbiAgJ3ZpZXdfY29sdW1uJzogJ3ZpZXdfY29sdW1uJyxcbiAgJ3ZpZXdfY29tZnknOiAndmlld19jb21meScsXG4gICd2aWV3X2NvbXBhY3QnOiAndmlld19jb21wYWN0JyxcbiAgJ3ZpZXdfZGF5JzogJ3ZpZXdfZGF5JyxcbiAgJ3ZpZXdfaGVhZGxpbmUnOiAndmlld19oZWFkbGluZScsXG4gICd2aWV3X2luX2FyJzogJ3ZpZXdfaW5fYXInLFxuICAndmlld19saXN0JzogJ3ZpZXdfbGlzdCcsXG4gICd2aWV3X21vZHVsZSc6ICd2aWV3X21vZHVsZScsXG4gICd2aWV3X3F1aWx0JzogJ3ZpZXdfcXVpbHQnLFxuICAndmlld19zaWRlYmFyJzogJ3ZpZXdfc2lkZWJhcicsXG4gICd2aWV3X3N0cmVhbSc6ICd2aWV3X3N0cmVhbScsXG4gICd2aWV3X3dlZWsnOiAndmlld193ZWVrJyxcbiAgJ3ZpZ25ldHRlJzogJ3ZpZ25ldHRlJyxcbiAgJ3ZpbGxhJzogJ3ZpbGxhJyxcbiAgJ3Zpc2liaWxpdHknOiAndmlzaWJpbGl0eScsXG4gICd2aXNpYmlsaXR5X29mZic6ICd2aXNpYmlsaXR5X29mZicsXG4gICd2b2ljZV9jaGF0JzogJ3ZvaWNlX2NoYXQnLFxuICAndm9pY2Vfb3Zlcl9vZmYnOiAndm9pY2Vfb3Zlcl9vZmYnLFxuICAndm9pY2VtYWlsJzogJ3ZvaWNlbWFpbCcsXG4gICd2b2x1bWVfZG93bic6ICd2b2x1bWVfZG93bicsXG4gICd2b2x1bWVfbXV0ZSc6ICd2b2x1bWVfbXV0ZScsXG4gICd2b2x1bWVfb2ZmJzogJ3ZvbHVtZV9vZmYnLFxuICAndm9sdW1lX3VwJzogJ3ZvbHVtZV91cCcsXG4gICd2b2x1bnRlZXJfYWN0aXZpc20nOiAndm9sdW50ZWVyX2FjdGl2aXNtJyxcbiAgJ3Zwbl9rZXknOiAndnBuX2tleScsXG4gICd2cG5fbG9jayc6ICd2cG5fbG9jaycsXG4gICd2cnBhbm8nOiAndnJwYW5vJyxcbiAgJ3dhbGxwYXBlcic6ICd3YWxscGFwZXInLFxuICAnd2FybmluZyc6ICd3YXJuaW5nJyxcbiAgJ3dhcm5pbmdfYW1iZXInOiAnd2FybmluZ19hbWJlcicsXG4gICd3YXNoJzogJ3dhc2gnLFxuICAnd2F0Y2gnOiAnd2F0Y2gnLFxuICAnd2F0Y2hfbGF0ZXInOiAnd2F0Y2hfbGF0ZXInLFxuICAnd2F0ZXInOiAnd2F0ZXInLFxuICAnd2F0ZXJfZGFtYWdlJzogJ3dhdGVyX2RhbWFnZScsXG4gICd3YXRlcl9kcm9wJzogJ3dhdGVyX2Ryb3AnLFxuICAnd2F0ZXJmYWxsX2NoYXJ0JzogJ3dhdGVyZmFsbF9jaGFydCcsXG4gICd3YXZlcyc6ICd3YXZlcycsXG4gICd3YXZpbmdfaGFuZCc6ICd3YXZpbmdfaGFuZCcsXG4gICd3Yl9hdXRvJzogJ3diX2F1dG8nLFxuICAnd2JfY2xvdWR5JzogJ3diX2Nsb3VkeScsXG4gICd3Yl9pbmNhbmRlc2NlbnQnOiAnd2JfaW5jYW5kZXNjZW50JyxcbiAgJ3diX2lyaWRlc2NlbnQnOiAnd2JfaXJpZGVzY2VudCcsXG4gICd3Yl9zaGFkZSc6ICd3Yl9zaGFkZScsXG4gICd3Yl9zdW5ueSc6ICd3Yl9zdW5ueScsXG4gICd3Yl90d2lsaWdodCc6ICd3Yl90d2lsaWdodCcsXG4gICd3Yyc6ICd3YycsXG4gICd3ZWInOiAnd2ViJyxcbiAgJ3dlYl9hc3NldCc6ICd3ZWJfYXNzZXQnLFxuICAnd2ViX2Fzc2V0X29mZic6ICd3ZWJfYXNzZXRfb2ZmJyxcbiAgJ3dlZWtlbmQnOiAnd2Vla2VuZCcsXG4gICd3ZXN0JzogJ3dlc3QnLFxuICAnd2hhdHNob3QnOiAnd2hhdHNob3QnLFxuICAnd2hlZWxjaGFpcl9waWNrdXAnOiAnd2hlZWxjaGFpcl9waWNrdXAnLFxuICAnd2hlcmVfdG9fdm90ZSc6ICd3aGVyZV90b192b3RlJyxcbiAgJ3dpZGdldHMnOiAnd2lkZ2V0cycsXG4gICd3aWZpJzogJ3dpZmknLFxuICAnd2lmaV9jYWxsaW5nJzogJ3dpZmlfY2FsbGluZycsXG4gICd3aWZpX2NhbGxpbmdfMyc6ICd3aWZpX2NhbGxpbmdfMycsXG4gICd3aWZpX2xvY2snOiAnd2lmaV9sb2NrJyxcbiAgJ3dpZmlfb2ZmJzogJ3dpZmlfb2ZmJyxcbiAgJ3dpZmlfcHJvdGVjdGVkX3NldHVwJzogJ3dpZmlfcHJvdGVjdGVkX3NldHVwJyxcbiAgJ3dpZmlfdGV0aGVyaW5nJzogJ3dpZmlfdGV0aGVyaW5nJyxcbiAgJ3dpZmlfdGV0aGVyaW5nX2Vycm9yX3JvdW5kZWQnOiAnd2lmaV90ZXRoZXJpbmdfZXJyb3Jfcm91bmRlZCcsXG4gICd3aWZpX3RldGhlcmluZ19vZmYnOiAnd2lmaV90ZXRoZXJpbmdfb2ZmJyxcbiAgJ3dpbmRvdyc6ICd3aW5kb3cnLFxuICAnd2luZV9iYXInOiAnd2luZV9iYXInLFxuICAnd29yayc6ICd3b3JrJyxcbiAgJ3dvcmtfb2ZmJzogJ3dvcmtfb2ZmJyxcbiAgJ3dvcmtfb3V0bGluZSc6ICd3b3JrX291dGxpbmUnLFxuICAnd29ya3NwYWNlcyc6ICd3b3Jrc3BhY2VzJyxcbiAgJ3dyYXBfdGV4dCc6ICd3cmFwX3RleHQnLFxuICAnd3JvbmdfbG9jYXRpb24nOiAnd3JvbmdfbG9jYXRpb24nLFxuICAnd3lzaXd5Zyc6ICd3eXNpd3lnJyxcbiAgJ3lhcmQnOiAneWFyZCcsXG4gICd5b3V0dWJlX3NlYXJjaGVkX2Zvcic6ICd5b3V0dWJlX3NlYXJjaGVkX2ZvcicsXG4gICd6b29tX2luJzogJ3pvb21faW4nLFxuICAnem9vbV9vdXQnOiAnem9vbV9vdXQnLFxuICAnem9vbV9vdXRfbWFwJzogJ3pvb21fb3V0X21hcCcsXG59O1xuIiwiZXhwb3J0IGNvbnN0IElDT05TX1RZUEVTID0ge1xuICAnZmlsbGVkJzogJ01hdGVyaWFsIEljb25zJyxcbiAgJ291dGxpbmVkJzogJ01hdGVyaWFsIEljb25zIE91dGxpbmVkJyxcbiAgJ3JvdW5kJzogJ01hdGVyaWFsIEljb25zIFJvdW5kJyxcbiAgJ3NoYXJwJzogJ01hdGVyaWFsIEljb25zIFNoYXJwJyxcbiAgJ3R3by10b25lJzogJ01hdGVyaWFsIEljb25zIFR3byBUb25lJyxcbn07XG4iLCJpbXBvcnQgeyBJQ09OUyB9IGZyb20gJ2pzY2FjaGUvaWNvbnMtbmFtZXMnO1xuaW1wb3J0IHsgSUNPTlNfVFlQRVMgfSBmcm9tICdqc2NhY2hlL2ljb25zLXR5cGVzJztcblxuZXhwb3J0IGNvbnN0IElDT05TX0dFVFRFUiA9ICgpID0+IElDT05TO1xuZXhwb3J0IGNvbnN0IElDT05TX1RZUEVTX0dFVFRFUiA9ICgpID0+IElDT05TX1RZUEVTO1xuXG5leHBvcnQgY29uc3QgSWNvbkNvbXB1dGVkID0ge1xuICBpbnN0YWxsIChWdWUsIG9wdGlvbnMpIHtcbiAgICBWdWUubWl4aW4oe1xuICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgSUNPTlM6IElDT05TX0dFVFRFUixcbiAgICAgICAgSUNPTlNfVFlQRVM6IElDT05TX1RZUEVTX0dFVFRFUixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG59O1xuIiwiLyohXG4gKiBAZGJldGthL3V0aWxzIHYwLjEuMlxuICogKGMpIGRiZXRrYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgY2hlY2sgPSB7XG4gIGlzVW5kZWZpbmVkOiBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuICB9LFxuICBpc1N0cmluZzogZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNOdW1iZXI6IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIGNoZWNrLmlzTm90TnVsbCh2YWx1ZSk7XG4gIH0sXG4gIGlzQXJyYXk6IGZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0sXG4gIGlzRnVuY3Rpb246IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBpc0Jvb2xlYW46IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgfSxcbiAgaXNEZWZpbmVkOiBmdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNVbmRlZmluZWQodmFsdWUpID09PSBmYWxzZTtcbiAgfSxcbiAgaXNOb3RTdHJpbmc6IGZ1bmN0aW9uIGlzTm90U3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNoZWNrLmlzU3RyaW5nKHZhbHVlKSA9PT0gZmFsc2U7XG4gIH0sXG4gIGlzTm90TnVtYmVyOiBmdW5jdGlvbiBpc05vdE51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBjaGVjay5pc051bWJlcih2YWx1ZSkgPT09IGZhbHNlO1xuICB9LFxuICBpc05vdE51bGw6IGZ1bmN0aW9uIGlzTm90TnVsbCh2YWx1ZSkge1xuICAgIHJldHVybiBjaGVjay5pc051bGwodmFsdWUpID09PSBmYWxzZTtcbiAgfSxcbiAgaXNOb3RPYmplY3Q6IGZ1bmN0aW9uIGlzTm90T2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGNoZWNrLmlzT2JqZWN0KHZhbHVlKSA9PT0gZmFsc2U7XG4gIH0sXG4gIGlzTm90QXJyYXk6IGZ1bmN0aW9uIGlzTm90QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNBcnJheSh2YWx1ZSkgPT09IGZhbHNlO1xuICB9LFxuICBpc05vdEZ1bmN0aW9uOiBmdW5jdGlvbiBpc05vdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNoZWNrLmlzRnVuY3Rpb24odmFsdWUpID09PSBmYWxzZTtcbiAgfSxcbiAgaXNOb3RCb29sZWFuOiBmdW5jdGlvbiBpc05vdEJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNCb29sZWFuKHZhbHVlKSA9PT0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBhcnJheSA9IHtcbiAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gcmVtb3ZlSXRlbShhcnJheSwgdG9SZW1vdmUpIHtcbiAgICB2YXIgaW5kZXhUb1JlbW92ZSA9IGFycmF5LmluZGV4T2YodG9SZW1vdmUpO1xuICAgIHJldHVybiBhcnJheS5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSk7XG4gIH0sXG4gIHJlbW92ZUl0ZW1CeUluZGV4OiBmdW5jdGlvbiByZW1vdmVJdGVtQnlJbmRleChhcnJheSwgaW5kZXhUb1JlbW92ZSkge1xuICAgIHJldHVybiBhcnJheS5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSk7XG4gIH1cbn07XG5cbnZhciBudW1iZXIgPSB7XG4gIHJvdW5kVG86IGZ1bmN0aW9uIHJvdW5kVG8odmFsdWUsIHByZWNpc2lvbikge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogTWF0aC5wb3coMTAsIHByZWNpc2lvbikpIC8gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIH1cbn07XG5cbnZhciBvYmplY3QgPSB7XG4gIC8qKlxuICAgKiBEZWVwIG1lcmdlIHR3byBvYmplY3RzLlxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBwYXJhbSBzb3VyY2VzXG4gICAqL1xuICBtZXJnZURlZXA6IGZ1bmN0aW9uIG1lcmdlRGVlcCh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBzb3VyY2VzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoIXNvdXJjZXMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG5cbiAgICBpZiAoY2hlY2suaXNPYmplY3QodGFyZ2V0KSAmJiBjaGVjay5pc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChjaGVjay5pc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgICBpZiAoIXRhcmdldFtrZXldKSBPYmplY3QuYXNzaWduKHRhcmdldCwgX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHt9KSk7XG4gICAgICAgICAgb2JqZWN0Lm1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgc291cmNlW2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmplY3QubWVyZ2VEZWVwLmFwcGx5KG9iamVjdCwgW3RhcmdldF0uY29uY2F0KHNvdXJjZXMpKTtcbiAgfVxufTtcblxudmFyIHByb21pc2UgPSB7XG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQoX3RpbWVvdXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgfSwgX3RpbWVvdXQpO1xuICAgIH0pO1xuICB9XG59O1xuXG52YXIgcmVxdWVzdEhvc3QgPSAnJztcblxuZnVuY3Rpb24gbWFrZUZldGNoKF9yZWYpIHtcbiAgdmFyIHVybCA9IF9yZWYudXJsLFxuICAgICAgY29uZmlnID0gX3JlZi5jb25maWc7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZmV0Y2godXJsLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH1cbiAgICB9KSkudGhlbihyZXNvbHZlKVtcImNhdGNoXCJdKHJlamVjdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRCb2R5VG9Db25maWcoY29uZmlnLCBkYXRhKSB7XG4gIGlmIChjaGVjay5pc0RlZmluZWQoZGF0YSkpIHtcbiAgICBjb25maWcuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICB9XG59XG5cbnZhciByZXF1ZXN0ID0ge1xuICBzZXRIb3N0OiBmdW5jdGlvbiBzZXRIb3N0KG5ld0hvc3QpIHtcbiAgICByZXF1ZXN0SG9zdCA9IG5ld0hvc3Q7XG4gIH0sXG4gIGdldEhvc3Q6IGZ1bmN0aW9uIGdldEhvc3QoKSB7XG4gICAgcmV0dXJuIHJlcXVlc3RIb3N0O1xuICB9LFxuICBkYXRhVG9QYXRoVmFyaWFibGVzOiBmdW5jdGlvbiBkYXRhVG9QYXRoVmFyaWFibGVzKGRhdGEpIHtcbiAgICB2YXIgcGF0aERhdGEgPSAnJztcblxuICAgIGlmIChPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICBwYXRoRGF0YSArPSAnPyc7XG4gICAgICBwYXRoRGF0YSArPSBPYmplY3QuZW50cmllcyhkYXRhKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSxcbiAgICAgICAgICAgIGtleSA9IF9yZWYzWzBdLFxuICAgICAgICAgICAgdmFsID0gX3JlZjNbMV07XG5cbiAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHZhbDtcbiAgICAgIH0pLmpvaW4oJyYnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aERhdGE7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KF9yZWY0KSB7XG4gICAgdmFyIF9yZWY0JHVybCA9IF9yZWY0LnVybCxcbiAgICAgICAgdXJsID0gX3JlZjQkdXJsID09PSB2b2lkIDAgPyAnLycgOiBfcmVmNCR1cmwsXG4gICAgICAgIF9yZWY0JGRhdGEgPSBfcmVmNC5kYXRhLFxuICAgICAgICBkYXRhID0gX3JlZjQkZGF0YSA9PT0gdm9pZCAwID8ge30gOiBfcmVmNCRkYXRhLFxuICAgICAgICBfcmVmNCRjb25maWcgPSBfcmVmNC5jb25maWcsXG4gICAgICAgIGNvbmZpZyA9IF9yZWY0JGNvbmZpZyA9PT0gdm9pZCAwID8ge30gOiBfcmVmNCRjb25maWc7XG4gICAgdmFyIHBhdGhWYXJpYWJsZXMgPSByZXF1ZXN0LmRhdGFUb1BhdGhWYXJpYWJsZXMoZGF0YSk7XG4gICAgdmFyIGZ1bGxVcmwgPSByZXF1ZXN0SG9zdCArIHVybCArIHBhdGhWYXJpYWJsZXM7XG4gICAgcmV0dXJuIG1ha2VGZXRjaCh7XG4gICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICBjb25maWc6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtZXRob2Q6ICdHRVQnXG4gICAgICB9LCBjb25maWcpXG4gICAgfSk7XG4gIH0sXG4gIHBvc3Q6IGZ1bmN0aW9uIHBvc3QoX3JlZjUpIHtcbiAgICB2YXIgX3JlZjUkdXJsID0gX3JlZjUudXJsLFxuICAgICAgICB1cmwgPSBfcmVmNSR1cmwgPT09IHZvaWQgMCA/ICcvJyA6IF9yZWY1JHVybCxcbiAgICAgICAgZGF0YSA9IF9yZWY1LmRhdGEsXG4gICAgICAgIF9yZWY1JGNvbmZpZyA9IF9yZWY1LmNvbmZpZyxcbiAgICAgICAgY29uZmlnID0gX3JlZjUkY29uZmlnID09PSB2b2lkIDAgPyB7fSA6IF9yZWY1JGNvbmZpZztcbiAgICB2YXIgZnVsbFVybCA9IHJlcXVlc3RIb3N0ICsgdXJsO1xuICAgIGFkZEJvZHlUb0NvbmZpZyhjb25maWcsIGRhdGEpO1xuICAgIHJldHVybiBtYWtlRmV0Y2goe1xuICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgY29uZmlnOiBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgIH0sIGNvbmZpZylcbiAgICB9KTtcbiAgfSxcbiAgcHV0OiBmdW5jdGlvbiBwdXQoX3JlZjYpIHtcbiAgICB2YXIgX3JlZjYkdXJsID0gX3JlZjYudXJsLFxuICAgICAgICB1cmwgPSBfcmVmNiR1cmwgPT09IHZvaWQgMCA/ICcvJyA6IF9yZWY2JHVybCxcbiAgICAgICAgX3JlZjYkZGF0YSA9IF9yZWY2LmRhdGEsXG4gICAgICAgIGRhdGEgPSBfcmVmNiRkYXRhID09PSB2b2lkIDAgPyB7fSA6IF9yZWY2JGRhdGEsXG4gICAgICAgIF9yZWY2JGNvbmZpZyA9IF9yZWY2LmNvbmZpZyxcbiAgICAgICAgY29uZmlnID0gX3JlZjYkY29uZmlnID09PSB2b2lkIDAgPyB7fSA6IF9yZWY2JGNvbmZpZztcbiAgICB2YXIgZnVsbFVybCA9IHJlcXVlc3RIb3N0ICsgdXJsO1xuICAgIGFkZEJvZHlUb0NvbmZpZyhjb25maWcsIGRhdGEpO1xuICAgIHJldHVybiBtYWtlRmV0Y2goe1xuICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgY29uZmlnOiBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWV0aG9kOiAnUFVUJ1xuICAgICAgfSwgY29uZmlnKVxuICAgIH0pO1xuICB9LFxuICBcImRlbGV0ZVwiOiBmdW5jdGlvbiBfZGVsZXRlKF9yZWY3KSB7XG4gICAgdmFyIF9yZWY3JHVybCA9IF9yZWY3LnVybCxcbiAgICAgICAgdXJsID0gX3JlZjckdXJsID09PSB2b2lkIDAgPyAnLycgOiBfcmVmNyR1cmwsXG4gICAgICAgIF9yZWY3JGRhdGEgPSBfcmVmNy5kYXRhLFxuICAgICAgICBkYXRhID0gX3JlZjckZGF0YSA9PT0gdm9pZCAwID8ge30gOiBfcmVmNyRkYXRhLFxuICAgICAgICBfcmVmNyRjb25maWcgPSBfcmVmNy5jb25maWcsXG4gICAgICAgIGNvbmZpZyA9IF9yZWY3JGNvbmZpZyA9PT0gdm9pZCAwID8ge30gOiBfcmVmNyRjb25maWc7XG4gICAgdmFyIGZ1bGxVcmwgPSByZXF1ZXN0SG9zdCArIHVybDtcbiAgICBhZGRCb2R5VG9Db25maWcoY29uZmlnLCBkYXRhKTtcbiAgICByZXR1cm4gbWFrZUZldGNoKHtcbiAgICAgIHVybDogZnVsbFVybCxcbiAgICAgIGNvbmZpZzogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIG1ldGhvZDogJ0RFTEVURSdcbiAgICAgIH0sIGNvbmZpZylcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIHZhbGlkYXRlID0ge1xuICBoYXNOdW1iZXI6IGZ1bmN0aW9uIGhhc051bWJlcihkYXRhKSB7XG4gICAgcmV0dXJuIC9cXGQvLnRlc3QoZGF0YSk7XG4gIH0sXG4gIGhhc05vdE51bWJlcjogZnVuY3Rpb24gaGFzTm90TnVtYmVyKGRhdGEpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzTnVtYmVyKGRhdGEpO1xuICB9LFxuICBpc0VtYWlsOiBmdW5jdGlvbiBpc0VtYWlsKGVtYWlsKSB7XG4gICAgdmFyIHJlID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgICByZXR1cm4gcmUudGVzdChTdHJpbmcoZW1haWwpLnRvTG93ZXJDYXNlKCkpO1xuICB9LFxuICBpc05vdEVtYWlsOiBmdW5jdGlvbiBpc05vdEVtYWlsKGVtYWlsKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzRW1haWwoZW1haWwpO1xuICB9LFxuICBpc0xvbmdlcjogZnVuY3Rpb24gaXNMb25nZXIoZGF0YSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID4gbGVuZ3RoO1xuICB9LFxuICBpc1Nob3J0ZXI6IGZ1bmN0aW9uIGlzU2hvcnRlcihkYXRhLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gZGF0YSAmJiBkYXRhLmxlbmd0aCA/IGRhdGEubGVuZ3RoIDwgbGVuZ3RoIDogdHJ1ZTtcbiAgfSxcbiAgaXNOdWxsT3JFbXB0eTogZnVuY3Rpb24gaXNOdWxsT3JFbXB0eShkYXRhKSB7XG4gICAgcmV0dXJuIFsnJywgdW5kZWZpbmVkLCBudWxsXS5pbmNsdWRlcyhkYXRhKTtcbiAgfSxcbiAgaXNVbmRlZmluZWQ6IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGRhdGEpIHtcbiAgICByZXR1cm4gY2hlY2suaXNVbmRlZmluZWQoZGF0YSk7XG4gIH0sXG4gIGluUmFuZ2U6IGZ1bmN0aW9uIGluUmFuZ2UodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gc3RhcnQgJiYgdmFsdWUgPD0gZW5kO1xuICB9LFxuICBpbk5vdFJhbmdlOiBmdW5jdGlvbiBpbk5vdFJhbmdlKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuICF0aGlzLmluUmFuZ2UodmFsdWUsIHN0YXJ0LCBlbmQpO1xuICB9LFxuICBjb250YWluOiBmdW5jdGlvbiBjb250YWluKHZhbHVlLCBhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5pbmNsdWRlcyh2YWx1ZSk7XG4gIH0sXG4gIG5vdENvbnRhaW46IGZ1bmN0aW9uIG5vdENvbnRhaW4odmFsdWUsIGFycmF5KSB7XG4gICAgcmV0dXJuICF0aGlzLmNvbnRhaW4odmFsdWUsIGFycmF5KTtcbiAgfSxcbiAgaXNCb29sZWFuOiBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNCb29sZWFuKHZhbHVlKTtcbiAgfSxcbiAgaXNOb3RCb29sZWFuOiBmdW5jdGlvbiBpc05vdEJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gY2hlY2suaXNOb3RCb29sZWFuKHZhbHVlKTtcbiAgfVxufTtcblxudmFyIHVDaGVjayA9IGNoZWNrO1xudmFyIHVPYmplY3QgPSBvYmplY3Q7XG52YXIgdUFycmF5ID0gYXJyYXk7XG52YXIgdU51bWJlciA9IG51bWJlcjtcbnZhciB1UHJvbWlzZSA9IHByb21pc2U7XG52YXIgdVJlcXVlc3QgPSByZXF1ZXN0O1xudmFyIHVWYWxpZGF0ZSA9IHZhbGlkYXRlO1xudmFyIGluZGV4ID0ge1xuICBjaGVjazogY2hlY2ssXG4gIG9iamVjdDogb2JqZWN0LFxuICBhcnJheTogYXJyYXksXG4gIG51bWJlcjogbnVtYmVyLFxuICBwcm9taXNlOiBwcm9taXNlLFxuICByZXF1ZXN0OiByZXF1ZXN0LFxuICB2YWxpZGF0ZTogdmFsaWRhdGVcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGluZGV4O1xuZXhwb3J0cy51QXJyYXkgPSB1QXJyYXk7XG5leHBvcnRzLnVDaGVjayA9IHVDaGVjaztcbmV4cG9ydHMudU51bWJlciA9IHVOdW1iZXI7XG5leHBvcnRzLnVPYmplY3QgPSB1T2JqZWN0O1xuZXhwb3J0cy51UHJvbWlzZSA9IHVQcm9taXNlO1xuZXhwb3J0cy51UmVxdWVzdCA9IHVSZXF1ZXN0O1xuZXhwb3J0cy51VmFsaWRhdGUgPSB1VmFsaWRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIjx0ZW1wbGF0ZT5cbiAgPGlcbiAgICBjbGFzcz1cImEtaWNvblwiXG4gICAgOmNsYXNzPVwiY2xhc3Nlc1wiXG4gICAgOnN0eWxlPVwic3R5bGVcIlxuICAgIHYtb249XCJ7IC4uLiRsaXN0ZW5lcnMgfVwiXG4gID5cbiAgICB7eyBuYW1lIH19XG4gICAgPHNsb3QvPlxuICA8L2k+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgdUNoZWNrIH0gZnJvbSAnQGRiZXRrYS91dGlscyc7XG5pbXBvcnQgeyBJQ09OU19UWVBFU19HRVRURVIgYXMgSUNPTlNfVFlQRVMgfSBmcm9tICd1dGlscy9JY29uQ29tcHV0ZWQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhLWljb24nLFxuICBwcm9wczoge1xuICAgIHR5cGU6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnJyB9LFxuICAgIG5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHNpemU6IHsgdHlwZTogW1N0cmluZywgTnVtYmVyXSwgZGVmYXVsdDogdW5kZWZpbmVkIH0sXG4gICAgZmlsbGVkOiB7IHR5cGU6IEJvb2xlYW4gfSxcbiAgICBvdXRsaW5lZDogeyB0eXBlOiBCb29sZWFuIH0sXG4gICAgcm91bmQ6IHsgdHlwZTogQm9vbGVhbiB9LFxuICAgIHNoYXJwOiB7IHR5cGU6IEJvb2xlYW4gfSxcbiAgICB0d29Ub25lOiB7IHR5cGU6IEJvb2xlYW4gfSxcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBJQ09OU19UWVBFUyxcbiAgICBzdHlsZSAoKSB7XG4gICAgICBsZXQgc3R5bGUgPSAnJztcbiAgICAgIGlmICh1Q2hlY2suaXNEZWZpbmVkKHRoaXMuc2l6ZSkpIHtcbiAgICAgICAgc3R5bGUgKz0gYGZvbnQtc2l6ZTogJHt0aGlzLnNpemV9cHg7YDtcbiAgICAgICAgc3R5bGUgKz0gYHdpZHRoOiAke3RoaXMuc2l6ZX1weDtgO1xuICAgICAgICBzdHlsZSArPSBgaGVpZ2h0OiAke3RoaXMuc2l6ZX1weDtgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgdHlwZUNsYXNzRnJvbVR5cGUgKCkge1xuICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0aGlzLklDT05TX1RZUEVTLmZpbGxlZDogcmV0dXJuICdmLWZpbGxlZCc7XG4gICAgICAgIGNhc2UgdGhpcy5JQ09OU19UWVBFUy5vdXRsaW5lZDogcmV0dXJuICdmLW91dGxpbmVkJztcbiAgICAgICAgY2FzZSB0aGlzLklDT05TX1RZUEVTLnJvdW5kOiByZXR1cm4gJ2Ytcm91bmQnO1xuICAgICAgICBjYXNlIHRoaXMuSUNPTlNfVFlQRVMuc2hhcnA6IHJldHVybiAnZi1zaGFycCc7XG4gICAgICAgIGNhc2UgdGhpcy5JQ09OU19UWVBFU1sndHdvLXRvbmUnXTogcmV0dXJuICdmLXR3by10b25lJztcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHlwZUNsYXNzRnJvbVBhcmFtcyAoKSB7XG4gICAgICBpZiAodGhpcy5maWxsZWQpIHJldHVybiAnZi1maWxsZWQnO1xuICAgICAgaWYgKHRoaXMub3V0bGluZWQpIHJldHVybiAnZi1vdXRsaW5lZCc7XG4gICAgICBpZiAodGhpcy5yb3VuZCkgcmV0dXJuICdmLXJvdW5kJztcbiAgICAgIGlmICh0aGlzLnNoYXJwKSByZXR1cm4gJ2Ytc2hhcnAnO1xuICAgICAgaWYgKHRoaXMudHdvVG9uZSkgcmV0dXJuICdmLXR3by10b25lJztcbiAgICAgIGVsc2UgcmV0dXJuICcnO1xuICAgIH0sXG4gICAgY2xhc3NlcyAoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnR5cGVDbGFzc0Zyb21UeXBlLFxuICAgICAgICB0aGlzLnR5cGVDbGFzc0Zyb21QYXJhbXMsXG4gICAgICBdO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCJmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQodGVtcGxhdGUsIHN0eWxlLCBzY3JpcHQsIHNjb3BlSWQsIGlzRnVuY3Rpb25hbFRlbXBsYXRlLCBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovLCBzaGFkb3dNb2RlLCBjcmVhdGVJbmplY3RvciwgY3JlYXRlSW5qZWN0b3JTU1IsIGNyZWF0ZUluamVjdG9yU2hhZG93KSB7XHJcbiAgICBpZiAodHlwZW9mIHNoYWRvd01vZGUgIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIGNyZWF0ZUluamVjdG9yU1NSID0gY3JlYXRlSW5qZWN0b3I7XHJcbiAgICAgICAgY3JlYXRlSW5qZWN0b3IgPSBzaGFkb3dNb2RlO1xyXG4gICAgICAgIHNoYWRvd01vZGUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3AuXHJcbiAgICBjb25zdCBvcHRpb25zID0gdHlwZW9mIHNjcmlwdCA9PT0gJ2Z1bmN0aW9uJyA/IHNjcmlwdC5vcHRpb25zIDogc2NyaXB0O1xyXG4gICAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xyXG4gICAgaWYgKHRlbXBsYXRlICYmIHRlbXBsYXRlLnJlbmRlcikge1xyXG4gICAgICAgIG9wdGlvbnMucmVuZGVyID0gdGVtcGxhdGUucmVuZGVyO1xyXG4gICAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gdGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xyXG4gICAgICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25hbFRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc2NvcGVkSWRcclxuICAgIGlmIChzY29wZUlkKSB7XHJcbiAgICAgICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgaG9vaztcclxuICAgIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgLy8gc2VydmVyIGJ1aWxkXHJcbiAgICAgICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIC8vIDIuMyBpbmplY3Rpb25cclxuICAgICAgICAgICAgY29udGV4dCA9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCk7IC8vIGZ1bmN0aW9uYWxcclxuICAgICAgICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXHJcbiAgICAgICAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXHJcbiAgICAgICAgICAgIGlmIChzdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNTUihjb250ZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcmVuY2VcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcclxuICAgICAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxyXG4gICAgICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9vaztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHN0eWxlKSB7XHJcbiAgICAgICAgaG9vayA9IHNoYWRvd01vZGVcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNoYWRvdyhjb250ZXh0LCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZS5jYWxsKHRoaXMsIGNyZWF0ZUluamVjdG9yKGNvbnRleHQpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmIChob29rKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xyXG4gICAgICAgICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcclxuICAgICAgICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZTtcclxuICAgICAgICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaykgOiBbaG9va107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjcmlwdDtcclxufVxuXG5leHBvcnQgZGVmYXVsdCBub3JtYWxpemVDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtY29tcG9uZW50Lm1qcy5tYXBcbiIsImltcG9ydCBBSWNvbiBmcm9tICdjb21wb25lbnRzL2ljb24udnVlJztcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHMgPSB7XG4gIEFJY29uLFxufTtcbiIsImltcG9ydCB7IEljb25Db21wdXRlZCB9IGZyb20gJ3V0aWxzL0ljb25Db21wdXRlZCc7XG5pbXBvcnQgeyBjb21wb25lbnRzIH0gZnJvbSAndXRpbHMvY29tcG9uZW50cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsIChWdWUsIG9wdGlvbnMpIHtcbiAgSWNvbkNvbXB1dGVkLmluc3RhbGwoVnVlLCBvcHRpb25zKTtcbiAgZm9yIChjb25zdCBjb21wb25lbnROYW1lIGluIGNvbXBvbmVudHMpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzW2NvbXBvbmVudE5hbWVdO1xuICAgIFZ1ZS5jb21wb25lbnQoY29tcG9uZW50Lm5hbWUsIGNvbXBvbmVudCk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMi4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyO1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKCFyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIpIHtcblx0XHR2YXIgT2xkQ29va2llcyA9IHdpbmRvdy5Db29raWVzO1xuXHRcdHZhciBhcGkgPSB3aW5kb3cuQ29va2llcyA9IGZhY3RvcnkoKTtcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5Db29raWVzID0gT2xkQ29va2llcztcblx0XHRcdHJldHVybiBhcGk7XG5cdFx0fTtcblx0fVxufShmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlIChzKSB7XG5cdFx0cmV0dXJuIHMucmVwbGFjZSgvKCVbMC05QS1aXXsyfSkrL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkoKSB7fVxuXG5cdFx0ZnVuY3Rpb24gc2V0IChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGF0dHJpYnV0ZXMgPSBleHRlbmQoe1xuXHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdH0sIGFwaS5kZWZhdWx0cywgYXR0cmlidXRlcyk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXR0cmlidXRlcy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpICogMSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlJ3JlIHVzaW5nIFwiZXhwaXJlc1wiIGJlY2F1c2UgXCJtYXgtYWdlXCIgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gYXR0cmlidXRlcy5leHBpcmVzID8gYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdFx0aWYgKC9eW1xce1xcW10vLnRlc3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXG5cdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSA/XG5cdFx0XHRcdGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KSA6XG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDNBfDNDfDNFfDNEfDJGfDNGfDQwfDVCfDVEfDVFfDYwfDdCfDdEfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpXG5cdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpXG5cdFx0XHRcdC5yZXBsYWNlKC9bXFwoXFwpXS9nLCBlc2NhcGUpO1xuXG5cdFx0XHR2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG5cdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXHRcdFx0XHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29uc2lkZXJzIFJGQyA2MjY1IHNlY3Rpb24gNS4yOlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0Ly8gMy4gIElmIHRoZSByZW1haW5pbmcgdW5wYXJzZWQtYXR0cmlidXRlcyBjb250YWlucyBhICV4M0IgKFwiO1wiKVxuXHRcdFx0XHQvLyAgICAgY2hhcmFjdGVyOlxuXHRcdFx0XHQvLyBDb25zdW1lIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHVwIHRvLFxuXHRcdFx0XHQvLyBub3QgaW5jbHVkaW5nLCB0aGUgZmlyc3QgJXgzQiAoXCI7XCIpIGNoYXJhY3Rlci5cblx0XHRcdFx0Ly8gLi4uXG5cdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnNwbGl0KCc7JylbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgdmFsdWUgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldCAoa2V5LCBqc29uKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBqYXIgPSB7fTtcblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLlxuXHRcdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuXHRcdFx0XHRpZiAoIWpzb24gJiYgY29va2llLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzWzBdKTtcblx0XHRcdFx0XHRjb29raWUgPSAoY29udmVydGVyLnJlYWQgfHwgY29udmVydGVyKShjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRkZWNvZGUoY29va2llKTtcblxuXHRcdFx0XHRcdGlmIChqc29uKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb29raWUgPSBKU09OLnBhcnNlKGNvb2tpZSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGphcltuYW1lXSA9IGNvb2tpZTtcblxuXHRcdFx0XHRcdGlmIChrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGtleSA/IGphcltrZXldIDogamFyO1xuXHRcdH1cblxuXHRcdGFwaS5zZXQgPSBzZXQ7XG5cdFx0YXBpLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCBmYWxzZSAvKiByZWFkIGFzIHJhdyAqLyk7XG5cdFx0fTtcblx0XHRhcGkuZ2V0SlNPTiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCB0cnVlIC8qIHJlYWQgYXMganNvbiAqLyk7XG5cdFx0fTtcblx0XHRhcGkucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgYXR0cmlidXRlcykge1xuXHRcdFx0c2V0KGtleSwgJycsIGV4dGVuZChhdHRyaWJ1dGVzLCB7XG5cdFx0XHRcdGV4cGlyZXM6IC0xXG5cdFx0XHR9KSk7XG5cdFx0fTtcblxuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLndpdGhDb252ZXJ0ZXIgPSBpbml0O1xuXG5cdFx0cmV0dXJuIGFwaTtcblx0fVxuXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcbn0pKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiLyoqXG4gICogdmVlLXZhbGlkYXRlIHYzLjQuNVxuICAqIChjKSAyMDIwIEFiZGVscmFobWFuIEF3YWRcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbi8qKlxyXG4gKiBTb21lIEFscGhhIFJlZ2V4IGhlbHBlcnMuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc28vdmFsaWRhdG9yLmpzL2Jsb2IvbWFzdGVyL3NyYy9saWIvYWxwaGEuanNcclxuICovXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLW1pc2xlYWRpbmctY2hhcmFjdGVyLWNsYXNzICovXHJcbnZhciBhbHBoYSA9IHtcclxuICAgIGVuOiAvXltBLVpdKiQvaSxcclxuICAgIGNzOiAvXltBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1dKiQvaSxcclxuICAgIGRhOiAvXltBLVrDhsOYw4VdKiQvaSxcclxuICAgIGRlOiAvXltBLVrDhMOWw5zDn10qJC9pLFxyXG4gICAgZXM6IC9eW0EtWsOBw4nDjcORw5PDmsOcXSokL2ksXHJcbiAgICBmYTogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmw2b7amNqv2obaqduMXSokLyxcclxuICAgIGZyOiAvXltBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuF0qJC9pLFxyXG4gICAgaXQ6IC9eW0EtWlxceEMwLVxceEZGXSokL2ksXHJcbiAgICBsdDogL15bQS1axITEjMSYxJbErsWgxbLFqsW9XSokL2ksXHJcbiAgICBubDogL15bQS1aw4nDi8OPw5PDlsOcXSokL2ksXHJcbiAgICBodTogL15bQS1aw4HDicONw5PDlsWQw5rDnMWwXSokL2ksXHJcbiAgICBwbDogL15bQS1axITEhsSYxZrFgcWDw5PFu8W5XSokL2ksXHJcbiAgICBwdDogL15bQS1aw4PDgcOAw4LDh8OJw4rDjcOVw5PDlMOaw5xdKiQvaSxcclxuICAgIHJvOiAvXltBLVrEgsOCw47FnsWiXSokL2ksXHJcbiAgICBydTogL15b0JAt0K/QgV0qJC9pLFxyXG4gICAgc2s6IC9eW0EtWsOBw4TEjMSOw4nDjcS5xL3Fh8OTxZTFoMWkw5rDncW9XSokL2ksXHJcbiAgICBzcjogL15bQS1axIzEhsW9xaDEkF0qJC9pLFxyXG4gICAgc3Y6IC9eW0EtWsOFw4TDll0qJC9pLFxyXG4gICAgdHI6IC9eW0EtWsOHxJ7EsMSxw5bFnsOcXSokL2ksXHJcbiAgICB1azogL15b0JAt0KnQrNCu0K/QhNCG0IfSkF0qJC9pLFxyXG4gICAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0qJC8sXHJcbiAgICBhejogL15bQS1aw4fGj8SexLDEscOWxZ7DnF0qJC9pLFxyXG4gICAgZWw6IC9eW86RLc+OXSokL2lcclxufTtcclxudmFyIGFscGhhU3BhY2VzID0ge1xyXG4gICAgZW46IC9eW0EtWlxcc10qJC9pLFxyXG4gICAgY3M6IC9eW0EtWsOBxIzEjsOJxJrDjcWHw5PFmMWgxaTDmsWuw53FvVxcc10qJC9pLFxyXG4gICAgZGE6IC9eW0EtWsOGw5jDhVxcc10qJC9pLFxyXG4gICAgZGU6IC9eW0EtWsOEw5bDnMOfXFxzXSokL2ksXHJcbiAgICBlczogL15bQS1aw4HDicONw5HDk8Oaw5xcXHNdKiQvaSxcclxuICAgIGZhOiAvXlvYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti32LjYudi62YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS2bDZvtqY2q/ahtqp24xdKiQvLFxyXG4gICAgZnI6IC9eW0EtWsOAw4LDhsOHw4nDiMOKw4vDj8OOw5TFksOZw5vDnMW4XFxzXSokL2ksXHJcbiAgICBpdDogL15bQS1aXFx4QzAtXFx4RkZcXHNdKiQvaSxcclxuICAgIGx0OiAvXltBLVrEhMSMxJjElsSuxaDFssWqxb1cXHNdKiQvaSxcclxuICAgIG5sOiAvXltBLVrDicOLw4/Dk8OWw5xcXHNdKiQvaSxcclxuICAgIGh1OiAvXltBLVrDgcOJw43Dk8OWxZDDmsOcxbBcXHNdKiQvaSxcclxuICAgIHBsOiAvXltBLVrEhMSGxJjFmsWBxYPDk8W7xblcXHNdKiQvaSxcclxuICAgIHB0OiAvXltBLVrDg8OBw4DDgsOHw4nDisONw5XDk8OUw5rDnFxcc10qJC9pLFxyXG4gICAgcm86IC9eW0EtWsSCw4LDjsWexaJcXHNdKiQvaSxcclxuICAgIHJ1OiAvXlvQkC3Qr9CBXFxzXSokL2ksXHJcbiAgICBzazogL15bQS1aw4HDhMSMxI7DicONxLnEvcWHw5PFlMWgxaTDmsOdxb1cXHNdKiQvaSxcclxuICAgIHNyOiAvXltBLVrEjMSGxb3FoMSQXFxzXSokL2ksXHJcbiAgICBzdjogL15bQS1aw4XDhMOWXFxzXSokL2ksXHJcbiAgICB0cjogL15bQS1aw4fEnsSwxLHDlsWew5xcXHNdKiQvaSxcclxuICAgIHVrOiAvXlvQkC3QqdCs0K7Qr9CE0IbQh9KQXFxzXSokL2ksXHJcbiAgICBhcjogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmwXFxzXSokLyxcclxuICAgIGF6OiAvXltBLVrDh8aPxJ7EsMSxw5bFnsOcXFxzXSokL2ksXHJcbiAgICBlbDogL15bzpEtz45cXHNdKiQvaVxyXG59O1xyXG52YXIgYWxwaGFudW1lcmljID0ge1xyXG4gICAgZW46IC9eWzAtOUEtWl0qJC9pLFxyXG4gICAgY3M6IC9eWzAtOUEtWsOBxIzEjsOJxJrDjcWHw5PFmMWgxaTDmsWuw53FvV0qJC9pLFxyXG4gICAgZGE6IC9eWzAtOUEtWsOGw5jDhV0kL2ksXHJcbiAgICBkZTogL15bMC05QS1aw4TDlsOcw59dKiQvaSxcclxuICAgIGVzOiAvXlswLTlBLVrDgcOJw43DkcOTw5rDnF0qJC9pLFxyXG4gICAgZmE6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsNm+2pjar9qG2qnbjF0qJC8sXHJcbiAgICBmcjogL15bMC05QS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhdKiQvaSxcclxuICAgIGl0OiAvXlswLTlBLVpcXHhDMC1cXHhGRl0qJC9pLFxyXG4gICAgbHQ6IC9eWzAtOUEtWsSExIzEmMSWxK7FoMWyxarFvV0qJC9pLFxyXG4gICAgaHU6IC9eWzAtOUEtWsOBw4nDjcOTw5bFkMOaw5zFsF0qJC9pLFxyXG4gICAgbmw6IC9eWzAtOUEtWsOJw4vDj8OTw5bDnF0qJC9pLFxyXG4gICAgcGw6IC9eWzAtOUEtWsSExIbEmMWaxYHFg8OTxbvFuV0qJC9pLFxyXG4gICAgcHQ6IC9eWzAtOUEtWsODw4HDgMOCw4fDicOKw43DlcOTw5TDmsOcXSokL2ksXHJcbiAgICBybzogL15bMC05QS1axILDgsOOxZ7Fol0qJC9pLFxyXG4gICAgcnU6IC9eWzAtOdCQLdCv0IFdKiQvaSxcclxuICAgIHNrOiAvXlswLTlBLVrDgcOExIzEjsOJw43EucS9xYfDk8WUxaDFpMOaw53FvV0qJC9pLFxyXG4gICAgc3I6IC9eWzAtOUEtWsSMxIbFvcWgxJBdKiQvaSxcclxuICAgIHN2OiAvXlswLTlBLVrDhcOEw5ZdKiQvaSxcclxuICAgIHRyOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF0qJC9pLFxyXG4gICAgdWs6IC9eWzAtOdCQLdCp0KzQrtCv0ITQhtCH0pBdKiQvaSxcclxuICAgIGFyOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0qJC8sXHJcbiAgICBhejogL15bMC05QS1aw4fGj8SexLDEscOWxZ7DnF0qJC9pLFxyXG4gICAgZWw6IC9eWzAtOc6RLc+OXSokL2lcclxufTtcclxudmFyIGFscGhhRGFzaCA9IHtcclxuICAgIGVuOiAvXlswLTlBLVpfLV0qJC9pLFxyXG4gICAgY3M6IC9eWzAtOUEtWsOBxIzEjsOJxJrDjcWHw5PFmMWgxaTDmsWuw53FvV8tXSokL2ksXHJcbiAgICBkYTogL15bMC05QS1aw4bDmMOFXy1dKiQvaSxcclxuICAgIGRlOiAvXlswLTlBLVrDhMOWw5zDn18tXSokL2ksXHJcbiAgICBlczogL15bMC05QS1aw4HDicONw5HDk8Oaw5xfLV0qJC9pLFxyXG4gICAgZmE6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsNm+2pjar9qG2qnbjF0qJC8sXHJcbiAgICBmcjogL15bMC05QS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhfLV0qJC9pLFxyXG4gICAgaXQ6IC9eWzAtOUEtWlxceEMwLVxceEZGXy1dKiQvaSxcclxuICAgIGx0OiAvXlswLTlBLVrEhMSMxJjElsSuxaDFssWqxb1fLV0qJC9pLFxyXG4gICAgbmw6IC9eWzAtOUEtWsOJw4vDj8OTw5bDnF8tXSokL2ksXHJcbiAgICBodTogL15bMC05QS1aw4HDicONw5PDlsWQw5rDnMWwXy1dKiQvaSxcclxuICAgIHBsOiAvXlswLTlBLVrEhMSGxJjFmsWBxYPDk8W7xblfLV0qJC9pLFxyXG4gICAgcHQ6IC9eWzAtOUEtWsODw4HDgMOCw4fDicOKw43DlcOTw5TDmsOcXy1dKiQvaSxcclxuICAgIHJvOiAvXlswLTlBLVrEgsOCw47FnsWiXy1dKiQvaSxcclxuICAgIHJ1OiAvXlswLTnQkC3Qr9CBXy1dKiQvaSxcclxuICAgIHNrOiAvXlswLTlBLVrDgcOExIzEjsOJw43EucS9xYfDk8WUxaDFpMOaw53FvV8tXSokL2ksXHJcbiAgICBzcjogL15bMC05QS1axIzEhsW9xaDEkF8tXSokL2ksXHJcbiAgICBzdjogL15bMC05QS1aw4XDhMOWXy1dKiQvaSxcclxuICAgIHRyOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF8tXSokL2ksXHJcbiAgICB1azogL15bMC050JAt0KnQrNCu0K/QhNCG0IfSkF8tXSokL2ksXHJcbiAgICBhcjogL15b2aDZodmi2aPZpNml2abZp9mo2akwLTnYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti32LjYudi62YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS2bBfLV0qJC8sXHJcbiAgICBhejogL15bMC05QS1aw4fGj8SexLDEscOWxZ7DnF8tXSokL2ksXHJcbiAgICBlbDogL15bMC05zpEtz45fLV0qJC9pXHJcbn07XG5cbnZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubG9jYWxlLCBsb2NhbGUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSh2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhKS5zb21lKGZ1bmN0aW9uIChsb2MpIHsgcmV0dXJuIGFscGhhW2xvY10udGVzdCh2YWx1ZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhbHBoYVtsb2NhbGVdIHx8IGFscGhhLmVuKS50ZXN0KHZhbHVlKTtcclxufTtcclxudmFyIHBhcmFtcyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGEkMSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcclxuICAgIHBhcmFtczogcGFyYW1zXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQxID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDEodmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYURhc2gpLnNvbWUoZnVuY3Rpb24gKGxvYykgeyByZXR1cm4gYWxwaGFEYXNoW2xvY10udGVzdCh2YWx1ZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhbHBoYURhc2hbbG9jYWxlXSB8fCBhbHBoYURhc2guZW4pLnRlc3QodmFsdWUpO1xyXG59O1xyXG52YXIgcGFyYW1zJDEgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xvY2FsZSdcclxuICAgIH1cclxuXTtcclxudmFyIGFscGhhX2Rhc2ggPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkMSxcclxuICAgIHBhcmFtczogcGFyYW1zJDFcclxufTtcblxudmFyIHZhbGlkYXRlJDIgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmxvY2FsZSwgbG9jYWxlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkMih2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhbnVtZXJpYykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYW51bWVyaWNbbG9jXS50ZXN0KHZhbHVlKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGFscGhhbnVtZXJpY1tsb2NhbGVdIHx8IGFscGhhbnVtZXJpYy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkMiA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfbnVtID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDIsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQyXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQzID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDModmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYVNwYWNlcykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYVNwYWNlc1tsb2NdLnRlc3QodmFsdWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYWxwaGFTcGFjZXNbbG9jYWxlXSB8fCBhbHBoYVNwYWNlcy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkMyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfc3BhY2VzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDMsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQzXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQ0ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIG1pbiA9IF9iLm1pbiwgbWF4ID0gX2IubWF4O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuICEhdmFsaWRhdGUkNCh2YWwsIHsgbWluOiBtaW4sIG1heDogbWF4IH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBOdW1iZXIobWluKSA8PSB2YWx1ZSAmJiBOdW1iZXIobWF4KSA+PSB2YWx1ZTtcclxufTtcclxudmFyIHBhcmFtcyQ0ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtaW4nXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtYXgnXHJcbiAgICB9XHJcbl07XHJcbnZhciBiZXR3ZWVuID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDQsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ0XHJcbn07XG5cbnZhciB2YWxpZGF0ZSQ1ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpID09PSBTdHJpbmcodGFyZ2V0KTtcclxufTtcclxudmFyIHBhcmFtcyQ1ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICd0YXJnZXQnLFxyXG4gICAgICAgIGlzVGFyZ2V0OiB0cnVlXHJcbiAgICB9XHJcbl07XHJcbnZhciBjb25maXJtZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNSxcclxuICAgIHBhcmFtczogcGFyYW1zJDVcclxufTtcblxudmFyIHZhbGlkYXRlJDYgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gX2EubGVuZ3RoO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDYodmFsLCB7IGxlbmd0aDogbGVuZ3RoIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHZhciBzdHJWYWwgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgcmV0dXJuIC9eWzAtOV0qJC8udGVzdChzdHJWYWwpICYmIHN0clZhbC5sZW5ndGggPT09IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyQ2ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBkaWdpdHMgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNixcclxuICAgIHBhcmFtczogcGFyYW1zJDZcclxufTtcblxudmFyIHZhbGlkYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZmlsZSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGZhbHNlKTsgfTtcclxuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGltYWdlLndpZHRoID09PSB3aWR0aCAmJiBpbWFnZS5oZWlnaHQgPT09IGhlaWdodCk7IH07XHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgdmFsaWRhdGUkNyA9IGZ1bmN0aW9uIChmaWxlcywgX2EpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgZmlsZXMgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZpbGVzIDogW2ZpbGVzXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBpZiBmaWxlIGlzIG5vdCBhbiBpbWFnZSwgcmVqZWN0LlxyXG4gICAgICAgIGlmICghL1xcLihqcGd8c3ZnfGpwZWd8cG5nfGJtcHxnaWYpJC9pLnRlc3QoZmlsZXNbaV0ubmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QucHVzaChmaWxlc1tpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHZhbGlkYXRlSW1hZ2UoZmlsZSwgd2lkdGgsIGhlaWdodCk7IH0pKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9KTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgcGFyYW1zJDcgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3dpZHRoJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaGVpZ2h0JyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZGltZW5zaW9ucyA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSQ3LFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkN1xyXG59O1xuXG52YXIgdmFsaWRhdGUkOCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBtdWx0aXBsZSA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubXVsdGlwbGU7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICBpZiAobXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXHJcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGVtYWlsU3RyKSB7IHJldHVybiBlbWFpbFN0ci50cmltKCk7IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlLnRlc3QoU3RyaW5nKHZhbCkpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZS50ZXN0KFN0cmluZyh2YWx1ZSkpO1xyXG59O1xyXG52YXIgcGFyYW1zJDggPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ211bHRpcGxlJyxcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZW1haWwgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkOCxcclxuICAgIHBhcmFtczogcGFyYW1zJDhcclxufTtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHlBcnJheShhcnIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmxlbmd0aCA9PT0gMDtcclxufVxyXG5mdW5jdGlvbiBpc0NhbGxhYmxlKGZuKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xyXG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIGl0ZW0pIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhcnJheSwgcHJvdmlkZXMgYSBzaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkoYXJyYXlMaWtlKSB7XHJcbiAgICBpZiAoaXNDYWxsYWJsZShBcnJheS5mcm9tKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5TGlrZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIF9jb3B5QXJyYXkoYXJyYXlMaWtlKTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBfY29weUFycmF5KGFycmF5TGlrZSkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cblxudmFyIHZhbGlkYXRlJDkgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSQ5KHZhbCwgb3B0aW9ucyk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvQXJyYXkob3B0aW9ucykuc29tZShmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgIHJldHVybiBpdGVtID09IHZhbHVlO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBvbmVPZiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSQ5XHJcbn07XG5cbnZhciB2YWxpZGF0ZSRhID0gZnVuY3Rpb24gKHZhbHVlLCBhcmdzKSB7XHJcbiAgICByZXR1cm4gIXZhbGlkYXRlJDkodmFsdWUsIGFyZ3MpO1xyXG59O1xyXG52YXIgZXhjbHVkZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkYVxyXG59O1xuXG52YXIgdmFsaWRhdGUkYiA9IGZ1bmN0aW9uIChmaWxlcywgZXh0ZW5zaW9ucykge1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIi4oXCIgKyBleHRlbnNpb25zLmpvaW4oJ3wnKSArIFwiKSRcIiwgJ2knKTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVzKSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5ldmVyeShmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gcmVnZXgudGVzdChmaWxlLm5hbWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZWdleC50ZXN0KGZpbGVzLm5hbWUpO1xyXG59O1xyXG52YXIgZXh0ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGJcclxufTtcblxudmFyIHZhbGlkYXRlJGMgPSBmdW5jdGlvbiAoZmlsZXMpIHtcclxuICAgIHZhciByZWdleCA9IC9cXC4oanBnfHN2Z3xqcGVnfHBuZ3xibXB8Z2lmfHdlYnApJC9pO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiByZWdleC50ZXN0KGZpbGUubmFtZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZXMubmFtZSk7XHJcbn07XHJcbnZhciBpbWFnZSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRjXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gL14tP1swLTldKyQvLnRlc3QoU3RyaW5nKHZhbCkpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAvXi0/WzAtOV0rJC8udGVzdChTdHJpbmcodmFsdWUpKTtcclxufTtcclxudmFyIGludGVnZXIgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkZFxyXG59O1xuXG52YXIgdmFsaWRhdGUkZSA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBvdGhlciA9IF9hLm90aGVyO1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBvdGhlcjtcclxufTtcclxudmFyIHBhcmFtcyQ5ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdvdGhlcidcclxuICAgIH1cclxuXTtcclxudmFyIGlzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGUsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ5XHJcbn07XG5cbnZhciB2YWxpZGF0ZSRmID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIG90aGVyID0gX2Eub3RoZXI7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IG90aGVyO1xyXG59O1xyXG52YXIgcGFyYW1zJGEgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ290aGVyJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgaXNfbm90ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGYsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRhXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRnID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGxlbmd0aCA9IF9hLmxlbmd0aDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhbHVlID0gdG9BcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmICghdmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPT09IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyRiID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gTnVtYmVyKHZhbHVlKTsgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbGVuZ3RoID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGcsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRiXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRoID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGxlbmd0aCA9IF9hLmxlbmd0aDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gbGVuZ3RoID49IDA7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkaCh2YWwsIHsgbGVuZ3RoOiBsZW5ndGggfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkubGVuZ3RoIDw9IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyRjID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBtYXggPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkaCxcclxuICAgIHBhcmFtczogcGFyYW1zJGNcclxufTtcblxudmFyIHZhbGlkYXRlJGkgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbWF4ID0gX2EubWF4O1xyXG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gMCAmJiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSRpKHZhbCwgeyBtYXg6IG1heCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSA8PSBtYXg7XHJcbn07XHJcbnZhciBwYXJhbXMkZCA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbWF4JyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbWF4X3ZhbHVlID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGksXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRkXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRqID0gZnVuY3Rpb24gKGZpbGVzLCBtaW1lcykge1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChtaW1lcy5qb2luKCd8JykucmVwbGFjZSgnKicsICcuKycpICsgXCIkXCIsICdpJyk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWxlcykpIHtcclxuICAgICAgICByZXR1cm4gZmlsZXMuZXZlcnkoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZS50eXBlKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVnZXgudGVzdChmaWxlcy50eXBlKTtcclxufTtcclxudmFyIG1pbWVzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGpcclxufTtcblxudmFyIHZhbGlkYXRlJGsgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gX2EubGVuZ3RoO1xyXG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSRrKHZhbCwgeyBsZW5ndGg6IGxlbmd0aCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKS5sZW5ndGggPj0gbGVuZ3RoO1xyXG59O1xyXG52YXIgcGFyYW1zJGUgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xlbmd0aCcsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIG1pbiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRrLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkZVxyXG59O1xuXG52YXIgdmFsaWRhdGUkbCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBtaW4gPSBfYS5taW47XHJcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAwICYmIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJGwodmFsLCB7IG1pbjogbWluIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBOdW1iZXIodmFsdWUpID49IG1pbjtcclxufTtcclxudmFyIHBhcmFtcyRmID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtaW4nLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBtaW5fdmFsdWUgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkbCxcclxuICAgIHBhcmFtczogcGFyYW1zJGZcclxufTtcblxudmFyIGFyID0gL15b2aDZodmi2aPZpNml2abZp9mo2aldKyQvO1xyXG52YXIgZW4gPSAvXlswLTldKyQvO1xyXG52YXIgdmFsaWRhdGUkbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgdmFyIHRlc3RWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICB2YXIgc3RyVmFsdWUgPSBTdHJpbmcodmFsKTtcclxuICAgICAgICByZXR1cm4gZW4udGVzdChzdHJWYWx1ZSkgfHwgYXIudGVzdChzdHJWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KHRlc3RWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGVzdFZhbHVlKHZhbHVlKTtcclxufTtcclxudmFyIG51bWVyaWMgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkbVxyXG59O1xuXG52YXIgdmFsaWRhdGUkbiA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciByZWdleCA9IF9hLnJlZ2V4O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJG4odmFsLCB7IHJlZ2V4OiByZWdleCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVnZXgudGVzdChTdHJpbmcodmFsdWUpKTtcclxufTtcclxudmFyIHBhcmFtcyRnID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdyZWdleCcsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIHJlZ2V4ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJG4sXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRnXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRvID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGFsbG93RmFsc2UgPSAoX2EgPT09IHZvaWQgMCA/IHsgYWxsb3dGYWxzZTogdHJ1ZSB9IDogX2EpLmFsbG93RmFsc2U7XHJcbiAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gICAgfTtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgaXNFbXB0eUFycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvLyBpbmNhc2UgYSBmaWVsZCBjb25zaWRlcnMgYGZhbHNlYCBhcyBhbiBlbXB0eSB2YWx1ZSBsaWtlIGNoZWNrYm94ZXMuXHJcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlICYmICFhbGxvd0ZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJlc3VsdC52YWxpZCA9ICEhU3RyaW5nKHZhbHVlKS50cmltKCkubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxudmFyIGNvbXB1dGVzUmVxdWlyZWQgPSB0cnVlO1xyXG52YXIgcGFyYW1zJGggPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2FsbG93RmFsc2UnLFxyXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH1cclxuXTtcclxudmFyIHJlcXVpcmVkID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJG8sXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRoLFxyXG4gICAgY29tcHV0ZXNSZXF1aXJlZDogY29tcHV0ZXNSZXF1aXJlZFxyXG59O1xuXG52YXIgdGVzdEVtcHR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNFbXB0eUFycmF5KHZhbHVlKSB8fCBpbmNsdWRlcyhbZmFsc2UsIG51bGwsIHVuZGVmaW5lZF0sIHZhbHVlKSB8fCAhU3RyaW5nKHZhbHVlKS50cmltKCkubGVuZ3RoO1xyXG59O1xyXG52YXIgdmFsaWRhdGUkcCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciB0YXJnZXQgPSBfYS50YXJnZXQsIHZhbHVlcyA9IF9hLnZhbHVlcztcclxuICAgIHZhciByZXF1aXJlZDtcclxuICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHR5cGVvZiB2YWx1ZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICByZXF1aXJlZCA9IHZhbHVlcy5zb21lKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbCA9PSBTdHJpbmcodGFyZ2V0KS50cmltKCk7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmVxdWlyZWQgPSAhdGVzdEVtcHR5KHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXJlcXVpcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiAhdGVzdEVtcHR5KHZhbHVlKSxcclxuICAgICAgICByZXF1aXJlZDogcmVxdWlyZWRcclxuICAgIH07XHJcbn07XHJcbnZhciBwYXJhbXMkaSA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAndGFyZ2V0JyxcclxuICAgICAgICBpc1RhcmdldDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAndmFsdWVzJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgY29tcHV0ZXNSZXF1aXJlZCQxID0gdHJ1ZTtcclxudmFyIHJlcXVpcmVkX2lmID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJHAsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRpLFxyXG4gICAgY29tcHV0ZXNSZXF1aXJlZDogY29tcHV0ZXNSZXF1aXJlZCQxXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRxID0gZnVuY3Rpb24gKGZpbGVzLCBfYSkge1xyXG4gICAgdmFyIHNpemUgPSBfYS5zaXplO1xyXG4gICAgaWYgKGlzTmFOKHNpemUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIG5TaXplID0gc2l6ZSAqIDEwMjQ7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLnNpemUgPD0gblNpemU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGZpbGVzW2ldLnNpemUgPiBuU2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbnZhciBwYXJhbXMkaiA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnc2l6ZScsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIHNpemUgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkcSxcclxuICAgIHBhcmFtczogcGFyYW1zJGpcclxufTtcblxudmFyIHZhbGlkYXRlJHIgPSBmdW5jdGlvbiAodmFsdWUsIHBhcmFtcykge1xyXG4gICAgdmFyIF9hID0gcGFyYW1zIHx8IHt9LCBfYiA9IF9hLmRlY2ltYWxzLCBkZWNpbWFscyA9IF9iID09PSB2b2lkIDAgPyAwIDogX2IsIF9jID0gX2Euc2VwYXJhdG9yLCBzZXBhcmF0b3IgPSBfYyA9PT0gdm9pZCAwID8gJ2RvdCcgOiBfYztcclxuICAgIHZhciBzZXBhcmF0b3JzID0ge1xyXG4gICAgICAgIGRvdDogJy4nLFxyXG4gICAgICAgIGNvbW1hOiAnLCdcclxuICAgIH07XHJcbiAgICB2YXIgcmVnZXhQYXJ0ID0gK2RlY2ltYWxzID09PSAwID8gJysnIDogXCJ7XCIgKyBkZWNpbWFscyArIFwifVwiO1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4tP1xcXFxkK1xcXFxcIiArIChzZXBhcmF0b3JzW3NlcGFyYXRvcl0gfHwgJy4nKSArIFwiXFxcXGRcIiArIHJlZ2V4UGFydCArIFwiJFwiKTtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlZ2V4LnRlc3QoU3RyaW5nKHZhbCkpOyB9KSA6IHJlZ2V4LnRlc3QoU3RyaW5nKHZhbHVlKSk7XHJcbn07XHJcbnZhciBwYXJhbXMkayA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnZGVjaW1hbHMnLFxyXG4gICAgICAgIGRlZmF1bHQ6IDBcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3NlcGFyYXRvcicsXHJcbiAgICAgICAgZGVmYXVsdDogJ2RvdCdcclxuICAgIH1cclxuXTtcclxudmFyIGRvdWJsZSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRyLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMka1xyXG59O1xuXG5leHBvcnQgeyBhbHBoYSQxIGFzIGFscGhhLCBhbHBoYV9kYXNoLCBhbHBoYV9udW0sIGFscGhhX3NwYWNlcywgYmV0d2VlbiwgY29uZmlybWVkLCBkaWdpdHMsIGRpbWVuc2lvbnMsIGRvdWJsZSwgZW1haWwsIGV4Y2x1ZGVkLCBleHQsIGltYWdlLCBpbnRlZ2VyLCBpcywgaXNfbm90LCBsZW5ndGgsIG1heCwgbWF4X3ZhbHVlLCBtaW1lcywgbWluLCBtaW5fdmFsdWUsIG51bWVyaWMsIG9uZU9mLCByZWdleCwgcmVxdWlyZWQsIHJlcXVpcmVkX2lmLCBzaXplIH07XG4iLCIvKipcbiAgKiB2ZWUtdmFsaWRhdGUgdjMuNC41XG4gICogKGMpIDIwMjAgQWJkZWxyYWhtYW4gQXdhZFxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbmZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XHJcbiAgICAvLyBOYU4gaXMgdGhlIG9uZSB2YWx1ZSB0aGF0IGRvZXMgbm90IGVxdWFsIGl0c2VsZi5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XHJcbn1cclxuZnVuY3Rpb24gaXNFbXB0eUFycmF5KGFycikge1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKSAmJiBhcnIubGVuZ3RoID09PSAwO1xyXG59XHJcbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XHJcbn07XHJcbi8qKlxyXG4gKiBBIHJlZmVyZW5jZSBjb21wYXJpc29uIGZ1bmN0aW9uIHdpdGggTmFOIHN1cHBvcnRcclxuICovXHJcbmZ1bmN0aW9uIGlzUmVmRXF1YWwobGhzLCByaHMpIHtcclxuICAgIGlmIChpc05hTihsaHMpICYmIGlzTmFOKHJocykpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaHMgPT09IHJocztcclxufVxyXG4vKipcclxuICogU2hhbGxvdyBvYmplY3QgY29tcGFyaXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGlzRXF1YWwobGhzLCByaHMpIHtcclxuICAgIGlmIChsaHMgaW5zdGFuY2VvZiBSZWdFeHAgJiYgcmhzIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzRXF1YWwobGhzLnNvdXJjZSwgcmhzLnNvdXJjZSkgJiYgaXNFcXVhbChsaHMuZmxhZ3MsIHJocy5mbGFncyk7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsaHMpICYmIEFycmF5LmlzQXJyYXkocmhzKSkge1xyXG4gICAgICAgIGlmIChsaHMubGVuZ3RoICE9PSByaHMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFpc0VxdWFsKGxoc1tpXSwgcmhzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgYm90aCBhcmUgb2JqZWN0cywgY29tcGFyZSBlYWNoIGtleSByZWN1cnNpdmVseS5cclxuICAgIGlmIChpc09iamVjdChsaHMpICYmIGlzT2JqZWN0KHJocykpIHtcclxuICAgICAgICByZXR1cm4gKE9iamVjdC5rZXlzKGxocykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNFcXVhbChsaHNba2V5XSwgcmhzW2tleV0pO1xyXG4gICAgICAgIH0pICYmXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJocykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRXF1YWwobGhzW2tleV0sIHJoc1trZXldKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzUmVmRXF1YWwobGhzLCByaHMpO1xyXG59XHJcbi8vIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIG5vdCBhbiBlbXB0eSBzdHJpbmcgb3IgbnVsbCBvciB1bmRlZmluZWQuXHJcbmZ1bmN0aW9uIGlzU3BlY2lmaWVkKHZhbCkge1xyXG4gICAgaWYgKHZhbCA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gIWlzTnVsbE9yVW5kZWZpbmVkKHZhbCk7XHJcbn1cclxuZnVuY3Rpb24gaXNDYWxsYWJsZShmbikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5mdW5jdGlvbiBpc0xvY2F0b3IodmFsdWUpIHtcclxuICAgIHJldHVybiBpc0NhbGxhYmxlKHZhbHVlKSAmJiAhIXZhbHVlLl9fbG9jYXRvclJlZjtcclxufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXlMaWtlLCBwcmVkaWNhdGUpIHtcclxuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoYXJyYXlMaWtlKSA/IGFycmF5TGlrZSA6IHRvQXJyYXkoYXJyYXlMaWtlKTtcclxuICAgIGlmIChpc0NhbGxhYmxlKGFycmF5LmZpbmRJbmRleCkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXkuZmluZEluZGV4KHByZWRpY2F0ZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaV0sIGkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuLyoqXHJcbiAqIGZpbmRzIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBwcmVkaWNhdGUgY2FsbGJhY2ssIHBvbHlmaWxscyBhcnJheS5maW5kXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kKGFycmF5TGlrZSwgcHJlZGljYXRlKSB7XHJcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KGFycmF5TGlrZSkgPyBhcnJheUxpa2UgOiB0b0FycmF5KGFycmF5TGlrZSk7XHJcbiAgICB2YXIgaWR4ID0gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpO1xyXG4gICAgcmV0dXJuIGlkeCA9PT0gLTEgPyB1bmRlZmluZWQgOiBhcnJheVtpZHhdO1xyXG59XHJcbmZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIGl0ZW0pIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhcnJheSwgcHJvdmlkZXMgYSBzaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkoYXJyYXlMaWtlKSB7XHJcbiAgICBpZiAoaXNDYWxsYWJsZShBcnJheS5mcm9tKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5TGlrZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIF9jb3B5QXJyYXkoYXJyYXlMaWtlKTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBfY29weUFycmF5KGFycmF5TGlrZSkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gdmFsdWVzKG9iaikge1xyXG4gICAgaWYgKGlzQ2FsbGFibGUoT2JqZWN0LnZhbHVlcykpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhvYmopO1xyXG4gICAgfVxyXG4gICAgLy8gZmFsbGJhY2sgdG8ga2V5cygpXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBvYmpba107IH0pO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlKSB7XHJcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmxhZ3MoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVudG91Y2hlZDogdHJ1ZSxcclxuICAgICAgICB0b3VjaGVkOiBmYWxzZSxcclxuICAgICAgICBkaXJ0eTogZmFsc2UsXHJcbiAgICAgICAgcHJpc3RpbmU6IHRydWUsXHJcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIGludmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIHZhbGlkYXRlZDogZmFsc2UsXHJcbiAgICAgICAgcGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNoYW5nZWQ6IGZhbHNlLFxyXG4gICAgICAgIHBhc3NlZDogZmFsc2UsXHJcbiAgICAgICAgZmFpbGVkOiBmYWxzZVxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XHJcbiAgICByZXR1cm4geDtcclxufVxyXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCwgdG9rZW4pIHtcclxuICAgIGlmICh3YWl0ID09PSB2b2lkIDApIHsgd2FpdCA9IDA7IH1cclxuICAgIGlmICh0b2tlbiA9PT0gdm9pZCAwKSB7IHRva2VuID0geyBjYW5jZWxsZWQ6IGZhbHNlIH07IH1cclxuICAgIGlmICh3YWl0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgfVxyXG4gICAgdmFyIHRpbWVvdXQ7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBmbiBjYWxsIHdhcyBjYW5jZWxsZWQuXHJcbiAgICAgICAgICAgIGlmICghdG9rZW4uY2FuY2VsbGVkKVxyXG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgbWlnaHQgd2FudCB0byB1c2UgTm9kZS5qcyBzZXRUaW1vdXQgZm9yIFNTUi5cclxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgfTtcclxufVxuXG4vKipcclxuICogRW1pdHMgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlXHJcbiAqL1xyXG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUud2FybihcIlt2ZWUtdmFsaWRhdGVdIFwiICsgbWVzc2FnZSk7XHJcbn1cclxuLyoqXHJcbiAqIFJlcGxhY2VzIHBsYWNlaG9sZGVyIHZhbHVlcyBpbiBhIHN0cmluZyB3aXRoIHRoZWlyIGFjdHVhbCB2YWx1ZXNcclxuICovXHJcbmZ1bmN0aW9uIGludGVycG9sYXRlKHRlbXBsYXRlLCB2YWx1ZXMpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC97KFtefV0rKX0vZywgZnVuY3Rpb24gKF8sIHApIHtcclxuICAgICAgICByZXR1cm4gcCBpbiB2YWx1ZXMgPyB2YWx1ZXNbcF0gOiBcIntcIiArIHAgKyBcIn1cIjtcclxuICAgIH0pO1xyXG59XG5cbnZhciBSVUxFUyA9IHt9O1xyXG5mdW5jdGlvbiBub3JtYWxpemVTY2hlbWEoc2NoZW1hKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoKF9hID0gc2NoZW1hLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkge1xyXG4gICAgICAgIHNjaGVtYS5wYXJhbXMgPSBzY2hlbWEucGFyYW1zLm1hcChmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IHBhcmFtIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjaGVtYTtcclxufVxyXG52YXIgUnVsZUNvbnRhaW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJ1bGVDb250YWluZXIoKSB7XHJcbiAgICB9XHJcbiAgICBSdWxlQ29udGFpbmVyLmV4dGVuZCA9IGZ1bmN0aW9uIChuYW1lLCBzY2hlbWEpIHtcclxuICAgICAgICAvLyBpZiBydWxlIGFscmVhZHkgZXhpc3RzLCBvdmVyd3JpdGUgaXQuXHJcbiAgICAgICAgdmFyIHJ1bGUgPSBub3JtYWxpemVTY2hlbWEoc2NoZW1hKTtcclxuICAgICAgICBpZiAoUlVMRVNbbmFtZV0pIHtcclxuICAgICAgICAgICAgUlVMRVNbbmFtZV0gPSBtZXJnZShSVUxFU1tuYW1lXSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSVUxFU1tuYW1lXSA9IF9fYXNzaWduKHsgbGF6eTogZmFsc2UsIGNvbXB1dGVzUmVxdWlyZWQ6IGZhbHNlIH0sIHJ1bGUpO1xyXG4gICAgfTtcclxuICAgIFJ1bGVDb250YWluZXIuaXNMYXp5ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IFJVTEVTW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF6eSk7XHJcbiAgICB9O1xyXG4gICAgUnVsZUNvbnRhaW5lci5pc1JlcXVpcmVSdWxlID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IFJVTEVTW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29tcHV0ZXNSZXF1aXJlZCk7XHJcbiAgICB9O1xyXG4gICAgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChydWxlTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBSVUxFU1tydWxlTmFtZV07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJ1bGVDb250YWluZXI7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBZGRzIGEgY3VzdG9tIHZhbGlkYXRvciB0byB0aGUgbGlzdCBvZiB2YWxpZGF0aW9uIHJ1bGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0ZW5kKG5hbWUsIHNjaGVtYSkge1xyXG4gICAgLy8gbWFrZXMgc3VyZSBuZXcgcnVsZXMgYXJlIHByb3Blcmx5IGZvcm1hdHRlZC5cclxuICAgIGd1YXJkRXh0ZW5kKG5hbWUsIHNjaGVtYSk7XHJcbiAgICAvLyBGdWxsIHNjaGVtYSBvYmplY3QuXHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBSdWxlQ29udGFpbmVyLmV4dGVuZChuYW1lLCBzY2hlbWEpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFJ1bGVDb250YWluZXIuZXh0ZW5kKG5hbWUsIHtcclxuICAgICAgICB2YWxpZGF0ZTogc2NoZW1hXHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogR3VhcmRzIGZyb20gZXh0ZW5zaW9uIHZpb2xhdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBndWFyZEV4dGVuZChuYW1lLCB2YWxpZGF0b3IpIHtcclxuICAgIGlmIChpc0NhbGxhYmxlKHZhbGlkYXRvcikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNDYWxsYWJsZSh2YWxpZGF0b3IudmFsaWRhdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKFJ1bGVDb250YWluZXIuZ2V0UnVsZURlZmluaXRpb24obmFtZSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHRlbnNpb24gRXJyb3I6IFRoZSB2YWxpZGF0b3IgJ1wiICsgbmFtZSArIFwiJyBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgaGF2ZSBhICd2YWxpZGF0ZScgbWV0aG9kLlwiKTtcclxufVxuXG52YXIgREVGQVVMVF9DT05GSUcgPSB7XHJcbiAgICBkZWZhdWx0TWVzc2FnZTogXCJ7X2ZpZWxkX30gaXMgbm90IHZhbGlkLlwiLFxyXG4gICAgc2tpcE9wdGlvbmFsOiB0cnVlLFxyXG4gICAgY2xhc3Nlczoge1xyXG4gICAgICAgIHRvdWNoZWQ6ICd0b3VjaGVkJyxcclxuICAgICAgICB1bnRvdWNoZWQ6ICd1bnRvdWNoZWQnLFxyXG4gICAgICAgIHZhbGlkOiAndmFsaWQnLFxyXG4gICAgICAgIGludmFsaWQ6ICdpbnZhbGlkJyxcclxuICAgICAgICBwcmlzdGluZTogJ3ByaXN0aW5lJyxcclxuICAgICAgICBkaXJ0eTogJ2RpcnR5JyAvLyBjb250cm9sIGhhcyBiZWVuIGludGVyYWN0ZWQgd2l0aFxyXG4gICAgfSxcclxuICAgIGJhaWxzOiB0cnVlLFxyXG4gICAgbW9kZTogJ2FnZ3Jlc3NpdmUnLFxyXG4gICAgdXNlQ29uc3RyYWludEF0dHJzOiB0cnVlXHJcbn07XHJcbnZhciBjdXJyZW50Q29uZmlnID0gX19hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHKTtcclxudmFyIGdldENvbmZpZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGN1cnJlbnRDb25maWc7IH07XHJcbnZhciBzZXRDb25maWcgPSBmdW5jdGlvbiAobmV3Q29uZikge1xyXG4gICAgY3VycmVudENvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjdXJyZW50Q29uZmlnKSwgbmV3Q29uZik7XHJcbn07XHJcbnZhciBjb25maWd1cmUgPSBmdW5jdGlvbiAoY2ZnKSB7XHJcbiAgICBzZXRDb25maWcoY2ZnKTtcclxufTtcblxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHJ1bGVzIGV4cHJlc3Npb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVSdWxlcyhydWxlcykge1xyXG4gICAgLy8gaWYgZmFsc3kgdmFsdWUgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cclxuICAgIHZhciBhY2MgPSB7fTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY2MsICdfJCRpc05vcm1hbGl6ZWQnLCB7XHJcbiAgICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG4gICAgaWYgKCFydWxlcykge1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9XHJcbiAgICAvLyBPYmplY3QgaXMgYWxyZWFkeSBub3JtYWxpemVkLCBza2lwLlxyXG4gICAgaWYgKGlzT2JqZWN0KHJ1bGVzKSAmJiBydWxlcy5fJCRpc05vcm1hbGl6ZWQpIHtcclxuICAgICAgICByZXR1cm4gcnVsZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYmplY3QocnVsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJ1bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnIpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAocnVsZXNbY3Vycl0gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocnVsZXNbY3Vycl0pKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBydWxlc1tjdXJyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc09iamVjdChydWxlc1tjdXJyXSkpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHJ1bGVzW2N1cnJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gW3J1bGVzW2N1cnJdXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocnVsZXNbY3Vycl0gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2W2N1cnJdID0gYnVpbGRQYXJhbXMoY3VyciwgcGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICB9LCBhY2MpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodHlwZW9mIHJ1bGVzICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHdhcm4oJ3J1bGVzIG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTtcclxuICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJ1bGVzLnNwbGl0KCd8JykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBydWxlKSB7XHJcbiAgICAgICAgdmFyIHBhcnNlZFJ1bGUgPSBwYXJzZVJ1bGUocnVsZSk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRSdWxlLm5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByZXZbcGFyc2VkUnVsZS5uYW1lXSA9IGJ1aWxkUGFyYW1zKHBhcnNlZFJ1bGUubmFtZSwgcGFyc2VkUnVsZS5wYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgfSwgYWNjKTtcclxufVxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyhydWxlTmFtZSwgcHJvdmlkZWQpIHtcclxuICAgIHZhciBydWxlU2NoZW1hID0gUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbihydWxlTmFtZSk7XHJcbiAgICBpZiAoIXJ1bGVTY2hlbWEpIHtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZWQ7XHJcbiAgICB9XHJcbiAgICB2YXIgcGFyYW1zID0ge307XHJcbiAgICBpZiAoIXJ1bGVTY2hlbWEucGFyYW1zICYmICFBcnJheS5pc0FycmF5KHByb3ZpZGVkKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGFuIG9iamVjdCBwYXJhbXMgdG8gYSBydWxlIHRoYXQgaGFzIG5vIGRlZmluZWQgc2NoZW1hLicpO1xyXG4gICAgfVxyXG4gICAgLy8gUnVsZSBwcm9iYWJseSB1c2VzIGFuIGFycmF5IGZvciB0aGVpciBhcmdzLCBrZWVwIGl0IGFzIGlzLlxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvdmlkZWQpICYmICFydWxlU2NoZW1hLnBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlZDtcclxuICAgIH1cclxuICAgIHZhciBkZWZpbmVkUGFyYW1zO1xyXG4gICAgLy8gY29sbGVjdCB0aGUgcGFyYW1zIHNjaGVtYS5cclxuICAgIGlmICghcnVsZVNjaGVtYS5wYXJhbXMgfHwgKHJ1bGVTY2hlbWEucGFyYW1zLmxlbmd0aCA8IHByb3ZpZGVkLmxlbmd0aCAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVkKSkpIHtcclxuICAgICAgICB2YXIgbGFzdERlZmluZWRQYXJhbV8xO1xyXG4gICAgICAgIC8vIGNvbGxlY3QgYW55IGFkZGl0aW9uYWwgcGFyYW1ldGVycyBpbiB0aGUgbGFzdCBpdGVtLlxyXG4gICAgICAgIGRlZmluZWRQYXJhbXMgPSBwcm92aWRlZC5tYXAoZnVuY3Rpb24gKF8sIGlkeCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbSA9IChfYSA9IHJ1bGVTY2hlbWEucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbaWR4XTtcclxuICAgICAgICAgICAgbGFzdERlZmluZWRQYXJhbV8xID0gcGFyYW0gfHwgbGFzdERlZmluZWRQYXJhbV8xO1xyXG4gICAgICAgICAgICBpZiAoIXBhcmFtKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbSA9IGxhc3REZWZpbmVkUGFyYW1fMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBkZWZpbmVkUGFyYW1zID0gcnVsZVNjaGVtYS5wYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvLyBNYXRjaCB0aGUgcHJvdmlkZWQgYXJyYXkgbGVuZ3RoIHdpdGggYSB0ZW1wb3Jhcnkgc2NoZW1hLlxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWZpbmVkUGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBkZWZpbmVkUGFyYW1zW2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnMuZGVmYXVsdDtcclxuICAgICAgICAvLyBpZiB0aGUgcHJvdmlkZWQgaXMgYW4gYXJyYXksIG1hcCBlbGVtZW50IHZhbHVlLlxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3ZpZGVkKSkge1xyXG4gICAgICAgICAgICBpZiAoaSBpbiBwcm92aWRlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm92aWRlZFtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHBhcmFtIGV4aXN0cyBpbiB0aGUgcHJvdmlkZWQgb2JqZWN0LlxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5uYW1lIGluIHByb3ZpZGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3ZpZGVkW29wdGlvbnMubmFtZV07XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJvdmlkZWQgaXMgdGhlIGZpcnN0IHBhcmFtIHZhbHVlLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZmluZWRQYXJhbXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3ZpZGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZSBwYXJhbSBpcyBhIHRhcmdldCwgcmVzb2x2ZSB0aGUgdGFyZ2V0IHZhbHVlLlxyXG4gICAgICAgIGlmIChvcHRpb25zLmlzVGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gY3JlYXRlTG9jYXRvcih2YWx1ZSwgb3B0aW9ucy5jYXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQSB0YXJnZXQgcGFyYW0gdXNpbmcgaW50ZXJwb2xhdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlWzBdID09PSAnQCcpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBjcmVhdGVMb2NhdG9yKHZhbHVlLnNsaWNlKDEpLCBvcHRpb25zLmNhc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHRyYW5zZm9ybWVyIGRlZmluZWQuXHJcbiAgICAgICAgaWYgKCFpc0xvY2F0b3IodmFsdWUpICYmIG9wdGlvbnMuY2FzdCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbnMuY2FzdCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiBzZXQsIHByb2JhYmx5IG11bHRpcGxlIHZhbHVlcy5cclxuICAgICAgICBpZiAocGFyYW1zW29wdGlvbnMubmFtZV0pIHtcclxuICAgICAgICAgICAgcGFyYW1zW29wdGlvbnMubmFtZV0gPSBBcnJheS5pc0FycmF5KHBhcmFtc1tvcHRpb25zLm5hbWVdKSA/IHBhcmFtc1tvcHRpb25zLm5hbWVdIDogW3BhcmFtc1tvcHRpb25zLm5hbWVdXTtcclxuICAgICAgICAgICAgcGFyYW1zW29wdGlvbnMubmFtZV0ucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICBwYXJhbXNbb3B0aW9ucy5uYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHJ1bGUgc3RyaW5nIGV4cHJlc3Npb24uXHJcbiAqL1xyXG52YXIgcGFyc2VSdWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcclxuICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgIHZhciBuYW1lID0gcnVsZS5zcGxpdCgnOicpWzBdO1xyXG4gICAgaWYgKGluY2x1ZGVzKHJ1bGUsICc6JykpIHtcclxuICAgICAgICBwYXJhbXMgPSBydWxlXHJcbiAgICAgICAgICAgIC5zcGxpdCgnOicpXHJcbiAgICAgICAgICAgIC5zbGljZSgxKVxyXG4gICAgICAgICAgICAuam9pbignOicpXHJcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgcGFyYW1zOiBwYXJhbXMgfTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlTG9jYXRvcih2YWx1ZSwgY2FzdEZuKSB7XHJcbiAgICB2YXIgbG9jYXRvciA9IGZ1bmN0aW9uIChjcm9zc1RhYmxlKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGNyb3NzVGFibGVbdmFsdWVdO1xyXG4gICAgICAgIHJldHVybiBjYXN0Rm4gPyBjYXN0Rm4odmFsKSA6IHZhbDtcclxuICAgIH07XHJcbiAgICBsb2NhdG9yLl9fbG9jYXRvclJlZiA9IHZhbHVlO1xyXG4gICAgcmV0dXJuIGxvY2F0b3I7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdExvY2F0b3JzKHBhcmFtcykge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xyXG4gICAgICAgIHJldHVybiBwYXJhbXMuZmlsdGVyKGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNMb2NhdG9yKHBhcmFtKSB8fCAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJyAmJiBwYXJhbVswXSA9PT0gJ0AnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXMpXHJcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBpc0xvY2F0b3IocGFyYW1zW2tleV0pOyB9KVxyXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gcGFyYW1zW2tleV07IH0pO1xyXG59XG5cbi8qKlxyXG4gKiBWYWxpZGF0ZXMgYSB2YWx1ZSBhZ2FpbnN0IHRoZSBydWxlcy5cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlLCBydWxlcywgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2hvdWxkQmFpbCwgc2tpcElmRW1wdHksIGZpZWxkLCByZXN1bHQsIGVycm9ycywgZmFpbGVkUnVsZXMsIHJlZ2VuZXJhdGVNYXA7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkQmFpbCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5iYWlscztcclxuICAgICAgICAgICAgICAgICAgICBza2lwSWZFbXB0eSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwSWZFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5uYW1lKSB8fCAne2ZpZWxkfScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzOiBub3JtYWxpemVSdWxlcyhydWxlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhaWxzOiBzaG91bGRCYWlsICE9PSBudWxsICYmIHNob3VsZEJhaWwgIT09IHZvaWQgMCA/IHNob3VsZEJhaWwgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwSWZFbXB0eTogc2tpcElmRW1wdHkgIT09IG51bGwgJiYgc2tpcElmRW1wdHkgIT09IHZvaWQgMCA/IHNraXBJZkVtcHR5IDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VSZXF1aXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzVGFibGU6IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmFsdWVzKSB8fCB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmFtZXMpIHx8IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21NZXNzYWdlczogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jdXN0b21NZXNzYWdlcykgfHwge31cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIF92YWxpZGF0ZShmaWVsZCwgdmFsdWUsIG9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkUnVsZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICByZWdlbmVyYXRlTWFwID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSBlLm1zZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChtc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsZWRSdWxlc1tlLnJ1bGVdID0gbXNnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdlbmVyYXRlTWFwW2UucnVsZV0gPSBlLm1zZztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHJlc3VsdC52YWxpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbGVkUnVsZXM6IGZhaWxlZFJ1bGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZW5lcmF0ZU1hcDogcmVnZW5lcmF0ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFN0YXJ0cyB0aGUgdmFsaWRhdGlvbiBwcm9jZXNzLlxyXG4gKi9cclxuZnVuY3Rpb24gX3ZhbGlkYXRlKGZpZWxkLCB2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuaXNJbml0aWFsLCBpc0luaXRpYWwgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2MsIHNob3VsZFNraXAsIGVycm9ycywgcnVsZXMsIGxlbmd0aCwgaSwgcnVsZSwgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2QpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfc2hvdWxkU2tpcChmaWVsZCwgdmFsdWUpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYyA9IF9kLnNlbnQoKSwgc2hvdWxkU2tpcCA9IF9jLnNob3VsZFNraXAsIGVycm9ycyA9IF9jLmVycm9ycztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2tpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiAhZXJyb3JzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzID0gT2JqZWN0LmtleXMoZmllbGQucnVsZXMpLmZpbHRlcihmdW5jdGlvbiAocnVsZSkgeyByZXR1cm4gIVJ1bGVDb250YWluZXIuaXNSZXF1aXJlUnVsZShydWxlKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gcnVsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpIDwgbGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5pdGlhbCAmJiBSdWxlQ29udGFpbmVyLmlzTGF6eShydWxlc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGUgPSBydWxlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfdGVzdChmaWVsZCwgdmFsdWUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJ1bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGZpZWxkLnJ1bGVzW3J1bGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgJiYgcmVzdWx0LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3VsdC5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5iYWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiAhZXJyb3JzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gX3Nob3VsZFNraXAoZmllbGQsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlcXVpcmVSdWxlcywgbGVuZ3RoLCBlcnJvcnMsIGlzRW1wdHksIGlzRW1wdHlBbmRPcHRpb25hbCwgaXNSZXF1aXJlZCwgaSwgcnVsZSwgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVSdWxlcyA9IE9iamVjdC5rZXlzKGZpZWxkLnJ1bGVzKS5maWx0ZXIoUnVsZUNvbnRhaW5lci5pc1JlcXVpcmVSdWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSByZXF1aXJlUnVsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRW1wdHkgPSBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IGlzRW1wdHlBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNFbXB0eUFuZE9wdGlvbmFsID0gaXNFbXB0eSAmJiBmaWVsZC5za2lwSWZFbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPCBsZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBydWxlID0gcmVxdWlyZVJ1bGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIF90ZXN0KGZpZWxkLCB2YWx1ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcnVsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogZmllbGQucnVsZXNbcnVsZV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlIHJ1bGVzIGhhcyB0byByZXR1cm4gYW4gb2JqZWN0IChzZWUgZG9jcyknKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgJiYgcmVzdWx0LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3VsdC5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgYXMgdGhlIGZpZWxkIGlzIHJlcXVpcmVkIGFuZCBmYWlsZWQgdmFsaWRhdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmJhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRTa2lwOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW1wdHkgJiYgIWlzUmVxdWlyZWQgJiYgIWZpZWxkLnNraXBJZkVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2tpcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBmaWVsZCBpcyBjb25maWd1cmVkIHRvIHJ1biB0aHJvdWdoIHRoZSBwaXBlbGluZSByZWdhcmRsZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWVsZC5iYWlscyAmJiAhaXNFbXB0eUFuZE9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2tpcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIGlmIHRoZSBmaWVsZCBpcyBub3QgcmVxdWlyZWQgYW5kIGhhcyBhbiBlbXB0eSB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2tpcDogIWlzUmVxdWlyZWQgJiYgaXNFbXB0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogVGVzdHMgYSBzaW5nbGUgaW5wdXQgdmFsdWUgYWdhaW5zdCBhIHJ1bGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBfdGVzdChmaWVsZCwgdmFsdWUsIHJ1bGUpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcnVsZVNjaGVtYSwgbm9ybWFsaXplZFZhbHVlLCBwYXJhbXMsIHJlc3VsdCwgdmFsdWVzXzE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZVNjaGVtYSA9IFJ1bGVDb250YWluZXIuZ2V0UnVsZURlZmluaXRpb24ocnVsZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGVTY2hlbWEgfHwgIXJ1bGVTY2hlbWEudmFsaWRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCB2YWxpZGF0b3IgJ1wiICsgcnVsZS5uYW1lICsgXCInIGV4aXN0cy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRWYWx1ZSA9IHJ1bGVTY2hlbWEuY2FzdFZhbHVlID8gcnVsZVNjaGVtYS5jYXN0VmFsdWUodmFsdWUpIDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gZmlsbFRhcmdldFZhbHVlcyhydWxlLnBhcmFtcywgZmllbGQuY3Jvc3NUYWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcnVsZVNjaGVtYS52YWxpZGF0ZShub3JtYWxpemVkVmFsdWUsIHBhcmFtcyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzXzEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHBhcmFtcyB8fCB7fSkpLCB7IF9maWVsZF86IGZpZWxkLm5hbWUsIF92YWx1ZV86IHZhbHVlLCBfcnVsZV86IHJ1bGUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHsgcnVsZTogcnVsZS5uYW1lLCBtc2c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVycG9sYXRlKHJlc3VsdCwgdmFsdWVzXzEpOyB9IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0geyB2YWxpZDogcmVzdWx0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZDogcmVzdWx0LnZhbGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHJlc3VsdC5yZXF1aXJlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiByZXN1bHQudmFsaWQgPyB1bmRlZmluZWQgOiBfZ2VuZXJhdGVGaWVsZEVycm9yKGZpZWxkLCB2YWx1ZSwgcnVsZVNjaGVtYSwgcnVsZS5uYW1lLCBwYXJhbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVzIGVycm9yIG1lc3NhZ2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2dlbmVyYXRlRmllbGRFcnJvcihmaWVsZCwgdmFsdWUsIHJ1bGVTY2hlbWEsIHJ1bGVOYW1lLCBwYXJhbXMpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHZhciBtZXNzYWdlID0gKF9hID0gZmllbGQuY3VzdG9tTWVzc2FnZXNbcnVsZU5hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBydWxlU2NoZW1hLm1lc3NhZ2U7XHJcbiAgICB2YXIgcnVsZVRhcmdldHMgPSBfZ2V0UnVsZVRhcmdldHMoZmllbGQsIHJ1bGVTY2hlbWEsIHJ1bGVOYW1lKTtcclxuICAgIHZhciBfYiA9IF9nZXRVc2VyVGFyZ2V0cyhmaWVsZCwgcnVsZVNjaGVtYSwgcnVsZU5hbWUsIG1lc3NhZ2UpLCB1c2VyVGFyZ2V0cyA9IF9iLnVzZXJUYXJnZXRzLCB1c2VyTWVzc2FnZSA9IF9iLnVzZXJNZXNzYWdlO1xyXG4gICAgdmFyIHZhbHVlcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCAocGFyYW1zIHx8IHt9KSksIHsgX2ZpZWxkXzogZmllbGQubmFtZSwgX3ZhbHVlXzogdmFsdWUsIF9ydWxlXzogcnVsZU5hbWUgfSksIHJ1bGVUYXJnZXRzKSwgdXNlclRhcmdldHMpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtc2c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9ub3JtYWxpemVNZXNzYWdlKHVzZXJNZXNzYWdlIHx8IGdldENvbmZpZygpLmRlZmF1bHRNZXNzYWdlLCBmaWVsZC5uYW1lLCB2YWx1ZXMpOyB9LFxyXG4gICAgICAgIHJ1bGU6IHJ1bGVOYW1lXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIF9nZXRSdWxlVGFyZ2V0cyhmaWVsZCwgcnVsZVNjaGVtYSwgcnVsZU5hbWUpIHtcclxuICAgIHZhciBwYXJhbXMgPSBydWxlU2NoZW1hLnBhcmFtcztcclxuICAgIGlmICghcGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgdmFyIG51bVRhcmdldHMgPSBwYXJhbXMuZmlsdGVyKGZ1bmN0aW9uIChwYXJhbSkgeyByZXR1cm4gcGFyYW0uaXNUYXJnZXQ7IH0pLmxlbmd0aDtcclxuICAgIGlmIChudW1UYXJnZXRzIDw9IDApIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICB2YXIgbmFtZXMgPSB7fTtcclxuICAgIHZhciBydWxlQ29uZmlnID0gZmllbGQucnVsZXNbcnVsZU5hbWVdO1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJ1bGVDb25maWcpICYmIGlzT2JqZWN0KHJ1bGVDb25maWcpKSB7XHJcbiAgICAgICAgcnVsZUNvbmZpZyA9IHBhcmFtcy5tYXAoZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBydWxlQ29uZmlnW3BhcmFtLm5hbWVdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHBhcmFtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbaW5kZXhdO1xyXG4gICAgICAgIHZhciBrZXkgPSBydWxlQ29uZmlnW2luZGV4XTtcclxuICAgICAgICBpZiAoIWlzTG9jYXRvcihrZXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBrZXkgPSBrZXkuX19sb2NhdG9yUmVmO1xyXG4gICAgICAgIHZhciBuYW1lXzEgPSBmaWVsZC5uYW1lc1trZXldIHx8IGtleTtcclxuICAgICAgICBuYW1lc1twYXJhbS5uYW1lXSA9IG5hbWVfMTtcclxuICAgICAgICBuYW1lc1tcIl9cIiArIHBhcmFtLm5hbWUgKyBcIl9cIl0gPSBmaWVsZC5jcm9zc1RhYmxlW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZXM7XHJcbn1cclxuZnVuY3Rpb24gX2dldFVzZXJUYXJnZXRzKGZpZWxkLCBydWxlU2NoZW1hLCBydWxlTmFtZSwgdXNlck1lc3NhZ2UpIHtcclxuICAgIHZhciB1c2VyVGFyZ2V0cyA9IHt9O1xyXG4gICAgdmFyIHJ1bGVzID0gZmllbGQucnVsZXNbcnVsZU5hbWVdO1xyXG4gICAgdmFyIHBhcmFtcyA9IHJ1bGVTY2hlbWEucGFyYW1zIHx8IFtdO1xyXG4gICAgLy8gZWFybHkgcmV0dXJuIGlmIG5vIHJ1bGVzXHJcbiAgICBpZiAoIXJ1bGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgYWxsIHJ1bGVzIHRvIGNvbnZlcnQgdGFyZ2V0c1xyXG4gICAgT2JqZWN0LmtleXMocnVsZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcclxuICAgICAgICAvLyBnZXQgdGhlIHJ1bGVcclxuICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2tleV07XHJcbiAgICAgICAgaWYgKCFpc0xvY2F0b3IocnVsZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBnZXQgYXNzb2NpYXRlZCBwYXJhbWV0ZXJcclxuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbaW5kZXhdO1xyXG4gICAgICAgIGlmICghcGFyYW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBncmFiIHRoZSBuYW1lIG9mIHRoZSB0YXJnZXRcclxuICAgICAgICB2YXIgbmFtZSA9IHJ1bGUuX19sb2NhdG9yUmVmO1xyXG4gICAgICAgIHVzZXJUYXJnZXRzW3BhcmFtLm5hbWVdID0gZmllbGQubmFtZXNbbmFtZV0gfHwgbmFtZTtcclxuICAgICAgICB1c2VyVGFyZ2V0c1tcIl9cIiArIHBhcmFtLm5hbWUgKyBcIl9cIl0gPSBmaWVsZC5jcm9zc1RhYmxlW25hbWVdO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZXJUYXJnZXRzOiB1c2VyVGFyZ2V0cyxcclxuICAgICAgICB1c2VyTWVzc2FnZTogdXNlck1lc3NhZ2VcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gX25vcm1hbGl6ZU1lc3NhZ2UodGVtcGxhdGUsIGZpZWxkLCB2YWx1ZXMpIHtcclxuICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gdGVtcGxhdGUoZmllbGQsIHZhbHVlcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW50ZXJwb2xhdGUodGVtcGxhdGUsIF9fYXNzaWduKF9fYXNzaWduKHt9LCB2YWx1ZXMpLCB7IF9maWVsZF86IGZpZWxkIH0pKTtcclxufVxyXG5mdW5jdGlvbiBmaWxsVGFyZ2V0VmFsdWVzKHBhcmFtcywgY3Jvc3NUYWJsZSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xyXG4gICAgICAgIHJldHVybiBwYXJhbXMubWFwKGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0UGFydCA9IHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycgJiYgcGFyYW1bMF0gPT09ICdAJyA/IHBhcmFtLnNsaWNlKDEpIDogcGFyYW07XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRQYXJ0IGluIGNyb3NzVGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcm9zc1RhYmxlW3RhcmdldFBhcnRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciB2YWx1ZXMgPSB7fTtcclxuICAgIHZhciBub3JtYWxpemUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAoaXNMb2NhdG9yKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUoY3Jvc3NUYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgdmFsdWVzW3BhcmFtXSA9IG5vcm1hbGl6ZShwYXJhbXNbcGFyYW1dKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHZhbHVlcztcclxufVxuXG52YXIgYWdncmVzc2l2ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICBvbjogWydpbnB1dCcsICdibHVyJ11cclxufSk7IH07XHJcbnZhciBsYXp5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcclxuICAgIG9uOiBbJ2NoYW5nZScsICdibHVyJ11cclxufSk7IH07XHJcbnZhciBlYWdlciA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIGVycm9ycyA9IF9hLmVycm9ycztcclxuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb246IFsnaW5wdXQnLCAnY2hhbmdlJ11cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBvbjogWydjaGFuZ2UnLCAnYmx1ciddXHJcbiAgICB9O1xyXG59O1xyXG52YXIgcGFzc2l2ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICBvbjogW11cclxufSk7IH07XHJcbnZhciBtb2RlcyA9IHtcclxuICAgIGFnZ3Jlc3NpdmU6IGFnZ3Jlc3NpdmUsXHJcbiAgICBlYWdlcjogZWFnZXIsXHJcbiAgICBwYXNzaXZlOiBwYXNzaXZlLFxyXG4gICAgbGF6eTogbGF6eVxyXG59O1xyXG52YXIgc2V0SW50ZXJhY3Rpb25Nb2RlID0gZnVuY3Rpb24gKG1vZGUsIGltcGxlbWVudGF0aW9uKSB7XHJcbiAgICBzZXRDb25maWcoeyBtb2RlOiBtb2RlIH0pO1xyXG4gICAgaWYgKCFpbXBsZW1lbnRhdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaXNDYWxsYWJsZShpbXBsZW1lbnRhdGlvbikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgbW9kZSBpbXBsZW1lbnRhdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIG1vZGVzW21vZGVdID0gaW1wbGVtZW50YXRpb247XHJcbn07XG5cbnZhciBFVkVOVF9CVVMgPSBuZXcgVnVlKCk7XHJcbmZ1bmN0aW9uIGxvY2FsZUNoYW5nZWQoKSB7XHJcbiAgICBFVkVOVF9CVVMuJGVtaXQoJ2NoYW5nZTpsb2NhbGUnKTtcclxufVxuXG52YXIgRGljdGlvbmFyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERpY3Rpb25hcnkobG9jYWxlLCBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSB7fTtcclxuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcclxuICAgICAgICB0aGlzLm1lcmdlKGRpY3Rpb25hcnkpO1xyXG4gICAgfVxyXG4gICAgRGljdGlvbmFyeS5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChmaWVsZCwgcnVsZSwgdmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMubG9jYWxlLCBmaWVsZCwgcnVsZSwgdmFsdWVzKTtcclxuICAgIH07XHJcbiAgICBEaWN0aW9uYXJ5LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobG9jYWxlLCBmaWVsZCwgcnVsZSwgdmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcclxuICAgICAgICB2YXIgbWVzc2FnZTtcclxuICAgICAgICAvLyBmaW5kIGlmIHNwZWNpZmljIG1lc3NhZ2UgZm9yIHRoYXQgZmllbGQgd2FzIHNwZWNpZmllZC5cclxuICAgICAgICB2YXIgZmllbGRDb250YWluZXIgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbnRhaW5lcltsb2NhbGVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmllbGRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbZmllbGRdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbcnVsZV07XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VDb250YWluZXIgPSAoX2UgPSAoX2QgPSB0aGlzLmNvbnRhaW5lcltsb2NhbGVdKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QubWVzc2FnZXMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZVtydWxlXTtcclxuICAgICAgICBtZXNzYWdlID0gZmllbGRDb250YWluZXIgfHwgbWVzc2FnZUNvbnRhaW5lciB8fCAnJztcclxuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9ICd7X2ZpZWxkX30gaXMgbm90IHZhbGlkJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZmllbGQgPSAoX2ggPSAoX2cgPSAoX2YgPSB0aGlzLmNvbnRhaW5lcltsb2NhbGVdKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubmFtZXMpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ1tmaWVsZF0pICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IGZpZWxkO1xyXG4gICAgICAgIHJldHVybiBpc0NhbGxhYmxlKG1lc3NhZ2UpID8gbWVzc2FnZShmaWVsZCwgdmFsdWVzKSA6IGludGVycG9sYXRlKG1lc3NhZ2UsIF9fYXNzaWduKF9fYXNzaWduKHt9LCB2YWx1ZXMpLCB7IF9maWVsZF86IGZpZWxkIH0pKTtcclxuICAgIH07XHJcbiAgICBEaWN0aW9uYXJ5LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgbWVyZ2UodGhpcy5jb250YWluZXIsIGRpY3Rpb25hcnkpO1xyXG4gICAgfTtcclxuICAgIERpY3Rpb25hcnkucHJvdG90eXBlLmhhc1J1bGUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYiA9IChfYSA9IHRoaXMuY29udGFpbmVyW3RoaXMubG9jYWxlXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2VzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbmFtZV0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEaWN0aW9uYXJ5O1xyXG59KCkpO1xyXG52YXIgRElDVElPTkFSWTtcclxuZnVuY3Rpb24gbG9jYWxpemUobG9jYWxlLCBkaWN0aW9uYXJ5KSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoIURJQ1RJT05BUlkpIHtcclxuICAgICAgICBESUNUSU9OQVJZID0gbmV3IERpY3Rpb25hcnkoJ2VuJywge30pO1xyXG4gICAgICAgIHNldENvbmZpZyh7XHJcbiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiAoZmllbGQsIHZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERJQ1RJT05BUlkucmVzb2x2ZShmaWVsZCwgdmFsdWVzID09PSBudWxsIHx8IHZhbHVlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWVzLl9ydWxlXywgdmFsdWVzIHx8IHt9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBsb2NhbGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgRElDVElPTkFSWS5sb2NhbGUgPSBsb2NhbGU7XHJcbiAgICAgICAgaWYgKGRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgRElDVElPTkFSWS5tZXJnZSgoX2EgPSB7fSwgX2FbbG9jYWxlXSA9IGRpY3Rpb25hcnksIF9hKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvY2FsZUNoYW5nZWQoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBESUNUSU9OQVJZLm1lcmdlKGxvY2FsZSk7XHJcbn1cblxudmFyIGlzRXZlbnQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICBpZiAoIWV2dCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzQ2FsbGFibGUoRXZlbnQpICYmIGV2dCBpbnN0YW5jZW9mIEV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB0aGlzIGlzIGZvciBJRVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmIChldnQgJiYgZXZ0LnNyY0VsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcclxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgdmFyIF9hLCBfYjtcclxuICAgIGlmICghaXNFdmVudCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICB2YXIgaW5wdXQgPSB2YWx1ZS50YXJnZXQ7XHJcbiAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2ZpbGUnICYmIGlucHV0LmZpbGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvQXJyYXkoaW5wdXQuZmlsZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gSWYgdGhlIGlucHV0IGhhcyBhIGB2LW1vZGVsLm51bWJlcmAgbW9kaWZpZXIgYXBwbGllZC5cclxuICAgIGlmICgoX2EgPSBpbnB1dC5fdk1vZGlmaWVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm51bWJlcikge1xyXG4gICAgICAgIC8vIGFzIHBlciB0aGUgc3BlYyB0aGUgdi1tb2RlbC5udW1iZXIgdXNlcyBwYXJzZUZsb2F0XHJcbiAgICAgICAgdmFyIHZhbHVlQXNOdW1iZXIgPSBwYXJzZUZsb2F0KGlucHV0LnZhbHVlKTtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWVBc051bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVBc051bWJlcjtcclxuICAgIH1cclxuICAgIGlmICgoX2IgPSBpbnB1dC5fdk1vZGlmaWVycykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyaW0pIHtcclxuICAgICAgICB2YXIgdHJpbW1lZFZhbHVlID0gdHlwZW9mIGlucHV0LnZhbHVlID09PSAnc3RyaW5nJyA/IGlucHV0LnZhbHVlLnRyaW0oKSA6IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIHJldHVybiB0cmltbWVkVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5wdXQudmFsdWU7XHJcbn1cblxudmFyIGlzVGV4dElucHV0ID0gZnVuY3Rpb24gKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgYXR0cnMgPSAoKF9hID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzKSB8fCB2bm9kZS5lbG07XHJcbiAgICAvLyBpdCB3aWxsIGZhbGxiYWNrIHRvIGJlaW5nIGEgdGV4dCBpbnB1dCBwZXIgYnJvd3NlcnMgc3BlYy5cclxuICAgIGlmICh2bm9kZS50YWcgPT09ICdpbnB1dCcgJiYgKCFhdHRycyB8fCAhYXR0cnMudHlwZSkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbmNsdWRlcyhbJ3RleHQnLCAncGFzc3dvcmQnLCAnc2VhcmNoJywgJ2VtYWlsJywgJ3RlbCcsICd1cmwnLCAnbnVtYmVyJ10sIGF0dHJzID09PSBudWxsIHx8IGF0dHJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhdHRycy50eXBlKTtcclxufTtcclxuLy8gZXhwb3J0IGNvbnN0IGlzQ2hlY2tib3hPclJhZGlvSW5wdXQgPSAodm5vZGU6IFZOb2RlKTogYm9vbGVhbiA9PiB7XHJcbi8vICAgY29uc3QgYXR0cnMgPSAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzKSB8fCB2bm9kZS5lbG07XHJcbi8vICAgcmV0dXJuIGluY2x1ZGVzKFsncmFkaW8nLCAnY2hlY2tib3gnXSwgYXR0cnMgJiYgYXR0cnMudHlwZSk7XHJcbi8vIH07XHJcbi8vIEdldHMgdGhlIG1vZGVsIG9iamVjdCBvbiB0aGUgdm5vZGUuXHJcbmZ1bmN0aW9uIGZpbmRNb2RlbCh2bm9kZSkge1xyXG4gICAgaWYgKCF2bm9kZS5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8vIENvbXBvbmVudCBNb2RlbFxyXG4gICAgLy8gVEhJUyBJUyBOT1QgVFlQRUQgSU4gT0ZGSUNJQUwgVlVFIFRZUElOR1NcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgdmFyIG5vblN0YW5kYXJkVk5vZGVEYXRhID0gdm5vZGUuZGF0YTtcclxuICAgIGlmICgnbW9kZWwnIGluIG5vblN0YW5kYXJkVk5vZGVEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vblN0YW5kYXJkVk5vZGVEYXRhLm1vZGVsO1xyXG4gICAgfVxyXG4gICAgaWYgKCF2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbmQodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnbW9kZWwnOyB9KTtcclxufVxyXG5mdW5jdGlvbiBmaW5kVmFsdWUodm5vZGUpIHtcclxuICAgIHZhciBfYSwgX2I7XHJcbiAgICB2YXIgbW9kZWwgPSBmaW5kTW9kZWwodm5vZGUpO1xyXG4gICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG1vZGVsLnZhbHVlIH07XHJcbiAgICB9XHJcbiAgICB2YXIgY29uZmlnID0gZmluZE1vZGVsQ29uZmlnKHZub2RlKTtcclxuICAgIHZhciBwcm9wID0gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5wcm9wKSB8fCAndmFsdWUnO1xyXG4gICAgaWYgKCgoX2EgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJvcHNEYXRhKSAmJiBwcm9wIGluIHZub2RlLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhKSB7XHJcbiAgICAgICAgdmFyIHByb3BzRGF0YVdpdGhWYWx1ZSA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xyXG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBwcm9wc0RhdGFXaXRoVmFsdWVbcHJvcF0gfTtcclxuICAgIH1cclxuICAgIGlmICgoKF9iID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRvbVByb3BzKSAmJiAndmFsdWUnIGluIHZub2RlLmRhdGEuZG9tUHJvcHMpIHtcclxuICAgICAgICByZXR1cm4geyB2YWx1ZTogdm5vZGUuZGF0YS5kb21Qcm9wcy52YWx1ZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Q2hpbGRyZW4odm5vZGUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xyXG4gICAgICAgIHJldHVybiB2bm9kZS5jaGlsZHJlbjtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucyAmJiBBcnJheS5pc0FycmF5KHZub2RlLmNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW107XHJcbn1cclxuZnVuY3Rpb24gZmluZElucHV0Tm9kZXModm5vZGUpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgZmluZFZhbHVlKHZub2RlKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIFt2bm9kZV07XHJcbiAgICB9XHJcbiAgICB2YXIgY2hpbGRyZW4gPSBleHRyYWN0Q2hpbGRyZW4odm5vZGUpO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAobm9kZXMsIG5vZGUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlcyA9IGZpbmRJbnB1dE5vZGVzKG5vZGUpO1xyXG4gICAgICAgIGlmIChjYW5kaWRhdGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBub2Rlcy5wdXNoLmFwcGx5KG5vZGVzLCBjYW5kaWRhdGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgfSwgW10pO1xyXG59XHJcbi8vIFJlc29sdmVzIHYtbW9kZWwgY29uZmlnIGlmIGV4aXN0cy5cclxuZnVuY3Rpb24gZmluZE1vZGVsQ29uZmlnKHZub2RlKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRPcHRpb25zKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gVGhpcyBpcyBhbHNvIG5vdCB0eXBlZCBpbiB0aGUgc3RhbmRhcmQgVnVlIFRTLlxyXG4gICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3Rvci5vcHRpb25zLm1vZGVsO1xyXG59XHJcbi8vIEFkZHMgYSBsaXN0ZW5lciB0byB2bm9kZSBsaXN0ZW5lciBvYmplY3QuXHJcbmZ1bmN0aW9uIG1lcmdlVk5vZGVMaXN0ZW5lcnMob2JqLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgIC8vIG5vIGxpc3RlbmVyIGF0IGFsbC5cclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZChvYmpbZXZlbnROYW1lXSkpIHtcclxuICAgICAgICBvYmpbZXZlbnROYW1lXSA9IFtoYW5kbGVyXTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBJcyBhbiBpbnZva2VyLlxyXG4gICAgaWYgKGlzQ2FsbGFibGUob2JqW2V2ZW50TmFtZV0pICYmIG9ialtldmVudE5hbWVdLmZucykge1xyXG4gICAgICAgIHZhciBpbnZva2VyID0gb2JqW2V2ZW50TmFtZV07XHJcbiAgICAgICAgaW52b2tlci5mbnMgPSBBcnJheS5pc0FycmF5KGludm9rZXIuZm5zKSA/IGludm9rZXIuZm5zIDogW2ludm9rZXIuZm5zXTtcclxuICAgICAgICBpZiAoIWluY2x1ZGVzKGludm9rZXIuZm5zLCBoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICBpbnZva2VyLmZucy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNDYWxsYWJsZShvYmpbZXZlbnROYW1lXSkpIHtcclxuICAgICAgICB2YXIgcHJldiA9IG9ialtldmVudE5hbWVdO1xyXG4gICAgICAgIG9ialtldmVudE5hbWVdID0gW3ByZXZdO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2V2ZW50TmFtZV0pICYmICFpbmNsdWRlcyhvYmpbZXZlbnROYW1lXSwgaGFuZGxlcikpIHtcclxuICAgICAgICBvYmpbZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgfVxyXG59XHJcbi8vIEFkZHMgYSBsaXN0ZW5lciB0byBhIG5hdGl2ZSBIVE1MIHZub2RlLlxyXG5mdW5jdGlvbiBhZGROYXRpdmVOb2RlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmRhdGEpIHtcclxuICAgICAgICBub2RlLmRhdGEgPSB7fTtcclxuICAgIH1cclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZChub2RlLmRhdGEub24pKSB7XHJcbiAgICAgICAgbm9kZS5kYXRhLm9uID0ge307XHJcbiAgICB9XHJcbiAgICBtZXJnZVZOb2RlTGlzdGVuZXJzKG5vZGUuZGF0YS5vbiwgZXZlbnROYW1lLCBoYW5kbGVyKTtcclxufVxyXG4vLyBBZGRzIGEgbGlzdGVuZXIgdG8gYSBWdWUgY29tcG9uZW50IHZub2RlLlxyXG5mdW5jdGlvbiBhZGRDb21wb25lbnROb2RlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmNvbXBvbmVudE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgbm9kZS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfVxyXG4gICAgbWVyZ2VWTm9kZUxpc3RlbmVycyhub2RlLmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzLCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZFZOb2RlTGlzdGVuZXIodm5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xyXG4gICAgaWYgKHZub2RlLmNvbXBvbmVudE9wdGlvbnMpIHtcclxuICAgICAgICBhZGRDb21wb25lbnROb2RlTGlzdGVuZXIodm5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgYWRkTmF0aXZlTm9kZUxpc3RlbmVyKHZub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG59XHJcbi8vIERldGVybWluZXMgaWYgYGNoYW5nZWAgc2hvdWxkIGJlIHVzZWQgb3ZlciBgaW5wdXRgIGZvciBsaXN0ZW5lcnMuXHJcbmZ1bmN0aW9uIGdldElucHV0RXZlbnROYW1lKHZub2RlLCBtb2RlbCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gSXMgYSBjb21wb25lbnQuXHJcbiAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucykge1xyXG4gICAgICAgIHZhciBldmVudF8xID0gKGZpbmRNb2RlbENvbmZpZyh2bm9kZSkgfHwgeyBldmVudDogJ2lucHV0JyB9KS5ldmVudDtcclxuICAgICAgICByZXR1cm4gZXZlbnRfMTtcclxuICAgIH1cclxuICAgIC8vIExhenkgTW9kZWxzIHR5cGljYWxseSB1c2UgY2hhbmdlIGV2ZW50XHJcbiAgICBpZiAoKF9hID0gbW9kZWwgPT09IG51bGwgfHwgbW9kZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1vZGVsLm1vZGlmaWVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxhenkpIHtcclxuICAgICAgICByZXR1cm4gJ2NoYW5nZSc7XHJcbiAgICB9XHJcbiAgICAvLyBpcyBhIHRleHR1YWwtdHlwZSBpbnB1dC5cclxuICAgIGlmIChpc1RleHRJbnB1dCh2bm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gJ2lucHV0JztcclxuICAgIH1cclxuICAgIHJldHVybiAnY2hhbmdlJztcclxufVxyXG5mdW5jdGlvbiBpc0hUTUxOb2RlKG5vZGUpIHtcclxuICAgIHJldHVybiBpbmNsdWRlcyhbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddLCBub2RlLnRhZyk7XHJcbn1cclxuLy8gVE9ETzogVHlwZSB0aGlzIG9uZSBwcm9wZXJseS5cclxuZnVuY3Rpb24gbm9ybWFsaXplU2xvdHMoc2xvdHMsIGN0eCkge1xyXG4gICAgdmFyIGFjYyA9IFtdO1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNsb3RzKS5yZWR1Y2UoZnVuY3Rpb24gKGFyciwga2V5KSB7XHJcbiAgICAgICAgc2xvdHNba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh2bm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXZub2RlLmNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHNsb3RzW2tleV0uY29udGV4dCA9IGN0eDtcclxuICAgICAgICAgICAgICAgIGlmICghdm5vZGUuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLmRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZub2RlLmRhdGEuc2xvdCA9IGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhcnIuY29uY2F0KHNsb3RzW2tleV0pO1xyXG4gICAgfSwgYWNjKTtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlVGV4dHVhbFJ1bGVzKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgYXR0cnMgPSAoX2EgPSB2bm9kZS5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXR0cnM7XHJcbiAgICB2YXIgcnVsZXMgPSB7fTtcclxuICAgIGlmICghYXR0cnMpXHJcbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xyXG4gICAgaWYgKGF0dHJzLnR5cGUgPT09ICdlbWFpbCcgJiYgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbignZW1haWwnKSkge1xyXG4gICAgICAgIHJ1bGVzLmVtYWlsID0gWydtdWx0aXBsZScgaW4gYXR0cnNdO1xyXG4gICAgfVxyXG4gICAgaWYgKGF0dHJzLnBhdHRlcm4gJiYgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbigncmVnZXgnKSkge1xyXG4gICAgICAgIHJ1bGVzLnJlZ2V4ID0gYXR0cnMucGF0dGVybjtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy5tYXhsZW5ndGggPj0gMCAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtYXgnKSkge1xyXG4gICAgICAgIHJ1bGVzLm1heCA9IGF0dHJzLm1heGxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy5taW5sZW5ndGggPj0gMCAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtaW4nKSkge1xyXG4gICAgICAgIHJ1bGVzLm1pbiA9IGF0dHJzLm1pbmxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy50eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmIChpc1NwZWNpZmllZChhdHRycy5taW4pICYmIFJ1bGVDb250YWluZXIuZ2V0UnVsZURlZmluaXRpb24oJ21pbl92YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHJ1bGVzLm1pbl92YWx1ZSA9IE51bWJlcihhdHRycy5taW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNTcGVjaWZpZWQoYXR0cnMubWF4KSAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtYXhfdmFsdWUnKSkge1xyXG4gICAgICAgICAgICBydWxlcy5tYXhfdmFsdWUgPSBOdW1iZXIoYXR0cnMubWF4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnVsZXM7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZVJ1bGVzKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgaHRtbFRhZ3MgPSBbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddO1xyXG4gICAgdmFyIGF0dHJzID0gKF9hID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzO1xyXG4gICAgaWYgKCFpbmNsdWRlcyhodG1sVGFncywgdm5vZGUudGFnKSB8fCAhYXR0cnMpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICB2YXIgcnVsZXMgPSB7fTtcclxuICAgIGlmICgncmVxdWlyZWQnIGluIGF0dHJzICYmIGF0dHJzLnJlcXVpcmVkICE9PSBmYWxzZSAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdyZXF1aXJlZCcpKSB7XHJcbiAgICAgICAgcnVsZXMucmVxdWlyZWQgPSBhdHRycy50eXBlID09PSAnY2hlY2tib3gnID8gW3RydWVdIDogdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChpc1RleHRJbnB1dCh2bm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplUnVsZXMoX19hc3NpZ24oX19hc3NpZ24oe30sIHJ1bGVzKSwgcmVzb2x2ZVRleHR1YWxSdWxlcyh2bm9kZSkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVSdWxlcyhydWxlcyk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4oY29udGV4dCwgc2xvdFByb3BzKSB7XHJcbiAgICBpZiAoY29udGV4dC4kc2NvcGVkU2xvdHMuZGVmYXVsdCkge1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0LiRzY29wZWRTbG90cy5kZWZhdWx0KHNsb3RQcm9wcykgfHwgW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dC4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcclxufVxuXG4vKipcclxuICogRGV0ZXJtaW5lcyBpZiBhIHByb3ZpZGVyIG5lZWRzIHRvIHJ1biB2YWxpZGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hvdWxkVmFsaWRhdGUoY3R4LCB2YWx1ZSkge1xyXG4gICAgLy8gd2hlbiBhbiBpbW1lZGlhdGUvaW5pdGlhbCB2YWxpZGF0aW9uIGlzIG5lZWRlZCBhbmQgd2Fzbid0IGRvbmUgYmVmb3JlLlxyXG4gICAgaWYgKCFjdHguX2lnbm9yZUltbWVkaWF0ZSAmJiBjdHguaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzIGZvciB3aGF0ZXZlciByZWFzb24uXHJcbiAgICBpZiAoIWlzUmVmRXF1YWwoY3R4LnZhbHVlLCB2YWx1ZSkgJiYgY3R4Lm5vcm1hbGl6ZWRFdmVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB3aGVuIGl0IG5lZWRzIHZhbGlkYXRpb24gZHVlIHRvIHByb3BzL2Nyb3NzLWZpZWxkcyBjaGFuZ2VzLlxyXG4gICAgaWYgKGN0eC5fbmVlZHNWYWxpZGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB3aGVuIHRoZSBpbml0aWFsIHZhbHVlIGlzIHVuZGVmaW5lZCBhbmQgdGhlIGZpZWxkIHdhc24ndCByZW5kZXJlZCB5ZXQuXHJcbiAgICBpZiAoIWN0eC5pbml0aWFsaXplZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGlvbkN0eChjdHgpIHtcclxuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY3R4LmZsYWdzKSwgeyBlcnJvcnM6IGN0eC5lcnJvcnMsIGNsYXNzZXM6IGN0eC5jbGFzc2VzLCBmYWlsZWRSdWxlczogY3R4LmZhaWxlZFJ1bGVzLCByZXNldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3R4LnJlc2V0KCk7IH0sIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGN0eC52YWxpZGF0ZS5hcHBseShjdHgsIGFyZ3MpO1xyXG4gICAgICAgIH0sIGFyaWFJbnB1dDoge1xyXG4gICAgICAgICAgICAnYXJpYS1pbnZhbGlkJzogY3R4LmZsYWdzLmludmFsaWQgPyAndHJ1ZScgOiAnZmFsc2UnLFxyXG4gICAgICAgICAgICAnYXJpYS1yZXF1aXJlZCc6IGN0eC5pc1JlcXVpcmVkID8gJ3RydWUnIDogJ2ZhbHNlJyxcclxuICAgICAgICAgICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzogXCJ2ZWVfXCIgKyBjdHguaWRcclxuICAgICAgICB9LCBhcmlhTXNnOiB7XHJcbiAgICAgICAgICAgIGlkOiBcInZlZV9cIiArIGN0eC5pZCxcclxuICAgICAgICAgICAgJ2FyaWEtbGl2ZSc6IGN0eC5lcnJvcnMubGVuZ3RoID8gJ2Fzc2VydGl2ZScgOiAnb2ZmJ1xyXG4gICAgICAgIH0gfSk7XHJcbn1cclxuZnVuY3Rpb24gb25SZW5kZXJVcGRhdGUodm0sIHZhbHVlKSB7XHJcbiAgICBpZiAoIXZtLmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgdm0uaW5pdGlhbFZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICB2YXIgdmFsaWRhdGVOb3cgPSBzaG91bGRWYWxpZGF0ZSh2bSwgdmFsdWUpO1xyXG4gICAgdm0uX25lZWRzVmFsaWRhdGlvbiA9IGZhbHNlO1xyXG4gICAgdm0udmFsdWUgPSB2YWx1ZTtcclxuICAgIHZtLl9pZ25vcmVJbW1lZGlhdGUgPSB0cnVlO1xyXG4gICAgaWYgKCF2YWxpZGF0ZU5vdykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodm0uaW1tZWRpYXRlIHx8IHZtLmZsYWdzLnZhbGlkYXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uKHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdm0udmFsaWRhdGVTaWxlbnQoKTtcclxuICAgIH07XHJcbiAgICBpZiAodm0uaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICB2YWxpZGF0ZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZtLiRvbmNlKCdob29rOm1vdW50ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0ZSgpOyB9KTtcclxufVxyXG5mdW5jdGlvbiBjb21wdXRlTW9kZVNldHRpbmcoY3R4KSB7XHJcbiAgICB2YXIgY29tcHV0ZSA9IChpc0NhbGxhYmxlKGN0eC5tb2RlKSA/IGN0eC5tb2RlIDogbW9kZXNbY3R4Lm1vZGVdKTtcclxuICAgIHJldHVybiBjb21wdXRlKGN0eCk7XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uKHZtKSB7XHJcbiAgICB2YXIgcGVuZGluZ1Byb21pc2UgPSB2bS52YWxpZGF0ZVNpbGVudCgpO1xyXG4gICAgLy8gYXZvaWRzIHJhY2UgY29uZGl0aW9ucyBiZXR3ZWVuIHN1Y2Nlc3NpdmUgdmFsaWRhdGlvbnMuXHJcbiAgICB2bS5fcGVuZGluZ1ZhbGlkYXRpb24gPSBwZW5kaW5nUHJvbWlzZTtcclxuICAgIHJldHVybiBwZW5kaW5nUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICBpZiAocGVuZGluZ1Byb21pc2UgPT09IHZtLl9wZW5kaW5nVmFsaWRhdGlvbikge1xyXG4gICAgICAgICAgICB2bS5hcHBseVJlc3VsdChyZXN1bHQpO1xyXG4gICAgICAgICAgICB2bS5fcGVuZGluZ1ZhbGlkYXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9KTtcclxufVxyXG4vLyBDcmVhdGVzIHRoZSBjb21tb24gaGFuZGxlcnMgZm9yIGEgdmFsaWRhdGFibGUgY29udGV4dC5cclxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uSGFuZGxlcnModm0pIHtcclxuICAgIGlmICghdm0uJHZlZU9uSW5wdXQpIHtcclxuICAgICAgICB2bS4kdmVlT25JbnB1dCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZtLnN5bmNWYWx1ZShlKTsgLy8gdHJhY2sgYW5kIGtlZXAgdGhlIHZhbHVlIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgIHZtLnNldEZsYWdzKHsgZGlydHk6IHRydWUsIHByaXN0aW5lOiBmYWxzZSB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdmFyIG9uSW5wdXQgPSB2bS4kdmVlT25JbnB1dDtcclxuICAgIGlmICghdm0uJHZlZU9uQmx1cikge1xyXG4gICAgICAgIHZtLiR2ZWVPbkJsdXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnNldEZsYWdzKHsgdG91Y2hlZDogdHJ1ZSwgdW50b3VjaGVkOiBmYWxzZSB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gQmx1ciBldmVudCBsaXN0ZW5lci5cclxuICAgIHZhciBvbkJsdXIgPSB2bS4kdmVlT25CbHVyO1xyXG4gICAgdmFyIG9uVmFsaWRhdGUgPSB2bS4kdmVlSGFuZGxlcjtcclxuICAgIHZhciBtb2RlID0gY29tcHV0ZU1vZGVTZXR0aW5nKHZtKTtcclxuICAgIC8vIEhhbmRsZSBkZWJvdW5jZSBjaGFuZ2VzLlxyXG4gICAgaWYgKCFvblZhbGlkYXRlIHx8IHZtLiR2ZWVEZWJvdW5jZSAhPT0gdm0uZGVib3VuY2UpIHtcclxuICAgICAgICBvblZhbGlkYXRlID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2bS5fcGVuZGluZ1Jlc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uKHZtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZtLl9wZW5kaW5nUmVzZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgbW9kZS5kZWJvdW5jZSB8fCB2bS5kZWJvdW5jZSk7XHJcbiAgICAgICAgLy8gQ2FjaGUgdGhlIGhhbmRsZXIgc28gd2UgZG9uJ3QgY3JlYXRlIGl0IGVhY2ggdGltZS5cclxuICAgICAgICB2bS4kdmVlSGFuZGxlciA9IG9uVmFsaWRhdGU7XHJcbiAgICAgICAgLy8gY2FjaGUgdGhlIGRlYm91bmNlIHZhbHVlIHNvIHdlIGRldGVjdCBpZiBpdCB3YXMgY2hhbmdlZC5cclxuICAgICAgICB2bS4kdmVlRGVib3VuY2UgPSB2bS5kZWJvdW5jZTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IG9uSW5wdXQ6IG9uSW5wdXQsIG9uQmx1cjogb25CbHVyLCBvblZhbGlkYXRlOiBvblZhbGlkYXRlIH07XHJcbn1cclxuLy8gQWRkcyBhbGwgcGx1Z2luIGxpc3RlbmVycyB0byB0aGUgdm5vZGUuXHJcbmZ1bmN0aW9uIGFkZExpc3RlbmVycyh2bSwgbm9kZSkge1xyXG4gICAgdmFyIHZhbHVlID0gZmluZFZhbHVlKG5vZGUpO1xyXG4gICAgLy8gY2FjaGUgdGhlIGlucHV0IGV2ZW50TmFtZS5cclxuICAgIHZtLl9pbnB1dEV2ZW50TmFtZSA9IHZtLl9pbnB1dEV2ZW50TmFtZSB8fCBnZXRJbnB1dEV2ZW50TmFtZShub2RlLCBmaW5kTW9kZWwobm9kZSkpO1xyXG4gICAgb25SZW5kZXJVcGRhdGUodm0sIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS52YWx1ZSk7XHJcbiAgICB2YXIgX2EgPSBjcmVhdGVDb21tb25IYW5kbGVycyh2bSksIG9uSW5wdXQgPSBfYS5vbklucHV0LCBvbkJsdXIgPSBfYS5vbkJsdXIsIG9uVmFsaWRhdGUgPSBfYS5vblZhbGlkYXRlO1xyXG4gICAgYWRkVk5vZGVMaXN0ZW5lcihub2RlLCB2bS5faW5wdXRFdmVudE5hbWUsIG9uSW5wdXQpO1xyXG4gICAgYWRkVk5vZGVMaXN0ZW5lcihub2RlLCAnYmx1cicsIG9uQmx1cik7XHJcbiAgICAvLyBhZGQgdGhlIHZhbGlkYXRpb24gbGlzdGVuZXJzLlxyXG4gICAgdm0ubm9ybWFsaXplZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBhZGRWTm9kZUxpc3RlbmVyKG5vZGUsIGV2dCwgb25WYWxpZGF0ZSk7XHJcbiAgICB9KTtcclxuICAgIHZtLmluaXRpYWxpemVkID0gdHJ1ZTtcclxufVxuXG52YXIgUFJPVklERVJfQ09VTlRFUiA9IDA7XHJcbmZ1bmN0aW9uIGRhdGEoKSB7XHJcbiAgICB2YXIgZXJyb3JzID0gW107XHJcbiAgICB2YXIgZmllbGROYW1lID0gJyc7XHJcbiAgICB2YXIgZGVmYXVsdFZhbHVlcyA9IHtcclxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcclxuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcclxuICAgICAgICBpbml0aWFsVmFsdWU6IHVuZGVmaW5lZCxcclxuICAgICAgICBmbGFnczogY3JlYXRlRmxhZ3MoKSxcclxuICAgICAgICBmYWlsZWRSdWxlczoge30sXHJcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXHJcbiAgICAgICAgZmllbGROYW1lOiBmaWVsZE5hbWUsXHJcbiAgICAgICAgaWQ6ICcnXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZXM7XHJcbn1cclxudmFyIFZhbGlkYXRpb25Qcm92aWRlciA9IFZ1ZS5leHRlbmQoe1xyXG4gICAgaW5qZWN0OiB7XHJcbiAgICAgICAgJF92ZWVPYnNlcnZlcjoge1xyXG4gICAgICAgICAgICBmcm9tOiAnJF92ZWVPYnNlcnZlcicsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kdm5vZGUuY29udGV4dC4kX3ZlZU9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdm5vZGUuY29udGV4dC4kX3ZlZU9ic2VydmVyID0gY3JlYXRlT2JzZXJ2ZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiR2bm9kZS5jb250ZXh0LiRfdmVlT2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICB2aWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vZGU6IHtcclxuICAgICAgICAgICAgdHlwZTogW1N0cmluZywgRnVuY3Rpb25dLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnKCkubW9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcclxuICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW1tZWRpYXRlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBiYWlsczoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRDb25maWcoKS5iYWlsczsgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2tpcElmRW1wdHk6IHtcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0Q29uZmlnKCkuc2tpcE9wdGlvbmFsOyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWJvdW5jZToge1xyXG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhZzoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdzcGFuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2xpbToge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1c3RvbU1lc3NhZ2VzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXRlY3RJbnB1dDoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHdhdGNoOiB7XHJcbiAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgZGVlcDogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKHZhbCwgb2xkVmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZWVkc1ZhbGlkYXRpb24gPSAhaXNFcXVhbCh2YWwsIG9sZFZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGF0YTogZGF0YSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgZmllbGREZXBzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLm5vcm1hbGl6ZWRSdWxlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJ1bGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZXBzID0gZXh0cmFjdExvY2F0b3JzKF90aGlzLm5vcm1hbGl6ZWRSdWxlc1tydWxlXSkubWFwKGZ1bmN0aW9uIChkZXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNMb2NhdG9yKGRlcCkgPyBkZXAuX19sb2NhdG9yUmVmIDogZGVwLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhY2MucHVzaC5hcHBseShhY2MsIGRlcHMpO1xyXG4gICAgICAgICAgICAgICAgZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXBOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hDcm9zc0ZpZWxkRGVwKF90aGlzLCBkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgW10pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbm9ybWFsaXplZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgb24gPSBjb21wdXRlTW9kZVNldHRpbmcodGhpcykub247XHJcbiAgICAgICAgICAgIHJldHVybiAob24gfHwgW10pLm1hcChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT09ICdpbnB1dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2lucHV0RXZlbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNSZXF1aXJlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fcmVzb2x2ZWRSdWxlcyksIHRoaXMubm9ybWFsaXplZFJ1bGVzKTtcclxuICAgICAgICAgICAgdmFyIGlzUmVxdWlyZWQgPSBPYmplY3Qua2V5cyhydWxlcykuc29tZShSdWxlQ29udGFpbmVyLmlzUmVxdWlyZVJ1bGUpO1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLnJlcXVpcmVkID0gISFpc1JlcXVpcmVkO1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSZXF1aXJlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsYXNzZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gZ2V0Q29uZmlnKCkuY2xhc3NlcztcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVDbGFzc09iaihuYW1lcywgdGhpcy5mbGFncyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBub3JtYWxpemVkUnVsZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVJ1bGVzKHRoaXMucnVsZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb25Mb2NhbGVDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLmZsYWdzLnZhbGlkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZWdlbmVyYXRlTWFwID0gX3RoaXMuX3JlZ2VuZXJhdGVNYXA7XHJcbiAgICAgICAgICAgIGlmIChyZWdlbmVyYXRlTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JzXzEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBmYWlsZWRSdWxlc18xID0ge307XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZWdlbmVyYXRlTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHJlZ2VuZXJhdGVNYXBbcnVsZV0oKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnNfMS5wdXNoKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkUnVsZXNfMVtydWxlXSA9IG1zZztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYXBwbHlSZXN1bHQoeyBlcnJvcnM6IGVycm9yc18xLCBmYWlsZWRSdWxlczogZmFpbGVkUnVsZXNfMSwgcmVnZW5lcmF0ZU1hcDogcmVnZW5lcmF0ZU1hcCB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy52YWxpZGF0ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRVZFTlRfQlVTLiRvbignY2hhbmdlOmxvY2FsZScsIG9uTG9jYWxlQ2hhbmdlZCk7XHJcbiAgICAgICAgdGhpcy4kb24oJ2hvb2s6YmVmb3JlRGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgRVZFTlRfQlVTLiRvZmYoJ2NoYW5nZTpsb2NhbGUnLCBvbkxvY2FsZUNoYW5nZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaWVsZCgpO1xyXG4gICAgICAgIHZhciBjdHggPSBjcmVhdGVWYWxpZGF0aW9uQ3R4KHRoaXMpO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKHRoaXMsIGN0eCk7XHJcbiAgICAgICAgLy8gQXV0b21hdGljIHYtbW9kZWwgZGV0ZWN0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMuZGV0ZWN0SW5wdXQpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0cyA9IGZpbmRJbnB1dE5vZGVzKGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCwgaWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnRzIGFyZSBub3QgY2hlY2tib3hlcyBhbmQgdGhlcmUgYXJlIG1vcmUgaW5wdXQgbm9kZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVzKFsnY2hlY2tib3gnLCAncmFkaW8nXSwgKF9iID0gKF9hID0gaW5wdXQuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHlwZSkgJiYgaWR4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZCA9IGdldENvbmZpZygpLnVzZUNvbnN0cmFpbnRBdHRycyA/IHJlc29sdmVSdWxlcyhpbnB1dCkgOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWwoX3RoaXMuX3Jlc29sdmVkUnVsZXMsIHJlc29sdmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbmVlZHNWYWxpZGF0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSFRNTE5vZGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZpZWxkTmFtZSA9ICgoX2QgPSAoX2MgPSBpbnB1dC5kYXRhKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYXR0cnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5uYW1lKSB8fCAoKF9mID0gKF9lID0gaW5wdXQuZGF0YSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmF0dHJzKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZWRSdWxlcyA9IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZExpc3RlbmVycyhfdGhpcywgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpbSAmJiBjaGlsZHJlbi5sZW5ndGggPD0gMSA/IGNoaWxkcmVuWzBdIDogaCh0aGlzLnRhZywgY2hpbGRyZW4pO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBjbGVhbnVwIHJlZmVyZW5jZS5cclxuICAgICAgICB0aGlzLiRfdmVlT2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuaWQpO1xyXG4gICAgfSxcclxuICAgIGFjdGl2YXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgfSxcclxuICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBzZXRGbGFnczogZnVuY3Rpb24gKGZsYWdzKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGZsYWdzKS5mb3JFYWNoKGZ1bmN0aW9uIChmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mbGFnc1tmbGFnXSA9IGZsYWdzW2ZsYWddO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN5bmNWYWx1ZTogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbm9ybWFsaXplRXZlbnRWYWx1ZSh2KTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmNoYW5nZWQgPSB0aGlzLmluaXRpYWxWYWx1ZSAhPT0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGNyZWF0ZUZsYWdzKCk7XHJcbiAgICAgICAgICAgIGZsYWdzLnJlcXVpcmVkID0gdGhpcy5pc1JlcXVpcmVkO1xyXG4gICAgICAgICAgICB0aGlzLnNldEZsYWdzKGZsYWdzKTtcclxuICAgICAgICAgICAgdGhpcy5mYWlsZWRSdWxlcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlU2lsZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdWYWxpZGF0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wZW5kaW5nUmVzZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSwgdGhpcy5kZWJvdW5jZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3luY1ZhbHVlKGFyZ3NbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uKHRoaXMpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlU2lsZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBydWxlcywgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7IHBlbmRpbmc6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9yZXNvbHZlZFJ1bGVzKSwgdGhpcy5ub3JtYWxpemVkUnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJ1bGVzLCAnXyQkaXNOb3JtYWxpemVkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHZhbGlkYXRlKHRoaXMudmFsdWUsIHJ1bGVzLCBfX2Fzc2lnbihfX2Fzc2lnbih7IG5hbWU6IHRoaXMubmFtZSB8fCB0aGlzLmZpZWxkTmFtZSB9LCBjcmVhdGVMb29rdXAodGhpcykpLCB7IGJhaWxzOiB0aGlzLmJhaWxzLCBza2lwSWZFbXB0eTogdGhpcy5za2lwSWZFbXB0eSwgaXNJbml0aWFsOiAhdGhpcy5pbml0aWFsaXplZCwgY3VzdG9tTWVzc2FnZXM6IHRoaXMuY3VzdG9tTWVzc2FnZXMgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHJlc3VsdC52YWxpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkOiAhcmVzdWx0LnZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEVycm9yczogZnVuY3Rpb24gKGVycm9ycykge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5UmVzdWx0KHsgZXJyb3JzOiBlcnJvcnMsIGZhaWxlZFJ1bGVzOiB7fSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFwcGx5UmVzdWx0OiBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIGVycm9ycyA9IF9hLmVycm9ycywgZmFpbGVkUnVsZXMgPSBfYS5mYWlsZWRSdWxlcywgcmVnZW5lcmF0ZU1hcCA9IF9hLnJlZ2VuZXJhdGVNYXA7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWdlbmVyYXRlTWFwID0gcmVnZW5lcmF0ZU1hcDtcclxuICAgICAgICAgICAgdGhpcy5mYWlsZWRSdWxlcyA9IF9fYXNzaWduKHt9LCAoZmFpbGVkUnVsZXMgfHwge30pKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7XHJcbiAgICAgICAgICAgICAgICB2YWxpZDogIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBwYXNzZWQ6ICFlcnJvcnMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgaW52YWxpZDogISFlcnJvcnMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgZmFpbGVkOiAhIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VkOiB0aGlzLnZhbHVlICE9PSB0aGlzLmluaXRpYWxWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZ2lzdGVyRmllbGQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXBkYXRlUmVuZGVyaW5nQ29udGV4dFJlZnModGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuZnVuY3Rpb24gY29tcHV0ZUNsYXNzT2JqKG5hbWVzLCBmbGFncykge1xyXG4gICAgdmFyIGFjYyA9IHt9O1xyXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmbGFncyk7XHJcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgdmFyIGZsYWcgPSBrZXlzW2ldO1xyXG4gICAgICAgIHZhciBjbGFzc05hbWUgPSAobmFtZXMgJiYgbmFtZXNbZmxhZ10pIHx8IGZsYWc7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZmxhZ3NbZmxhZ107XHJcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGZsYWcgPT09ICd2YWxpZCcgfHwgZmxhZyA9PT0gJ2ludmFsaWQnKSAmJiAhZmxhZ3MudmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBhY2NbY2xhc3NOYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgICAgICAgICAgYWNjW2Nsc10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBfbG9vcF8xKGkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjYztcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVMb29rdXAodm0pIHtcclxuICAgIHZhciBwcm92aWRlcnMgPSB2bS4kX3ZlZU9ic2VydmVyLnJlZnM7XHJcbiAgICB2YXIgcmVkdWNlZCA9IHtcclxuICAgICAgICBuYW1lczoge30sXHJcbiAgICAgICAgdmFsdWVzOiB7fVxyXG4gICAgfTtcclxuICAgIHJldHVybiB2bS5maWVsZERlcHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGRlcE5hbWUpIHtcclxuICAgICAgICBpZiAoIXByb3ZpZGVyc1tkZXBOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY2MudmFsdWVzW2RlcE5hbWVdID0gcHJvdmlkZXJzW2RlcE5hbWVdLnZhbHVlO1xyXG4gICAgICAgIGFjYy5uYW1lc1tkZXBOYW1lXSA9IHByb3ZpZGVyc1tkZXBOYW1lXS5uYW1lO1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCByZWR1Y2VkKTtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0SWQodm0pIHtcclxuICAgIGlmICh2bS52aWQpIHtcclxuICAgICAgICByZXR1cm4gdm0udmlkO1xyXG4gICAgfVxyXG4gICAgaWYgKHZtLm5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdm0ubmFtZTtcclxuICAgIH1cclxuICAgIGlmICh2bS5pZCkge1xyXG4gICAgICAgIHJldHVybiB2bS5pZDtcclxuICAgIH1cclxuICAgIGlmICh2bS5maWVsZE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdm0uZmllbGROYW1lO1xyXG4gICAgfVxyXG4gICAgUFJPVklERVJfQ09VTlRFUisrO1xyXG4gICAgcmV0dXJuIFwiX3ZlZV9cIiArIFBST1ZJREVSX0NPVU5URVI7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlUmVuZGVyaW5nQ29udGV4dFJlZnModm0pIHtcclxuICAgIHZhciBwcm92aWRlZElkID0gZXh0cmFjdElkKHZtKTtcclxuICAgIHZhciBpZCA9IHZtLmlkO1xyXG4gICAgLy8gTm90aGluZyBoYXMgY2hhbmdlZC5cclxuICAgIGlmICghdm0uaXNBY3RpdmUgfHwgKGlkID09PSBwcm92aWRlZElkICYmIHZtLiRfdmVlT2JzZXJ2ZXIucmVmc1tpZF0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdmlkIHdhcyBjaGFuZ2VkLlxyXG4gICAgaWYgKGlkICE9PSBwcm92aWRlZElkICYmIHZtLiRfdmVlT2JzZXJ2ZXIucmVmc1tpZF0gPT09IHZtKSB7XHJcbiAgICAgICAgdm0uJF92ZWVPYnNlcnZlci51bm9ic2VydmUoaWQpO1xyXG4gICAgfVxyXG4gICAgdm0uaWQgPSBwcm92aWRlZElkO1xyXG4gICAgdm0uJF92ZWVPYnNlcnZlci5vYnNlcnZlKHZtKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVmczoge30sXHJcbiAgICAgICAgb2JzZXJ2ZTogZnVuY3Rpb24gKHZtKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmc1t2bS5pZF0gPSB2bTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVub2JzZXJ2ZTogZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlZnNbaWRdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gd2F0Y2hDcm9zc0ZpZWxkRGVwKGN0eCwgZGVwTmFtZSwgd2l0aEhvb2tzKSB7XHJcbiAgICBpZiAod2l0aEhvb2tzID09PSB2b2lkIDApIHsgd2l0aEhvb2tzID0gdHJ1ZTsgfVxyXG4gICAgdmFyIHByb3ZpZGVycyA9IGN0eC4kX3ZlZU9ic2VydmVyLnJlZnM7XHJcbiAgICBpZiAoIWN0eC5fdmVlV2F0Y2hlcnMpIHtcclxuICAgICAgICBjdHguX3ZlZVdhdGNoZXJzID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAoIXByb3ZpZGVyc1tkZXBOYW1lXSAmJiB3aXRoSG9va3MpIHtcclxuICAgICAgICByZXR1cm4gY3R4LiRvbmNlKCdob29rOm1vdW50ZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdhdGNoQ3Jvc3NGaWVsZERlcChjdHgsIGRlcE5hbWUsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICghaXNDYWxsYWJsZShjdHguX3ZlZVdhdGNoZXJzW2RlcE5hbWVdKSAmJiBwcm92aWRlcnNbZGVwTmFtZV0pIHtcclxuICAgICAgICBjdHguX3ZlZVdhdGNoZXJzW2RlcE5hbWVdID0gcHJvdmlkZXJzW2RlcE5hbWVdLiR3YXRjaCgndmFsdWUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHguZmxhZ3MudmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguX25lZWRzVmFsaWRhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjdHgudmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbnZhciBGTEFHU19TVFJBVEVHSUVTID0gW1xyXG4gICAgWydwcmlzdGluZScsICdldmVyeSddLFxyXG4gICAgWydkaXJ0eScsICdzb21lJ10sXHJcbiAgICBbJ3RvdWNoZWQnLCAnc29tZSddLFxyXG4gICAgWyd1bnRvdWNoZWQnLCAnZXZlcnknXSxcclxuICAgIFsndmFsaWQnLCAnZXZlcnknXSxcclxuICAgIFsnaW52YWxpZCcsICdzb21lJ10sXHJcbiAgICBbJ3BlbmRpbmcnLCAnc29tZSddLFxyXG4gICAgWyd2YWxpZGF0ZWQnLCAnZXZlcnknXSxcclxuICAgIFsnY2hhbmdlZCcsICdzb21lJ10sXHJcbiAgICBbJ3Bhc3NlZCcsICdldmVyeSddLFxyXG4gICAgWydmYWlsZWQnLCAnc29tZSddXHJcbl07XHJcbnZhciBPQlNFUlZFUl9DT1VOVEVSID0gMDtcclxuZnVuY3Rpb24gZGF0YSQxKCkge1xyXG4gICAgdmFyIHJlZnMgPSB7fTtcclxuICAgIHZhciBlcnJvcnMgPSB7fTtcclxuICAgIHZhciBmbGFncyA9IGNyZWF0ZU9ic2VydmVyRmxhZ3MoKTtcclxuICAgIHZhciBmaWVsZHMgPSB7fTtcclxuICAgIC8vIEZJWE1FOiBOb3Qgc3VyZSBvZiB0aGlzIG9uZSBjYW4gYmUgdHlwZWQsIGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlLlxyXG4gICAgdmFyIG9ic2VydmVycyA9IFtdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgcmVmczogcmVmcyxcclxuICAgICAgICBvYnNlcnZlcnM6IG9ic2VydmVycyxcclxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcclxuICAgICAgICBmbGFnczogZmxhZ3MsXHJcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcHJvdmlkZVNlbGYoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICRfdmVlT2JzZXJ2ZXI6IHRoaXNcclxuICAgIH07XHJcbn1cclxudmFyIFZhbGlkYXRpb25PYnNlcnZlciA9IFZ1ZS5leHRlbmQoe1xyXG4gICAgbmFtZTogJ1ZhbGlkYXRpb25PYnNlcnZlcicsXHJcbiAgICBwcm92aWRlOiBwcm92aWRlU2VsZixcclxuICAgIGluamVjdDoge1xyXG4gICAgICAgICRfdmVlT2JzZXJ2ZXI6IHtcclxuICAgICAgICAgICAgZnJvbTogJyRfdmVlT2JzZXJ2ZXInLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJHZub2RlLmNvbnRleHQuJF92ZWVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHZub2RlLmNvbnRleHQuJF92ZWVPYnNlcnZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHRhZzoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdzcGFuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JzX1wiICsgT0JTRVJWRVJfQ09VTlRFUisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzbGltOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiBkYXRhJDEsXHJcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy52aWQ7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcyk7XHJcbiAgICAgICAgdmFyIG9uQ2hhbmdlID0gZGVib3VuY2UoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvcnMgPSBfYS5lcnJvcnMsIGZsYWdzID0gX2EuZmxhZ3MsIGZpZWxkcyA9IF9hLmZpZWxkcztcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgICAgICBfdGhpcy5mbGFncyA9IGZsYWdzO1xyXG4gICAgICAgICAgICBfdGhpcy5maWVsZHMgPSBmaWVsZHM7XHJcbiAgICAgICAgfSwgMTYpO1xyXG4gICAgICAgIHRoaXMuJHdhdGNoKGNvbXB1dGVPYnNlcnZlclN0YXRlLCBvbkNoYW5nZSk7XHJcbiAgICB9LFxyXG4gICAgYWN0aXZhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcyk7XHJcbiAgICB9LFxyXG4gICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1bnJlZ2lzdGVyKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1bnJlZ2lzdGVyKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbih0aGlzLCBwcmVwYXJlU2xvdFByb3BzKHRoaXMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbGltICYmIGNoaWxkcmVuLmxlbmd0aCA8PSAxID8gY2hpbGRyZW5bMF0gOiBoKHRoaXMudGFnLCB7IG9uOiB0aGlzLiRsaXN0ZW5lcnMgfSwgY2hpbGRyZW4pO1xyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBvYnNlcnZlOiBmdW5jdGlvbiAoc3Vic2NyaWJlciwga2luZCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSB2b2lkIDApIHsga2luZCA9ICdwcm92aWRlcic7IH1cclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09ICdvYnNlcnZlcicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWZzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMucmVmcyksIChfYSA9IHt9LCBfYVtzdWJzY3JpYmVyLmlkXSA9IHN1YnNjcmliZXIsIF9hKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm9ic2VydmU6IGZ1bmN0aW9uIChpZCwga2luZCkge1xyXG4gICAgICAgICAgICBpZiAoa2luZCA9PT0gdm9pZCAwKSB7IGtpbmQgPSAncHJvdmlkZXInOyB9XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSAncHJvdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSB0aGlzLnJlZnNbaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwcm92aWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuJGRlbGV0ZSh0aGlzLnJlZnMsIGlkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaWR4ID0gZmluZEluZGV4KHRoaXMub2JzZXJ2ZXJzLCBmdW5jdGlvbiAobykgeyByZXR1cm4gby5pZCA9PT0gaWQ7IH0pO1xyXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlV2l0aEluZm86IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLnNpbGVudCwgc2lsZW50ID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzLCBpc1ZhbGlkLCBfYywgZXJyb3JzLCBmbGFncywgZmllbGRzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2QubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChfX3NwcmVhZEFycmF5cyh2YWx1ZXModGhpcy5yZWZzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuICFyLmRpc2FibGVkOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlZikgeyByZXR1cm4gcmVmW3NpbGVudCA/ICd2YWxpZGF0ZVNpbGVudCcgOiAndmFsaWRhdGUnXSgpLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudmFsaWQ7IH0pOyB9KSwgdGhpcy5vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiAhby5kaXNhYmxlZDsgfSkubWFwKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9icy52YWxpZGF0ZSh7IHNpbGVudDogc2lsZW50IH0pOyB9KSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IF9kLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSByZXN1bHRzLmV2ZXJ5KGZ1bmN0aW9uIChyKSB7IHJldHVybiByOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gY29tcHV0ZU9ic2VydmVyU3RhdGUuY2FsbCh0aGlzKSwgZXJyb3JzID0gX2MuZXJyb3JzLCBmbGFncyA9IF9jLmZsYWdzLCBmaWVsZHMgPSBfYy5maWVsZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGRzID0gZmllbGRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzOiBmbGFncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzOiBmaWVsZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQ6IGlzVmFsaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuc2lsZW50LCBzaWxlbnQgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudmFsaWRhdGVXaXRoSW5mbyh7IHNpbGVudDogc2lsZW50IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IChfYy5zZW50KCkpLmlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaXNWYWxpZF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGxlU3VibWl0OiBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudmFsaWRhdGUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQgfHwgIWNiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNiKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyh2YWx1ZXModGhpcy5yZWZzKSwgdGhpcy5vYnNlcnZlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikgeyByZXR1cm4gcmVmLnJlc2V0KCk7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0RXJyb3JzOiBmdW5jdGlvbiAoZXJyb3JzKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBfdGhpcy5yZWZzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByb3ZpZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBlcnJvckFyciA9IGVycm9yc1trZXldIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgZXJyb3JBcnIgPSB0eXBlb2YgZXJyb3JBcnIgPT09ICdzdHJpbmcnID8gW2Vycm9yQXJyXSA6IGVycm9yQXJyO1xyXG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuc2V0RXJyb3JzKGVycm9yQXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5zZXRFcnJvcnMoZXJyb3JzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuZnVuY3Rpb24gdW5yZWdpc3Rlcih2bSkge1xyXG4gICAgaWYgKHZtLiRfdmVlT2JzZXJ2ZXIpIHtcclxuICAgICAgICB2bS4kX3ZlZU9ic2VydmVyLnVub2JzZXJ2ZSh2bS5pZCwgJ29ic2VydmVyJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXIodm0pIHtcclxuICAgIGlmICh2bS4kX3ZlZU9ic2VydmVyKSB7XHJcbiAgICAgICAgdm0uJF92ZWVPYnNlcnZlci5vYnNlcnZlKHZtLCAnb2JzZXJ2ZXInKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwcmVwYXJlU2xvdFByb3BzKHZtKSB7XHJcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHZtLmZsYWdzKSwgeyBlcnJvcnM6IHZtLmVycm9ycywgZmllbGRzOiB2bS5maWVsZHMsIHZhbGlkYXRlOiB2bS52YWxpZGF0ZSwgdmFsaWRhdGVXaXRoSW5mbzogdm0udmFsaWRhdGVXaXRoSW5mbywgcGFzc2VzOiB2bS5oYW5kbGVTdWJtaXQsIGhhbmRsZVN1Ym1pdDogdm0uaGFuZGxlU3VibWl0LCByZXNldDogdm0ucmVzZXQgfSk7XHJcbn1cclxuLy8gQ3JlYXRlcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgdmFsaWRhdGlvbiBmbGFnc1xyXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlckZsYWdzKCkge1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjcmVhdGVGbGFncygpKSwgeyB2YWxpZDogdHJ1ZSwgaW52YWxpZDogZmFsc2UgfSk7XHJcbn1cclxuZnVuY3Rpb24gY29tcHV0ZU9ic2VydmVyU3RhdGUoKSB7XHJcbiAgICB2YXIgdm1zID0gX19zcHJlYWRBcnJheXModmFsdWVzKHRoaXMucmVmcyksIHRoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gIW8uZGlzYWJsZWQ7IH0pKTtcclxuICAgIHZhciBlcnJvcnMgPSB7fTtcclxuICAgIHZhciBmbGFncyA9IGNyZWF0ZU9ic2VydmVyRmxhZ3MoKTtcclxuICAgIHZhciBmaWVsZHMgPSB7fTtcclxuICAgIHZhciBsZW5ndGggPSB2bXMubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciB2bSA9IHZtc1tpXTtcclxuICAgICAgICAvLyB2YWxpZGF0aW9uIHByb3ZpZGVyXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm0uZXJyb3JzKSkge1xyXG4gICAgICAgICAgICBlcnJvcnNbdm0uaWRdID0gdm0uZXJyb3JzO1xyXG4gICAgICAgICAgICBmaWVsZHNbdm0uaWRdID0gX19hc3NpZ24oeyBpZDogdm0uaWQsIG5hbWU6IHZtLm5hbWUsIGZhaWxlZFJ1bGVzOiB2bS5mYWlsZWRSdWxlcyB9LCB2bS5mbGFncyk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOZXN0ZWQgb2JzZXJ2ZXIsIG1lcmdlIGVycm9ycyBhbmQgZmllbGRzXHJcbiAgICAgICAgZXJyb3JzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGVycm9ycyksIHZtLmVycm9ycyk7XHJcbiAgICAgICAgZmllbGRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZpZWxkcyksIHZtLmZpZWxkcyk7XHJcbiAgICB9XHJcbiAgICBGTEFHU19TVFJBVEVHSUVTLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIGZsYWcgPSBfYVswXSwgbWV0aG9kID0gX2FbMV07XHJcbiAgICAgICAgZmxhZ3NbZmxhZ10gPSB2bXNbbWV0aG9kXShmdW5jdGlvbiAodm0pIHsgcmV0dXJuIHZtLmZsYWdzW2ZsYWddOyB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHsgZXJyb3JzOiBlcnJvcnMsIGZsYWdzOiBmbGFncywgZmllbGRzOiBmaWVsZHMgfTtcclxufVxuXG5mdW5jdGlvbiB3aXRoVmFsaWRhdGlvbihjb21wb25lbnQsIG1hcFByb3BzKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAobWFwUHJvcHMgPT09IHZvaWQgMCkgeyBtYXBQcm9wcyA9IGlkZW50aXR5OyB9XHJcbiAgICB2YXIgb3B0aW9ucyA9ICdvcHRpb25zJyBpbiBjb21wb25lbnQgPyBjb21wb25lbnQub3B0aW9ucyA6IGNvbXBvbmVudDtcclxuICAgIHZhciBwcm92aWRlck9wdHMgPSBWYWxpZGF0aW9uUHJvdmlkZXIub3B0aW9ucztcclxuICAgIHZhciBob2MgPSB7XHJcbiAgICAgICAgbmFtZTogKG9wdGlvbnMubmFtZSB8fCAnQW5vbnltb3VzSG9jJykgKyBcIldpdGhWYWxpZGF0aW9uXCIsXHJcbiAgICAgICAgcHJvcHM6IF9fYXNzaWduKHt9LCBwcm92aWRlck9wdHMucHJvcHMpLFxyXG4gICAgICAgIGRhdGE6IHByb3ZpZGVyT3B0cy5kYXRhLFxyXG4gICAgICAgIGNvbXB1dGVkOiBfX2Fzc2lnbih7fSwgcHJvdmlkZXJPcHRzLmNvbXB1dGVkKSxcclxuICAgICAgICBtZXRob2RzOiBfX2Fzc2lnbih7fSwgcHJvdmlkZXJPcHRzLm1ldGhvZHMpLFxyXG4gICAgICAgIGJlZm9yZURlc3Ryb3k6IHByb3ZpZGVyT3B0cy5iZWZvcmVEZXN0cm95LFxyXG4gICAgICAgIGluamVjdDogcHJvdmlkZXJPcHRzLmluamVjdFxyXG4gICAgfTtcclxuICAgIHZhciBldmVudE5hbWUgPSAoKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1vZGVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXZlbnQpIHx8ICdpbnB1dCc7XHJcbiAgICBob2MucmVuZGVyID0gZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckZpZWxkKCk7XHJcbiAgICAgICAgdmFyIHZjdHggPSBjcmVhdGVWYWxpZGF0aW9uQ3R4KHRoaXMpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBfX2Fzc2lnbih7fSwgdGhpcy4kbGlzdGVuZXJzKTtcclxuICAgICAgICB2YXIgbW9kZWwgPSBmaW5kTW9kZWwodGhpcy4kdm5vZGUpO1xyXG4gICAgICAgIHRoaXMuX2lucHV0RXZlbnROYW1lID0gdGhpcy5faW5wdXRFdmVudE5hbWUgfHwgZ2V0SW5wdXRFdmVudE5hbWUodGhpcy4kdm5vZGUsIG1vZGVsKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBmaW5kVmFsdWUodGhpcy4kdm5vZGUpO1xyXG4gICAgICAgIG9uUmVuZGVyVXBkYXRlKHRoaXMsIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgdmFyIF9iID0gY3JlYXRlQ29tbW9uSGFuZGxlcnModGhpcyksIG9uSW5wdXQgPSBfYi5vbklucHV0LCBvbkJsdXIgPSBfYi5vbkJsdXIsIG9uVmFsaWRhdGUgPSBfYi5vblZhbGlkYXRlO1xyXG4gICAgICAgIG1lcmdlVk5vZGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBldmVudE5hbWUsIG9uSW5wdXQpO1xyXG4gICAgICAgIG1lcmdlVk5vZGVMaXN0ZW5lcnMobGlzdGVuZXJzLCAnYmx1cicsIG9uQmx1cik7XHJcbiAgICAgICAgdGhpcy5ub3JtYWxpemVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICBtZXJnZVZOb2RlTGlzdGVuZXJzKGxpc3RlbmVycywgZXZ0LCBvblZhbGlkYXRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBQcm9wcyBhcmUgYW55IGF0dHJzIG5vdCBhc3NvY2lhdGVkIHdpdGggVmFsaWRhdGlvblByb3ZpZGVyIFBsdXMgdGhlIG1vZGVsIHByb3AuXHJcbiAgICAgICAgLy8gV0FSTklORzogQWNjaWRlbnRhbCBwcm9wIG92ZXJ3cml0ZSB3aWxsIHByb2JhYmx5IGhhcHBlbi5cclxuICAgICAgICB2YXIgcHJvcCA9IChmaW5kTW9kZWxDb25maWcodGhpcy4kdm5vZGUpIHx8IHsgcHJvcDogJ3ZhbHVlJyB9KS5wcm9wO1xyXG4gICAgICAgIHZhciBwcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLiRhdHRycyksIChfYSA9IHt9LCBfYVtwcm9wXSA9IG1vZGVsID09PSBudWxsIHx8IG1vZGVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtb2RlbC52YWx1ZSwgX2EpKSwgbWFwUHJvcHModmN0eCkpO1xyXG4gICAgICAgIHJldHVybiBoKG9wdGlvbnMsIHtcclxuICAgICAgICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzLFxyXG4gICAgICAgICAgICBwcm9wczogcHJvcHMsXHJcbiAgICAgICAgICAgIG9uOiBsaXN0ZW5lcnMsXHJcbiAgICAgICAgICAgIHNjb3BlZFNsb3RzOiB0aGlzLiRzY29wZWRTbG90c1xyXG4gICAgICAgIH0sIG5vcm1hbGl6ZVNsb3RzKHRoaXMuJHNsb3RzLCB0aGlzLiR2bm9kZS5jb250ZXh0KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGhvYztcclxufVxuXG52YXIgdmVyc2lvbiA9ICczLjQuNSc7XG5cbmV4cG9ydCB7IFZhbGlkYXRpb25PYnNlcnZlciwgVmFsaWRhdGlvblByb3ZpZGVyLCBjb25maWd1cmUsIGV4dGVuZCwgbG9jYWxlQ2hhbmdlZCwgbG9jYWxpemUsIG5vcm1hbGl6ZVJ1bGVzLCBzZXRJbnRlcmFjdGlvbk1vZGUsIHZhbGlkYXRlLCB2ZXJzaW9uLCB3aXRoVmFsaWRhdGlvbiB9O1xuIiwiKGZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbXCJ2dWUtZWxsaXBzZS1wcm9ncmVzc1wiXT1lKCk6dFtcInZ1ZS1lbGxpcHNlLXByb2dyZXNzXCJdPWUoKX0pKFwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIHIobil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBpPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W25dLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHIpLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIHIubT10LHIuYz1lLHIuZD1mdW5jdGlvbih0LGUsbil7ci5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sci5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PXIodCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgaSBpbiB0KXIuZChuLGksZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdFtcImRlZmF1bHRcIl19OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiByLmQoZSxcImFcIixlKSxlfSxyLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LHIucD1cIlwiLHIoci5zPVwiZmIxNVwiKX0oe1wiMDBlZVwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiYjYyMlwiKSxpPW4oXCJ0b1N0cmluZ1RhZ1wiKSxvPXt9O29baV09XCJ6XCIsdC5leHBvcnRzPVwiW29iamVjdCB6XVwiPT09U3RyaW5nKG8pfSxcIjAxZjNcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjZkNDBcIiksaT1yLm4obik7aS5hfSxcIjAyZDRcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjI0ZmJcIik7ZT1uKCExKSxlLnB1c2goW3QuaSxcIkAtd2Via2l0LWtleWZyYW1lcyBlcC1kb3QtLWluaXRfX2xvb3B7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1zdGFydCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LXN0YXJ0KSl9MzMley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSl9NjYley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1sb29wLWVuZCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LWxvb3AtZW5kKSl9fUBrZXlmcmFtZXMgZXAtZG90LS1pbml0X19sb29wezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3Qtc3RhcnQpKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1zdGFydCkpfTMzJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LTM2MCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LTM2MCkpfTY2JXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LTM2MCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LTM2MCkpfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtbG9vcC1lbmQpKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1sb29wLWVuZCkpfX1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtZG90LS1pbml0X19yZXZlcnNlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1lbmQpKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1lbmQpKX19QGtleWZyYW1lcyBlcC1kb3QtLWluaXRfX3JldmVyc2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LWVuZCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LWVuZCkpfX1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtZG90LS1pbml0X19ib3VuY2V7MCV7b3BhY2l0eTowfTkwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGVwLWRvdC0taW5pdF9fYm91bmNlezAle29wYWNpdHk6MH05MCV7b3BhY2l0eTowfXRve29wYWNpdHk6MX19QC13ZWJraXQta2V5ZnJhbWVzIGVwLWRvdC0taW5pdF9fZGlzYWJsZWR7MCV7b3BhY2l0eTowfTkwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGVwLWRvdC0taW5pdF9fZGlzYWJsZWR7MCV7b3BhY2l0eTowfTkwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX0uZXAtY2lyY2xlLS1wcm9ncmVzc3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH0uZXAtY2lyY2xlLS1wcm9ncmVzcy5hbmltYXRpb25fX2RlZmF1bHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fZGVmYXVsdDthbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fZGVmYXVsdH0uZXAtY2lyY2xlLS1wcm9ncmVzcy5hbmltYXRpb25fX3Jzey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZXAtcHJvZ3Jlc3MtLWluaXRfX3JzO2FuaW1hdGlvbi1uYW1lOmVwLXByb2dyZXNzLS1pbml0X19yc30uZXAtY2lyY2xlLS1wcm9ncmVzcy5hbmltYXRpb25fX2JvdW5jZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLXByb2dyZXNzLS1pbml0X19ib3VuY2U7YW5pbWF0aW9uLW5hbWU6ZXAtcHJvZ3Jlc3MtLWluaXRfX2JvdW5jZX0uZXAtY2lyY2xlLS1wcm9ncmVzcy5hbmltYXRpb25fX3JldmVyc2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fcmV2ZXJzZTthbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fcmV2ZXJzZX0uZXAtY2lyY2xlLS1wcm9ncmVzcy5hbmltYXRpb25fX2xvb3B7LXdlYmtpdC1hbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fbG9vcDthbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0taW5pdF9fbG9vcH0uZXAtY2lyY2xlLS1sb2FkaW5nLmFuaW1hdGlvbl9fbG9hZGluZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLXByb2dyZXNzLS1sb2FkaW5nLGVwLXByb2dyZXNzLS1sb2FkaW5nX19yb3RhdGlvbjthbmltYXRpb24tbmFtZTplcC1wcm9ncmVzcy0tbG9hZGluZyxlcC1wcm9ncmVzcy0tbG9hZGluZ19fcm90YXRpb247LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlIWltcG9ydGFudDthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjoycywxcyFpbXBvcnRhbnQ7YW5pbWF0aW9uLWR1cmF0aW9uOjJzLDFzIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQsbGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQsbGluZWFyfS5lcC1oYWxmLWNpcmNsZS0tbG9hZGluZy5hbmltYXRpb25fX2xvYWRpbmd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTplcC1oYWxmLXByb2dyZXNzLS1sb2FkaW5nO2FuaW1hdGlvbi1uYW1lOmVwLWhhbGYtcHJvZ3Jlc3MtLWxvYWRpbmc7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlIWltcG9ydGFudDthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjoycyFpbXBvcnRhbnQ7YW5pbWF0aW9uLWR1cmF0aW9uOjJzIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH0uZXAtY2lyY2xlLS1lbXB0eS5lcC1jaXJjbGUtLW5vZGF0YSwuZXAtaGFsZi1jaXJjbGUtLWVtcHR5LmVwLWNpcmNsZS0tbm9kYXRhe29wYWNpdHk6LjV9LmVwLWNpcmNsZS0tcHJvZ3Jlc3NfX2RvdC1jb250YWluZXJ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9LmVwLWNpcmNsZS0tcHJvZ3Jlc3NfX2RvdC1jb250YWluZXIuYW5pbWF0aW9uX19yc3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLWRvdC0taW5pdF9fcnM7YW5pbWF0aW9uLW5hbWU6ZXAtZG90LS1pbml0X19yc30uZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LWNvbnRhaW5lci5hbmltYXRpb25fX2JvdW5jZXstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLWRvdC0taW5pdF9fZGlzYWJsZWQ7YW5pbWF0aW9uLW5hbWU6ZXAtZG90LS1pbml0X19kaXNhYmxlZH0uZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LWNvbnRhaW5lci5hbmltYXRpb25fX3JldmVyc2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTplcC1kb3QtLWluaXRfX3JldmVyc2U7YW5pbWF0aW9uLW5hbWU6ZXAtZG90LS1pbml0X19yZXZlcnNlfS5lcC1jaXJjbGUtLXByb2dyZXNzX19kb3QtY29udGFpbmVyLmFuaW1hdGlvbl9fbG9vcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLWRvdC0taW5pdF9fbG9vcDthbmltYXRpb24tbmFtZTplcC1kb3QtLWluaXRfX2xvb3B9LmVwLWNpcmNsZS0tcHJvZ3Jlc3NfX2RvdC1jb250YWluZXIuZXAtaGFsZi1jaXJjbGUtcHJvZ3Jlc3NfX2RvdC5hbmltYXRpb25fX2JvdW5jZSwuZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LWNvbnRhaW5lci5lcC1oYWxmLWNpcmNsZS1wcm9ncmVzc19fZG90LmFuaW1hdGlvbl9fbG9vcHstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmVwLWRvdC0taW5pdF9fZGlzYWJsZWQ7YW5pbWF0aW9uLW5hbWU6ZXAtZG90LS1pbml0X19kaXNhYmxlZH1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2RlZmF1bHR7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9dG97c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtc3Ryb2tlLW9mZnNldCl9fUBrZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2RlZmF1bHR7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9dG97c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtc3Ryb2tlLW9mZnNldCl9fUAtd2Via2l0LWtleWZyYW1lcyBlcC1wcm9ncmVzcy0taW5pdF9fcnN7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9NTAle3N0cm9rZS1kYXNob2Zmc2V0OjB9dG97c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtc3Ryb2tlLW9mZnNldCl9fUBrZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX3JzezAle3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTUwJXtzdHJva2UtZGFzaG9mZnNldDowfXRve3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLXN0cm9rZS1vZmZzZXQpfX1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2JvdW5jZXswJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTMzJXtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1ib3VuY2Utb3V0LXN0cm9rZS1vZmZzZXQpfTY2JXtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1ib3VuY2UtaW4tc3Ryb2tlLW9mZnNldCl9dG97c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtc3Ryb2tlLW9mZnNldCl9fUBrZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2JvdW5jZXswJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTMzJXtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1ib3VuY2Utb3V0LXN0cm9rZS1vZmZzZXQpfTY2JXtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1ib3VuY2UtaW4tc3Ryb2tlLW9mZnNldCl9dG97c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtc3Ryb2tlLW9mZnNldCl9fUAtd2Via2l0LWtleWZyYW1lcyBlcC1wcm9ncmVzcy0taW5pdF9fcmV2ZXJzZXswJXtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1jaXJjdW1mZXJlbmNlKX01MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtZG91YmxlLWNpcmN1bWZlcmVuY2UpfXRve3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLXJldmVyc2Utc3Ryb2tlLW9mZnNldCl9fUBrZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX3JldmVyc2V7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9NTAle3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWRvdWJsZS1jaXJjdW1mZXJlbmNlKX10b3tzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1yZXZlcnNlLXN0cm9rZS1vZmZzZXQpfX1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2xvb3B7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9MzMle3N0cm9rZS1kYXNob2Zmc2V0OjB9NjYle3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLW5lZ2F0aXZlLWNpcmN1bWZlcmVuY2UpfXRve3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWxvb3Atc3Ryb2tlLW9mZnNldCl9fUBrZXlmcmFtZXMgZXAtcHJvZ3Jlc3MtLWluaXRfX2xvb3B7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9MzMle3N0cm9rZS1kYXNob2Zmc2V0OjB9NjYle3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLW5lZ2F0aXZlLWNpcmN1bWZlcmVuY2UpfXRve3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWxvb3Atc3Ryb2tlLW9mZnNldCl9fUAtd2Via2l0LWtleWZyYW1lcyBlcC1wcm9ncmVzcy0tbG9hZGluZ3swJXtvcGFjaXR5Oi41O3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTUwJXtvcGFjaXR5Oi44O3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWxvYWRpbmctc3Ryb2tlLW9mZnNldCl9dG97b3BhY2l0eTouNTtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1jaXJjdW1mZXJlbmNlKX19QGtleWZyYW1lcyBlcC1wcm9ncmVzcy0tbG9hZGluZ3swJXtvcGFjaXR5Oi41O3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTUwJXtvcGFjaXR5Oi44O3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWxvYWRpbmctc3Ryb2tlLW9mZnNldCl9dG97b3BhY2l0eTouNTtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1jaXJjdW1mZXJlbmNlKX19QC13ZWJraXQta2V5ZnJhbWVzIGVwLWhhbGYtcHJvZ3Jlc3MtLWxvYWRpbmd7MCV7b3BhY2l0eTouNTtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1jaXJjdW1mZXJlbmNlKX01MCV7b3BhY2l0eTouODtzdHJva2UtZGFzaG9mZnNldDowfXRve29wYWNpdHk6LjU7c3Ryb2tlLWRhc2hvZmZzZXQ6dmFyKC0tZXAtY2lyY3VtZmVyZW5jZSl9fUBrZXlmcmFtZXMgZXAtaGFsZi1wcm9ncmVzcy0tbG9hZGluZ3swJXtvcGFjaXR5Oi41O3N0cm9rZS1kYXNob2Zmc2V0OnZhcigtLWVwLWNpcmN1bWZlcmVuY2UpfTUwJXtvcGFjaXR5Oi44O3N0cm9rZS1kYXNob2Zmc2V0OjB9dG97b3BhY2l0eTouNTtzdHJva2UtZGFzaG9mZnNldDp2YXIoLS1lcC1jaXJjdW1mZXJlbmNlKX19QC13ZWJraXQta2V5ZnJhbWVzIGVwLXByb2dyZXNzLS1sb2FkaW5nX19yb3RhdGlvbnt0b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIGVwLXByb2dyZXNzLS1sb2FkaW5nX19yb3RhdGlvbnt0b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1ALXdlYmtpdC1rZXlmcmFtZXMgZXAtZG90LS1pbml0X19yc3swJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LXN0YXJ0KSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3Qtc3RhcnQpKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC0zNjApKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LWVuZCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LWVuZCkpfX1Aa2V5ZnJhbWVzIGVwLWRvdC0taW5pdF9fcnN7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1zdGFydCkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZXAtZG90LXN0YXJ0KSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSk7dHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1lcC1kb3QtMzYwKSl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1lbmQpKTt0cmFuc2Zvcm06cm90YXRlKHZhcigtLWVwLWRvdC1lbmQpKX19LmVwLXN2Zy1jb250YWluZXJ7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlfS5lcC1zdmctY29udGFpbmVyLmVwLXJldmVyc2V7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKC0xKTt0cmFuc2Zvcm06c2NhbGVYKC0xKX1nLmVwLWNpcmNsZS0tY29udGFpbmVyey13ZWJraXQtdHJhbnNpdGlvbjppbmhlcml0Oy1vLXRyYW5zaXRpb246aW5oZXJpdDt0cmFuc2l0aW9uOmluaGVyaXQ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlfVwiLFwiXCJdKSx0LmV4cG9ydHM9ZX0sXCIwMzY2XCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIxYzBiXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7aWYobih0KSx2b2lkIDA9PT1lKXJldHVybiB0O3N3aXRjaChyKXtjYXNlIDA6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbChlKX07Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdC5jYWxsKGUscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gdC5jYWxsKGUscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4saSl7cmV0dXJuIHQuY2FsbChlLHIsbixpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX19LFwiMDU0ZlwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiYTIzMVwiKSxpPXIubihuKTtpLmF9LFwiMDU3ZlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZmM2YVwiKSxpPXIoXCIyNDFjXCIpLmYsbz17fS50b1N0cmluZyxhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gaSh0KX1jYXRjaChlKXtyZXR1cm4gYS5zbGljZSgpfX07dC5leHBvcnRzLmY9ZnVuY3Rpb24odCl7cmV0dXJuIGEmJlwiW29iamVjdCBXaW5kb3ddXCI9PW8uY2FsbCh0KT9zKHQpOmkobih0KSl9fSxcIjA2Y2ZcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjgzYWJcIiksaT1yKFwiZDFlN1wiKSxvPXIoXCI1YzZjXCIpLGE9cihcImZjNmFcIikscz1yKFwiYzA0ZVwiKSxjPXIoXCI1MTM1XCIpLHU9cihcIjBjZmJcIiksZj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2UuZj1uP2Y6ZnVuY3Rpb24odCxlKXtpZih0PWEodCksZT1zKGUsITApLHUpdHJ5e3JldHVybiBmKHQsZSl9Y2F0Y2gocil7fWlmKGModCxlKSlyZXR1cm4gbyghaS5mLmNhbGwodCxlKSx0W2VdKX19LFwiMGNmYlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODNhYlwiKSxpPXIoXCJkMDM5XCIpLG89cihcImNjMTJcIik7dC5leHBvcnRzPSFuJiYhaSgoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KG8oXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9LDExNDg6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJhNjkxXCIpLGk9cihcIjFkODBcIik7dC5leHBvcnRzPVwiXCIucmVwZWF0fHxmdW5jdGlvbih0KXt2YXIgZT1TdHJpbmcoaSh0aGlzKSkscj1cIlwiLG89bih0KTtpZihvPDB8fG89PTEvMCl0aHJvdyBSYW5nZUVycm9yKFwiV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zXCIpO2Zvcig7bz4wOyhvPj4+PTEpJiYoZSs9ZSkpMSZvJiYocis9ZSk7cmV0dXJuIHJ9fSxcIjExYWVcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjI0ZmJcIik7ZT1uKCExKSxlLnB1c2goW3QuaSxcIi5lcC1jb250YWluZXJbZGF0YS12LTU5ZDZhNzhkXXtkaXNwbGF5OmlubGluZS1ibG9jaztvdmVyZmxvdzpoaWRkZW59LmVwLWNvbnRlbnRbZGF0YS12LTU5ZDZhNzhkXXttYXgtd2lkdGg6aW5oZXJpdDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0uZXAtY29udGVudFtkYXRhLXYtNTlkNmE3OGRdLC5lcC1sZWdlbmQtLWNvbnRhaW5lcltkYXRhLXYtNTlkNmE3OGRdey13ZWJraXQtdHJhbnNpdGlvbjppbmhlcml0Oy1vLXRyYW5zaXRpb246aW5oZXJpdDt0cmFuc2l0aW9uOmluaGVyaXR9LmVwLWxlZ2VuZC0tY29udGFpbmVyW2RhdGEtdi01OWQ2YTc4ZF17cG9zaXRpb246YWJzb2x1dGU7dGV4dC1hbGlnbjpjZW50ZXJ9LmVwLWxlZ2VuZC0tdmFsdWVbZGF0YS12LTU5ZDZhNzhkXXstd2Via2l0LXRyYW5zaXRpb246LjNzOy1vLXRyYW5zaXRpb246LjNzO3RyYW5zaXRpb246LjNzO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6MX0uZXAtaGlkZGVuW2RhdGEtdi01OWQ2YTc4ZF17b3BhY2l0eTowfXN2Zy5lcC1zdmdbZGF0YS12LTU5ZDZhNzhkXXstd2Via2l0LXRyYW5zaXRpb246aW5oZXJpdDstby10cmFuc2l0aW9uOmluaGVyaXQ7dHJhbnNpdGlvbjppbmhlcml0Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDUwJX1cIixcIlwiXSksdC5leHBvcnRzPWV9LDEyNzY6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJkNzg0XCIpLGk9cihcIjQ0ZTdcIiksbz1yKFwiODI1YVwiKSxhPXIoXCIxZDgwXCIpLHM9cihcIjQ4NDBcIiksYz1yKFwiOGFhNVwiKSx1PXIoXCI1MGM0XCIpLGY9cihcIjE0YzNcIiksbD1yKFwiOTI2M1wiKSxwPXIoXCJkMDM5XCIpLGQ9W10ucHVzaCxoPU1hdGgubWluLHY9NDI5NDk2NzI5NSxtPSFwKChmdW5jdGlvbigpe3JldHVybiFSZWdFeHAodixcInlcIil9KSk7bihcInNwbGl0XCIsMiwoZnVuY3Rpb24odCxlLHIpe3ZhciBuO3JldHVybiBuPVwiY1wiPT1cImFiYmNcIi5zcGxpdCgvKGIpKi8pWzFdfHw0IT1cInRlc3RcIi5zcGxpdCgvKD86KS8sLTEpLmxlbmd0aHx8MiE9XCJhYlwiLnNwbGl0KC8oPzphYikqLykubGVuZ3RofHw0IT1cIi5cIi5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGh8fFwiLlwiLnNwbGl0KC8oKSgpLykubGVuZ3RoPjF8fFwiXCIuc3BsaXQoLy4/LykubGVuZ3RoP2Z1bmN0aW9uKHQscil7dmFyIG49U3RyaW5nKGEodGhpcykpLG89dm9pZCAwPT09cj92OnI+Pj4wO2lmKDA9PT1vKXJldHVybltdO2lmKHZvaWQgMD09PXQpcmV0dXJuW25dO2lmKCFpKHQpKXJldHVybiBlLmNhbGwobix0LG8pO3ZhciBzLGMsdSxmPVtdLHA9KHQuaWdub3JlQ2FzZT9cImlcIjpcIlwiKSsodC5tdWx0aWxpbmU/XCJtXCI6XCJcIikrKHQudW5pY29kZT9cInVcIjpcIlwiKSsodC5zdGlja3k/XCJ5XCI6XCJcIiksaD0wLG09bmV3IFJlZ0V4cCh0LnNvdXJjZSxwK1wiZ1wiKTt3aGlsZShzPWwuY2FsbChtLG4pKXtpZihjPW0ubGFzdEluZGV4LGM+aCYmKGYucHVzaChuLnNsaWNlKGgscy5pbmRleCkpLHMubGVuZ3RoPjEmJnMuaW5kZXg8bi5sZW5ndGgmJmQuYXBwbHkoZixzLnNsaWNlKDEpKSx1PXNbMF0ubGVuZ3RoLGg9YyxmLmxlbmd0aD49bykpYnJlYWs7bS5sYXN0SW5kZXg9PT1zLmluZGV4JiZtLmxhc3RJbmRleCsrfXJldHVybiBoPT09bi5sZW5ndGg/IXUmJm0udGVzdChcIlwiKXx8Zi5wdXNoKFwiXCIpOmYucHVzaChuLnNsaWNlKGgpKSxmLmxlbmd0aD5vP2Yuc2xpY2UoMCxvKTpmfTpcIjBcIi5zcGxpdCh2b2lkIDAsMCkubGVuZ3RoP2Z1bmN0aW9uKHQscil7cmV0dXJuIHZvaWQgMD09PXQmJjA9PT1yP1tdOmUuY2FsbCh0aGlzLHQscil9OmUsW2Z1bmN0aW9uKGUscil7dmFyIGk9YSh0aGlzKSxvPXZvaWQgMD09ZT92b2lkIDA6ZVt0XTtyZXR1cm4gdm9pZCAwIT09bz9vLmNhbGwoZSxpLHIpOm4uY2FsbChTdHJpbmcoaSksZSxyKX0sZnVuY3Rpb24odCxpKXt2YXIgYT1yKG4sdCx0aGlzLGksbiE9PWUpO2lmKGEuZG9uZSlyZXR1cm4gYS52YWx1ZTt2YXIgbD1vKHQpLHA9U3RyaW5nKHRoaXMpLGQ9cyhsLFJlZ0V4cCksZz1sLnVuaWNvZGUseT0obC5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyhsLm11bHRpbGluZT9cIm1cIjpcIlwiKSsobC51bmljb2RlP1widVwiOlwiXCIpKyhtP1wieVwiOlwiZ1wiKSxiPW5ldyBkKG0/bDpcIl4oPzpcIitsLnNvdXJjZStcIilcIix5KSx4PXZvaWQgMD09PWk/djppPj4+MDtpZigwPT09eClyZXR1cm5bXTtpZigwPT09cC5sZW5ndGgpcmV0dXJuIG51bGw9PT1mKGIscCk/W3BdOltdO3ZhciBrPTAsdz0wLF89W107d2hpbGUodzxwLmxlbmd0aCl7Yi5sYXN0SW5kZXg9bT93OjA7dmFyIFMsRT1mKGIsbT9wOnAuc2xpY2UodykpO2lmKG51bGw9PT1FfHwoUz1oKHUoYi5sYXN0SW5kZXgrKG0/MDp3KSkscC5sZW5ndGgpKT09PWspdz1jKHAsdyxnKTtlbHNle2lmKF8ucHVzaChwLnNsaWNlKGssdykpLF8ubGVuZ3RoPT09eClyZXR1cm4gXztmb3IodmFyIFQ9MTtUPD1FLmxlbmd0aC0xO1QrKylpZihfLnB1c2goRVtUXSksXy5sZW5ndGg9PT14KXJldHVybiBfO3c9az1TfX1yZXR1cm4gXy5wdXNoKHAuc2xpY2UoaykpLF99XX0pLCFtKX0sXCIxMjlmXCI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9T2JqZWN0LmlzfHxmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZT8wIT09dHx8MS90PT09MS9lOnQhPXQmJmUhPWV9fSxcIjEzZDVcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjIzZTdcIiksaT1yKFwiZDU4ZlwiKS5sZWZ0LG89cihcImE2NDBcIiksYT1yKFwiYWU0MFwiKSxzPW8oXCJyZWR1Y2VcIiksYz1hKFwicmVkdWNlXCIsezE6MH0pO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhY30se3JlZHVjZTpmdW5jdGlvbih0KXtyZXR1cm4gaSh0aGlzLHQsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LFwiMTRjM1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiYzZiNlwiKSxpPXIoXCI5MjYzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByPXQuZXhlYztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygcil7dmFyIG89ci5jYWxsKHQsZSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBvKXRocm93IFR5cGVFcnJvcihcIlJlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbFwiKTtyZXR1cm4gb31pZihcIlJlZ0V4cFwiIT09bih0KSl0aHJvdyBUeXBlRXJyb3IoXCJSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyXCIpO3JldHVybiBpLmNhbGwodCxlKX19LFwiMTU5YlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZGE4NFwiKSxpPXIoXCJmZGJjXCIpLG89cihcIjE3YzJcIiksYT1yKFwiOTExMlwiKTtmb3IodmFyIHMgaW4gaSl7dmFyIGM9bltzXSx1PWMmJmMucHJvdG90eXBlO2lmKHUmJnUuZm9yRWFjaCE9PW8pdHJ5e2EodSxcImZvckVhY2hcIixvKX1jYXRjaChmKXt1LmZvckVhY2g9b319fSxcIjE3YzJcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcImI3MjdcIikuZm9yRWFjaCxpPXIoXCJhNjQwXCIpLG89cihcImFlNDBcIiksYT1pKFwiZm9yRWFjaFwiKSxzPW8oXCJmb3JFYWNoXCIpO3QuZXhwb3J0cz1hJiZzP1tdLmZvckVhY2g6ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19LFwiMTlhYVwiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBUeXBlRXJyb3IoXCJJbmNvcnJlY3QgXCIrKHI/citcIiBcIjpcIlwiKStcImludm9jYXRpb25cIik7cmV0dXJuIHR9fSxcIjFiZTRcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwNjZcIik7dC5leHBvcnRzPW4oXCJkb2N1bWVudFwiLFwiZG9jdW1lbnRFbGVtZW50XCIpfSxcIjFjMGJcIjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcihTdHJpbmcodCkrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIHR9fSxcIjFjN2VcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImI2MjJcIiksaT1uKFwiaXRlcmF0b3JcIiksbz0hMTt0cnl7dmFyIGE9MCxzPXtuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ISFhKyt9fSxyZXR1cm46ZnVuY3Rpb24oKXtvPSEwfX07c1tpXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxBcnJheS5mcm9tKHMsKGZ1bmN0aW9uKCl7dGhyb3cgMn0pKX1jYXRjaChjKXt9dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIWUmJiFvKXJldHVybiExO3ZhciByPSExO3RyeXt2YXIgbj17fTtuW2ldPWZ1bmN0aW9uKCl7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpyPSEwfX19fSx0KG4pfWNhdGNoKGMpe31yZXR1cm4gcn19LFwiMWNkY1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMzQyZlwiKTt0LmV4cG9ydHM9LyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KG4pfSxcIjFkMWFcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjI0ZmJcIik7ZT1uKCExKSxlLnB1c2goW3QuaSxcImcuZXAtaGFsZi1jaXJjbGVbZGF0YS12LTViMzdlYmMzXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCV9XCIsXCJcIl0pLHQuZXhwb3J0cz1lfSxcIjFkODBcIjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIrdCk7cmV0dXJuIHR9fSxcIjFkZGVcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwMzlcIiksaT1yKFwiYjYyMlwiKSxvPXIoXCIyZDAwXCIpLGE9aShcInNwZWNpZXNcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBvPj01MXx8IW4oKGZ1bmN0aW9uKCl7dmFyIGU9W10scj1lLmNvbnN0cnVjdG9yPXt9O3JldHVybiByW2FdPWZ1bmN0aW9uKCl7cmV0dXJue2ZvbzoxfX0sMSE9PWVbdF0oQm9vbGVhbikuZm9vfSkpfX0sMjI2NjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjgyNWFcIiksaT1yKFwiZTk1YVwiKSxvPXIoXCI1MGM0XCIpLGE9cihcIjAzNjZcIikscz1yKFwiMzVhMVwiKSxjPXIoXCI5YmRkXCIpLHU9ZnVuY3Rpb24odCxlKXt0aGlzLnN0b3BwZWQ9dCx0aGlzLnJlc3VsdD1lfSxmPXQuZXhwb3J0cz1mdW5jdGlvbih0LGUscixmLGwpe3ZhciBwLGQsaCx2LG0sZyx5LGI9YShlLHIsZj8yOjEpO2lmKGwpcD10O2Vsc2V7aWYoZD1zKHQpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGQpdGhyb3cgVHlwZUVycm9yKFwiVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZVwiKTtpZihpKGQpKXtmb3IoaD0wLHY9byh0Lmxlbmd0aCk7dj5oO2grKylpZihtPWY/YihuKHk9dFtoXSlbMF0seVsxXSk6Yih0W2hdKSxtJiZtIGluc3RhbmNlb2YgdSlyZXR1cm4gbTtyZXR1cm4gbmV3IHUoITEpfXA9ZC5jYWxsKHQpfWc9cC5uZXh0O3doaWxlKCEoeT1nLmNhbGwocCkpLmRvbmUpaWYobT1jKHAsYix5LnZhbHVlLGYpLFwib2JqZWN0XCI9PXR5cGVvZiBtJiZtJiZtIGluc3RhbmNlb2YgdSlyZXR1cm4gbTtyZXR1cm4gbmV3IHUoITEpfTtmLnN0b3A9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB1KCEwLHQpfX0sXCIyM2NiXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJhNjkxXCIpLGk9TWF0aC5tYXgsbz1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcj1uKHQpO3JldHVybiByPDA/aShyK2UsMCk6byhyLGUpfX0sXCIyM2U3XCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJkYTg0XCIpLGk9cihcIjA2Y2ZcIikuZixvPXIoXCI5MTEyXCIpLGE9cihcIjZlZWJcIikscz1yKFwiY2U0ZVwiKSxjPXIoXCJlODkzXCIpLHU9cihcIjk0Y2FcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIHIsZixsLHAsZCxoLHY9dC50YXJnZXQsbT10Lmdsb2JhbCxnPXQuc3RhdDtpZihmPW0/bjpnP25bdl18fHModix7fSk6KG5bdl18fHt9KS5wcm90b3R5cGUsZilmb3IobCBpbiBlKXtpZihkPWVbbF0sdC5ub1RhcmdldEdldD8oaD1pKGYsbCkscD1oJiZoLnZhbHVlKTpwPWZbbF0scj11KG0/bDp2KyhnP1wiLlwiOlwiI1wiKStsLHQuZm9yY2VkKSwhciYmdm9pZCAwIT09cCl7aWYodHlwZW9mIGQ9PT10eXBlb2YgcCljb250aW51ZTtjKGQscCl9KHQuc2hhbXx8cCYmcC5zaGFtKSYmbyhkLFwic2hhbVwiLCEwKSxhKGYsbCxkLHQpfX19LFwiMjQxY1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiY2E4NFwiKSxpPXIoXCI3ODM5XCIpLG89aS5jb25jYXQoXCJsZW5ndGhcIixcInByb3RvdHlwZVwiKTtlLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsbyl9fSwyNDc0OmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiZDA3ZlwiKSxpPXIubihuKTtpLmF9LFwiMjRmYlwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKHQsZSl7dmFyIHI9dFsxXXx8XCJcIixuPXRbM107aWYoIW4pcmV0dXJuIHI7aWYoZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGJ0b2Epe3ZhciBvPWkobiksYT1uLnNvdXJjZXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KG4uc291cmNlUm9vdHx8XCJcIikuY29uY2F0KHQsXCIgKi9cIil9KSk7cmV0dXJuW3JdLmNvbmNhdChhKS5jb25jYXQoW29dKS5qb2luKFwiXFxuXCIpfXJldHVybltyXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIGkodCl7dmFyIGU9YnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodCkpKSkscj1cInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChlKTtyZXR1cm5cIi8qIyBcIi5jb25jYXQocixcIiAqL1wiKX10LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuIGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKGUpe3ZhciByPW4oZSx0KTtyZXR1cm4gZVsyXT9cIkBtZWRpYSBcIi5jb25jYXQoZVsyXSxcIiB7XCIpLmNvbmNhdChyLFwifVwiKTpyfSkpLmpvaW4oXCJcIil9LGUuaT1mdW5jdGlvbih0LHIsbil7XCJzdHJpbmdcIj09PXR5cGVvZiB0JiYodD1bW251bGwsdCxcIlwiXV0pO3ZhciBpPXt9O2lmKG4pZm9yKHZhciBvPTA7bzx0aGlzLmxlbmd0aDtvKyspe3ZhciBhPXRoaXNbb11bMF07bnVsbCE9YSYmKGlbYV09ITApfWZvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKXt2YXIgYz1bXS5jb25jYXQodFtzXSk7biYmaVtjWzBdXXx8KHImJihjWzJdP2NbMl09XCJcIi5jb25jYXQocixcIiBhbmQgXCIpLmNvbmNhdChjWzJdKTpjWzJdPXIpLGUucHVzaChjKSl9fSxlfX0sMjUzMjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjIzZTdcIiksaT1yKFwiNWEzNFwiKSxvPXIoXCIxZDgwXCIpLGE9cihcImFiMTNcIik7bih7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITAsZm9yY2VkOiFhKFwiaW5jbHVkZXNcIil9LHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4hIX5TdHJpbmcobyh0aGlzKSkuaW5kZXhPZihpKHQpLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sXCIyNWYwXCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCI2ZWViXCIpLGk9cihcIjgyNWFcIiksbz1yKFwiZDAzOVwiKSxhPXIoXCJhZDZkXCIpLHM9XCJ0b1N0cmluZ1wiLGM9UmVnRXhwLnByb3RvdHlwZSx1PWNbc10sZj1vKChmdW5jdGlvbigpe3JldHVyblwiL2EvYlwiIT11LmNhbGwoe3NvdXJjZTpcImFcIixmbGFnczpcImJcIn0pfSkpLGw9dS5uYW1lIT1zOyhmfHxsKSYmbihSZWdFeHAucHJvdG90eXBlLHMsKGZ1bmN0aW9uKCl7dmFyIHQ9aSh0aGlzKSxlPVN0cmluZyh0LnNvdXJjZSkscj10LmZsYWdzLG49U3RyaW5nKHZvaWQgMD09PXImJnQgaW5zdGFuY2VvZiBSZWdFeHAmJiEoXCJmbGFnc1wiaW4gYyk/YS5jYWxsKHQpOnIpO3JldHVyblwiL1wiK2UrXCIvXCIrbn0pLHt1bnNhZmU6ITB9KX0sMjYyNjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcImQwNjZcIiksaT1yKFwiOWJmMlwiKSxvPXIoXCJiNjIyXCIpLGE9cihcIjgzYWJcIikscz1vKFwic3BlY2llc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9bih0KSxyPWkuZjthJiZlJiYhZVtzXSYmcihlLHMse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319KX19LFwiMjczYVwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiZDMwY1wiKSxpPXIubihuKTtpLmF9LFwiMjhhYlwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LHI9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gcihcImRpdlwiLHtzdGF0aWNDbGFzczpcImVwLWNvbnRhaW5lclwiLHN0eWxlOnt3aWR0aDp0LnNpemUrXCJweFwiLGhlaWdodDp0LnNpemUrXCJweFwifX0sW3IoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJlcC1jb250ZW50XCJ9LFt0Ll9sKHQuY2lyY2xlc0RhdGEsKGZ1bmN0aW9uKGUsbil7cmV0dXJuIHIoXCJjaXJjbGUtY29udGFpbmVyXCIsdC5fYih7a2V5Om4sYXR0cnM6e211bHRpcGxlOnQuaXNNdWx0aXBsZSxpbmRleDpuLGdsb2JhbFRoaWNrbmVzczp0LnRoaWNrbmVzcyxnbG9iYWxHYXA6dC5nYXAsZ2xvYmFsRG90OnQuZG90fX0sXCJjaXJjbGUtY29udGFpbmVyXCIsZSwhMSkpfSkpLHIoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJlcC1sZWdlbmQtLWNvbnRhaW5lclwiLHN0eWxlOnttYXhXaWR0aDp0LnNpemUrXCJweFwifX0sW3QubGVnZW5kJiYhdC5pc011bHRpcGxlP3IoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJlcC1sZWdlbmQtLXZhbHVlXCIsY2xhc3M6W3QubGVnZW5kQ2xhc3Mse1wiZXAtaGlkZGVuXCI6dC5zaG91bGRIaWRlTGVnZW5kVmFsdWV9XSxzdHlsZTp7Zm9udFNpemU6dC5mb250U2l6ZSxjb2xvcjp0LmZvbnRDb2xvcn19LFtyKFwiY291bnRlclwiLHthdHRyczp7dmFsdWU6dC5sZWdlbmRWYWwsYW5pbWF0aW9uOnQuYW5pbWF0aW9uLGxvYWRpbmc6dC5sb2FkaW5nfSxzY29wZWRTbG90czp0Ll91KFt7a2V5OlwiZGVmYXVsdFwiLGZuOmZ1bmN0aW9uKGUpe3ZhciBuPWUuY291bnRlclRpY2s7cmV0dXJuW3QuJHNjb3BlZFNsb3RzLmRlZmF1bHQ/dC5fdChcImRlZmF1bHRcIixudWxsLHtjb3VudGVyVGljazpufSk6dC5fZSgpLHQubGVnZW5kRm9ybWF0dGVyP3IoXCJzcGFuXCIsW3QuaXNIVE1MP3IoXCJzcGFuXCIse2RvbVByb3BzOntpbm5lckhUTUw6dC5fcyh0LmxlZ2VuZEZvcm1hdHRlcihuKSl9fSk6cihcInNwYW5cIixbdC5fdih0Ll9zKHQubGVnZW5kRm9ybWF0dGVyKG4pKSldKV0pOnQuJHNjb3BlZFNsb3RzLmRlZmF1bHQ/dC5fZSgpOnIoXCJzcGFuXCIsW3QuX3YodC5fcyhuLmN1cnJlbnRGb3JtYXR0ZWRWYWx1ZSkpXSldfX1dLG51bGwsITApfSksdC5fdChcImxlZ2VuZC12YWx1ZVwiKV0sMik6dC5fZSgpLHQuX3QoXCJsZWdlbmQtY2FwdGlvblwiKV0sMildLDIpXSl9LGk9W107cihcImQ4MWRcIikscihcImQzYjdcIikscihcIjI1ZjBcIikscihcIjQ5OGFcIikscihcImE0ZDNcIikscihcIjRkZTRcIikscihcIjQxNjBcIikscihcImU0MzlcIikscihcImRiYjRcIikscihcImI2NGJcIikscihcIjE1OWJcIik7ZnVuY3Rpb24gbyh0LGUscil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1yLHR9ZnVuY3Rpb24gYSh0LGUpe3ZhciByPU9iamVjdC5rZXlzKHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7ZSYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gcyh0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9hKE9iamVjdChyKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7byh0LGUscltlXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6YShPYmplY3QocikpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpKX0pKX1yZXR1cm4gdH1yKFwiYTllM1wiKSxyKFwiOTEyOVwiKTt2YXIgYz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmXCJcIiE9PXQmJm51bGwhPT10JiYhTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQodCkpfSx1PWZ1bmN0aW9uKHQpe3JldHVybiEhYyh0KSYmcGFyc2VGbG9hdCh0KX07cihcImE2MjNcIikscihcImNhYWRcIikscihcIjQ1ZmNcIikscihcImFjMWZcIikscihcIjUzMTlcIikscihcIjEyNzZcIikscihcIjJjYTBcIikscihcImUwMWFcIikscihcImQyOGJcIikscihcImUyNjBcIikscihcIjNjYTNcIikscihcImRkYjBcIik7ZnVuY3Rpb24gZih0KXtyZXR1cm4gZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxmKHQpfXZhciBsPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwidHJhbnNwYXJlbnRcIjtyZXR1cm57dHlwZTpbU3RyaW5nLE9iamVjdF0scmVxdWlyZWQ6ITEsZGVmYXVsdDp0LHZhbGlkYXRvcjpmdW5jdGlvbih0KXtyZXR1cm4hKFwic3RyaW5nXCIhPT10eXBlb2YgdHx8IXQpfHwhKFwib2JqZWN0XCIhPT1mKHQpfHwhdC5jb2xvcnMpJiZ0LmNvbG9ycy5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29sb3ImJnQub2Zmc2V0fSkpfX19LHA9e2RhdGE6e3R5cGU6QXJyYXkscmVxdWlyZWQ6ITEsZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0scHJvZ3Jlc3M6e3R5cGU6TnVtYmVyLHJlcXVpcmU6ITAsdmFsaWRhdG9yOmZ1bmN0aW9uKHQpe3JldHVybiB0Pj0tMTAwJiZ0PD0xMDB9fSxsZWdlbmRWYWx1ZTp7dHlwZTpbTnVtYmVyLFN0cmluZ10scmVxdWlyZWQ6ITEsdmFsaWRhdG9yOmZ1bmN0aW9uKHQpe3JldHVybiFOdW1iZXIuaXNOYU4ocGFyc2VGbG9hdCh0LnRvU3RyaW5nKCkucmVwbGFjZShcIixcIixcIi5cIikpKX19LHNpemU6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiExLGRlZmF1bHQ6MjAwLHZhbGlkYXRvcjpmdW5jdGlvbih0KXtyZXR1cm4gdD49MH19LHRoaWNrbmVzczp7dHlwZTpbTnVtYmVyLFN0cmluZ10scmVxdWlyZWQ6ITEsZGVmYXVsdDpcIjUlXCIsdmFsaWRhdG9yOmZ1bmN0aW9uKHQpe3JldHVybiBwYXJzZUZsb2F0KHQpPj0wfX0sZW1wdHlUaGlja25lc3M6e3R5cGU6W051bWJlcixTdHJpbmddLHJlcXVpcmVkOiExLGRlZmF1bHQ6XCI1JVwiLHZhbGlkYXRvcjpmdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VGbG9hdCh0KT49MH19LGxpbmU6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiExLGRlZmF1bHQ6XCJyb3VuZFwiLHZhbGlkYXRvcjpmdW5jdGlvbih0KXtyZXR1cm5bXCJyb3VuZFwiLFwiYnV0dFwiLFwic3F1YXJlXCJdLmluY2x1ZGVzKHQpfX0sbGluZU1vZGU6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiExLGRlZmF1bHQ6XCJub3JtYWxcIix2YWxpZGF0b3I6ZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIiBcIikscj1bXCJub3JtYWxcIixcIm91dFwiLFwib3V0LW92ZXJcIixcImluXCIsXCJpbi1vdmVyXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5pbmNsdWRlcyhlWzBdKSxuPSFlWzFdfHwhTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQoZVsxXSkpO3JldHVybiByJiZufX0sY29sb3I6bChcIiMzZjc5ZmZcIiksZW1wdHlDb2xvcjpsKFwiI2U2ZTlmMFwiKSxjb2xvckZpbGw6bCgpLGVtcHR5Q29sb3JGaWxsOmwoKSxmb250U2l6ZTp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITF9LGZvbnRDb2xvcjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITF9LGFuaW1hdGlvbjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITEsZGVmYXVsdDpcImRlZmF1bHQgMTAwMCA0MDBcIix2YWxpZGF0b3I6ZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIiBcIikscj1bXCJkZWZhdWx0XCIsXCJyc1wiLFwibG9vcFwiLFwicmV2ZXJzZVwiLFwiYm91bmNlXCJdLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZVswXX0pKSxuPSFlWzFdfHxwYXJzZUZsb2F0KGVbMV0pPj0wLGk9IWVbMl18fHBhcnNlRmxvYXQoZVsyXSk+PTA7cmV0dXJuIHImJm4mJml9fSxsZWdlbmQ6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMSxkZWZhdWx0OiEwfSxsZWdlbmRDbGFzczp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITF9LGFuZ2xlOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxyZXF1aXJlZDohMSxkZWZhdWx0Oi05MH0sbG9hZGluZzp7dHlwZTpCb29sZWFuLHJlcXVpcmVkOiExLGRlZmF1bHQ6ITF9LG5vRGF0YTp7dHlwZTpCb29sZWFuLHJlcXVpcmVkOiExLGRlZmF1bHQ6ITF9LGRhc2g6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiExLGRlZmF1bHQ6XCJcIix2YWxpZGF0b3I6ZnVuY3Rpb24odCl7aWYodC5zdGFydHNXaXRoKFwic3RyaWN0XCIpKXt2YXIgZT10LnNwbGl0KFwiIFwiKTtyZXR1cm4gcGFyc2VGbG9hdChlWzFdKT49MCYmcGFyc2VGbG9hdChlWzJdKT49MH1yZXR1cm4hMH19LGhhbGY6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMSxkZWZhdWx0OiExfSxnYXA6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiExLGRlZmF1bHQ6MCx2YWxpZGF0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIU51bWJlci5pc05hTihwYXJzZUludCh0LDEwKSl9fSxkZXRlcm1pbmF0ZTp7dHlwZTpCb29sZWFuLHJlcXVpcmVkOiExLGRlZmF1bHQ6ITF9LGRvdDp7dHlwZTpbU3RyaW5nLE51bWJlcixPYmplY3RdLHJlcXVpcmVkOiExLGRlZmF1bHQ6MCx2YWxpZGF0b3I6ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09PWYodCk/dm9pZCAwIT09dC5zaXplJiYhTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQodC5zaXplKSk6IU51bWJlci5pc05hTihwYXJzZUZsb2F0KHQpKX19LHJldmVyc2U6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMSxkZWZhdWx0OiExfX0sZD17fTtmb3IodmFyIGggaW4gcClkW2hdPXt0eXBlOnBbaF0udHlwZSxkZWZhdWx0OnBbaF0uZGVmYXVsdH07dmFyIHY9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxyPXQuX3NlbGYuX2N8fGU7cmV0dXJuIHIoXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJlcC1zdmctY29udGFpbmVyXCIsY2xhc3M6e1wiZXAtcmV2ZXJzZVwiOnQucmV2ZXJzZX19LFtyKFwic3ZnXCIse3N0YXRpY0NsYXNzOlwiZXAtc3ZnXCIsYXR0cnM6e2hlaWdodDp0LnNpemUsd2lkdGg6dC5zaXplLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn19LFtyKFwiZ1wiLHtzdGF0aWNDbGFzczpcImVwLWNpcmNsZS0tY29udGFpbmVyXCJ9LFtyKFwiZGVmc1wiLFt0LmlzQ29sb3JHcmFkaWVudD9yKFwiZ3JhZGllbnRcIix7YXR0cnM6e2NvbG9yOnQuY29sb3IsdHlwZTpcInByb2dyZXNzXCIsaWQ6dC5fdWlkfX0pOnQuX2UoKSx0LmlzQ29sb3JGaWxsR3JhZGllbnQ/cihcImdyYWRpZW50XCIse2F0dHJzOntjb2xvcjp0LmNvbG9yRmlsbCx0eXBlOlwicHJvZ3Jlc3MtZmlsbFwiLGlkOnQuX3VpZH19KTp0Ll9lKCksdC5pc0VtcHR5Q29sb3JHcmFkaWVudD9yKFwiZ3JhZGllbnRcIix7YXR0cnM6e2NvbG9yOnQuZW1wdHlDb2xvcix0eXBlOlwiZW1wdHlcIixpZDp0Ll91aWR9fSk6dC5fZSgpLHQuaXNFbXB0eUNvbG9yRmlsbEdyYWRpZW50P3IoXCJncmFkaWVudFwiLHthdHRyczp7Y29sb3I6dC5lbXB0eUNvbG9yRmlsbCx0eXBlOlwiZW1wdHktZmlsbFwiLGlkOnQuX3VpZH19KTp0Ll9lKCldLDEpLHIodC5jaXJjbGVUeXBlLHQuX2Ioe3RhZzpcImNvbXBvbmVudFwiLGF0dHJzOntpZDp0Ll91aWR9fSxcImNvbXBvbmVudFwiLHQuJHByb3BzLCExKSldLDEpXSksdC5kb3Q/cihcImNpcmNsZS1kb3RcIix0Ll9iKHthdHRyczp7aWQ6dC5fdWlkfX0sXCJjaXJjbGUtZG90XCIsdC4kcHJvcHMsITEpKTp0Ll9lKCldLDEpfSxtPVtdLGc9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxyPXQuX3NlbGYuX2N8fGU7cmV0dXJuIHIodC5ncmFkaWVudENvbXBvbmVudCx7dGFnOlwiY29tcG9uZW50XCIsYXR0cnM6e2lkOlwiZXAtXCIrdC50eXBlK1wiLWdyYWRpZW50LVwiK3QuaWQseDE6XCIwJVwiLHkxOlwiMTAwJVwiLHgyOlwiMCVcIix5MjpcIjAlXCIsXCJhcmVhLWhpZGRlblwiOlwidHJ1ZVwifX0sdC5fbCh0LmNvbG9yLmNvbG9ycywoZnVuY3Rpb24oZSxuKXtyZXR1cm4gcihcInN0b3BcIix7a2V5Om4sYXR0cnM6e29mZnNldDplLm9mZnNldCtcIiVcIixcInN0b3AtY29sb3JcIjpcIlwiK2UuY29sb3IsXCJzdG9wLW9wYWNpdHlcIjpcIlwiKyh0LmlzVmFsaWROdW1iZXIoZS5vcGFjaXR5KT9lLm9wYWNpdHk6MSl9fSl9KSksMSl9LHk9W10sYj17bmFtZTpcIkdyYWRpZW50XCIscHJvcHM6e2NvbG9yOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0sdHlwZTp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LGlkOnt0eXBlOk51bWJlcixyZXF1aXJlZDohMH19LG1ldGhvZHM6e2lzVmFsaWROdW1iZXI6ZnVuY3Rpb24odCl7cmV0dXJuIGModCl9fSxjb21wdXRlZDp7Z3JhZGllbnRDb21wb25lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvci5yYWRpYWw/XCJyYWRpYWxHcmFkaWVudFwiOlwibGluZWFyR3JhZGllbnRcIn19fSx4PWI7ZnVuY3Rpb24gayh0LGUscixuLGksbyxhLHMpe3ZhciBjLHU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHQ/dC5vcHRpb25zOnQ7aWYoZSYmKHUucmVuZGVyPWUsdS5zdGF0aWNSZW5kZXJGbnM9cix1Ll9jb21waWxlZD0hMCksbiYmKHUuZnVuY3Rpb25hbD0hMCksbyYmKHUuX3Njb3BlSWQ9XCJkYXRhLXYtXCIrbyksYT8oYz1mdW5jdGlvbih0KXt0PXR8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCx0fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fCh0PV9fVlVFX1NTUl9DT05URVhUX18pLGkmJmkuY2FsbCh0aGlzLHQpLHQmJnQuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZ0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQoYSl9LHUuX3NzclJlZ2lzdGVyPWMpOmkmJihjPXM/ZnVuY3Rpb24oKXtpLmNhbGwodGhpcywodS5mdW5jdGlvbmFsP3RoaXMucGFyZW50OnRoaXMpLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpfTppKSxjKWlmKHUuZnVuY3Rpb25hbCl7dS5faW5qZWN0U3R5bGVzPWM7dmFyIGY9dS5yZW5kZXI7dS5yZW5kZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYy5jYWxsKGUpLGYodCxlKX19ZWxzZXt2YXIgbD11LmJlZm9yZUNyZWF0ZTt1LmJlZm9yZUNyZWF0ZT1sP1tdLmNvbmNhdChsLGMpOltjXX1yZXR1cm57ZXhwb3J0czp0LG9wdGlvbnM6dX19dmFyIHc9ayh4LGcseSwhMSxudWxsLG51bGwsbnVsbCksXz13LmV4cG9ydHMsUz1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LHI9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gcihcImdcIix7c3RhdGljQ2xhc3M6XCJlcC1oYWxmLWNpcmNsZVwiLHN0eWxlOnt0cmFuc2l0aW9uRHVyYXRpb246dC5zdHlsZXMudHJhbnNpdGlvbkR1cmF0aW9uLHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjp0LnN0eWxlcy50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24sdHJhbnNmb3JtOlwicm90YXRlKFwiK3QuY29tcHV0ZWRBbmdsZStcImRlZylcIn19LFtyKFwicGF0aFwiLHtzdGF0aWNDbGFzczpcImVwLWhhbGYtY2lyY2xlLS1lbXB0eVwiLGNsYXNzOntcImVwLWNpcmNsZS0tbm9kYXRhXCI6IXQuZGF0YUlzQXZhaWxhYmxlfSxzdHlsZTp7dHJhbnNpdGlvbkR1cmF0aW9uOnQuYW5pbWF0aW9uRHVyYXRpb24sdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOnQuc3R5bGVzLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbn0sYXR0cnM6e1wic3Ryb2tlLXdpZHRoXCI6dC5jb21wdXRlZEVtcHR5VGhpY2tuZXNzLGZpbGw6dC5jb21wdXRlZENvbG9yRmlsbCxzdHJva2U6dC5jb21wdXRlZEVtcHR5Q29sb3IsZDp0LmVtcHR5UGF0aCxcInN0cm9rZS1saW5lY2FwXCI6dC5saW5lLFwic3Ryb2tlLWRhc2hhcnJheVwiOnQuZW1wdHlEYXNoYXJyYXl9fSkscihcImZhZGUtaW4tdHJhbnNpdGlvblwiLFt0LmlzTG9hZGluZz9yKFwiZ1wiLFtyKFwiZ1wiLHtzdHlsZTp7b3BhY2l0eTpcIlwiKyh0LmxvYWRpbmc/MTouNDUpfX0sW3IoXCJwYXRoXCIse3N0YXRpY0NsYXNzOlwiZXAtaGFsZi1jaXJjbGUtLWxvYWRpbmcgYW5pbWF0aW9uX19sb2FkaW5nXCIsc3R5bGU6e3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjp0LnN0eWxlcy50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24sdHJhbnNmb3JtT3JpZ2luOnQuc3R5bGVzLnRyYW5zZm9ybU9yaWdpbixcIi0tZXAtbG9hZGluZy1zdHJva2Utb2Zmc2V0XCI6dC5zdHlsZXNbXCItLWVwLWxvYWRpbmctc3Ryb2tlLW9mZnNldFwiXSxcIi0tZXAtY2lyY3VtZmVyZW5jZVwiOnQuc3R5bGVzW1wiLS1lcC1jaXJjdW1mZXJlbmNlXCJdLFwiLS1lcC1uZWdhdGl2ZS1jaXJjdW1mZXJlbmNlXCI6dC5zdHlsZXNbXCItLWVwLW5lZ2F0aXZlLWNpcmN1bWZlcmVuY2VcIl19LGF0dHJzOntcInN0cm9rZS13aWR0aFwiOnQuY29tcHV0ZWRUaGlja25lc3MsZDp0LnBhdGgsZmlsbDp0LmNvbXB1dGVkQ29sb3JGaWxsLHN0cm9rZTp0LmNvbXB1dGVkQ29sb3IsXCJzdHJva2UtZGFzaGFycmF5XCI6dC5jaXJjdW1mZXJlbmNlLFwic3Ryb2tlLWxpbmVjYXBcIjp0LmxpbmV9fSldKV0pOnQuX2UoKV0pLHIoXCJwYXRoXCIse3N0YXRpY0NsYXNzOlwiZXAtaGFsZi1jaXJjbGUtLXByb2dyZXNzIGVwLWNpcmNsZS0tcHJvZ3Jlc3NcIixjbGFzczp0LmFuaW1hdGlvbkNsYXNzLHN0eWxlOnQuc3R5bGVzLGF0dHJzOntcInN0cm9rZS13aWR0aFwiOnQuY29tcHV0ZWRUaGlja25lc3MsZDp0LnBhdGgsZmlsbDp0LmNvbXB1dGVkQ29sb3JGaWxsLHN0cm9rZTp0LmNvbXB1dGVkQ29sb3IsXCJzdHJva2UtZGFzaGFycmF5XCI6dC5jaXJjdW1mZXJlbmNlLFwic3Ryb2tlLWxpbmVjYXBcIjp0LmxpbmV9fSldLDEpfSxFPVtdO3IoXCI5OWFmXCIpLHIoXCIxM2Q1XCIpLHIoXCJlNmNmXCIpLHIoXCIyNTMyXCIpLHIoXCI0Nzk1XCIpLHIoXCI5NmNmXCIpO2Z1bmN0aW9uIFQodCxlLHIsbixpLG8sYSl7dHJ5e3ZhciBzPXRbb10oYSksYz1zLnZhbHVlfWNhdGNoKHUpe3JldHVybiB2b2lkIHIodSl9cy5kb25lP2UoYyk6UHJvbWlzZS5yZXNvbHZlKGMpLnRoZW4obixpKX1mdW5jdGlvbiBPKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBlPXRoaXMscj1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLGkpe3ZhciBvPXQuYXBwbHkoZSxyKTtmdW5jdGlvbiBhKHQpe1QobyxuLGksYSxzLFwibmV4dFwiLHQpfWZ1bmN0aW9uIHModCl7VChvLG4saSxhLHMsXCJ0aHJvd1wiLHQpfWEodm9pZCAwKX0pKX19dmFyIEM9ZnVuY3Rpb24odCl7dmFyIGU9dC50cmltKCkuc3BsaXQoXCIgXCIpO3JldHVybnttb2RlOmVbMF0sb2Zmc2V0OnUoZVsxXSl8fDB9fSxqPWZ1bmN0aW9uKHQpe3ZhciBlPXQudHJpbSgpLnNwbGl0KFwiIFwiKTtyZXR1cm57dHlwZTplWzBdLGR1cmF0aW9uOmMoZVsxXSk/cGFyc2VGbG9hdChlWzFdKToxZTMsZGVsYXk6YyhlWzJdKT9wYXJzZUZsb2F0KGVbMl0pOjQwMH19LEE9ZnVuY3Rpb24odCl7dmFyIGU9dC50cmltKCkuc3BsaXQoXCIgXCIpLHI9XCJzdHJpY3RcIj09PWVbMF07cmV0dXJuIHI/e2NvdW50OnBhcnNlSW50KGVbMV0sMTApLHNwYWNpbmc6cGFyc2VGbG9hdChlWzJdKX06dH0sUD1mdW5jdGlvbih0KXt2YXIgZT0wLHI9XCJ3aGl0ZVwiLG49e307aWYoXCJvYmplY3RcIiE9PWYodCkpe3ZhciBpPXQudG9TdHJpbmcoKS50cmltKCkuc3BsaXQoXCIgXCIpO2U9YyhpWzBdKT9pWzBdOjAscj1pWzFdfHxcIndoaXRlXCJ9ZWxzZSBlPXQuc2l6ZXx8MCxuPXQ7cmV0dXJuIHMocyh7fSxuKSx7fSx7c2l6ZTplLGNvbG9yOnJ9KX0sUj1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTo0MDA7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlKXtyZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gZSgpfSksdCl9KSl9LEY9e25hbWU6XCJDaXJjbGVNaXhpblwiLHByb3BzOnMocyh7fSxkKSx7fSx7bXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMH0saWQ6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiEwfSxpbmRleDp7dHlwZTpOdW1iZXIscmVxdWlyZWQ6ITB9LGdsb2JhbFRoaWNrbmVzczp7dHlwZTpbTnVtYmVyLFN0cmluZ10scmVxdWlyZWQ6ITEsZGVmYXVsdDpcIjUlXCJ9LGdsb2JhbEdhcDp7dHlwZTpOdW1iZXIscmVxdWlyZWQ6ITF9LGdsb2JhbERvdDp7dHlwZTpbTnVtYmVyLFN0cmluZyxPYmplY3RdLHJlcXVpcmVkOiExfX0pLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aXNJbml0aWFsaXplZDohMX19LGNvbXB1dGVkOntjb21wdXRlZFByb2dyZXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHBhcnNlRmxvYXQodGhpcy5wcm9ncmVzc3x8MCl9LHByb2dyZXNzT2Zmc2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jaXJjdW1mZXJlbmNlLXRoaXMuY29tcHV0ZWRQcm9ncmVzcy8xMDAqdGhpcy5jaXJjdW1mZXJlbmNlO3JldHVybiBNYXRoLmFicyh0aGlzLmNpcmN1bWZlcmVuY2UtdCk8MT90aGlzLmNpcmN1bWZlcmVuY2UtLjU6dH0scmFkaXVzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWRMaW5lTW9kZS5vZmZzZXQ7aWYodGhpcy5tdWx0aXBsZSlyZXR1cm4gdGhpcy5iYXNlUmFkaXVzLXRoaXMucHJldmlvdXNDaXJjbGVzVGhpY2tuZXNzO3N3aXRjaCh0aGlzLnBhcnNlZExpbmVNb2RlLm1vZGUpe2Nhc2VcIm5vcm1hbFwiOnJldHVybiB0aGlzLm5vcm1hbExpbmVNb2RlUmFkaXVzO2Nhc2VcImluXCI6cmV0dXJuIHRoaXMuZW1wdHlSYWRpdXMtKHRoaXMuY29tcHV0ZWRFbXB0eVRoaWNrbmVzcy8yK3RoaXMuY29tcHV0ZWRUaGlja25lc3MvMit0KTtjYXNlXCJvdXQtb3ZlclwiOnJldHVybiB0aGlzLmNvbXB1dGVkRW1wdHlUaGlja25lc3M8PXRoaXMuY29tcHV0ZWRUaGlja25lc3M/dGhpcy5iYXNlUmFkaXVzOnRoaXMuZW1wdHlSYWRpdXMtdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzLzIrdGhpcy5jb21wdXRlZFRoaWNrbmVzcy8yO2Nhc2VcImJvdHRvbVwiOnJldHVybiB0aGlzLmVtcHR5UmFkaXVzLXRoaXMuY29tcHV0ZWRFbXB0eVRoaWNrbmVzcy8yO2Nhc2VcInRvcFwiOnJldHVybiB0aGlzLmVtcHR5UmFkaXVzK3RoaXMuY29tcHV0ZWRFbXB0eVRoaWNrbmVzcy8yO2RlZmF1bHQ6cmV0dXJuIHRoaXMuYmFzZVJhZGl1c319LGVtcHR5UmFkaXVzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWRMaW5lTW9kZS5vZmZzZXQ7aWYodGhpcy5tdWx0aXBsZSlyZXR1cm4gdGhpcy5iYXNlUmFkaXVzLXRoaXMucHJldmlvdXNDaXJjbGVzVGhpY2tuZXNzO3N3aXRjaCh0aGlzLnBhcnNlZExpbmVNb2RlLm1vZGUpe2Nhc2VcIm5vcm1hbFwiOnJldHVybiB0aGlzLm5vcm1hbExpbmVNb2RlUmFkaXVzO2Nhc2VcImluXCI6dmFyIGU9dGhpcy5jb21wdXRlZFRoaWNrbmVzcy8yK3RoaXMuY29tcHV0ZWRFbXB0eVRoaWNrbmVzcyt0O3JldHVybiB0aGlzLmRvdFNpemUvMj5lP3RoaXMuZW1wdHlCYXNlUmFkaXVzLSh0aGlzLmRvdFNpemUvMi1lKTp0aGlzLmVtcHR5QmFzZVJhZGl1cztjYXNlXCJpbi1vdmVyXCI6cmV0dXJuIHRoaXMuZG90VG9UaGlja25lc3NEaWZmZXJlbmNlPjA/dGhpcy5lbXB0eUJhc2VSYWRpdXMtdGhpcy5kb3RUb1RoaWNrbmVzc0RpZmZlcmVuY2UvMjp0aGlzLmVtcHR5QmFzZVJhZGl1cztjYXNlXCJvdXRcIjpyZXR1cm4gdGhpcy5iYXNlUmFkaXVzLSh0aGlzLmNvbXB1dGVkVGhpY2tuZXNzLzIrdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzLzIrdCk7Y2FzZVwib3V0LW92ZXJcIjpyZXR1cm4gdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzPD10aGlzLmNvbXB1dGVkVGhpY2tuZXNzP3RoaXMuYmFzZVJhZGl1cy10aGlzLmNvbXB1dGVkVGhpY2tuZXNzLzIrdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzLzI6dGhpcy5lbXB0eUJhc2VSYWRpdXM7Y2FzZVwiYm90dG9tXCI6cmV0dXJuIHRoaXMuY29tcHV0ZWRFbXB0eVRoaWNrbmVzczx0aGlzLnRoaWNrbmVzc1dpdGhEb3QvMj90aGlzLmVtcHR5QmFzZVJhZGl1cy0odGhpcy50aGlja25lc3NXaXRoRG90LzItdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzKTp0aGlzLmVtcHR5QmFzZVJhZGl1cztjYXNlXCJ0b3BcIjpyZXR1cm4gdGhpcy5lbXB0eUJhc2VSYWRpdXMtdGhpcy50aGlja25lc3NXaXRoRG90LzI7ZGVmYXVsdDpyZXR1cm4gdGhpcy5lbXB0eUJhc2VSYWRpdXN9fSxiYXNlUmFkaXVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZS8yLXRoaXMudGhpY2tuZXNzV2l0aERvdC8yfSxlbXB0eUJhc2VSYWRpdXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaXplLzItdGhpcy5jb21wdXRlZEVtcHR5VGhpY2tuZXNzLzJ9LG5vcm1hbExpbmVNb2RlUmFkaXVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhpY2tuZXNzV2l0aERvdDx0aGlzLmNvbXB1dGVkRW1wdHlUaGlja25lc3M/dGhpcy5lbXB0eUJhc2VSYWRpdXM6dGhpcy5iYXNlUmFkaXVzfSxwYXJzZWRMaW5lTW9kZTpmdW5jdGlvbigpe3JldHVybiBDKHRoaXMubGluZU1vZGUpfSxwYXJzZWRBbmltYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gaih0aGlzLmFuaW1hdGlvbil9LHBhcnNlZERhc2g6ZnVuY3Rpb24oKXtyZXR1cm4gQSh0aGlzLmRhc2gpfSxkYXRhSXNBdmFpbGFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzLmNvbXB1dGVkUHJvZ3Jlc3MpJiYhdGhpcy5ub0RhdGF9LGFuaW1hdGlvbkNsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuW1wiYW5pbWF0aW9uX19cIi5jb25jYXQoIXRoaXMubG9hZGluZyYmdGhpcy5kYXRhSXNBdmFpbGFibGUmJnRoaXMuaXNJbml0aWFsaXplZD90aGlzLnBhcnNlZEFuaW1hdGlvbi50eXBlOlwibm9uZVwiKV19LGFuaW1hdGlvbkR1cmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIi5jb25jYXQodGhpcy5wYXJzZWRBbmltYXRpb24uZHVyYXRpb24sXCJtc1wiKX0sY29tcHV0ZWRDb2xvcjpmdW5jdGlvbigpe3JldHVybiBBcnJheS5pc0FycmF5KHRoaXMuY29sb3IuY29sb3JzKT9cInVybCgjZXAtcHJvZ3Jlc3MtZ3JhZGllbnQtXCIuY29uY2F0KHRoaXMuaWQsXCIpXCIpOnRoaXMuY29sb3J9LGNvbXB1dGVkRW1wdHlDb2xvcjpmdW5jdGlvbigpe3JldHVybiBBcnJheS5pc0FycmF5KHRoaXMuZW1wdHlDb2xvci5jb2xvcnMpP1widXJsKCNlcC1lbXB0eS1ncmFkaWVudC1cIi5jb25jYXQodGhpcy5pZCxcIilcIik6dGhpcy5lbXB0eUNvbG9yfSxjb21wdXRlZENvbG9yRmlsbDpmdW5jdGlvbigpe3JldHVybiBBcnJheS5pc0FycmF5KHRoaXMuY29sb3JGaWxsLmNvbG9ycyk/XCJ1cmwoI2VwLXByb2dyZXNzLWZpbGwtZ3JhZGllbnQtXCIuY29uY2F0KHRoaXMuaWQsXCIpXCIpOnRoaXMuY29sb3JGaWxsfSxjb21wdXRlZEVtcHR5Q29sb3JGaWxsOmZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5lbXB0eUNvbG9yRmlsbC5jb2xvcnMpP1widXJsKCNlcC1lbXB0eS1maWxsLWdyYWRpZW50LVwiLmNvbmNhdCh0aGlzLmlkLFwiKVwiKTp0aGlzLmVtcHR5Q29sb3JGaWxsfSxjb21wdXRlZFRoaWNrbmVzczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNhbGN1bGF0ZVRoaWNrbmVzcyh0aGlzLnRoaWNrbmVzcy50b1N0cmluZygpKX0sdGhpY2tuZXNzV2l0aERvdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbXB1dGVkVGhpY2tuZXNzPHRoaXMuZG90U2l6ZT90aGlzLmRvdFNpemU6dGhpcy5jb21wdXRlZFRoaWNrbmVzc30sY29tcHV0ZWRHbG9iYWxUaGlja25lc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWxjdWxhdGVUaGlja25lc3ModGhpcy5nbG9iYWxUaGlja25lc3MpfSxjb21wdXRlZEVtcHR5VGhpY2tuZXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FsY3VsYXRlVGhpY2tuZXNzKHRoaXMuZW1wdHlUaGlja25lc3MpfSxjb21wdXRlZEFuZ2xlOmZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcy5hbmdsZSk/dGhpcy5hbmdsZTotOTB9LHRyYW5zZm9ybU9yaWdpbjpmdW5jdGlvbigpe3JldHVyblwiNTAlIDUwJVwifSxlbXB0eURhc2hhcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZERhc2guY291bnQmJnRoaXMucGFyc2VkRGFzaC5zcGFjaW5nP1wiXCIuY29uY2F0KDIqTWF0aC5QSSp0aGlzLmVtcHR5UmFkaXVzKnRoaXMuZ2V0RGFzaFBlcmNlbnQoKSxcIixcXG4gICAgICAgICAgICAgIFwiKS5jb25jYXQoMipNYXRoLlBJKnRoaXMuZW1wdHlSYWRpdXMqdGhpcy5nZXREYXNoU3BhY2luZ1BlcmNlbnQoKSkudHJpbSgpOnRoaXMucGFyc2VkRGFzaH0sc3Ryb2tlRGFzaE9mZnNldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGFJc0F2YWlsYWJsZSYmIXRoaXMubG9hZGluZyYmdGhpcy5pc0luaXRpYWxpemVkP3RoaXMucHJvZ3Jlc3NPZmZzZXQ6dGhpcy5jaXJjdW1mZXJlbmNlfSxwcmV2aW91c0NpcmNsZXNUaGlja25lc3M6ZnVuY3Rpb24oKXtpZigwPT09dGhpcy5pbmRleClyZXR1cm4gMDtmb3IodmFyIHQ9Yyh0aGlzLmdhcCk/dGhpcy5nYXA6dGhpcy5nbG9iYWxHYXAsZT1bXSxyPTA7cjx0aGlzLmluZGV4O3IrKyl7dmFyIG49dGhpcy5kYXRhW3JdLGk9bi5kb3Q/dGhpcy5jYWxjdWxhdGVUaGlja25lc3MoUChuLmRvdCkuc2l6ZSk6dGhpcy5nbG9iYWxEb3RTaXplLG89YyhuLnRoaWNrbmVzcyk/dGhpcy5jYWxjdWxhdGVUaGlja25lc3Mobi50aGlja25lc3MpOnRoaXMuY29tcHV0ZWRHbG9iYWxUaGlja25lc3MsYT1jKG4uZ2FwKT9uLmdhcDp0aGlzLmdsb2JhbEdhcCxzPU1hdGgubWF4KGksbyk7ZS5wdXNoKHI+MD9zK2E6cyl9cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9KSkrdH0scGFyc2VkRG90OmZ1bmN0aW9uKCl7cmV0dXJuIFAodGhpcy5kb3QpfSxkb3RTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FsY3VsYXRlVGhpY2tuZXNzKHRoaXMucGFyc2VkRG90LnNpemUpfSxkb3RDb2xvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZERvdC5jb2xvcn0sZG90VG9UaGlja25lc3NEaWZmZXJlbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG90U2l6ZS10aGlzLmNvbXB1dGVkVGhpY2tuZXNzfSxnbG9iYWxEb3RTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FsY3VsYXRlVGhpY2tuZXNzKFAodGhpcy5nbG9iYWxEb3QpLnNpemUpfSxzdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm57dHJhbnNpdGlvbjpcIlwiLmNvbmNhdCh0aGlzLmFuaW1hdGlvbkR1cmF0aW9uLFwiLCBvcGFjaXR5IDAuM3NcIiksc3Ryb2tlRGFzaG9mZnNldDp0aGlzLnN0cm9rZURhc2hPZmZzZXQsdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOlwiZWFzZS1pbi1vdXRcIix0cmFuc2Zvcm1PcmlnaW46dGhpcy50cmFuc2Zvcm1PcmlnaW4sb3BhY2l0eTp0aGlzLmxvYWRpbmd8fCF0aGlzLmRhdGFJc0F2YWlsYWJsZT8wOjEsXCItLWVwLWNpcmN1bWZlcmVuY2VcIjp0aGlzLmNpcmN1bWZlcmVuY2UsXCItLWVwLW5lZ2F0aXZlLWNpcmN1bWZlcmVuY2VcIjp0aGlzLmdldE5lZ2F0aXZlQ2lyY3VtZmVyZW5jZSgpLFwiLS1lcC1kb3VibGUtY2lyY3VtZmVyZW5jZVwiOnRoaXMuZ2V0RG91YmxlQ2lyY3VtZmVyZW5jZSgpLFwiLS1lcC1zdHJva2Utb2Zmc2V0XCI6dGhpcy5wcm9ncmVzc09mZnNldCxcIi0tZXAtbG9vcC1zdHJva2Utb2Zmc2V0XCI6dGhpcy5nZXRMb29wT2Zmc2V0KCksXCItLWVwLWJvdW5jZS1vdXQtc3Ryb2tlLW9mZnNldFwiOnRoaXMuZ2V0Qm91bmNlT3V0T2Zmc2V0KCksXCItLWVwLWJvdW5jZS1pbi1zdHJva2Utb2Zmc2V0XCI6dGhpcy5nZXRCb3VuY2VJbk9mZnNldCgpLFwiLS1lcC1yZXZlcnNlLXN0cm9rZS1vZmZzZXRcIjp0aGlzLmdldFJldmVyc2VPZmZzZXQoKSxcIi0tZXAtbG9hZGluZy1zdHJva2Utb2Zmc2V0XCI6LjIqdGhpcy5jaXJjdW1mZXJlbmNlLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCI6dGhpcy5hbmltYXRpb25EdXJhdGlvbn19LGlzTG9hZGluZzpmdW5jdGlvbigpe3JldHVybih0aGlzLmRldGVybWluYXRlfHx0aGlzLmxvYWRpbmcpJiZ0aGlzLmRhdGFJc0F2YWlsYWJsZX19LG1ldGhvZHM6e2NhbGN1bGF0ZVRoaWNrbmVzczpmdW5jdGlvbih0KXt2YXIgZT1wYXJzZUZsb2F0KHQpO3N3aXRjaCghMCl7Y2FzZSB0LnRvU3RyaW5nKCkuaW5jbHVkZXMoXCIlXCIpOnJldHVybiBlKnRoaXMuc2l6ZS8xMDA7ZGVmYXVsdDpyZXR1cm4gZX19LGdldERhc2hTcGFjaW5nUGVyY2VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZERhc2guc3BhY2luZy90aGlzLnBhcnNlZERhc2guY291bnR9LGdldERhc2hQZXJjZW50OmZ1bmN0aW9uKCl7cmV0dXJuKDEtdGhpcy5wYXJzZWREYXNoLnNwYWNpbmcpL3RoaXMucGFyc2VkRGFzaC5jb3VudH0sZ2V0TmVnYXRpdmVDaXJjdW1mZXJlbmNlOmZ1bmN0aW9uKCl7cmV0dXJuLTEqdGhpcy5jaXJjdW1mZXJlbmNlfSxnZXREb3VibGVDaXJjdW1mZXJlbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIDIqdGhpcy5jaXJjdW1mZXJlbmNlfSxnZXRMb29wT2Zmc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0TmVnYXRpdmVDaXJjdW1mZXJlbmNlKCktKHRoaXMuY2lyY3VtZmVyZW5jZS10aGlzLnByb2dyZXNzT2Zmc2V0KX0sZ2V0UmV2ZXJzZU9mZnNldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldERvdWJsZUNpcmN1bWZlcmVuY2UoKSt0aGlzLnByb2dyZXNzT2Zmc2V0fSxnZXRCb3VuY2VPdXRPZmZzZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9ncmVzc09mZnNldDwxMDA/MDp0aGlzLnByb2dyZXNzT2Zmc2V0LTEwMH0sZ2V0Qm91bmNlSW5PZmZzZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaXJjdW1mZXJlbmNlLXRoaXMucHJvZ3Jlc3NPZmZzZXQ8MTAwP3RoaXMucHJvZ3Jlc3NPZmZzZXQ6dGhpcy5wcm9ncmVzc09mZnNldCsxMDB9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gTyhyZWdlbmVyYXRvclJ1bnRpbWUubWFyaygoZnVuY3Rpb24gZSgpe3JldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcCgoZnVuY3Rpb24oZSl7d2hpbGUoMSlzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKHQubG9hZGluZyl7ZS5uZXh0PTM7YnJlYWt9cmV0dXJuIGUubmV4dD0zLFIodC5wYXJzZWRBbmltYXRpb24uZGVsYXkpO2Nhc2UgMzp0LmlzSW5pdGlhbGl6ZWQ9ITA7Y2FzZSA0OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19KSxlKX0pKSkoKX19LEk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxyPXQuX3NlbGYuX2N8fGU7cmV0dXJuIHIoXCJ0cmFuc2l0aW9uXCIse2F0dHJzOnttb2RlOlwib3V0LWluXCIsbmFtZTpcImZhZGVcIixhcHBlYXI6XCJcIn19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LE49W10sRD17bmFtZTpcIkZhZGVJblRyYW5zaXRpb25cIn0sTD1ELE09KHIoXCI1M2M4XCIpLGsoTCxJLE4sITEsbnVsbCxcIjg3M2VmNjM4XCIsbnVsbCkpLHo9TS5leHBvcnRzLHE9e25hbWU6XCJIYWxmQ2lyY2xlUHJvZ3Jlc3NcIixjb21wb25lbnRzOntGYWRlSW5UcmFuc2l0aW9uOnp9LG1peGluczpbRl0sY29tcHV0ZWQ6e2NpcmN1bWZlcmVuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gMip0aGlzLnJhZGl1cypNYXRoLlBJLzJ9LHBhdGg6ZnVuY3Rpb24oKXtyZXR1cm5cIiBNIFwiLmNvbmNhdCh0aGlzLnBvc2l0aW9uLFwiLCBcIikuY29uY2F0KHRoaXMuc2l6ZS8yLFwiIGEgXCIpLmNvbmNhdCh0aGlzLnJhZGl1cyxcIixcIikuY29uY2F0KHRoaXMucmFkaXVzLFwiIDAgMSwxIFwiKS5jb25jYXQoMip0aGlzLnJhZGl1cyxcIiwwXCIpfSxlbXB0eVBhdGg6ZnVuY3Rpb24oKXtyZXR1cm5cIiBNIFwiLmNvbmNhdCh0aGlzLmVtcHR5UG9zaXRpb24sXCIsIFwiKS5jb25jYXQodGhpcy5zaXplLzIsXCIgYSBcIikuY29uY2F0KHRoaXMuZW1wdHlSYWRpdXMsXCIsXCIpLmNvbmNhdCh0aGlzLmVtcHR5UmFkaXVzLFwiIDAgMSwxIFwiKS5jb25jYXQoMip0aGlzLmVtcHR5UmFkaXVzLFwiLDBcIil9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZS8yLXRoaXMucmFkaXVzfSxlbXB0eVBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZS8yLXRoaXMuZW1wdHlSYWRpdXN9fX0sVj1xLEc9KHIoXCIwNTRmXCIpLGsoVixTLEUsITEsbnVsbCxcIjViMzdlYmMzXCIsbnVsbCkpLCQ9Ry5leHBvcnRzLEI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxyPXQuX3NlbGYuX2N8fGU7cmV0dXJuIHIoXCJnXCIse3N0YXRpY0NsYXNzOlwiZXAtY2lyY2xlXCIsc3R5bGU6e3RyYW5zaXRpb25EdXJhdGlvbjp0LnN0eWxlcy50cmFuc2l0aW9uRHVyYXRpb24sdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOnQuc3R5bGVzLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbix0cmFuc2Zvcm06XCJyb3RhdGUoXCIrdC5jb21wdXRlZEFuZ2xlK1wiZGVnKVwifX0sW3IoXCJjaXJjbGVcIix7c3RhdGljQ2xhc3M6XCJlcC1jaXJjbGUtLWVtcHR5XCIsY2xhc3M6e1wiZXAtY2lyY2xlLS1ub2RhdGFcIjohdC5kYXRhSXNBdmFpbGFibGV9LHN0eWxlOnt0cmFuc2l0aW9uRHVyYXRpb246dC5hbmltYXRpb25EdXJhdGlvbix0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246dC5zdHlsZXMudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9ufSxhdHRyczp7cjp0LmVtcHR5UmFkaXVzLGN4OnQucG9zaXRpb24sY3k6dC5wb3NpdGlvbixzdHJva2U6dC5jb21wdXRlZEVtcHR5Q29sb3IsXCJzdHJva2UtZGFzaGFycmF5XCI6dC5lbXB0eURhc2hhcnJheSxmaWxsOnQuY29tcHV0ZWRFbXB0eUNvbG9yRmlsbCxcInN0cm9rZS13aWR0aFwiOnQuY29tcHV0ZWRFbXB0eVRoaWNrbmVzc319KSxyKFwiZmFkZS1pbi10cmFuc2l0aW9uXCIsW3QuaXNMb2FkaW5nP3IoXCJnXCIsW3IoXCJnXCIse3N0YXRpY0NsYXNzOlwiZXAtY2lyY2xlLS1sb2FkaW5nX19jb250YWluZXJcIixzdHlsZTp7b3BhY2l0eTpcIlwiKyh0LmxvYWRpbmc/MTouNDUpfX0sW3IoXCJjaXJjbGVcIix7c3RhdGljQ2xhc3M6XCJlcC1jaXJjbGUtLWxvYWRpbmcgYW5pbWF0aW9uX19sb2FkaW5nXCIsc3R5bGU6e3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjp0LnN0eWxlcy50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24sdHJhbnNmb3JtT3JpZ2luOnQuc3R5bGVzLnRyYW5zZm9ybU9yaWdpbixcIi0tZXAtbG9hZGluZy1zdHJva2Utb2Zmc2V0XCI6dC5zdHlsZXNbXCItLWVwLWxvYWRpbmctc3Ryb2tlLW9mZnNldFwiXSxcIi0tZXAtY2lyY3VtZmVyZW5jZVwiOnQuc3R5bGVzW1wiLS1lcC1jaXJjdW1mZXJlbmNlXCJdfSxhdHRyczp7cjp0LnJhZGl1cyxjeDp0LnBvc2l0aW9uLGN5OnQucG9zaXRpb24sZmlsbDpcInRyYW5zcGFyZW50XCIsc3Ryb2tlOnQuY29tcHV0ZWRDb2xvcixcInN0cm9rZS13aWR0aFwiOnQuY29tcHV0ZWRUaGlja25lc3MsXCJzdHJva2UtbGluZWNhcFwiOnQubGluZSxcInN0cm9rZS1kYXNoYXJyYXlcIjp0LmNpcmN1bWZlcmVuY2V9fSldKV0pOnQuX2UoKV0pLHIoXCJjaXJjbGVcIix7c3RhdGljQ2xhc3M6XCJlcC1jaXJjbGUtLXByb2dyZXNzXCIsY2xhc3M6dC5hbmltYXRpb25DbGFzcyxzdHlsZTp0LnN0eWxlcyxhdHRyczp7cjp0LnJhZGl1cyxjeDp0LnBvc2l0aW9uLGN5OnQucG9zaXRpb24sZmlsbDp0LmNvbXB1dGVkQ29sb3JGaWxsLHN0cm9rZTp0LmNvbXB1dGVkQ29sb3IsXCJzdHJva2Utd2lkdGhcIjp0LmNvbXB1dGVkVGhpY2tuZXNzLFwic3Ryb2tlLWxpbmVjYXBcIjp0LmxpbmUsXCJzdHJva2UtZGFzaGFycmF5XCI6dC5jaXJjdW1mZXJlbmNlfX0pXSwxKX0sVT1bXSxXPXtuYW1lOlwiQ2lyY2xlUHJvZ3Jlc3NcIixjb21wb25lbnRzOntGYWRlSW5UcmFuc2l0aW9uOnp9LG1peGluczpbRl0sY29tcHV0ZWQ6e3Bvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZS8yfSxjaXJjdW1mZXJlbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIDIqdGhpcy5yYWRpdXMqTWF0aC5QSX19fSxIPVcsWD0ocihcIjI3M2FcIiksayhILEIsVSwhMSxudWxsLFwiN2QwYTBmYmJcIixudWxsKSksWT1YLmV4cG9ydHMsSz1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LHI9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gcihcImRpdlwiLHtzdGF0aWNDbGFzczpcImVwLWNpcmNsZS0tcHJvZ3Jlc3NfX2RvdC1jb250YWluZXJcIixjbGFzczp0LmRvdENvbnRhaW5lckNsYXNzZXMsc3R5bGU6dC5kb3RDb250YWluZXJTdHlsZX0sW3IoXCJkaXZcIixbcihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJlcC1jaXJjbGUtLXByb2dyZXNzX19kb3RcIixjbGFzczp7XCJlcC1oaWRkZW5cIjp0LmlzSGlkZGVufSxzdHlsZTp0LmRvdFN0eWxlfSldKV0pfSxKPVtdLFE9e3Byb3BzOnMoe30sZCksbmFtZTpcIkNpcmNsZURvdFwiLG1peGluczpbRl0sY29tcHV0ZWQ6e2RvdENvbnRhaW5lclNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gMip0aGlzLnJhZGl1cyt0aGlzLmRvdFNpemV9LGRvdENvbnRhaW5lclJvdGF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNJbml0aWFsaXplZCYmIXRoaXMubG9hZGluZyYmdGhpcy5kYXRhSXNBdmFpbGFibGU/dGhpcy5kb3RFbmQ6dGhpcy5kb3RTdGFydH0sZG90Q29udGFpbmVyRnVsbFJvdGF0aW9uRGVnOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFsZj8xODA6MzYwfSxkb3RDb250YWluZXJTdHlsZTpmdW5jdGlvbigpe3JldHVybiBzKHt3aWR0aDpcIlwiLmNvbmNhdCh0aGlzLmRvdENvbnRhaW5lclNpemUsXCJweFwiKSxoZWlnaHQ6XCJcIi5jb25jYXQodGhpcy5kb3RDb250YWluZXJTaXplLFwicHhcIiksdHJhbnNmb3JtOlwicm90YXRlKFwiLmNvbmNhdCh0aGlzLmRvdENvbnRhaW5lclJvdGF0aW9uLFwiZGVnKVwiKSx0cmFuc2l0aW9uRHVyYXRpb246dGhpcy5sb2FkaW5nfHwhdGhpcy5kYXRhSXNBdmFpbGFibGU/XCIwc1wiOnRoaXMuYW5pbWF0aW9uRHVyYXRpb24sdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOlwiZWFzZS1pbi1vdXRcIixcImFuaW1hdGlvbi1kdXJhdGlvblwiOnRoaXMuYW5pbWF0aW9uRHVyYXRpb24sXCItLWVwLWRvdC1zdGFydFwiOlwiXCIuY29uY2F0KHRoaXMuZG90U3RhcnQsXCJkZWdcIiksXCItLWVwLWRvdC1lbmRcIjpcIlwiLmNvbmNhdCh0aGlzLmRvdEVuZCxcImRlZ1wiKSxcIi0tZXAtZG90LTM2MFwiOlwiXCIuY29uY2F0KHRoaXMuZG90U3RhcnQrdGhpcy5kb3RDb250YWluZXJGdWxsUm90YXRpb25EZWcsXCJkZWdcIil9LHRoaXMuZG90Q29udGFpbmVyQW5pbWF0aW9uU3R5bGUpfSxkb3RDb250YWluZXJDbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMuYW5pbWF0aW9uQ2xhc3MsIXRoaXMuaGFsZnx8XCJlcC1oYWxmLWNpcmNsZS1wcm9ncmVzc19fZG90XCJdfSxkb3RDb250YWluZXJBbmltYXRpb25TdHlsZTpmdW5jdGlvbigpe3ZhciB0PXtsb29wOntvcGFjaXR5OnRoaXMuaGFsZj8wOjEsXCItLWVwLWRvdC1sb29wLWVuZFwiOlwiXCIuY29uY2F0KHRoaXMuZG90U3RhcnQrdGhpcy5kb3RDb250YWluZXJGdWxsUm90YXRpb25EZWcrdGhpcy5kb3RFbmQsXCJkZWdcIil9LGJvdW5jZTp7b3BhY2l0eTowLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCI6XCJcIi5jb25jYXQodGhpcy5wYXJzZWRBbmltYXRpb24uZHVyYXRpb24rNTAwLFwibXNcIil9fTtyZXR1cm4gdFt0aGlzLnBhcnNlZEFuaW1hdGlvbi50eXBlXX0sZG90U3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm4gcyhzKHtib3JkZXJSYWRpdXM6XCJcIi5jb25jYXQodGhpcy5kb3RTaXplLzIsXCJweFwiKSx3aWR0aDpcIlwiLmNvbmNhdCh0aGlzLmRvdFNpemUsXCJweFwiKSxiYWNrZ3JvdW5kQ29sb3I6dGhpcy5kb3RDb2xvcn0sdGhpcy5kb3QpLHt9LHt0cmFuc2l0aW9uRHVyYXRpb246dGhpcy5sb2FkaW5nfHwhdGhpcy5kYXRhSXNBdmFpbGFibGU/XCIwc1wiOnRoaXMuYW5pbWF0aW9uRHVyYXRpb24saGVpZ2h0OlwiXCIuY29uY2F0KHRoaXMuZG90U2l6ZSxcInB4XCIpfSl9LGRvdFN0YXJ0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFsZj90aGlzLmFuZ2xlLTkwOnRoaXMuYW5nbGUrOTB9LGRvdEVuZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY2FsY3VsYXRlUHJvZ3Jlc3MoKTtyZXR1cm4gdGhpcy5kb3RTdGFydCt0KnRoaXMuZG90Q29udGFpbmVyRnVsbFJvdGF0aW9uRGVnLzEwMH0saXNIaWRkZW46ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0luaXRpYWxpemVkfHx0aGlzLmxvYWRpbmd8fCF0aGlzLmRhdGFJc0F2YWlsYWJsZX19LG1ldGhvZHM6e2NhbGN1bGF0ZVByb2dyZXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFsZiYmdGhpcy5jb21wdXRlZFByb2dyZXNzPDA/dGhpcy5jb21wdXRlZFByb2dyZXNzLTEwMDp0aGlzLmNvbXB1dGVkUHJvZ3Jlc3N9fX0sWj1RLHR0PShyKFwiMjQ3NFwiKSxrKFosSyxKLCExLG51bGwsXCIzOGNhMTY3ZlwiLG51bGwpKSxldD10dC5leHBvcnRzLHJ0PXtuYW1lOlwiRXBDaXJjbGVDb250YWluZXJcIixjb21wb25lbnRzOntDaXJjbGVEb3Q6ZXQsQ2lyY2xlUHJvZ3Jlc3M6WSxIYWxmQ2lyY2xlUHJvZ3Jlc3M6JCxHcmFkaWVudDpffSxwcm9wczpzKHMoe30sZCkse30se2luZGV4Ont0eXBlOk51bWJlcixyZXF1aXJlZDohMH0sbXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMH0sZ2xvYmFsVGhpY2tuZXNzOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxyZXF1aXJlZDohMSxkZWZhdWx0OlwiNSVcIn0sZ2xvYmFsR2FwOnt0eXBlOk51bWJlcixyZXF1aXJlZDohMX0sZ2xvYmFsRG90Ont0eXBlOltOdW1iZXIsU3RyaW5nLE9iamVjdF0scmVxdWlyZWQ6ITF9fSksY29tcHV0ZWQ6e2NpcmNsZVR5cGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYWxmP1wiaGFsZi1jaXJjbGUtcHJvZ3Jlc3NcIjpcImNpcmNsZS1wcm9ncmVzc1wifSxpc0NvbG9yR3JhZGllbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmNvbG9yLmNvbG9ycyl9LGlzQ29sb3JGaWxsR3JhZGllbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmNvbG9yRmlsbC5jb2xvcnMpfSxpc0VtcHR5Q29sb3JHcmFkaWVudDpmdW5jdGlvbigpe3JldHVybiBBcnJheS5pc0FycmF5KHRoaXMuZW1wdHlDb2xvci5jb2xvcnMpfSxpc0VtcHR5Q29sb3JGaWxsR3JhZGllbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLmVtcHR5Q29sb3JGaWxsLmNvbG9ycyl9fX0sbnQ9cnQsaXQ9KHIoXCJjNDllXCIpLGsobnQsdixtLCExLG51bGwsbnVsbCxudWxsKSksb3Q9aXQuZXhwb3J0cyxhdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LHI9dC5fc2VsZi5fY3x8ZTtyZXR1cm4gcihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJlcC1sZWdlbmQtLXZhbHVlX19jb3VudGVyXCJ9LFt0Ll90KFwiZGVmYXVsdFwiLG51bGwse2NvdW50ZXJUaWNrOnQuY291bnRlclByb3BzfSksdC4kc2NvcGVkU2xvdHMuZGVmYXVsdD90Ll9lKCk6cihcInNwYW5cIixbdC5fdih0Ll9zKHQuZm9ybWF0dGVkVmFsdWUpKV0pXSwyKX0sc3Q9W10sY3Q9KHIoXCJiNjgwXCIpLHIoXCI4NDFjXCIpLHtuYW1lOlwiQ291bnRlclwiLHByb3BzOnt2YWx1ZTp7dHlwZTpbTnVtYmVyLFN0cmluZ10scmVxdWlyZWQ6ITB9LGFuaW1hdGlvbjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LGxvYWRpbmc6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMH19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57c3RhcnQ6MCxzdGFydFRpbWU6MCxjdXJyZW50VmFsdWU6MCxyYWY6bnVsbCxwcmV2aW91c0NvdW50U3RlcFZhbHVlOjB9fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN0YXJ0PXRoaXMuY3VycmVudFZhbHVlLHRoaXMucmVzZXQoKSx0aGlzLnJhZj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5jb3VudCl9fSxjb21wdXRlZDp7ZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHBhcnNlRmxvYXQodGhpcy52YWx1ZS50b1N0cmluZygpLnJlcGxhY2UoXCIsXCIsXCIuXCIpKX0sZGlmZmVyZW5jZTpmdW5jdGlvbigpe3JldHVybiBNYXRoLmFicyh0aGlzLmVuZC10aGlzLnN0YXJ0KX0sb25lU3RlcERpZmZlcmVuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuZHVyYXRpb24/dGhpcy5kaWZmZXJlbmNlOnRoaXMuZGlmZmVyZW5jZS90aGlzLmR1cmF0aW9ufSxkZWxpbWl0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpLnNlYXJjaChcIixcIik+PTA/XCIsXCI6XCIuXCJ9LGZvcm1hdHRlZFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFZhbHVlLnRvRml4ZWQodGhpcy5jb3VudERlY2ltYWxzKCkpLnJlcGxhY2UoXCIuXCIsdGhpcy5kZWxpbWl0ZXIpfSxkZWxheTpmdW5jdGlvbigpe3JldHVybiBqKHRoaXMuYW5pbWF0aW9uKS5kZWxheX0sZHVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gaih0aGlzLmFuaW1hdGlvbikuZHVyYXRpb259LGNvdW50ZXJQcm9wczpmdW5jdGlvbigpe3JldHVybntjdXJyZW50VmFsdWU6cGFyc2VGbG9hdCh0aGlzLmZvcm1hdHRlZFZhbHVlKSxjdXJyZW50Rm9ybWF0dGVkVmFsdWU6dGhpcy5mb3JtYXR0ZWRWYWx1ZSxjdXJyZW50UmF3VmFsdWU6dGhpcy5jdXJyZW50VmFsdWUsZHVyYXRpb246dGhpcy5kdXJhdGlvbixwcmV2aW91c0NvdW50U3RlcFZhbHVlOnRoaXMucHJldmlvdXNDb3VudFN0ZXBWYWx1ZSxzdGFydDp0aGlzLnN0YXJ0LGVuZDp0aGlzLmVuZCxkaWZmZXJlbmNlOnRoaXMuZGlmZmVyZW5jZSxvbmVTdGVwRGlmZmVyZW5jZTp0aGlzLm9uZVN0ZXBEaWZmZXJlbmNlLHN0YXJ0VGltZTp0aGlzLnN0YXJ0VGltZSxlbGFwc2VkOjB9fX0sbWV0aG9kczp7Y291bnREZWNpbWFsczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlJTE9PT0wPzA6dGhpcy52YWx1ZS50b1N0cmluZygpLnNwbGl0KHRoaXMuZGVsaW1pdGVyKVsxXS5sZW5ndGh9LGNvdW50OmZ1bmN0aW9uKHQpe3RoaXMuc3RhcnRUaW1lfHwodGhpcy5zdGFydFRpbWU9dCk7dmFyIGU9dC10aGlzLnN0YXJ0VGltZTt0aGlzLmVuZD49dGhpcy5zdGFydD90aGlzLmNvdW50VXAoZSk6dGhpcy5jb3VudERvd24oZSksZTx0aGlzLmR1cmF0aW9uJiZ0aGlzLmRpZmZlcmVuY2U+LjEmJihjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZiksdGhpcy5yYWY9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuY291bnQpKSxlPj10aGlzLmR1cmF0aW9uJiYodGhpcy5jdXJyZW50VmFsdWU9dGhpcy5lbmQsdGhpcy5yZXNldCgpKX0sY291bnREb3duOmZ1bmN0aW9uKHQpe3ZhciBlPU1hdGgubWluKHRoaXMub25lU3RlcERpZmZlcmVuY2UqKHR8fDEpLHRoaXMuZGlmZmVyZW5jZSk7dGhpcy5jdXJyZW50VmFsdWUtPWUtdGhpcy5wcmV2aW91c0NvdW50U3RlcFZhbHVlLHRoaXMucHJldmlvdXNDb3VudFN0ZXBWYWx1ZT1lfSxjb3VudFVwOmZ1bmN0aW9uKHQpe3ZhciBlPU1hdGgubWluKHRoaXMub25lU3RlcERpZmZlcmVuY2UqKHR8fDEpLHRoaXMuZGlmZmVyZW5jZSk7dGhpcy5jdXJyZW50VmFsdWUrPWUtdGhpcy5wcmV2aW91c0NvdW50U3RlcFZhbHVlLHRoaXMucHJldmlvdXNDb3VudFN0ZXBWYWx1ZT1lfSxyZXNldDpmdW5jdGlvbigpe3RoaXMuc3RhcnRUaW1lPTAsdGhpcy5wcmV2aW91c0NvdW50U3RlcFZhbHVlPTAsY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWYpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5sb2FkaW5nP3RoaXMucmFmPXJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmNvdW50KTpzZXRUaW1lb3V0KChmdW5jdGlvbigpe3QucmFmPXJlcXVlc3RBbmltYXRpb25GcmFtZSh0LmNvdW50KX0pLHRoaXMuZGVsYXkpfX0pLHV0PWN0LGZ0PWsodXQsYXQsc3QsITEsbnVsbCxudWxsLG51bGwpLGx0PWZ0LmV4cG9ydHMscHQ9e25hbWU6XCJWdWVFbGxpcHNlUHJvZ3Jlc3NcIixjb21wb25lbnRzOntDb3VudGVyOmx0LENpcmNsZUNvbnRhaW5lcjpvdH0scHJvcHM6cyhzKHt9LHApLHt9LHtsZWdlbmRGb3JtYXR0ZXI6e3R5cGU6RnVuY3Rpb24scmVxdWlyZWQ6ITF9fSksZGF0YTpmdW5jdGlvbigpe3JldHVybntjb3VudGVyVGljazp7fX19LGNvbXB1dGVkOntsZWdlbmRWYWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2FkaW5nfHx0aGlzLm5vRGF0YT8wOnRoaXMubGVnZW5kVmFsdWU/dGhpcy5sZWdlbmRWYWx1ZTp1KHRoaXMucHJvZ3Jlc3MpfHwwfSxzaG91bGRIaWRlTGVnZW5kVmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0RhdGFBdmFpbGFibGV8fHRoaXMubG9hZGluZ30saXNEYXRhQXZhaWxhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcy5wcm9ncmVzcykmJiF0aGlzLm5vRGF0YX0saXNNdWx0aXBsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGEubGVuZ3RoPjF9LGlzSFRNTDpmdW5jdGlvbigpe3JldHVybi88W2Etei9dW1xcc1xcU10qPi9pLnRlc3QodGhpcy5sZWdlbmRGb3JtYXR0ZXIoe2N1cnJlbnRWYWx1ZTowfSkudG9TdHJpbmcoKS50cmltKCkpfSxjaXJjbGVzRGF0YTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuaXNNdWx0aXBsZT90aGlzLmRhdGEubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gcyhzKHMoe30sdC4kcHJvcHMpLGUpLHt9LHtlbXB0eVRoaWNrbmVzczpjKGUudGhpY2tuZXNzKT9lLnRoaWNrbmVzczp0LiRwcm9wcy50aGlja25lc3N9KX0pKTpbdGhpcy4kcHJvcHNdfX19LGR0PXB0LGh0PShyKFwiMDFmM1wiKSxrKGR0LG4saSwhMSxudWxsLFwiNTlkNmE3OGRcIixudWxsKSk7ZVtcImFcIl09aHQuZXhwb3J0c30sXCIyY2EwXCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcIjA2Y2ZcIikuZixvPXIoXCI1MGM0XCIpLGE9cihcIjVhMzRcIikscz1yKFwiMWQ4MFwiKSxjPXIoXCJhYjEzXCIpLHU9cihcImM0MzBcIiksZj1cIlwiLnN0YXJ0c1dpdGgsbD1NYXRoLm1pbixwPWMoXCJzdGFydHNXaXRoXCIpLGQ9IXUmJiFwJiYhIWZ1bmN0aW9uKCl7dmFyIHQ9aShTdHJpbmcucHJvdG90eXBlLFwic3RhcnRzV2l0aFwiKTtyZXR1cm4gdCYmIXQud3JpdGFibGV9KCk7bih7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITAsZm9yY2VkOiFkJiYhcH0se3N0YXJ0c1dpdGg6ZnVuY3Rpb24odCl7dmFyIGU9U3RyaW5nKHModGhpcykpO2EodCk7dmFyIHI9byhsKGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLGUubGVuZ3RoKSksbj1TdHJpbmcodCk7cmV0dXJuIGY/Zi5jYWxsKGUsbixyKTplLnNsaWNlKHIscituLmxlbmd0aCk9PT1ufX0pfSxcIjJjZjRcIjpmdW5jdGlvbih0LGUscil7dmFyIG4saSxvLGE9cihcImRhODRcIikscz1yKFwiZDAzOVwiKSxjPXIoXCJjNmI2XCIpLHU9cihcIjAzNjZcIiksZj1yKFwiMWJlNFwiKSxsPXIoXCJjYzEyXCIpLHA9cihcIjFjZGNcIiksZD1hLmxvY2F0aW9uLGg9YS5zZXRJbW1lZGlhdGUsdj1hLmNsZWFySW1tZWRpYXRlLG09YS5wcm9jZXNzLGc9YS5NZXNzYWdlQ2hhbm5lbCx5PWEuRGlzcGF0Y2gsYj0wLHg9e30saz1cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLHc9ZnVuY3Rpb24odCl7aWYoeC5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGU9eFt0XTtkZWxldGUgeFt0XSxlKCl9fSxfPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3codCl9fSxTPWZ1bmN0aW9uKHQpe3codC5kYXRhKX0sRT1mdW5jdGlvbih0KXthLnBvc3RNZXNzYWdlKHQrXCJcIixkLnByb3RvY29sK1wiLy9cIitkLmhvc3QpfTtoJiZ2fHwoaD1mdW5jdGlvbih0KXt2YXIgZT1bXSxyPTE7d2hpbGUoYXJndW1lbnRzLmxlbmd0aD5yKWUucHVzaChhcmd1bWVudHNbcisrXSk7cmV0dXJuIHhbKytiXT1mdW5jdGlvbigpeyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCkpLmFwcGx5KHZvaWQgMCxlKX0sbihiKSxifSx2PWZ1bmN0aW9uKHQpe2RlbGV0ZSB4W3RdfSxcInByb2Nlc3NcIj09YyhtKT9uPWZ1bmN0aW9uKHQpe20ubmV4dFRpY2soXyh0KSl9OnkmJnkubm93P249ZnVuY3Rpb24odCl7eS5ub3coXyh0KSl9OmcmJiFwPyhpPW5ldyBnLG89aS5wb3J0MixpLnBvcnQxLm9ubWVzc2FnZT1TLG49dShvLnBvc3RNZXNzYWdlLG8sMSkpOiFhLmFkZEV2ZW50TGlzdGVuZXJ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHBvc3RNZXNzYWdlfHxhLmltcG9ydFNjcmlwdHN8fHMoRSl8fFwiZmlsZTpcIj09PWQucHJvdG9jb2w/bj1rIGluIGwoXCJzY3JpcHRcIik/ZnVuY3Rpb24odCl7Zi5hcHBlbmRDaGlsZChsKFwic2NyaXB0XCIpKVtrXT1mdW5jdGlvbigpe2YucmVtb3ZlQ2hpbGQodGhpcyksdyh0KX19OmZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoXyh0KSwwKX06KG49RSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsUywhMSkpKSx0LmV4cG9ydHM9e3NldDpoLGNsZWFyOnZ9fSxcIjJkMDBcIjpmdW5jdGlvbih0LGUscil7dmFyIG4saSxvPXIoXCJkYTg0XCIpLGE9cihcIjM0MmZcIikscz1vLnByb2Nlc3MsYz1zJiZzLnZlcnNpb25zLHU9YyYmYy52ODt1PyhuPXUuc3BsaXQoXCIuXCIpLGk9blswXStuWzFdKTphJiYobj1hLm1hdGNoKC9FZGdlXFwvKFxcZCspLyksKCFufHxuWzFdPj03NCkmJihuPWEubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pLG4mJihpPW5bMV0pKSksdC5leHBvcnRzPWkmJitpfSxcIjM0MmZcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwNjZcIik7dC5leHBvcnRzPW4oXCJuYXZpZ2F0b3JcIixcInVzZXJBZ2VudFwiKXx8XCJcIn0sXCIzNWExXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJmNWRmXCIpLGk9cihcIjNmOGNcIiksbz1yKFwiYjYyMlwiKSxhPW8oXCJpdGVyYXRvclwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYodm9pZCAwIT10KXJldHVybiB0W2FdfHx0W1wiQEBpdGVyYXRvclwiXXx8aVtuKHQpXX19LFwiMzdlOFwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODNhYlwiKSxpPXIoXCI5YmYyXCIpLG89cihcIjgyNWFcIiksYT1yKFwiZGY3NVwiKTt0LmV4cG9ydHM9bj9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbih0LGUpe28odCk7dmFyIHIsbj1hKGUpLHM9bi5sZW5ndGgsYz0wO3doaWxlKHM+YylpLmYodCxyPW5bYysrXSxlW3JdKTtyZXR1cm4gdH19LFwiM2JiZVwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODYxZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIitTdHJpbmcodCkrXCIgYXMgYSBwcm90b3R5cGVcIik7cmV0dXJuIHR9fSxcIjNjYTNcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjY1NDdcIikuY2hhckF0LGk9cihcIjY5ZjNcIiksbz1yKFwiN2RkMFwiKSxhPVwiU3RyaW5nIEl0ZXJhdG9yXCIscz1pLnNldCxjPWkuZ2V0dGVyRm9yKGEpO28oU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe3ModGhpcyx7dHlwZTphLHN0cmluZzpTdHJpbmcodCksaW5kZXg6MH0pfSksKGZ1bmN0aW9uKCl7dmFyIHQsZT1jKHRoaXMpLHI9ZS5zdHJpbmcsaT1lLmluZGV4O3JldHVybiBpPj1yLmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9Oih0PW4ocixpKSxlLmluZGV4Kz10Lmxlbmd0aCx7dmFsdWU6dCxkb25lOiExfSl9KSl9LFwiM2Y4Y1wiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSxcIjQwM2VcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjY0OGJcIik7XCJzdHJpbmdcIj09PXR5cGVvZiBuJiYobj1bW3QuaSxuLFwiXCJdXSksbi5sb2NhbHMmJih0LmV4cG9ydHM9bi5sb2NhbHMpO3ZhciBpPXIoXCI0OTllXCIpLmRlZmF1bHQ7aShcIjNkM2Q4NmZkXCIsbiwhMCx7c291cmNlTWFwOiExLHNoYWRvd01vZGU6ITF9KX0sXCI0MDhhXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJjNmI2XCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihcIm51bWJlclwiIT10eXBlb2YgdCYmXCJOdW1iZXJcIiE9bih0KSl0aHJvdyBUeXBlRXJyb3IoXCJJbmNvcnJlY3QgaW52b2NhdGlvblwiKTtyZXR1cm4rdH19LDQxNjA6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcIjE3YzJcIik7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6W10uZm9yRWFjaCE9aX0se2ZvckVhY2g6aX0pfSxcIjQyOGZcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImRhODRcIik7dC5leHBvcnRzPW59LFwiNDRhZFwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZDAzOVwiKSxpPXIoXCJjNmI2XCIpLG89XCJcIi5zcGxpdDt0LmV4cG9ydHM9bigoZnVuY3Rpb24oKXtyZXR1cm4hT2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKX0pKT9mdW5jdGlvbih0KXtyZXR1cm5cIlN0cmluZ1wiPT1pKHQpP28uY2FsbCh0LFwiXCIpOk9iamVjdCh0KX06T2JqZWN0fSxcIjQ0ZDJcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImI2MjJcIiksaT1yKFwiN2M3M1wiKSxvPXIoXCI5YmYyXCIpLGE9bihcInVuc2NvcGFibGVzXCIpLHM9QXJyYXkucHJvdG90eXBlO3ZvaWQgMD09c1thXSYmby5mKHMsYSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmkobnVsbCl9KSx0LmV4cG9ydHM9ZnVuY3Rpb24odCl7c1thXVt0XT0hMH19LFwiNDRkZVwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZGE4NFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcj1uLmNvbnNvbGU7ciYmci5lcnJvciYmKDE9PT1hcmd1bWVudHMubGVuZ3RoP3IuZXJyb3IodCk6ci5lcnJvcih0LGUpKX19LFwiNDRlN1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODYxZFwiKSxpPXIoXCJjNmI2XCIpLG89cihcImI2MjJcIiksYT1vKFwibWF0Y2hcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBuKHQpJiYodm9pZCAwIT09KGU9dFthXSk/ISFlOlwiUmVnRXhwXCI9PWkodCkpfX0sXCI0NWZjXCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcImI3MjdcIikuc29tZSxvPXIoXCJhNjQwXCIpLGE9cihcImFlNDBcIikscz1vKFwic29tZVwiKSxjPWEoXCJzb21lXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhY30se3NvbWU6ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sNDc5NTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjIzZTdcIiksaT1yKFwiZGE4NFwiKSxvPXIoXCIzNDJmXCIpLGE9W10uc2xpY2Uscz0vTVNJRSAuXFwuLy50ZXN0KG8pLGM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yLGk9bj9hLmNhbGwoYXJndW1lbnRzLDIpOnZvaWQgMDtyZXR1cm4gdChuP2Z1bmN0aW9uKCl7KFwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpGdW5jdGlvbihlKSkuYXBwbHkodGhpcyxpKX06ZSxyKX19O24oe2dsb2JhbDohMCxiaW5kOiEwLGZvcmNlZDpzfSx7c2V0VGltZW91dDpjKGkuc2V0VGltZW91dCksc2V0SW50ZXJ2YWw6YyhpLnNldEludGVydmFsKX0pfSw0ODQwOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODI1YVwiKSxpPXIoXCIxYzBiXCIpLG89cihcImI2MjJcIiksYT1vKFwic3BlY2llc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixvPW4odCkuY29uc3RydWN0b3I7cmV0dXJuIHZvaWQgMD09PW98fHZvaWQgMD09KHI9bihvKVthXSk/ZTppKHIpfX0sNDkzMDpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwMzlcIik7dC5leHBvcnRzPSEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyYmIW4oKGZ1bmN0aW9uKCl7cmV0dXJuIVN0cmluZyhTeW1ib2woKSl9KSl9LFwiNDk4YVwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCI1OGE4XCIpLnRyaW0sbz1yKFwiYzhkMlwiKTtuKHt0YXJnZXQ6XCJTdHJpbmdcIixwcm90bzohMCxmb3JjZWQ6byhcInRyaW1cIil9LHt0cmltOmZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcyl9fSl9LFwiNDk5ZVwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKHQsZSl7Zm9yKHZhciByPVtdLG49e30saT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgbz1lW2ldLGE9b1swXSxzPW9bMV0sYz1vWzJdLHU9b1szXSxmPXtpZDp0K1wiOlwiK2ksY3NzOnMsbWVkaWE6Yyxzb3VyY2VNYXA6dX07blthXT9uW2FdLnBhcnRzLnB1c2goZik6ci5wdXNoKG5bYV09e2lkOmEscGFydHM6W2ZdfSl9cmV0dXJuIHJ9ci5yKGUpLHIuZChlLFwiZGVmYXVsdFwiLChmdW5jdGlvbigpe3JldHVybiBofSkpO3ZhciBpPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBERUJVRyYmREVCVUcmJiFpKXRocm93IG5ldyBFcnJvcihcInZ1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIik7dmFyIG89e30sYT1pJiYoZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdKSxzPW51bGwsYz0wLHU9ITEsZj1mdW5jdGlvbigpe30sbD1udWxsLHA9XCJkYXRhLXZ1ZS1zc3ItaWRcIixkPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiYvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO2Z1bmN0aW9uIGgodCxlLHIsaSl7dT1yLGw9aXx8e307dmFyIGE9bih0LGUpO3JldHVybiB2KGEpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxpPTA7aTxhLmxlbmd0aDtpKyspe3ZhciBzPWFbaV0sYz1vW3MuaWRdO2MucmVmcy0tLHIucHVzaChjKX1lPyhhPW4odCxlKSx2KGEpKTphPVtdO2ZvcihpPTA7aTxyLmxlbmd0aDtpKyspe2M9cltpXTtpZigwPT09Yy5yZWZzKXtmb3IodmFyIHU9MDt1PGMucGFydHMubGVuZ3RoO3UrKyljLnBhcnRzW3VdKCk7ZGVsZXRlIG9bYy5pZF19fX19ZnVuY3Rpb24gdih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIHI9dFtlXSxuPW9bci5pZF07aWYobil7bi5yZWZzKys7Zm9yKHZhciBpPTA7aTxuLnBhcnRzLmxlbmd0aDtpKyspbi5wYXJ0c1tpXShyLnBhcnRzW2ldKTtmb3IoO2k8ci5wYXJ0cy5sZW5ndGg7aSsrKW4ucGFydHMucHVzaChnKHIucGFydHNbaV0pKTtuLnBhcnRzLmxlbmd0aD5yLnBhcnRzLmxlbmd0aCYmKG4ucGFydHMubGVuZ3RoPXIucGFydHMubGVuZ3RoKX1lbHNle3ZhciBhPVtdO2ZvcihpPTA7aTxyLnBhcnRzLmxlbmd0aDtpKyspYS5wdXNoKGcoci5wYXJ0c1tpXSkpO29bci5pZF09e2lkOnIuaWQscmVmczoxLHBhcnRzOmF9fX19ZnVuY3Rpb24gbSgpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdC50eXBlPVwidGV4dC9jc3NcIixhLmFwcGVuZENoaWxkKHQpLHR9ZnVuY3Rpb24gZyh0KXt2YXIgZSxyLG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInN0eWxlW1wiK3ArJ349XCInK3QuaWQrJ1wiXScpO2lmKG4pe2lmKHUpcmV0dXJuIGY7bi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pfWlmKGQpe3ZhciBpPWMrKztuPXN8fChzPW0oKSksZT1iLmJpbmQobnVsbCxuLGksITEpLHI9Yi5iaW5kKG51bGwsbixpLCEwKX1lbHNlIG49bSgpLGU9eC5iaW5kKG51bGwsbikscj1mdW5jdGlvbigpe24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKX07cmV0dXJuIGUodCksZnVuY3Rpb24obil7aWYobil7aWYobi5jc3M9PT10LmNzcyYmbi5tZWRpYT09PXQubWVkaWEmJm4uc291cmNlTWFwPT09dC5zb3VyY2VNYXApcmV0dXJuO2UodD1uKX1lbHNlIHIoKX19dmFyIHk9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gZnVuY3Rpb24oZSxyKXtyZXR1cm4gdFtlXT1yLHQuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9fSgpO2Z1bmN0aW9uIGIodCxlLHIsbil7dmFyIGk9cj9cIlwiOm4uY3NzO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD15KGUsaSk7ZWxzZXt2YXIgbz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpKSxhPXQuY2hpbGROb2RlczthW2VdJiZ0LnJlbW92ZUNoaWxkKGFbZV0pLGEubGVuZ3RoP3QuaW5zZXJ0QmVmb3JlKG8sYVtlXSk6dC5hcHBlbmRDaGlsZChvKX19ZnVuY3Rpb24geCh0LGUpe3ZhciByPWUuY3NzLG49ZS5tZWRpYSxpPWUuc291cmNlTWFwO2lmKG4mJnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIixuKSxsLnNzcklkJiZ0LnNldEF0dHJpYnV0ZShwLGUuaWQpLGkmJihyKz1cIlxcbi8qIyBzb3VyY2VVUkw9XCIraS5zb3VyY2VzWzBdK1wiICovXCIscis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGkpKSkpK1wiICovXCIpLHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1yO2Vsc2V7d2hpbGUodC5maXJzdENoaWxkKXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpKX19fSxcIjRkNjRcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImZjNmFcIiksaT1yKFwiNTBjNFwiKSxvPXIoXCIyM2NiXCIpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscixhKXt2YXIgcyxjPW4oZSksdT1pKGMubGVuZ3RoKSxmPW8oYSx1KTtpZih0JiZyIT1yKXt3aGlsZSh1PmYpaWYocz1jW2YrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7dT5mO2YrKylpZigodHx8ZiBpbiBjKSYmY1tmXT09PXIpcmV0dXJuIHR8fGZ8fDA7cmV0dXJuIXQmJi0xfX07dC5leHBvcnRzPXtpbmNsdWRlczphKCEwKSxpbmRleE9mOmEoITEpfX0sXCI0ZGU0XCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcImI3MjdcIikuZmlsdGVyLG89cihcIjFkZGVcIiksYT1yKFwiYWU0MFwiKSxzPW8oXCJmaWx0ZXJcIiksYz1hKFwiZmlsdGVyXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhY30se2ZpbHRlcjpmdW5jdGlvbih0KXtyZXR1cm4gaSh0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pfSxcIjUwYzRcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImE2OTFcIiksaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MD9pKG4odCksOTAwNzE5OTI1NDc0MDk5MSk6MH19LDUxMzU6ZnVuY3Rpb24odCxlKXt2YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gci5jYWxsKHQsZSl9fSw1MzE5OmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiZDc4NFwiKSxpPXIoXCI4MjVhXCIpLG89cihcIjdiMGJcIiksYT1yKFwiNTBjNFwiKSxzPXIoXCJhNjkxXCIpLGM9cihcIjFkODBcIiksdT1yKFwiOGFhNVwiKSxmPXIoXCIxNGMzXCIpLGw9TWF0aC5tYXgscD1NYXRoLm1pbixkPU1hdGguZmxvb3IsaD0vXFwkKFskJidgXXxcXGRcXGQ/fDxbXj5dKj4pL2csdj0vXFwkKFskJidgXXxcXGRcXGQ/KS9nLG09ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQ/dDpTdHJpbmcodCl9O24oXCJyZXBsYWNlXCIsMiwoZnVuY3Rpb24odCxlLHIsbil7dmFyIGc9bi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSx5PW4uUkVQTEFDRV9LRUVQU18kMCxiPWc/XCIkXCI6XCIkMFwiO3JldHVybltmdW5jdGlvbihyLG4pe3ZhciBpPWModGhpcyksbz12b2lkIDA9PXI/dm9pZCAwOnJbdF07cmV0dXJuIHZvaWQgMCE9PW8/by5jYWxsKHIsaSxuKTplLmNhbGwoU3RyaW5nKGkpLHIsbil9LGZ1bmN0aW9uKHQsbil7aWYoIWcmJnl8fFwic3RyaW5nXCI9PT10eXBlb2YgbiYmLTE9PT1uLmluZGV4T2YoYikpe3ZhciBvPXIoZSx0LHRoaXMsbik7aWYoby5kb25lKXJldHVybiBvLnZhbHVlfXZhciBjPWkodCksZD1TdHJpbmcodGhpcyksaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbjtofHwobj1TdHJpbmcobikpO3ZhciB2PWMuZ2xvYmFsO2lmKHYpe3ZhciBrPWMudW5pY29kZTtjLmxhc3RJbmRleD0wfXZhciB3PVtdO3doaWxlKDEpe3ZhciBfPWYoYyxkKTtpZihudWxsPT09XylicmVhaztpZih3LnB1c2goXyksIXYpYnJlYWs7dmFyIFM9U3RyaW5nKF9bMF0pO1wiXCI9PT1TJiYoYy5sYXN0SW5kZXg9dShkLGEoYy5sYXN0SW5kZXgpLGspKX1mb3IodmFyIEU9XCJcIixUPTAsTz0wO088dy5sZW5ndGg7TysrKXtfPXdbT107Zm9yKHZhciBDPVN0cmluZyhfWzBdKSxqPWwocChzKF8uaW5kZXgpLGQubGVuZ3RoKSwwKSxBPVtdLFA9MTtQPF8ubGVuZ3RoO1ArKylBLnB1c2gobShfW1BdKSk7dmFyIFI9Xy5ncm91cHM7aWYoaCl7dmFyIEY9W0NdLmNvbmNhdChBLGosZCk7dm9pZCAwIT09UiYmRi5wdXNoKFIpO3ZhciBJPVN0cmluZyhuLmFwcGx5KHZvaWQgMCxGKSl9ZWxzZSBJPXgoQyxkLGosQSxSLG4pO2o+PVQmJihFKz1kLnNsaWNlKFQsaikrSSxUPWorQy5sZW5ndGgpfXJldHVybiBFK2Quc2xpY2UoVCl9XTtmdW5jdGlvbiB4KHQscixuLGksYSxzKXt2YXIgYz1uK3QubGVuZ3RoLHU9aS5sZW5ndGgsZj12O3JldHVybiB2b2lkIDAhPT1hJiYoYT1vKGEpLGY9aCksZS5jYWxsKHMsZiwoZnVuY3Rpb24oZSxvKXt2YXIgcztzd2l0Y2goby5jaGFyQXQoMCkpe2Nhc2VcIiRcIjpyZXR1cm5cIiRcIjtjYXNlXCImXCI6cmV0dXJuIHQ7Y2FzZVwiYFwiOnJldHVybiByLnNsaWNlKDAsbik7Y2FzZVwiJ1wiOnJldHVybiByLnNsaWNlKGMpO2Nhc2VcIjxcIjpzPWFbby5zbGljZSgxLC0xKV07YnJlYWs7ZGVmYXVsdDp2YXIgZj0rbztpZigwPT09ZilyZXR1cm4gZTtpZihmPnUpe3ZhciBsPWQoZi8xMCk7cmV0dXJuIDA9PT1sP2U6bDw9dT92b2lkIDA9PT1pW2wtMV0/by5jaGFyQXQoMSk6aVtsLTFdK28uY2hhckF0KDEpOmV9cz1pW2YtMV19cmV0dXJuIHZvaWQgMD09PXM/XCJcIjpzfSkpfX0pKX0sXCI1M2M4XCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCI0MDNlXCIpLGk9ci5uKG4pO2kuYX0sNTY5MjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImM0MzBcIiksaT1yKFwiYzZjZFwiKTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGlbdF18fChpW3RdPXZvaWQgMCE9PWU/ZTp7fSl9KShcInZlcnNpb25zXCIsW10pLnB1c2goe3ZlcnNpb246XCIzLjYuNVwiLG1vZGU6bj9cInB1cmVcIjpcImdsb2JhbFwiLGNvcHlyaWdodDpcIsKpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIn0pfSxcIjU2ZWZcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwNjZcIiksaT1yKFwiMjQxY1wiKSxvPXIoXCI3NDE4XCIpLGE9cihcIjgyNWFcIik7dC5leHBvcnRzPW4oXCJSZWZsZWN0XCIsXCJvd25LZXlzXCIpfHxmdW5jdGlvbih0KXt2YXIgZT1pLmYoYSh0KSkscj1vLmY7cmV0dXJuIHI/ZS5jb25jYXQocih0KSk6ZX19LDU4OTk6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCJcXHRcXG5cXHZcXGZcXHIgwqDhmoDigIDigIHigILigIPigITigIXigIbigIfigIjigInigIrigK/igZ/jgIBcXHUyMDI4XFx1MjAyOVxcdWZlZmZcIn0sXCI1OGE4XCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIxZDgwXCIpLGk9cihcIjU4OTlcIiksbz1cIltcIitpK1wiXVwiLGE9UmVnRXhwKFwiXlwiK28rbytcIipcIikscz1SZWdFeHAobytvK1wiKiRcIiksYz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9U3RyaW5nKG4oZSkpO3JldHVybiAxJnQmJihyPXIucmVwbGFjZShhLFwiXCIpKSwyJnQmJihyPXIucmVwbGFjZShzLFwiXCIpKSxyfX07dC5leHBvcnRzPXtzdGFydDpjKDEpLGVuZDpjKDIpLHRyaW06YygzKX19LFwiNWEzNFwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiNDRlN1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYobih0KSl0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7cmV0dXJuIHR9fSxcIjVjNmNcIjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybntlbnVtZXJhYmxlOiEoMSZ0KSxjb25maWd1cmFibGU6ISgyJnQpLHdyaXRhYmxlOiEoNCZ0KSx2YWx1ZTplfX19LFwiNjQ4YlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMjRmYlwiKTtlPW4oITEpLGUucHVzaChbdC5pLFwiLmZhZGUtZW50ZXItYWN0aXZlW2RhdGEtdi04NzNlZjYzOF0sLmZhZGUtbGVhdmUtYWN0aXZlW2RhdGEtdi04NzNlZjYzOF17LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjNzOy1vLXRyYW5zaXRpb246b3BhY2l0eSAuM3M7dHJhbnNpdGlvbjpvcGFjaXR5IC4zc30uZmFkZS1lbnRlcltkYXRhLXYtODczZWY2MzhdLC5mYWRlLWxlYXZlLWFjdGl2ZVtkYXRhLXYtODczZWY2Mzhdey13ZWJraXQtdHJhbnNpdGlvbjouM3M7LW8tdHJhbnNpdGlvbjouM3M7dHJhbnNpdGlvbjouM3M7b3BhY2l0eTowfVwiLFwiXCJdKSx0LmV4cG9ydHM9ZX0sNjU0NzpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImE2OTFcIiksaT1yKFwiMWQ4MFwiKSxvPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHIpe3ZhciBvLGEscz1TdHJpbmcoaShlKSksYz1uKHIpLHU9cy5sZW5ndGg7cmV0dXJuIGM8MHx8Yz49dT90P1wiXCI6dm9pZCAwOihvPXMuY2hhckNvZGVBdChjKSxvPDU1Mjk2fHxvPjU2MzE5fHxjKzE9PT11fHwoYT1zLmNoYXJDb2RlQXQoYysxKSk8NTYzMjB8fGE+NTczNDM/dD9zLmNoYXJBdChjKTpvOnQ/cy5zbGljZShjLGMrMik6YS01NjMyMCsoby01NTI5Njw8MTApKzY1NTM2KX19O3QuZXhwb3J0cz17Y29kZUF0Om8oITEpLGNoYXJBdDpvKCEwKX19LFwiNjVmMFwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODYxZFwiKSxpPXIoXCJlOGI1XCIpLG89cihcImI2MjJcIiksYT1vKFwic3BlY2llc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcjtyZXR1cm4gaSh0KSYmKHI9dC5jb25zdHJ1Y3RvcixcImZ1bmN0aW9uXCIhPXR5cGVvZiByfHxyIT09QXJyYXkmJiFpKHIucHJvdG90eXBlKT9uKHIpJiYocj1yW2FdLG51bGw9PT1yJiYocj12b2lkIDApKTpyPXZvaWQgMCksbmV3KHZvaWQgMD09PXI/QXJyYXk6cikoMD09PWU/MDplKX19LFwiNjlmM1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLG8sYT1yKFwiN2Y5YVwiKSxzPXIoXCJkYTg0XCIpLGM9cihcIjg2MWRcIiksdT1yKFwiOTExMlwiKSxmPXIoXCI1MTM1XCIpLGw9cihcImY3NzJcIikscD1yKFwiZDAxMlwiKSxkPXMuV2Vha01hcCxoPWZ1bmN0aW9uKHQpe3JldHVybiBvKHQpP2kodCk6bih0LHt9KX0sdj1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI7aWYoIWMoZSl8fChyPWkoZSkpLnR5cGUhPT10KXRocm93IFR5cGVFcnJvcihcIkluY29tcGF0aWJsZSByZWNlaXZlciwgXCIrdCtcIiByZXF1aXJlZFwiKTtyZXR1cm4gcn19O2lmKGEpe3ZhciBtPW5ldyBkLGc9bS5nZXQseT1tLmhhcyxiPW0uc2V0O249ZnVuY3Rpb24odCxlKXtyZXR1cm4gYi5jYWxsKG0sdCxlKSxlfSxpPWZ1bmN0aW9uKHQpe3JldHVybiBnLmNhbGwobSx0KXx8e319LG89ZnVuY3Rpb24odCl7cmV0dXJuIHkuY2FsbChtLHQpfX1lbHNle3ZhciB4PWwoXCJzdGF0ZVwiKTtwW3hdPSEwLG49ZnVuY3Rpb24odCxlKXtyZXR1cm4gdSh0LHgsZSksZX0saT1mdW5jdGlvbih0KXtyZXR1cm4gZih0LHgpP3RbeF06e319LG89ZnVuY3Rpb24odCl7cmV0dXJuIGYodCx4KX19dC5leHBvcnRzPXtzZXQ6bixnZXQ6aSxoYXM6byxlbmZvcmNlOmgsZ2V0dGVyRm9yOnZ9fSxcIjZkNDBcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjExYWVcIik7XCJzdHJpbmdcIj09PXR5cGVvZiBuJiYobj1bW3QuaSxuLFwiXCJdXSksbi5sb2NhbHMmJih0LmV4cG9ydHM9bi5sb2NhbHMpO3ZhciBpPXIoXCI0OTllXCIpLmRlZmF1bHQ7aShcIjc4YjQ5YjZlXCIsbiwhMCx7c291cmNlTWFwOiExLHNoYWRvd01vZGU6ITF9KX0sXCI2ZWViXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJkYTg0XCIpLGk9cihcIjkxMTJcIiksbz1yKFwiNTEzNVwiKSxhPXIoXCJjZTRlXCIpLHM9cihcIjg5MjVcIiksYz1yKFwiNjlmM1wiKSx1PWMuZ2V0LGY9Yy5lbmZvcmNlLGw9U3RyaW5nKFN0cmluZykuc3BsaXQoXCJTdHJpbmdcIik7KHQuZXhwb3J0cz1mdW5jdGlvbih0LGUscixzKXt2YXIgYz0hIXMmJiEhcy51bnNhZmUsdT0hIXMmJiEhcy5lbnVtZXJhYmxlLHA9ISFzJiYhIXMubm9UYXJnZXRHZXQ7XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxvKHIsXCJuYW1lXCIpfHxpKHIsXCJuYW1lXCIsZSksZihyKS5zb3VyY2U9bC5qb2luKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6XCJcIikpLHQhPT1uPyhjPyFwJiZ0W2VdJiYodT0hMCk6ZGVsZXRlIHRbZV0sdT90W2VdPXI6aSh0LGUscikpOnU/dFtlXT1yOmEoZSxyKX0pKEZ1bmN0aW9uLnByb3RvdHlwZSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcyYmdSh0aGlzKS5zb3VyY2V8fHModGhpcyl9KSl9LDcxNTY6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI4NjFkXCIpLGk9cihcImQyYmJcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbyxhO3JldHVybiBpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihvPWUuY29uc3RydWN0b3IpJiZvIT09ciYmbihhPW8ucHJvdG90eXBlKSYmYSE9PXIucHJvdG90eXBlJiZpKHQsYSksdH19LDc0MTg6ZnVuY3Rpb24odCxlKXtlLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30sXCI3NDZmXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI0MjhmXCIpLGk9cihcIjUxMzVcIiksbz1yKFwiZTUzOFwiKSxhPXIoXCI5YmYyXCIpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPW4uU3ltYm9sfHwobi5TeW1ib2w9e30pO2koZSx0KXx8YShlLHQse3ZhbHVlOm8uZih0KX0pfX0sNzgzOTpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1bXCJjb25zdHJ1Y3RvclwiLFwiaGFzT3duUHJvcGVydHlcIixcImlzUHJvdG90eXBlT2ZcIixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwidG9TdHJpbmdcIixcInZhbHVlT2ZcIl19LFwiN2IwYlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMWQ4MFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdChuKHQpKX19LFwiN2M3M1wiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpPXIoXCI4MjVhXCIpLG89cihcIjM3ZThcIiksYT1yKFwiNzgzOVwiKSxzPXIoXCJkMDEyXCIpLGM9cihcIjFiZTRcIiksdT1yKFwiY2MxMlwiKSxmPXIoXCJmNzcyXCIpLGw9XCI+XCIscD1cIjxcIixkPVwicHJvdG90eXBlXCIsaD1cInNjcmlwdFwiLHY9ZihcIklFX1BST1RPXCIpLG09ZnVuY3Rpb24oKXt9LGc9ZnVuY3Rpb24odCl7cmV0dXJuIHAraCtsK3QrcCtcIi9cIitoK2x9LHk9ZnVuY3Rpb24odCl7dC53cml0ZShnKFwiXCIpKSx0LmNsb3NlKCk7dmFyIGU9dC5wYXJlbnRXaW5kb3cuT2JqZWN0O3JldHVybiB0PW51bGwsZX0sYj1mdW5jdGlvbigpe3ZhciB0LGU9dShcImlmcmFtZVwiKSxyPVwiamF2YVwiK2grXCI6XCI7cmV0dXJuIGUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixjLmFwcGVuZENoaWxkKGUpLGUuc3JjPVN0cmluZyhyKSx0PWUuY29udGVudFdpbmRvdy5kb2N1bWVudCx0Lm9wZW4oKSx0LndyaXRlKGcoXCJkb2N1bWVudC5GPU9iamVjdFwiKSksdC5jbG9zZSgpLHQuRn0seD1mdW5jdGlvbigpe3RyeXtuPWRvY3VtZW50LmRvbWFpbiYmbmV3IEFjdGl2ZVhPYmplY3QoXCJodG1sZmlsZVwiKX1jYXRjaChlKXt9eD1uP3kobik6YigpO3ZhciB0PWEubGVuZ3RoO3doaWxlKHQtLSlkZWxldGUgeFtkXVthW3RdXTtyZXR1cm4geCgpfTtzW3ZdPSEwLHQuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiBudWxsIT09dD8obVtkXT1pKHQpLHI9bmV3IG0sbVtkXT1udWxsLHJbdl09dCk6cj14KCksdm9pZCAwPT09ZT9yOm8ocixlKX19LFwiN2RkMFwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCI5ZWQzXCIpLG89cihcImUxNjNcIiksYT1yKFwiZDJiYlwiKSxzPXIoXCJkNDRlXCIpLGM9cihcIjkxMTJcIiksdT1yKFwiNmVlYlwiKSxmPXIoXCJiNjIyXCIpLGw9cihcImM0MzBcIikscD1yKFwiM2Y4Y1wiKSxkPXIoXCJhZTkzXCIpLGg9ZC5JdGVyYXRvclByb3RvdHlwZSx2PWQuQlVHR1lfU0FGQVJJX0lURVJBVE9SUyxtPWYoXCJpdGVyYXRvclwiKSxnPVwia2V5c1wiLHk9XCJ2YWx1ZXNcIixiPVwiZW50cmllc1wiLHg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGYsZCxrLHcpe2kocixlLGYpO3ZhciBfLFMsRSxUPWZ1bmN0aW9uKHQpe2lmKHQ9PT1kJiZQKXJldHVybiBQO2lmKCF2JiZ0IGluIGopcmV0dXJuIGpbdF07c3dpdGNoKHQpe2Nhc2UgZzpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyx0KX07Y2FzZSB5OnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLHQpfTtjYXNlIGI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsdCl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzKX19LE89ZStcIiBJdGVyYXRvclwiLEM9ITEsaj10LnByb3RvdHlwZSxBPWpbbV18fGpbXCJAQGl0ZXJhdG9yXCJdfHxkJiZqW2RdLFA9IXYmJkF8fFQoZCksUj1cIkFycmF5XCI9PWUmJmouZW50cmllc3x8QTtpZihSJiYoXz1vKFIuY2FsbChuZXcgdCkpLGghPT1PYmplY3QucHJvdG90eXBlJiZfLm5leHQmJihsfHxvKF8pPT09aHx8KGE/YShfLGgpOlwiZnVuY3Rpb25cIiE9dHlwZW9mIF9bbV0mJmMoXyxtLHgpKSxzKF8sTywhMCwhMCksbCYmKHBbT109eCkpKSxkPT15JiZBJiZBLm5hbWUhPT15JiYoQz0hMCxQPWZ1bmN0aW9uKCl7cmV0dXJuIEEuY2FsbCh0aGlzKX0pLGwmJiF3fHxqW21dPT09UHx8YyhqLG0sUCkscFtlXT1QLGQpaWYoUz17dmFsdWVzOlQoeSksa2V5czprP1A6VChnKSxlbnRyaWVzOlQoYil9LHcpZm9yKEUgaW4gUykodnx8Q3x8IShFIGluIGopKSYmdShqLEUsU1tFXSk7ZWxzZSBuKHt0YXJnZXQ6ZSxwcm90bzohMCxmb3JjZWQ6dnx8Q30sUyk7cmV0dXJuIFN9fSxcIjdmOWFcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImRhODRcIiksaT1yKFwiODkyNVwiKSxvPW4uV2Vha01hcDt0LmV4cG9ydHM9XCJmdW5jdGlvblwiPT09dHlwZW9mIG8mJi9uYXRpdmUgY29kZS8udGVzdChpKG8pKX0sXCI4MjVhXCI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI4NjFkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZighbih0KSl0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKHQpK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7cmV0dXJuIHR9fSxcIjgzYWJcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwMzlcIik7dC5leHBvcnRzPSFuKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sMSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSlbMV19KSl9LDg0MTg6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJjMDRlXCIpLGk9cihcIjliZjJcIiksbz1yKFwiNWM2Y1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe3ZhciBhPW4oZSk7YSBpbiB0P2kuZih0LGEsbygwLHIpKTp0W2FdPXJ9fSxcIjg0MWNcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcImQ3ODRcIiksaT1yKFwiODI1YVwiKSxvPXIoXCIxZDgwXCIpLGE9cihcIjEyOWZcIikscz1yKFwiMTRjM1wiKTtuKFwic2VhcmNoXCIsMSwoZnVuY3Rpb24odCxlLHIpe3JldHVybltmdW5jdGlvbihlKXt2YXIgcj1vKHRoaXMpLG49dm9pZCAwPT1lP3ZvaWQgMDplW3RdO3JldHVybiB2b2lkIDAhPT1uP24uY2FsbChlLHIpOm5ldyBSZWdFeHAoZSlbdF0oU3RyaW5nKHIpKX0sZnVuY3Rpb24odCl7dmFyIG49cihlLHQsdGhpcyk7aWYobi5kb25lKXJldHVybiBuLnZhbHVlO3ZhciBvPWkodCksYz1TdHJpbmcodGhpcyksdT1vLmxhc3RJbmRleDthKHUsMCl8fChvLmxhc3RJbmRleD0wKTt2YXIgZj1zKG8sYyk7cmV0dXJuIGEoby5sYXN0SW5kZXgsdSl8fChvLmxhc3RJbmRleD11KSxudWxsPT09Zj8tMTpmLmluZGV4fV19KSl9LFwiODYxZFwiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgdD9udWxsIT09dDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgdH19LDg4NzU6ZnVuY3Rpb24odCxlLHIpe3ZhciBuLGksbzsoZnVuY3Rpb24ocixhKXtpPVtdLG49YSxvPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uYXBwbHkoZSxpKTpuLHZvaWQgMD09PW98fCh0LmV4cG9ydHM9byl9KShcInVuZGVmaW5lZFwiIT09dHlwZW9mIHNlbGYmJnNlbGYsKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZG9jdW1lbnQsXCJjdXJyZW50U2NyaXB0XCIpO2lmKCFlJiZcImN1cnJlbnRTY3JpcHRcImluIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0KXJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0O2lmKGUmJmUuZ2V0IT09dCYmZG9jdW1lbnQuY3VycmVudFNjcmlwdClyZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdDt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGQpe3ZhciByLG4saSxvPS8uKmF0IFteKF0qXFwoKC4qKTooLispOiguKylcXCkkL2dpLGE9L0AoW15AXSopOihcXGQrKTooXFxkKylcXHMqJC9naSxzPW8uZXhlYyhkLnN0YWNrKXx8YS5leGVjKGQuc3RhY2spLGM9cyYmc1sxXXx8ITEsdT1zJiZzWzJdfHwhMSxmPWRvY3VtZW50LmxvY2F0aW9uLmhyZWYucmVwbGFjZShkb2N1bWVudC5sb2NhdGlvbi5oYXNoLFwiXCIpLGw9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7Yz09PWYmJihyPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUwsbj1uZXcgUmVnRXhwKFwiKD86W15cXFxcbl0rP1xcXFxuKXswLFwiKyh1LTIpK1wifVtePF0qPHNjcmlwdD4oW1xcXFxkXFxcXERdKj8pPFxcXFwvc2NyaXB0PltcXFxcZFxcXFxEXSpcIixcImlcIiksaT1yLnJlcGxhY2UobixcIiQxXCIpLnRyaW0oKSk7Zm9yKHZhciBwPTA7cDxsLmxlbmd0aDtwKyspe2lmKFwiaW50ZXJhY3RpdmVcIj09PWxbcF0ucmVhZHlTdGF0ZSlyZXR1cm4gbFtwXTtpZihsW3BdLnNyYz09PWMpcmV0dXJuIGxbcF07aWYoYz09PWYmJmxbcF0uaW5uZXJIVE1MJiZsW3BdLmlubmVySFRNTC50cmltKCk9PT1pKXJldHVybiBsW3BdfXJldHVybiBudWxsfX1yZXR1cm4gdH0pKX0sODkyNTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImM2Y2RcIiksaT1GdW5jdGlvbi50b1N0cmluZztcImZ1bmN0aW9uXCIhPXR5cGVvZiBuLmluc3BlY3RTb3VyY2UmJihuLmluc3BlY3RTb3VyY2U9ZnVuY3Rpb24odCl7cmV0dXJuIGkuY2FsbCh0KX0pLHQuZXhwb3J0cz1uLmluc3BlY3RTb3VyY2V9LFwiOGFhNVwiOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiNjU0N1wiKS5jaGFyQXQ7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gZSsocj9uKHQsZSkubGVuZ3RoOjEpfX0sXCI5MGUzXCI6ZnVuY3Rpb24odCxlKXt2YXIgcj0wLG49TWF0aC5yYW5kb20oKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuXCJTeW1ib2woXCIrU3RyaW5nKHZvaWQgMD09PXQ/XCJcIjp0KStcIilfXCIrKCsrcituKS50b1N0cmluZygzNil9fSw5MTEyOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODNhYlwiKSxpPXIoXCI5YmYyXCIpLG89cihcIjVjNmNcIik7dC5leHBvcnRzPW4/ZnVuY3Rpb24odCxlLHIpe3JldHVybiBpLmYodCxlLG8oMSxyKSl9OmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdFtlXT1yLHR9fSw5MTI5OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMjNlN1wiKTtuKHt0YXJnZXQ6XCJOdW1iZXJcIixzdGF0OiEwfSx7aXNOYU46ZnVuY3Rpb24odCl7cmV0dXJuIHQhPXR9fSl9LDkyNjM6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJhZDZkXCIpLGk9cihcIjlmN2ZcIiksbz1SZWdFeHAucHJvdG90eXBlLmV4ZWMsYT1TdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uscz1vLGM9ZnVuY3Rpb24oKXt2YXIgdD0vYS8sZT0vYiovZztyZXR1cm4gby5jYWxsKHQsXCJhXCIpLG8uY2FsbChlLFwiYVwiKSwwIT09dC5sYXN0SW5kZXh8fDAhPT1lLmxhc3RJbmRleH0oKSx1PWkuVU5TVVBQT1JURURfWXx8aS5CUk9LRU5fQ0FSRVQsZj12b2lkIDAhPT0vKCk/Py8uZXhlYyhcIlwiKVsxXSxsPWN8fGZ8fHU7bCYmKHM9ZnVuY3Rpb24odCl7dmFyIGUscixpLHMsbD10aGlzLHA9dSYmbC5zdGlja3ksZD1uLmNhbGwobCksaD1sLnNvdXJjZSx2PTAsbT10O3JldHVybiBwJiYoZD1kLnJlcGxhY2UoXCJ5XCIsXCJcIiksLTE9PT1kLmluZGV4T2YoXCJnXCIpJiYoZCs9XCJnXCIpLG09U3RyaW5nKHQpLnNsaWNlKGwubGFzdEluZGV4KSxsLmxhc3RJbmRleD4wJiYoIWwubXVsdGlsaW5lfHxsLm11bHRpbGluZSYmXCJcXG5cIiE9PXRbbC5sYXN0SW5kZXgtMV0pJiYoaD1cIig/OiBcIitoK1wiKVwiLG09XCIgXCIrbSx2KyspLHI9bmV3IFJlZ0V4cChcIl4oPzpcIitoK1wiKVwiLGQpKSxmJiYocj1uZXcgUmVnRXhwKFwiXlwiK2grXCIkKD8hXFxcXHMpXCIsZCkpLGMmJihlPWwubGFzdEluZGV4KSxpPW8uY2FsbChwP3I6bCxtKSxwP2k/KGkuaW5wdXQ9aS5pbnB1dC5zbGljZSh2KSxpWzBdPWlbMF0uc2xpY2UodiksaS5pbmRleD1sLmxhc3RJbmRleCxsLmxhc3RJbmRleCs9aVswXS5sZW5ndGgpOmwubGFzdEluZGV4PTA6YyYmaSYmKGwubGFzdEluZGV4PWwuZ2xvYmFsP2kuaW5kZXgraVswXS5sZW5ndGg6ZSksZiYmaSYmaS5sZW5ndGg+MSYmYS5jYWxsKGlbMF0sciwoZnVuY3Rpb24oKXtmb3Iocz0xO3M8YXJndW1lbnRzLmxlbmd0aC0yO3MrKyl2b2lkIDA9PT1hcmd1bWVudHNbc10mJihpW3NdPXZvaWQgMCl9KSksaX0pLHQuZXhwb3J0cz1zfSxcIjk0Y2FcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwMzlcIiksaT0vI3xcXC5wcm90b3R5cGVcXC4vLG89ZnVuY3Rpb24odCxlKXt2YXIgcj1zW2EodCldO3JldHVybiByPT11fHxyIT1jJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZT9uKGUpOiEhZSl9LGE9by5ub3JtYWxpemU9ZnVuY3Rpb24odCl7cmV0dXJuIFN0cmluZyh0KS5yZXBsYWNlKGksXCIuXCIpLnRvTG93ZXJDYXNlKCl9LHM9by5kYXRhPXt9LGM9by5OQVRJVkU9XCJOXCIsdT1vLlBPTFlGSUxMPVwiUFwiO3QuZXhwb3J0cz1vfSxcIjk2Y2ZcIjpmdW5jdGlvbih0LGUscil7dmFyIG49ZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGUscj1PYmplY3QucHJvdG90eXBlLG49ci5oYXNPd25Qcm9wZXJ0eSxpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LG89aS5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsYT1pLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIscz1pLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIjtmdW5jdGlvbiBjKHQsZSxyKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLHRbZV19dHJ5e2Moe30sXCJcIil9Y2F0Y2goUil7Yz1mdW5jdGlvbih0LGUscil7cmV0dXJuIHRbZV09cn19ZnVuY3Rpb24gdSh0LGUscixuKXt2YXIgaT1lJiZlLnByb3RvdHlwZSBpbnN0YW5jZW9mIG0/ZTptLG89T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksYT1uZXcgaihufHxbXSk7cmV0dXJuIG8uX2ludm9rZT1FKHQscixhKSxvfWZ1bmN0aW9uIGYodCxlLHIpe3RyeXtyZXR1cm57dHlwZTpcIm5vcm1hbFwiLGFyZzp0LmNhbGwoZSxyKX19Y2F0Y2goUil7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzpSfX19dC53cmFwPXU7dmFyIGw9XCJzdXNwZW5kZWRTdGFydFwiLHA9XCJzdXNwZW5kZWRZaWVsZFwiLGQ9XCJleGVjdXRpbmdcIixoPVwiY29tcGxldGVkXCIsdj17fTtmdW5jdGlvbiBtKCl7fWZ1bmN0aW9uIGcoKXt9ZnVuY3Rpb24geSgpe312YXIgYj17fTtiW29dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciB4PU9iamVjdC5nZXRQcm90b3R5cGVPZixrPXgmJngoeChBKFtdKSkpO2smJmshPT1yJiZuLmNhbGwoayxvKSYmKGI9ayk7dmFyIHc9eS5wcm90b3R5cGU9bS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShiKTtmdW5jdGlvbiBfKHQpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7Yyh0LGUsKGZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pbnZva2UoZSx0KX0pKX0pKX1mdW5jdGlvbiBTKHQsZSl7ZnVuY3Rpb24gcihpLG8sYSxzKXt2YXIgYz1mKHRbaV0sdCxvKTtpZihcInRocm93XCIhPT1jLnR5cGUpe3ZhciB1PWMuYXJnLGw9dS52YWx1ZTtyZXR1cm4gbCYmXCJvYmplY3RcIj09PXR5cGVvZiBsJiZuLmNhbGwobCxcIl9fYXdhaXRcIik/ZS5yZXNvbHZlKGwuX19hd2FpdCkudGhlbigoZnVuY3Rpb24odCl7cihcIm5leHRcIix0LGEscyl9KSwoZnVuY3Rpb24odCl7cihcInRocm93XCIsdCxhLHMpfSkpOmUucmVzb2x2ZShsKS50aGVuKChmdW5jdGlvbih0KXt1LnZhbHVlPXQsYSh1KX0pLChmdW5jdGlvbih0KXtyZXR1cm4gcihcInRocm93XCIsdCxhLHMpfSkpfXMoYy5hcmcpfXZhciBpO2Z1bmN0aW9uIG8odCxuKXtmdW5jdGlvbiBvKCl7cmV0dXJuIG5ldyBlKChmdW5jdGlvbihlLGkpe3IodCxuLGUsaSl9KSl9cmV0dXJuIGk9aT9pLnRoZW4obyxvKTpvKCl9dGhpcy5faW52b2tlPW99ZnVuY3Rpb24gRSh0LGUscil7dmFyIG49bDtyZXR1cm4gZnVuY3Rpb24oaSxvKXtpZihuPT09ZCl0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKG49PT1oKXtpZihcInRocm93XCI9PT1pKXRocm93IG87cmV0dXJuIFAoKX1yLm1ldGhvZD1pLHIuYXJnPW87d2hpbGUoMSl7dmFyIGE9ci5kZWxlZ2F0ZTtpZihhKXt2YXIgcz1UKGEscik7aWYocyl7aWYocz09PXYpY29udGludWU7cmV0dXJuIHN9fWlmKFwibmV4dFwiPT09ci5tZXRob2Qpci5zZW50PXIuX3NlbnQ9ci5hcmc7ZWxzZSBpZihcInRocm93XCI9PT1yLm1ldGhvZCl7aWYobj09PWwpdGhyb3cgbj1oLHIuYXJnO3IuZGlzcGF0Y2hFeGNlcHRpb24oci5hcmcpfWVsc2VcInJldHVyblwiPT09ci5tZXRob2QmJnIuYWJydXB0KFwicmV0dXJuXCIsci5hcmcpO249ZDt2YXIgYz1mKHQsZSxyKTtpZihcIm5vcm1hbFwiPT09Yy50eXBlKXtpZihuPXIuZG9uZT9oOnAsYy5hcmc9PT12KWNvbnRpbnVlO3JldHVybnt2YWx1ZTpjLmFyZyxkb25lOnIuZG9uZX19XCJ0aHJvd1wiPT09Yy50eXBlJiYobj1oLHIubWV0aG9kPVwidGhyb3dcIixyLmFyZz1jLmFyZyl9fX1mdW5jdGlvbiBUKHQscil7dmFyIG49dC5pdGVyYXRvcltyLm1ldGhvZF07aWYobj09PWUpe2lmKHIuZGVsZWdhdGU9bnVsbCxcInRocm93XCI9PT1yLm1ldGhvZCl7aWYodC5pdGVyYXRvcltcInJldHVyblwiXSYmKHIubWV0aG9kPVwicmV0dXJuXCIsci5hcmc9ZSxUKHQsciksXCJ0aHJvd1wiPT09ci5tZXRob2QpKXJldHVybiB2O3IubWV0aG9kPVwidGhyb3dcIixyLmFyZz1uZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKX1yZXR1cm4gdn12YXIgaT1mKG4sdC5pdGVyYXRvcixyLmFyZyk7aWYoXCJ0aHJvd1wiPT09aS50eXBlKXJldHVybiByLm1ldGhvZD1cInRocm93XCIsci5hcmc9aS5hcmcsci5kZWxlZ2F0ZT1udWxsLHY7dmFyIG89aS5hcmc7cmV0dXJuIG8/by5kb25lPyhyW3QucmVzdWx0TmFtZV09by52YWx1ZSxyLm5leHQ9dC5uZXh0TG9jLFwicmV0dXJuXCIhPT1yLm1ldGhvZCYmKHIubWV0aG9kPVwibmV4dFwiLHIuYXJnPWUpLHIuZGVsZWdhdGU9bnVsbCx2KTpvOihyLm1ldGhvZD1cInRocm93XCIsci5hcmc9bmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLHIuZGVsZWdhdGU9bnVsbCx2KX1mdW5jdGlvbiBPKHQpe3ZhciBlPXt0cnlMb2M6dFswXX07MSBpbiB0JiYoZS5jYXRjaExvYz10WzFdKSwyIGluIHQmJihlLmZpbmFsbHlMb2M9dFsyXSxlLmFmdGVyTG9jPXRbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGUpfWZ1bmN0aW9uIEModCl7dmFyIGU9dC5jb21wbGV0aW9ufHx7fTtlLnR5cGU9XCJub3JtYWxcIixkZWxldGUgZS5hcmcsdC5jb21wbGV0aW9uPWV9ZnVuY3Rpb24gaih0KXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6XCJyb290XCJ9XSx0LmZvckVhY2goTyx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiBBKHQpe2lmKHQpe3ZhciByPXRbb107aWYocilyZXR1cm4gci5jYWxsKHQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIGk9LTEsYT1mdW5jdGlvbiByKCl7d2hpbGUoKytpPHQubGVuZ3RoKWlmKG4uY2FsbCh0LGkpKXJldHVybiByLnZhbHVlPXRbaV0sci5kb25lPSExLHI7cmV0dXJuIHIudmFsdWU9ZSxyLmRvbmU9ITAscn07cmV0dXJuIGEubmV4dD1hfX1yZXR1cm57bmV4dDpQfX1mdW5jdGlvbiBQKCl7cmV0dXJue3ZhbHVlOmUsZG9uZTohMH19cmV0dXJuIGcucHJvdG90eXBlPXcuY29uc3RydWN0b3I9eSx5LmNvbnN0cnVjdG9yPWcsZy5kaXNwbGF5TmFtZT1jKHkscyxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLHQuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbih0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdCYmdC5jb25zdHJ1Y3RvcjtyZXR1cm4hIWUmJihlPT09Z3x8XCJHZW5lcmF0b3JGdW5jdGlvblwiPT09KGUuZGlzcGxheU5hbWV8fGUubmFtZSkpfSx0Lm1hcms9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCx5KToodC5fX3Byb3RvX189eSxjKHQscyxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHcpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LF8oUy5wcm90b3R5cGUpLFMucHJvdG90eXBlW2FdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQuQXN5bmNJdGVyYXRvcj1TLHQuYXN5bmM9ZnVuY3Rpb24oZSxyLG4saSxvKXt2b2lkIDA9PT1vJiYobz1Qcm9taXNlKTt2YXIgYT1uZXcgUyh1KGUscixuLGkpLG8pO3JldHVybiB0LmlzR2VuZXJhdG9yRnVuY3Rpb24ocik/YTphLm5leHQoKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5kb25lP3QudmFsdWU6YS5uZXh0KCl9KSl9LF8odyksYyh3LHMsXCJHZW5lcmF0b3JcIiksd1tvXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSx3LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvcl1cIn0sdC5rZXlzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgciBpbiB0KWUucHVzaChyKTtyZXR1cm4gZS5yZXZlcnNlKCksZnVuY3Rpb24gcigpe3doaWxlKGUubGVuZ3RoKXt2YXIgbj1lLnBvcCgpO2lmKG4gaW4gdClyZXR1cm4gci52YWx1ZT1uLHIuZG9uZT0hMSxyfXJldHVybiByLmRvbmU9ITAscn19LHQudmFsdWVzPUEsai5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmoscmVzZXQ6ZnVuY3Rpb24odCl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9ZSx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMuYXJnPWUsdGhpcy50cnlFbnRyaWVzLmZvckVhY2goQyksIXQpZm9yKHZhciByIGluIHRoaXMpXCJ0XCI9PT1yLmNoYXJBdCgwKSYmbi5jYWxsKHRoaXMscikmJiFpc05hTigrci5zbGljZSgxKSkmJih0aGlzW3JdPWUpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciB0PXRoaXMudHJ5RW50cmllc1swXSxlPXQuY29tcGxldGlvbjtpZihcInRocm93XCI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24odCl7aWYodGhpcy5kb25lKXRocm93IHQ7dmFyIHI9dGhpcztmdW5jdGlvbiBpKG4saSl7cmV0dXJuIHMudHlwZT1cInRocm93XCIscy5hcmc9dCxyLm5leHQ9bixpJiYoci5tZXRob2Q9XCJuZXh0XCIsci5hcmc9ZSksISFpfWZvcih2YXIgbz10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bz49MDstLW8pe3ZhciBhPXRoaXMudHJ5RW50cmllc1tvXSxzPWEuY29tcGxldGlvbjtpZihcInJvb3RcIj09PWEudHJ5TG9jKXJldHVybiBpKFwiZW5kXCIpO2lmKGEudHJ5TG9jPD10aGlzLnByZXYpe3ZhciBjPW4uY2FsbChhLFwiY2F0Y2hMb2NcIiksdT1uLmNhbGwoYSxcImZpbmFsbHlMb2NcIik7aWYoYyYmdSl7aWYodGhpcy5wcmV2PGEuY2F0Y2hMb2MpcmV0dXJuIGkoYS5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PGEuZmluYWxseUxvYylyZXR1cm4gaShhLmZpbmFsbHlMb2MpfWVsc2UgaWYoYyl7aWYodGhpcy5wcmV2PGEuY2F0Y2hMb2MpcmV0dXJuIGkoYS5jYXRjaExvYywhMCl9ZWxzZXtpZighdSl0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtpZih0aGlzLnByZXY8YS5maW5hbGx5TG9jKXJldHVybiBpKGEuZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgcj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7cj49MDstLXIpe3ZhciBpPXRoaXMudHJ5RW50cmllc1tyXTtpZihpLnRyeUxvYzw9dGhpcy5wcmV2JiZuLmNhbGwoaSxcImZpbmFsbHlMb2NcIikmJnRoaXMucHJldjxpLmZpbmFsbHlMb2Mpe3ZhciBvPWk7YnJlYWt9fW8mJihcImJyZWFrXCI9PT10fHxcImNvbnRpbnVlXCI9PT10KSYmby50cnlMb2M8PWUmJmU8PW8uZmluYWxseUxvYyYmKG89bnVsbCk7dmFyIGE9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIGEudHlwZT10LGEuYXJnPWUsbz8odGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5uZXh0PW8uZmluYWxseUxvYyx2KTp0aGlzLmNvbXBsZXRlKGEpfSxjb21wbGV0ZTpmdW5jdGlvbih0LGUpe2lmKFwidGhyb3dcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm5cImJyZWFrXCI9PT10LnR5cGV8fFwiY29udGludWVcIj09PXQudHlwZT90aGlzLm5leHQ9dC5hcmc6XCJyZXR1cm5cIj09PXQudHlwZT8odGhpcy5ydmFsPXRoaXMuYXJnPXQuYXJnLHRoaXMubWV0aG9kPVwicmV0dXJuXCIsdGhpcy5uZXh0PVwiZW5kXCIpOlwibm9ybWFsXCI9PT10LnR5cGUmJmUmJih0aGlzLm5leHQ9ZSksdn0sZmluaXNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciByPXRoaXMudHJ5RW50cmllc1tlXTtpZihyLmZpbmFsbHlMb2M9PT10KXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSxDKHIpLHZ9fSxjYXRjaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbZV07aWYoci50cnlMb2M9PT10KXt2YXIgbj1yLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09bi50eXBlKXt2YXIgaT1uLmFyZztDKHIpfXJldHVybiBpfX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24odCxyLG4pe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjpBKHQpLHJlc3VsdE5hbWU6cixuZXh0TG9jOm59LFwibmV4dFwiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz1lKSx2fX0sdH0odC5leHBvcnRzKTt0cnl7cmVnZW5lcmF0b3JSdW50aW1lPW59Y2F0Y2goaSl7RnVuY3Rpb24oXCJyXCIsXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKG4pfX0sXCI5OWFmXCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcImQwMzlcIiksbz1yKFwiZThiNVwiKSxhPXIoXCI4NjFkXCIpLHM9cihcIjdiMGJcIiksYz1yKFwiNTBjNFwiKSx1PXIoXCI4NDE4XCIpLGY9cihcIjY1ZjBcIiksbD1yKFwiMWRkZVwiKSxwPXIoXCJiNjIyXCIpLGQ9cihcIjJkMDBcIiksaD1wKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpLHY9OTAwNzE5OTI1NDc0MDk5MSxtPVwiTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkXCIsZz1kPj01MXx8IWkoKGZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHRbaF09ITEsdC5jb25jYXQoKVswXSE9PXR9KSkseT1sKFwiY29uY2F0XCIpLGI9ZnVuY3Rpb24odCl7aWYoIWEodCkpcmV0dXJuITE7dmFyIGU9dFtoXTtyZXR1cm4gdm9pZCAwIT09ZT8hIWU6byh0KX0seD0hZ3x8IXk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6eH0se2NvbmNhdDpmdW5jdGlvbih0KXt2YXIgZSxyLG4saSxvLGE9cyh0aGlzKSxsPWYoYSwwKSxwPTA7Zm9yKGU9LTEsbj1hcmd1bWVudHMubGVuZ3RoO2U8bjtlKyspaWYobz0tMT09PWU/YTphcmd1bWVudHNbZV0sYihvKSl7aWYoaT1jKG8ubGVuZ3RoKSxwK2k+dil0aHJvdyBUeXBlRXJyb3IobSk7Zm9yKHI9MDtyPGk7cisrLHArKylyIGluIG8mJnUobCxwLG9bcl0pfWVsc2V7aWYocD49dil0aHJvdyBUeXBlRXJyb3IobSk7dShsLHArKyxvKX1yZXR1cm4gbC5sZW5ndGg9cCxsfX0pfSxcIjliZGRcIjpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjgyNWFcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGkpe3RyeXtyZXR1cm4gaT9lKG4ocilbMF0sclsxXSk6ZShyKX1jYXRjaChhKXt2YXIgbz10W1wicmV0dXJuXCJdO3Rocm93IHZvaWQgMCE9PW8mJm4oby5jYWxsKHQpKSxhfX19LFwiOWJmMlwiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODNhYlwiKSxpPXIoXCIwY2ZiXCIpLG89cihcIjgyNWFcIiksYT1yKFwiYzA0ZVwiKSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTtlLmY9bj9zOmZ1bmN0aW9uKHQsZSxyKXtpZihvKHQpLGU9YShlLCEwKSxvKHIpLGkpdHJ5e3JldHVybiBzKHQsZSxyKX1jYXRjaChuKXt9aWYoXCJnZXRcImluIHJ8fFwic2V0XCJpbiByKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkXCIpO3JldHVyblwidmFsdWVcImluIHImJih0W2VdPXIudmFsdWUpLHR9fSxcIjllZDNcIjpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcImFlOTNcIikuSXRlcmF0b3JQcm90b3R5cGUsaT1yKFwiN2M3M1wiKSxvPXIoXCI1YzZjXCIpLGE9cihcImQ0NGVcIikscz1yKFwiM2Y4Y1wiKSxjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7dmFyIHU9ZStcIiBJdGVyYXRvclwiO3JldHVybiB0LnByb3RvdHlwZT1pKG4se25leHQ6bygxLHIpfSksYSh0LHUsITEsITApLHNbdV09Yyx0fX0sXCI5ZjdmXCI6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJkMDM5XCIpO2Z1bmN0aW9uIGkodCxlKXtyZXR1cm4gUmVnRXhwKHQsZSl9ZS5VTlNVUFBPUlRFRF9ZPW4oKGZ1bmN0aW9uKCl7dmFyIHQ9aShcImFcIixcInlcIik7cmV0dXJuIHQubGFzdEluZGV4PTIsbnVsbCE9dC5leGVjKFwiYWJjZFwiKX0pKSxlLkJST0tFTl9DQVJFVD1uKChmdW5jdGlvbigpe3ZhciB0PWkoXCJeclwiLFwiZ3lcIik7cmV0dXJuIHQubGFzdEluZGV4PTIsbnVsbCE9dC5leGVjKFwic3RyXCIpfSkpfSxhMjMxOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMWQxYVwiKTtcInN0cmluZ1wiPT09dHlwZW9mIG4mJihuPVtbdC5pLG4sXCJcIl1dKSxuLmxvY2FscyYmKHQuZXhwb3J0cz1uLmxvY2Fscyk7dmFyIGk9cihcIjQ5OWVcIikuZGVmYXVsdDtpKFwiMWVmOTVmMTNcIixuLCEwLHtzb3VyY2VNYXA6ITEsc2hhZG93TW9kZTohMX0pfSxhNGQzOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCJkYTg0XCIpLG89cihcImQwNjZcIiksYT1yKFwiYzQzMFwiKSxzPXIoXCI4M2FiXCIpLGM9cihcIjQ5MzBcIiksdT1yKFwiZmRiZlwiKSxmPXIoXCJkMDM5XCIpLGw9cihcIjUxMzVcIikscD1yKFwiZThiNVwiKSxkPXIoXCI4NjFkXCIpLGg9cihcIjgyNWFcIiksdj1yKFwiN2IwYlwiKSxtPXIoXCJmYzZhXCIpLGc9cihcImMwNGVcIikseT1yKFwiNWM2Y1wiKSxiPXIoXCI3YzczXCIpLHg9cihcImRmNzVcIiksaz1yKFwiMjQxY1wiKSx3PXIoXCIwNTdmXCIpLF89cihcIjc0MThcIiksUz1yKFwiMDZjZlwiKSxFPXIoXCI5YmYyXCIpLFQ9cihcImQxZTdcIiksTz1yKFwiOTExMlwiKSxDPXIoXCI2ZWViXCIpLGo9cihcIjU2OTJcIiksQT1yKFwiZjc3MlwiKSxQPXIoXCJkMDEyXCIpLFI9cihcIjkwZTNcIiksRj1yKFwiYjYyMlwiKSxJPXIoXCJlNTM4XCIpLE49cihcIjc0NmZcIiksRD1yKFwiZDQ0ZVwiKSxMPXIoXCI2OWYzXCIpLE09cihcImI3MjdcIikuZm9yRWFjaCx6PUEoXCJoaWRkZW5cIikscT1cIlN5bWJvbFwiLFY9XCJwcm90b3R5cGVcIixHPUYoXCJ0b1ByaW1pdGl2ZVwiKSwkPUwuc2V0LEI9TC5nZXR0ZXJGb3IocSksVT1PYmplY3RbVl0sVz1pLlN5bWJvbCxIPW8oXCJKU09OXCIsXCJzdHJpbmdpZnlcIiksWD1TLmYsWT1FLmYsSz13LmYsSj1ULmYsUT1qKFwic3ltYm9sc1wiKSxaPWooXCJvcC1zeW1ib2xzXCIpLHR0PWooXCJzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5XCIpLGV0PWooXCJzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5XCIpLHJ0PWooXCJ3a3NcIiksbnQ9aS5RT2JqZWN0LGl0PSFudHx8IW50W1ZdfHwhbnRbVl0uZmluZENoaWxkLG90PXMmJmYoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPWIoWSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFkodGhpcyxcImFcIix7dmFsdWU6N30pLmF9fSkpLmF9KSk/ZnVuY3Rpb24odCxlLHIpe3ZhciBuPVgoVSxlKTtuJiZkZWxldGUgVVtlXSxZKHQsZSxyKSxuJiZ0IT09VSYmWShVLGUsbil9OlksYXQ9ZnVuY3Rpb24odCxlKXt2YXIgcj1RW3RdPWIoV1tWXSk7cmV0dXJuICQocix7dHlwZTpxLHRhZzp0LGRlc2NyaXB0aW9uOmV9KSxzfHwoci5kZXNjcmlwdGlvbj1lKSxyfSxzdD11P2Z1bmN0aW9uKHQpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0KHQpaW5zdGFuY2VvZiBXfSxjdD1mdW5jdGlvbih0LGUscil7dD09PVUmJmN0KFosZSxyKSxoKHQpO3ZhciBuPWcoZSwhMCk7cmV0dXJuIGgociksbChRLG4pPyhyLmVudW1lcmFibGU/KGwodCx6KSYmdFt6XVtuXSYmKHRbel1bbl09ITEpLHI9YihyLHtlbnVtZXJhYmxlOnkoMCwhMSl9KSk6KGwodCx6KXx8WSh0LHoseSgxLHt9KSksdFt6XVtuXT0hMCksb3QodCxuLHIpKTpZKHQsbixyKX0sdXQ9ZnVuY3Rpb24odCxlKXtoKHQpO3ZhciByPW0oZSksbj14KHIpLmNvbmNhdChodChyKSk7cmV0dXJuIE0obiwoZnVuY3Rpb24oZSl7cyYmIWx0LmNhbGwocixlKXx8Y3QodCxlLHJbZV0pfSkpLHR9LGZ0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWU/Yih0KTp1dChiKHQpLGUpfSxsdD1mdW5jdGlvbih0KXt2YXIgZT1nKHQsITApLHI9Si5jYWxsKHRoaXMsZSk7cmV0dXJuISh0aGlzPT09VSYmbChRLGUpJiYhbChaLGUpKSYmKCEocnx8IWwodGhpcyxlKXx8IWwoUSxlKXx8bCh0aGlzLHopJiZ0aGlzW3pdW2VdKXx8cil9LHB0PWZ1bmN0aW9uKHQsZSl7dmFyIHI9bSh0KSxuPWcoZSwhMCk7aWYociE9PVV8fCFsKFEsbil8fGwoWixuKSl7dmFyIGk9WChyLG4pO3JldHVybiFpfHwhbChRLG4pfHxsKHIseikmJnJbel1bbl18fChpLmVudW1lcmFibGU9ITApLGl9fSxkdD1mdW5jdGlvbih0KXt2YXIgZT1LKG0odCkpLHI9W107cmV0dXJuIE0oZSwoZnVuY3Rpb24odCl7bChRLHQpfHxsKFAsdCl8fHIucHVzaCh0KX0pKSxyfSxodD1mdW5jdGlvbih0KXt2YXIgZT10PT09VSxyPUsoZT9aOm0odCkpLG49W107cmV0dXJuIE0ociwoZnVuY3Rpb24odCl7IWwoUSx0KXx8ZSYmIWwoVSx0KXx8bi5wdXNoKFFbdF0pfSkpLG59O2lmKGN8fChXPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIFcpdGhyb3cgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yXCIpO3ZhciB0PWFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9TdHJpbmcoYXJndW1lbnRzWzBdKTp2b2lkIDAsZT1SKHQpLHI9ZnVuY3Rpb24odCl7dGhpcz09PVUmJnIuY2FsbChaLHQpLGwodGhpcyx6KSYmbCh0aGlzW3pdLGUpJiYodGhpc1t6XVtlXT0hMSksb3QodGhpcyxlLHkoMSx0KSl9O3JldHVybiBzJiZpdCYmb3QoVSxlLHtjb25maWd1cmFibGU6ITAsc2V0OnJ9KSxhdChlLHQpfSxDKFdbVl0sXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVybiBCKHRoaXMpLnRhZ30pKSxDKFcsXCJ3aXRob3V0U2V0dGVyXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBhdChSKHQpLHQpfSkpLFQuZj1sdCxFLmY9Y3QsUy5mPXB0LGsuZj13LmY9ZHQsXy5mPWh0LEkuZj1mdW5jdGlvbih0KXtyZXR1cm4gYXQoRih0KSx0KX0scyYmKFkoV1tWXSxcImRlc2NyaXB0aW9uXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQih0aGlzKS5kZXNjcmlwdGlvbn19KSxhfHxDKFUsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLGx0LHt1bnNhZmU6ITB9KSkpLG4oe2dsb2JhbDohMCx3cmFwOiEwLGZvcmNlZDohYyxzaGFtOiFjfSx7U3ltYm9sOld9KSxNKHgocnQpLChmdW5jdGlvbih0KXtOKHQpfSkpLG4oe3RhcmdldDpxLHN0YXQ6ITAsZm9yY2VkOiFjfSx7Zm9yOmZ1bmN0aW9uKHQpe3ZhciBlPVN0cmluZyh0KTtpZihsKHR0LGUpKXJldHVybiB0dFtlXTt2YXIgcj1XKGUpO3JldHVybiB0dFtlXT1yLGV0W3JdPWUscn0sa2V5Rm9yOmZ1bmN0aW9uKHQpe2lmKCFzdCh0KSl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgYSBzeW1ib2xcIik7aWYobChldCx0KSlyZXR1cm4gZXRbdF19LHVzZVNldHRlcjpmdW5jdGlvbigpe2l0PSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtpdD0hMX19KSxuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDohYyxzaGFtOiFzfSx7Y3JlYXRlOmZ0LGRlZmluZVByb3BlcnR5OmN0LGRlZmluZVByb3BlcnRpZXM6dXQsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOnB0fSksbih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IWN9LHtnZXRPd25Qcm9wZXJ0eU5hbWVzOmR0LGdldE93blByb3BlcnR5U3ltYm9sczpodH0pLG4oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOmYoKGZ1bmN0aW9uKCl7Xy5mKDEpfSkpfSx7Z2V0T3duUHJvcGVydHlTeW1ib2xzOmZ1bmN0aW9uKHQpe3JldHVybiBfLmYodih0KSl9fSksSCl7dmFyIHZ0PSFjfHxmKChmdW5jdGlvbigpe3ZhciB0PVcoKTtyZXR1cm5cIltudWxsXVwiIT1IKFt0XSl8fFwie31cIiE9SCh7YTp0fSl8fFwie31cIiE9SChPYmplY3QodCkpfSkpO24oe3RhcmdldDpcIkpTT05cIixzdGF0OiEwLGZvcmNlZDp2dH0se3N0cmluZ2lmeTpmdW5jdGlvbih0LGUscil7dmFyIG4saT1bdF0sbz0xO3doaWxlKGFyZ3VtZW50cy5sZW5ndGg+bylpLnB1c2goYXJndW1lbnRzW28rK10pO2lmKG49ZSwoZChlKXx8dm9pZCAwIT09dCkmJiFzdCh0KSlyZXR1cm4gcChlKXx8KGU9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYoZT1uLmNhbGwodGhpcyx0LGUpKSwhc3QoZSkpcmV0dXJuIGV9KSxpWzFdPWUsSC5hcHBseShudWxsLGkpfX0pfVdbVl1bR118fE8oV1tWXSxHLFdbVl0udmFsdWVPZiksRChXLHEpLFBbel09ITB9LGE2MjM6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcImI3MjdcIikuZXZlcnksbz1yKFwiYTY0MFwiKSxhPXIoXCJhZTQwXCIpLHM9byhcImV2ZXJ5XCIpLGM9YShcImV2ZXJ5XCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhY30se2V2ZXJ5OmZ1bmN0aW9uKHQpe3JldHVybiBpKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGE2NDA6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJkMDM5XCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByPVtdW3RdO3JldHVybiEhciYmbigoZnVuY3Rpb24oKXtyLmNhbGwobnVsbCxlfHxmdW5jdGlvbigpe3Rocm93IDF9LDEpfSkpfX0sYTY5MTpmdW5jdGlvbih0LGUpe3ZhciByPU1hdGguY2VpbCxuPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpc05hTih0PSt0KT8wOih0PjA/bjpyKSh0KX19LGE5MWE6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIyNGZiXCIpO2U9bighMSksZS5wdXNoKFt0LmksXCIuZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LWNvbnRhaW5lcltkYXRhLXYtMzhjYTE2N2Zde3Bvc2l0aW9uOmFic29sdXRlOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcn0uZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LWNvbnRhaW5lci5oaWRkZW5bZGF0YS12LTM4Y2ExNjdmXXstd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246MHM7LW8tdHJhbnNpdGlvbi1kdXJhdGlvbjowczt0cmFuc2l0aW9uLWR1cmF0aW9uOjBzfS5lcC1jaXJjbGUtLXByb2dyZXNzX19kb3QtY29udGFpbmVyPmRpdltkYXRhLXYtMzhjYTE2N2Zde3Bvc2l0aW9uOnJlbGF0aXZlfS5lcC1jaXJjbGUtLXByb2dyZXNzX19kb3RbZGF0YS12LTM4Y2ExNjdmXXstd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246LjJzOy1vLXRyYW5zaXRpb24tZHVyYXRpb246LjJzO3RyYW5zaXRpb24tZHVyYXRpb246LjJzOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW46YXV0bztyaWdodDowO2xlZnQ6MH0uZXAtY2lyY2xlLS1wcm9ncmVzc19fZG90LmVwLWhpZGRlbltkYXRhLXYtMzhjYTE2N2Zdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybTpzY2FsZSgwKX1cIixcIlwiXSksdC5leHBvcnRzPWV9LGE5ZTM6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCI4M2FiXCIpLGk9cihcImRhODRcIiksbz1yKFwiOTRjYVwiKSxhPXIoXCI2ZWViXCIpLHM9cihcIjUxMzVcIiksYz1yKFwiYzZiNlwiKSx1PXIoXCI3MTU2XCIpLGY9cihcImMwNGVcIiksbD1yKFwiZDAzOVwiKSxwPXIoXCI3YzczXCIpLGQ9cihcIjI0MWNcIikuZixoPXIoXCIwNmNmXCIpLmYsdj1yKFwiOWJmMlwiKS5mLG09cihcIjU4YThcIikudHJpbSxnPVwiTnVtYmVyXCIseT1pW2ddLGI9eS5wcm90b3R5cGUseD1jKHAoYikpPT1nLGs9ZnVuY3Rpb24odCl7dmFyIGUscixuLGksbyxhLHMsYyx1PWYodCwhMSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHUmJnUubGVuZ3RoPjIpaWYodT1tKHUpLGU9dS5jaGFyQ29kZUF0KDApLDQzPT09ZXx8NDU9PT1lKXtpZihyPXUuY2hhckNvZGVBdCgyKSw4OD09PXJ8fDEyMD09PXIpcmV0dXJuIE5hTn1lbHNlIGlmKDQ4PT09ZSl7c3dpdGNoKHUuY2hhckNvZGVBdCgxKSl7Y2FzZSA2NjpjYXNlIDk4Om49MixpPTQ5O2JyZWFrO2Nhc2UgNzk6Y2FzZSAxMTE6bj04LGk9NTU7YnJlYWs7ZGVmYXVsdDpyZXR1cm4rdX1mb3Iobz11LnNsaWNlKDIpLGE9by5sZW5ndGgscz0wO3M8YTtzKyspaWYoYz1vLmNoYXJDb2RlQXQocyksYzw0OHx8Yz5pKXJldHVybiBOYU47cmV0dXJuIHBhcnNlSW50KG8sbil9cmV0dXJuK3V9O2lmKG8oZywheShcIiAwbzFcIil8fCF5KFwiMGIxXCIpfHx5KFwiKzB4MVwiKSkpe2Zvcih2YXIgdyxfPWZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg8MT8wOnQscj10aGlzO3JldHVybiByIGluc3RhbmNlb2YgXyYmKHg/bCgoZnVuY3Rpb24oKXtiLnZhbHVlT2YuY2FsbChyKX0pKTpjKHIpIT1nKT91KG5ldyB5KGsoZSkpLHIsXyk6ayhlKX0sUz1uP2QoeSk6XCJNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSxFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlclwiLnNwbGl0KFwiLFwiKSxFPTA7Uy5sZW5ndGg+RTtFKyspcyh5LHc9U1tFXSkmJiFzKF8sdykmJnYoXyx3LGgoeSx3KSk7Xy5wcm90b3R5cGU9YixiLmNvbnN0cnVjdG9yPV8sYShpLGcsXyl9fSxhYjEzOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiYjYyMlwiKSxpPW4oXCJtYXRjaFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9Ly4vO3RyeXtcIi8uL1wiW3RdKGUpfWNhdGNoKHIpe3RyeXtyZXR1cm4gZVtpXT0hMSxcIi8uL1wiW3RdKGUpfWNhdGNoKG4pe319cmV0dXJuITF9fSxhYzFmOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCI5MjYzXCIpO24oe3RhcmdldDpcIlJlZ0V4cFwiLHByb3RvOiEwLGZvcmNlZDovLi8uZXhlYyE9PWl9LHtleGVjOml9KX0sYWQ2ZDpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjgyNWFcIik7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQ9bih0aGlzKSxlPVwiXCI7cmV0dXJuIHQuZ2xvYmFsJiYoZSs9XCJnXCIpLHQuaWdub3JlQ2FzZSYmKGUrPVwiaVwiKSx0Lm11bHRpbGluZSYmKGUrPVwibVwiKSx0LmRvdEFsbCYmKGUrPVwic1wiKSx0LnVuaWNvZGUmJihlKz1cInVcIiksdC5zdGlja3kmJihlKz1cInlcIiksZX19LGFlNDA6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI4M2FiXCIpLGk9cihcImQwMzlcIiksbz1yKFwiNTEzNVwiKSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxzPXt9LGM9ZnVuY3Rpb24odCl7dGhyb3cgdH07dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYobyhzLHQpKXJldHVybiBzW3RdO2V8fChlPXt9KTt2YXIgcj1bXVt0XSx1PSEhbyhlLFwiQUNDRVNTT1JTXCIpJiZlLkFDQ0VTU09SUyxmPW8oZSwwKT9lWzBdOmMsbD1vKGUsMSk/ZVsxXTp2b2lkIDA7cmV0dXJuIHNbdF09ISFyJiYhaSgoZnVuY3Rpb24oKXtpZih1JiYhbilyZXR1cm4hMDt2YXIgdD17bGVuZ3RoOi0xfTt1P2EodCwxLHtlbnVtZXJhYmxlOiEwLGdldDpjfSk6dFsxXT0xLHIuY2FsbCh0LGYsbCl9KSl9fSxhZTkzOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpLG8sYT1yKFwiZTE2M1wiKSxzPXIoXCI5MTEyXCIpLGM9cihcIjUxMzVcIiksdT1yKFwiYjYyMlwiKSxmPXIoXCJjNDMwXCIpLGw9dShcIml0ZXJhdG9yXCIpLHA9ITEsZD1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtbXS5rZXlzJiYobz1bXS5rZXlzKCksXCJuZXh0XCJpbiBvPyhpPWEoYShvKSksaSE9PU9iamVjdC5wcm90b3R5cGUmJihuPWkpKTpwPSEwKSx2b2lkIDA9PW4mJihuPXt9KSxmfHxjKG4sbCl8fHMobixsLGQpLHQuZXhwb3J0cz17SXRlcmF0b3JQcm90b3R5cGU6bixCVUdHWV9TQUZBUklfSVRFUkFUT1JTOnB9fSxiMDQxOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMDBlZVwiKSxpPXIoXCJmNWRmXCIpO3QuZXhwb3J0cz1uP3t9LnRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IFwiK2kodGhpcykrXCJdXCJ9fSxiNTc1OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLG8sYSxzLGMsdSxmLGw9cihcImRhODRcIikscD1yKFwiMDZjZlwiKS5mLGQ9cihcImM2YjZcIiksaD1yKFwiMmNmNFwiKS5zZXQsdj1yKFwiMWNkY1wiKSxtPWwuTXV0YXRpb25PYnNlcnZlcnx8bC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLGc9bC5wcm9jZXNzLHk9bC5Qcm9taXNlLGI9XCJwcm9jZXNzXCI9PWQoZykseD1wKGwsXCJxdWV1ZU1pY3JvdGFza1wiKSxrPXgmJngudmFsdWU7a3x8KG49ZnVuY3Rpb24oKXt2YXIgdCxlO2ImJih0PWcuZG9tYWluKSYmdC5leGl0KCk7d2hpbGUoaSl7ZT1pLmZuLGk9aS5uZXh0O3RyeXtlKCl9Y2F0Y2gocil7dGhyb3cgaT9hKCk6bz12b2lkIDAscn19bz12b2lkIDAsdCYmdC5lbnRlcigpfSxiP2E9ZnVuY3Rpb24oKXtnLm5leHRUaWNrKG4pfTptJiYhdj8ocz0hMCxjPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLG5ldyBtKG4pLm9ic2VydmUoYyx7Y2hhcmFjdGVyRGF0YTohMH0pLGE9ZnVuY3Rpb24oKXtjLmRhdGE9cz0hc30pOnkmJnkucmVzb2x2ZT8odT15LnJlc29sdmUodm9pZCAwKSxmPXUudGhlbixhPWZ1bmN0aW9uKCl7Zi5jYWxsKHUsbil9KTphPWZ1bmN0aW9uKCl7aC5jYWxsKGwsbil9KSx0LmV4cG9ydHM9a3x8ZnVuY3Rpb24odCl7dmFyIGU9e2ZuOnQsbmV4dDp2b2lkIDB9O28mJihvLm5leHQ9ZSksaXx8KGk9ZSxhKCkpLG89ZX19LGI2MjI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJkYTg0XCIpLGk9cihcIjU2OTJcIiksbz1yKFwiNTEzNVwiKSxhPXIoXCI5MGUzXCIpLHM9cihcIjQ5MzBcIiksYz1yKFwiZmRiZlwiKSx1PWkoXCJ3a3NcIiksZj1uLlN5bWJvbCxsPWM/ZjpmJiZmLndpdGhvdXRTZXR0ZXJ8fGE7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBvKHUsdCl8fChzJiZvKGYsdCk/dVt0XT1mW3RdOnVbdF09bChcIlN5bWJvbC5cIit0KSksdVt0XX19LGI2NGI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcIjdiMGJcIiksbz1yKFwiZGY3NVwiKSxhPXIoXCJkMDM5XCIpLHM9YSgoZnVuY3Rpb24oKXtvKDEpfSkpO24oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOnN9LHtrZXlzOmZ1bmN0aW9uKHQpe3JldHVybiBvKGkodCkpfX0pfSxiNjgwOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCJhNjkxXCIpLG89cihcIjQwOGFcIiksYT1yKFwiMTE0OFwiKSxzPXIoXCJkMDM5XCIpLGM9MS4udG9GaXhlZCx1PU1hdGguZmxvb3IsZj1mdW5jdGlvbih0LGUscil7cmV0dXJuIDA9PT1lP3I6ZSUyPT09MT9mKHQsZS0xLHIqdCk6Zih0KnQsZS8yLHIpfSxsPWZ1bmN0aW9uKHQpe3ZhciBlPTAscj10O3doaWxlKHI+PTQwOTYpZSs9MTIsci89NDA5Njt3aGlsZShyPj0yKWUrPTEsci89MjtyZXR1cm4gZX0scD1jJiYoXCIwLjAwMFwiIT09OGUtNS50b0ZpeGVkKDMpfHxcIjFcIiE9PS45LnRvRml4ZWQoMCl8fFwiMS4yNVwiIT09MS4yNTUudG9GaXhlZCgyKXx8XCIxMDAwMDAwMDAwMDAwMDAwMTI4XCIhPT0oMHhkZTBiNmIzYTc2NDAwODApLnRvRml4ZWQoMCkpfHwhcygoZnVuY3Rpb24oKXtjLmNhbGwoe30pfSkpO24oe3RhcmdldDpcIk51bWJlclwiLHByb3RvOiEwLGZvcmNlZDpwfSx7dG9GaXhlZDpmdW5jdGlvbih0KXt2YXIgZSxyLG4scyxjPW8odGhpcykscD1pKHQpLGQ9WzAsMCwwLDAsMCwwXSxoPVwiXCIsdj1cIjBcIixtPWZ1bmN0aW9uKHQsZSl7dmFyIHI9LTEsbj1lO3doaWxlKCsrcjw2KW4rPXQqZFtyXSxkW3JdPW4lMWU3LG49dShuLzFlNyl9LGc9ZnVuY3Rpb24odCl7dmFyIGU9NixyPTA7d2hpbGUoLS1lPj0wKXIrPWRbZV0sZFtlXT11KHIvdCkscj1yJXQqMWU3fSx5PWZ1bmN0aW9uKCl7dmFyIHQ9NixlPVwiXCI7d2hpbGUoLS10Pj0wKWlmKFwiXCIhPT1lfHwwPT09dHx8MCE9PWRbdF0pe3ZhciByPVN0cmluZyhkW3RdKTtlPVwiXCI9PT1lP3I6ZSthLmNhbGwoXCIwXCIsNy1yLmxlbmd0aCkrcn1yZXR1cm4gZX07aWYocDwwfHxwPjIwKXRocm93IFJhbmdlRXJyb3IoXCJJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzXCIpO2lmKGMhPWMpcmV0dXJuXCJOYU5cIjtpZihjPD0tMWUyMXx8Yz49MWUyMSlyZXR1cm4gU3RyaW5nKGMpO2lmKGM8MCYmKGg9XCItXCIsYz0tYyksYz4xZS0yMSlpZihlPWwoYypmKDIsNjksMSkpLTY5LHI9ZTwwP2MqZigyLC1lLDEpOmMvZigyLGUsMSkscio9NDUwMzU5OTYyNzM3MDQ5NixlPTUyLWUsZT4wKXttKDAsciksbj1wO3doaWxlKG4+PTcpbSgxZTcsMCksbi09NzttKGYoMTAsbiwxKSwwKSxuPWUtMTt3aGlsZShuPj0yMylnKDE8PDIzKSxuLT0yMztnKDE8PG4pLG0oMSwxKSxnKDIpLHY9eSgpfWVsc2UgbSgwLHIpLG0oMTw8LWUsMCksdj15KCkrYS5jYWxsKFwiMFwiLHApO3JldHVybiBwPjA/KHM9di5sZW5ndGgsdj1oKyhzPD1wP1wiMC5cIithLmNhbGwoXCIwXCIscC1zKSt2OnYuc2xpY2UoMCxzLXApK1wiLlwiK3Yuc2xpY2Uocy1wKSkpOnY9aCt2LHZ9fSl9LGI3Mjc6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIwMzY2XCIpLGk9cihcIjQ0YWRcIiksbz1yKFwiN2IwYlwiKSxhPXIoXCI1MGM0XCIpLHM9cihcIjY1ZjBcIiksYz1bXS5wdXNoLHU9ZnVuY3Rpb24odCl7dmFyIGU9MT09dCxyPTI9PXQsdT0zPT10LGY9ND09dCxsPTY9PXQscD01PT10fHxsO3JldHVybiBmdW5jdGlvbihkLGgsdixtKXtmb3IodmFyIGcseSxiPW8oZCkseD1pKGIpLGs9bihoLHYsMyksdz1hKHgubGVuZ3RoKSxfPTAsUz1tfHxzLEU9ZT9TKGQsdyk6cj9TKGQsMCk6dm9pZCAwO3c+XztfKyspaWYoKHB8fF8gaW4geCkmJihnPXhbX10seT1rKGcsXyxiKSx0KSlpZihlKUVbX109eTtlbHNlIGlmKHkpc3dpdGNoKHQpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIGc7Y2FzZSA2OnJldHVybiBfO2Nhc2UgMjpjLmNhbGwoRSxnKX1lbHNlIGlmKGYpcmV0dXJuITE7cmV0dXJuIGw/LTE6dXx8Zj9mOkV9fTt0LmV4cG9ydHM9e2ZvckVhY2g6dSgwKSxtYXA6dSgxKSxmaWx0ZXI6dSgyKSxzb21lOnUoMyksZXZlcnk6dSg0KSxmaW5kOnUoNSksZmluZEluZGV4OnUoNil9fSxjMDRlOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiODYxZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighbih0KSlyZXR1cm4gdDt2YXIgcixpO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC50b1N0cmluZykmJiFuKGk9ci5jYWxsKHQpKSlyZXR1cm4gaTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudmFsdWVPZikmJiFuKGk9ci5jYWxsKHQpKSlyZXR1cm4gaTtpZighZSYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIW4oaT1yLmNhbGwodCkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX19LGM0MzA6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ITF9LGM0OWU6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCJmZWMxXCIpLGk9ci5uKG4pO2kuYX0sYzZiNjpmdW5jdGlvbih0LGUpe3ZhciByPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gci5jYWxsKHQpLnNsaWNlKDgsLTEpfX0sYzZjZDpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImRhODRcIiksaT1yKFwiY2U0ZVwiKSxvPVwiX19jb3JlLWpzX3NoYXJlZF9fXCIsYT1uW29dfHxpKG8se30pO3QuZXhwb3J0cz1hfSxjOGJhOmZ1bmN0aW9uKHQsZSl7dmFyIHI7cj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtyPXJ8fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2gobil7XCJvYmplY3RcIj09PXR5cGVvZiB3aW5kb3cmJihyPXdpbmRvdyl9dC5leHBvcnRzPXJ9LGM4ZDI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJkMDM5XCIpLGk9cihcIjU4OTlcIiksbz1cIuKAi8KF4aCOXCI7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKChmdW5jdGlvbigpe3JldHVybiEhaVt0XSgpfHxvW3RdKCkhPW98fGlbdF0ubmFtZSE9PXR9KSl9fSxjYTg0OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiNTEzNVwiKSxpPXIoXCJmYzZhXCIpLG89cihcIjRkNjRcIikuaW5kZXhPZixhPXIoXCJkMDEyXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByLHM9aSh0KSxjPTAsdT1bXTtmb3IociBpbiBzKSFuKGEscikmJm4ocyxyKSYmdS5wdXNoKHIpO3doaWxlKGUubGVuZ3RoPmMpbihzLHI9ZVtjKytdKSYmKH5vKHUscil8fHUucHVzaChyKSk7cmV0dXJuIHV9fSxjYWFkOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCI0ZDY0XCIpLmluY2x1ZGVzLG89cihcIjQ0ZDJcIiksYT1yKFwiYWU0MFwiKSxzPWEoXCJpbmRleE9mXCIse0FDQ0VTU09SUzohMCwxOjB9KTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohc30se2luY2x1ZGVzOmZ1bmN0aW9uKHQpe3JldHVybiBpKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSksbyhcImluY2x1ZGVzXCIpfSxjYzEyOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZGE4NFwiKSxpPXIoXCI4NjFkXCIpLG89bi5kb2N1bWVudCxhPWkobykmJmkoby5jcmVhdGVFbGVtZW50KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGE/by5jcmVhdGVFbGVtZW50KHQpOnt9fX0sY2RmOTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjgyNWFcIiksaT1yKFwiODYxZFwiKSxvPXIoXCJmMDY5XCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKG4odCksaShlKSYmZS5jb25zdHJ1Y3Rvcj09PXQpcmV0dXJuIGU7dmFyIHI9by5mKHQpLGE9ci5yZXNvbHZlO3JldHVybiBhKGUpLHIucHJvbWlzZX19LGNlNGU6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJkYTg0XCIpLGk9cihcIjkxMTJcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dHJ5e2kobix0LGUpfWNhdGNoKHIpe25bdF09ZX1yZXR1cm4gZX19LGQwMTI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e319LGQwMzk6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiEhdCgpfWNhdGNoKGUpe3JldHVybiEwfX19LGQwNjY6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI0MjhmXCIpLGk9cihcImRhODRcIiksbz1mdW5jdGlvbih0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6dm9pZCAwfTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aDwyP28oblt0XSl8fG8oaVt0XSk6blt0XSYmblt0XVtlXXx8aVt0XSYmaVt0XVtlXX19LGQwN2Y6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJhOTFhXCIpO1wic3RyaW5nXCI9PT10eXBlb2YgbiYmKG49W1t0LmksbixcIlwiXV0pLG4ubG9jYWxzJiYodC5leHBvcnRzPW4ubG9jYWxzKTt2YXIgaT1yKFwiNDk5ZVwiKS5kZWZhdWx0O2koXCJhMmZhZTJjY1wiLG4sITAse3NvdXJjZU1hcDohMSxzaGFkb3dNb2RlOiExfSl9LGQxZTc6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixvPWkmJiFuLmNhbGwoezE6Mn0sMSk7ZS5mPW8/ZnVuY3Rpb24odCl7dmFyIGU9aSh0aGlzLHQpO3JldHVybiEhZSYmZS5lbnVtZXJhYmxlfTpufSxkMjhiOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiNzQ2ZlwiKTtuKFwiaXRlcmF0b3JcIil9LGQyYmI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI4MjVhXCIpLGk9cihcIjNiYmVcIik7dC5leHBvcnRzPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8KFwiX19wcm90b19fXCJpbnt9P2Z1bmN0aW9uKCl7dmFyIHQsZT0hMSxyPXt9O3RyeXt0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQsdC5jYWxsKHIsW10pLGU9ciBpbnN0YW5jZW9mIEFycmF5fWNhdGNoKG8pe31yZXR1cm4gZnVuY3Rpb24ocixvKXtyZXR1cm4gbihyKSxpKG8pLGU/dC5jYWxsKHIsbyk6ci5fX3Byb3RvX189byxyfX0oKTp2b2lkIDApfSxkMzBjOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZDVhNFwiKTtcInN0cmluZ1wiPT09dHlwZW9mIG4mJihuPVtbdC5pLG4sXCJcIl1dKSxuLmxvY2FscyYmKHQuZXhwb3J0cz1uLmxvY2Fscyk7dmFyIGk9cihcIjQ5OWVcIikuZGVmYXVsdDtpKFwiM2QwYWVjMjlcIixuLCEwLHtzb3VyY2VNYXA6ITEsc2hhZG93TW9kZTohMX0pfSxkM2I3OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMDBlZVwiKSxpPXIoXCI2ZWViXCIpLG89cihcImIwNDFcIik7bnx8aShPYmplY3QucHJvdG90eXBlLFwidG9TdHJpbmdcIixvLHt1bnNhZmU6ITB9KX0sZDQ0ZTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjliZjJcIikuZixpPXIoXCI1MTM1XCIpLG89cihcImI2MjJcIiksYT1vKFwidG9TdHJpbmdUYWdcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt0JiYhaSh0PXI/dDp0LnByb3RvdHlwZSxhKSYmbih0LGEse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTplfSl9fSxkNThmOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMWMwYlwiKSxpPXIoXCI3YjBiXCIpLG89cihcIjQ0YWRcIiksYT1yKFwiNTBjNFwiKSxzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHIscyxjKXtuKHIpO3ZhciB1PWkoZSksZj1vKHUpLGw9YSh1Lmxlbmd0aCkscD10P2wtMTowLGQ9dD8tMToxO2lmKHM8Mil3aGlsZSgxKXtpZihwIGluIGYpe2M9ZltwXSxwKz1kO2JyZWFrfWlmKHArPWQsdD9wPDA6bDw9cCl0aHJvdyBUeXBlRXJyb3IoXCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpfWZvcig7dD9wPj0wOmw+cDtwKz1kKXAgaW4gZiYmKGM9cihjLGZbcF0scCx1KSk7cmV0dXJuIGN9fTt0LmV4cG9ydHM9e2xlZnQ6cyghMSkscmlnaHQ6cyghMCl9fSxkNWE0OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMjRmYlwiKTtlPW4oITEpLGUucHVzaChbdC5pLFwiLmVwLWNpcmNsZVtkYXRhLXYtN2QwYTBmYmJdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDUwJX1cIixcIlwiXSksdC5leHBvcnRzPWV9LGQ3ODQ6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3IoXCJhYzFmXCIpO3ZhciBuPXIoXCI2ZWViXCIpLGk9cihcImQwMzlcIiksbz1yKFwiYjYyMlwiKSxhPXIoXCI5MjYzXCIpLHM9cihcIjkxMTJcIiksYz1vKFwic3BlY2llc1wiKSx1PSFpKChmdW5jdGlvbigpe3ZhciB0PS8uLztyZXR1cm4gdC5leGVjPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHQuZ3JvdXBzPXthOlwiN1wifSx0fSxcIjdcIiE9PVwiXCIucmVwbGFjZSh0LFwiJDxhPlwiKX0pKSxmPWZ1bmN0aW9uKCl7cmV0dXJuXCIkMFwiPT09XCJhXCIucmVwbGFjZSgvLi8sXCIkMFwiKX0oKSxsPW8oXCJyZXBsYWNlXCIpLHA9ZnVuY3Rpb24oKXtyZXR1cm4hIS8uL1tsXSYmXCJcIj09PS8uL1tsXShcImFcIixcIiQwXCIpfSgpLGQ9IWkoKGZ1bmN0aW9uKCl7dmFyIHQ9Lyg/OikvLGU9dC5leGVjO3QuZXhlYz1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIHI9XCJhYlwiLnNwbGl0KHQpO3JldHVybiAyIT09ci5sZW5ndGh8fFwiYVwiIT09clswXXx8XCJiXCIhPT1yWzFdfSkpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscixsKXt2YXIgaD1vKHQpLHY9IWkoKGZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIGVbaF09ZnVuY3Rpb24oKXtyZXR1cm4gN30sNyE9XCJcIlt0XShlKX0pKSxtPXYmJiFpKChmdW5jdGlvbigpe3ZhciBlPSExLHI9L2EvO3JldHVyblwic3BsaXRcIj09PXQmJihyPXt9LHIuY29uc3RydWN0b3I9e30sci5jb25zdHJ1Y3RvcltjXT1mdW5jdGlvbigpe3JldHVybiByfSxyLmZsYWdzPVwiXCIscltoXT0vLi9baF0pLHIuZXhlYz1mdW5jdGlvbigpe3JldHVybiBlPSEwLG51bGx9LHJbaF0oXCJcIiksIWV9KSk7aWYoIXZ8fCFtfHxcInJlcGxhY2VcIj09PXQmJighdXx8IWZ8fHApfHxcInNwbGl0XCI9PT10JiYhZCl7dmFyIGc9Ly4vW2hdLHk9cihoLFwiXCJbdF0sKGZ1bmN0aW9uKHQsZSxyLG4saSl7cmV0dXJuIGUuZXhlYz09PWE/diYmIWk/e2RvbmU6ITAsdmFsdWU6Zy5jYWxsKGUscixuKX06e2RvbmU6ITAsdmFsdWU6dC5jYWxsKHIsZSxuKX06e2RvbmU6ITF9fSkse1JFUExBQ0VfS0VFUFNfJDA6ZixSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTpwfSksYj15WzBdLHg9eVsxXTtuKFN0cmluZy5wcm90b3R5cGUsdCxiKSxuKFJlZ0V4cC5wcm90b3R5cGUsaCwyPT1lP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIHguY2FsbCh0LHRoaXMsZSl9OmZ1bmN0aW9uKHQpe3JldHVybiB4LmNhbGwodCx0aGlzKX0pfWwmJnMoUmVnRXhwLnByb3RvdHlwZVtoXSxcInNoYW1cIiwhMCl9fSxkODFkOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiMjNlN1wiKSxpPXIoXCJiNzI3XCIpLm1hcCxvPXIoXCIxZGRlXCIpLGE9cihcImFlNDBcIikscz1vKFwibWFwXCIpLGM9YShcIm1hcFwiKTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohc3x8IWN9LHttYXA6ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZGE4NDpmdW5jdGlvbih0LGUscil7KGZ1bmN0aW9uKGUpe3ZhciByPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lk1hdGg9PU1hdGgmJnR9O3QuZXhwb3J0cz1yKFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWxUaGlzJiZnbG9iYWxUaGlzKXx8cihcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cpfHxyKFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmKXx8cihcIm9iamVjdFwiPT10eXBlb2YgZSYmZSl8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX0pLmNhbGwodGhpcyxyKFwiYzhiYVwiKSl9LGRiYjQ6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIyM2U3XCIpLGk9cihcIjgzYWJcIiksbz1yKFwiNTZlZlwiKSxhPXIoXCJmYzZhXCIpLHM9cihcIjA2Y2ZcIiksYz1yKFwiODQxOFwiKTtuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLHNoYW06IWl9LHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOmZ1bmN0aW9uKHQpe3ZhciBlLHIsbj1hKHQpLGk9cy5mLHU9byhuKSxmPXt9LGw9MDt3aGlsZSh1Lmxlbmd0aD5sKXI9aShuLGU9dVtsKytdKSx2b2lkIDAhPT1yJiZjKGYsZSxyKTtyZXR1cm4gZn19KX0sZGRiMDpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImRhODRcIiksaT1yKFwiZmRiY1wiKSxvPXIoXCJlMjYwXCIpLGE9cihcIjkxMTJcIikscz1yKFwiYjYyMlwiKSxjPXMoXCJpdGVyYXRvclwiKSx1PXMoXCJ0b1N0cmluZ1RhZ1wiKSxmPW8udmFsdWVzO2Zvcih2YXIgbCBpbiBpKXt2YXIgcD1uW2xdLGQ9cCYmcC5wcm90b3R5cGU7aWYoZCl7aWYoZFtjXSE9PWYpdHJ5e2EoZCxjLGYpfWNhdGNoKHYpe2RbY109Zn1pZihkW3VdfHxhKGQsdSxsKSxpW2xdKWZvcih2YXIgaCBpbiBvKWlmKGRbaF0hPT1vW2hdKXRyeXthKGQsaCxvW2hdKX1jYXRjaCh2KXtkW2hdPW9baF19fX19LGRmNzU6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJjYTg0XCIpLGk9cihcIjc4MzlcIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbih0KXtyZXR1cm4gbih0LGkpfX0sZTAxYTpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cihcIjIzZTdcIiksaT1yKFwiODNhYlwiKSxvPXIoXCJkYTg0XCIpLGE9cihcIjUxMzVcIikscz1yKFwiODYxZFwiKSxjPXIoXCI5YmYyXCIpLmYsdT1yKFwiZTg5M1wiKSxmPW8uU3ltYm9sO2lmKGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJighKFwiZGVzY3JpcHRpb25cImluIGYucHJvdG90eXBlKXx8dm9pZCAwIT09ZigpLmRlc2NyaXB0aW9uKSl7dmFyIGw9e30scD1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg8MXx8dm9pZCAwPT09YXJndW1lbnRzWzBdP3ZvaWQgMDpTdHJpbmcoYXJndW1lbnRzWzBdKSxlPXRoaXMgaW5zdGFuY2VvZiBwP25ldyBmKHQpOnZvaWQgMD09PXQ/ZigpOmYodCk7cmV0dXJuXCJcIj09PXQmJihsW2VdPSEwKSxlfTt1KHAsZik7dmFyIGQ9cC5wcm90b3R5cGU9Zi5wcm90b3R5cGU7ZC5jb25zdHJ1Y3Rvcj1wO3ZhciBoPWQudG9TdHJpbmcsdj1cIlN5bWJvbCh0ZXN0KVwiPT1TdHJpbmcoZihcInRlc3RcIikpLG09L15TeW1ib2xcXCgoLiopXFwpW14pXSskLztjKGQsXCJkZXNjcmlwdGlvblwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9cyh0aGlzKT90aGlzLnZhbHVlT2YoKTp0aGlzLGU9aC5jYWxsKHQpO2lmKGEobCx0KSlyZXR1cm5cIlwiO3ZhciByPXY/ZS5zbGljZSg3LC0xKTplLnJlcGxhY2UobSxcIiQxXCIpO3JldHVyblwiXCI9PT1yP3ZvaWQgMDpyfX0pLG4oe2dsb2JhbDohMCxmb3JjZWQ6ITB9LHtTeW1ib2w6cH0pfX0sZTE2MzpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjUxMzVcIiksaT1yKFwiN2IwYlwiKSxvPXIoXCJmNzcyXCIpLGE9cihcImUxNzdcIikscz1vKFwiSUVfUFJPVE9cIiksYz1PYmplY3QucHJvdG90eXBlO3QuZXhwb3J0cz1hP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gdD1pKHQpLG4odCxzKT90W3NdOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/YzpudWxsfX0sZTE3NzpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImQwMzlcIik7dC5leHBvcnRzPSFuKChmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW51bGwsT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyB0KSE9PXQucHJvdG90eXBlfSkpfSxlMjYwOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKFwiZmM2YVwiKSxpPXIoXCI0NGQyXCIpLG89cihcIjNmOGNcIiksYT1yKFwiNjlmM1wiKSxzPXIoXCI3ZGQwXCIpLGM9XCJBcnJheSBJdGVyYXRvclwiLHU9YS5zZXQsZj1hLmdldHRlckZvcihjKTt0LmV4cG9ydHM9cyhBcnJheSxcIkFycmF5XCIsKGZ1bmN0aW9uKHQsZSl7dSh0aGlzLHt0eXBlOmMsdGFyZ2V0Om4odCksaW5kZXg6MCxraW5kOmV9KX0pLChmdW5jdGlvbigpe3ZhciB0PWYodGhpcyksZT10LnRhcmdldCxyPXQua2luZCxuPXQuaW5kZXgrKztyZXR1cm4hZXx8bj49ZS5sZW5ndGg/KHQudGFyZ2V0PXZvaWQgMCx7dmFsdWU6dm9pZCAwLGRvbmU6ITB9KTpcImtleXNcIj09cj97dmFsdWU6bixkb25lOiExfTpcInZhbHVlc1wiPT1yP3t2YWx1ZTplW25dLGRvbmU6ITF9Ont2YWx1ZTpbbixlW25dXSxkb25lOiExfX0pLFwidmFsdWVzXCIpLG8uQXJndW1lbnRzPW8uQXJyYXksaShcImtleXNcIiksaShcInZhbHVlc1wiKSxpKFwiZW50cmllc1wiKX0sZTJjYzpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjZlZWJcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXtmb3IodmFyIGkgaW4gZSluKHQsaSxlW2ldLHIpO3JldHVybiB0fX0sZTQzOTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcIjIzZTdcIiksaT1yKFwiZDAzOVwiKSxvPXIoXCJmYzZhXCIpLGE9cihcIjA2Y2ZcIikuZixzPXIoXCI4M2FiXCIpLGM9aSgoZnVuY3Rpb24oKXthKDEpfSkpLHU9IXN8fGM7bih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6dSxzaGFtOiFzfSx7Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGEobyh0KSxlKX19KX0sZTUzODpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImI2MjJcIik7ZS5mPW59LGU2Njc6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybntlcnJvcjohMSx2YWx1ZTp0KCl9fWNhdGNoKGUpe3JldHVybntlcnJvcjohMCx2YWx1ZTplfX19fSxlNmNmOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpLG8sYSxzPXIoXCIyM2U3XCIpLGM9cihcImM0MzBcIiksdT1yKFwiZGE4NFwiKSxmPXIoXCJkMDY2XCIpLGw9cihcImZlYTlcIikscD1yKFwiNmVlYlwiKSxkPXIoXCJlMmNjXCIpLGg9cihcImQ0NGVcIiksdj1yKFwiMjYyNlwiKSxtPXIoXCI4NjFkXCIpLGc9cihcIjFjMGJcIikseT1yKFwiMTlhYVwiKSxiPXIoXCJjNmI2XCIpLHg9cihcIjg5MjVcIiksaz1yKFwiMjI2NlwiKSx3PXIoXCIxYzdlXCIpLF89cihcIjQ4NDBcIiksUz1yKFwiMmNmNFwiKS5zZXQsRT1yKFwiYjU3NVwiKSxUPXIoXCJjZGY5XCIpLE89cihcIjQ0ZGVcIiksQz1yKFwiZjA2OVwiKSxqPXIoXCJlNjY3XCIpLEE9cihcIjY5ZjNcIiksUD1yKFwiOTRjYVwiKSxSPXIoXCJiNjIyXCIpLEY9cihcIjJkMDBcIiksST1SKFwic3BlY2llc1wiKSxOPVwiUHJvbWlzZVwiLEQ9QS5nZXQsTD1BLnNldCxNPUEuZ2V0dGVyRm9yKE4pLHo9bCxxPXUuVHlwZUVycm9yLFY9dS5kb2N1bWVudCxHPXUucHJvY2VzcywkPWYoXCJmZXRjaFwiKSxCPUMuZixVPUIsVz1cInByb2Nlc3NcIj09YihHKSxIPSEhKFYmJlYuY3JlYXRlRXZlbnQmJnUuZGlzcGF0Y2hFdmVudCksWD1cInVuaGFuZGxlZHJlamVjdGlvblwiLFk9XCJyZWplY3Rpb25oYW5kbGVkXCIsSz0wLEo9MSxRPTIsWj0xLHR0PTIsZXQ9UChOLChmdW5jdGlvbigpe3ZhciB0PXgoeikhPT1TdHJpbmcoeik7aWYoIXQpe2lmKDY2PT09RilyZXR1cm4hMDtpZighVyYmXCJmdW5jdGlvblwiIT10eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50KXJldHVybiEwfWlmKGMmJiF6LnByb3RvdHlwZVtcImZpbmFsbHlcIl0pcmV0dXJuITA7aWYoRj49NTEmJi9uYXRpdmUgY29kZS8udGVzdCh6KSlyZXR1cm4hMTt2YXIgZT16LnJlc29sdmUoMSkscj1mdW5jdGlvbih0KXt0KChmdW5jdGlvbigpe30pLChmdW5jdGlvbigpe30pKX0sbj1lLmNvbnN0cnVjdG9yPXt9O3JldHVybiBuW0ldPXIsIShlLnRoZW4oKGZ1bmN0aW9uKCl7fSkpaW5zdGFuY2VvZiByKX0pKSxydD1ldHx8IXcoKGZ1bmN0aW9uKHQpe3ouYWxsKHQpW1wiY2F0Y2hcIl0oKGZ1bmN0aW9uKCl7fSkpfSkpLG50PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiEoIW0odCl8fFwiZnVuY3Rpb25cIiE9dHlwZW9mKGU9dC50aGVuKSkmJmV9LGl0PWZ1bmN0aW9uKHQsZSxyKXtpZighZS5ub3RpZmllZCl7ZS5ub3RpZmllZD0hMDt2YXIgbj1lLnJlYWN0aW9ucztFKChmdW5jdGlvbigpe3ZhciBpPWUudmFsdWUsbz1lLnN0YXRlPT1KLGE9MDt3aGlsZShuLmxlbmd0aD5hKXt2YXIgcyxjLHUsZj1uW2ErK10sbD1vP2Yub2s6Zi5mYWlsLHA9Zi5yZXNvbHZlLGQ9Zi5yZWplY3QsaD1mLmRvbWFpbjt0cnl7bD8ob3x8KGUucmVqZWN0aW9uPT09dHQmJmN0KHQsZSksZS5yZWplY3Rpb249WiksITA9PT1sP3M9aTooaCYmaC5lbnRlcigpLHM9bChpKSxoJiYoaC5leGl0KCksdT0hMCkpLHM9PT1mLnByb21pc2U/ZChxKFwiUHJvbWlzZS1jaGFpbiBjeWNsZVwiKSk6KGM9bnQocykpP2MuY2FsbChzLHAsZCk6cChzKSk6ZChpKX1jYXRjaCh2KXtoJiYhdSYmaC5leGl0KCksZCh2KX19ZS5yZWFjdGlvbnM9W10sZS5ub3RpZmllZD0hMSxyJiYhZS5yZWplY3Rpb24mJmF0KHQsZSl9KSl9fSxvdD1mdW5jdGlvbih0LGUscil7dmFyIG4saTtIPyhuPVYuY3JlYXRlRXZlbnQoXCJFdmVudFwiKSxuLnByb21pc2U9ZSxuLnJlYXNvbj1yLG4uaW5pdEV2ZW50KHQsITEsITApLHUuZGlzcGF0Y2hFdmVudChuKSk6bj17cHJvbWlzZTplLHJlYXNvbjpyfSwoaT11W1wib25cIit0XSk/aShuKTp0PT09WCYmTyhcIlVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvblwiLHIpfSxhdD1mdW5jdGlvbih0LGUpe1MuY2FsbCh1LChmdW5jdGlvbigpe3ZhciByLG49ZS52YWx1ZSxpPXN0KGUpO2lmKGkmJihyPWooKGZ1bmN0aW9uKCl7Vz9HLmVtaXQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIixuLHQpOm90KFgsdCxuKX0pKSxlLnJlamVjdGlvbj1XfHxzdChlKT90dDpaLHIuZXJyb3IpKXRocm93IHIudmFsdWV9KSl9LHN0PWZ1bmN0aW9uKHQpe3JldHVybiB0LnJlamVjdGlvbiE9PVomJiF0LnBhcmVudH0sY3Q9ZnVuY3Rpb24odCxlKXtTLmNhbGwodSwoZnVuY3Rpb24oKXtXP0cuZW1pdChcInJlamVjdGlvbkhhbmRsZWRcIix0KTpvdChZLHQsZS52YWx1ZSl9KSl9LHV0PWZ1bmN0aW9uKHQsZSxyLG4pe3JldHVybiBmdW5jdGlvbihpKXt0KGUscixpLG4pfX0sZnQ9ZnVuY3Rpb24odCxlLHIsbil7ZS5kb25lfHwoZS5kb25lPSEwLG4mJihlPW4pLGUudmFsdWU9cixlLnN0YXRlPVEsaXQodCxlLCEwKSl9LGx0PWZ1bmN0aW9uKHQsZSxyLG4pe2lmKCFlLmRvbmUpe2UuZG9uZT0hMCxuJiYoZT1uKTt0cnl7aWYodD09PXIpdGhyb3cgcShcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO3ZhciBpPW50KHIpO2k/RSgoZnVuY3Rpb24oKXt2YXIgbj17ZG9uZTohMX07dHJ5e2kuY2FsbChyLHV0KGx0LHQsbixlKSx1dChmdCx0LG4sZSkpfWNhdGNoKG8pe2Z0KHQsbixvLGUpfX0pKTooZS52YWx1ZT1yLGUuc3RhdGU9SixpdCh0LGUsITEpKX1jYXRjaChvKXtmdCh0LHtkb25lOiExfSxvLGUpfX19O2V0JiYoej1mdW5jdGlvbih0KXt5KHRoaXMseixOKSxnKHQpLG4uY2FsbCh0aGlzKTt2YXIgZT1EKHRoaXMpO3RyeXt0KHV0KGx0LHRoaXMsZSksdXQoZnQsdGhpcyxlKSl9Y2F0Y2gocil7ZnQodGhpcyxlLHIpfX0sbj1mdW5jdGlvbih0KXtMKHRoaXMse3R5cGU6Tixkb25lOiExLG5vdGlmaWVkOiExLHBhcmVudDohMSxyZWFjdGlvbnM6W10scmVqZWN0aW9uOiExLHN0YXRlOkssdmFsdWU6dm9pZCAwfSl9LG4ucHJvdG90eXBlPWQoei5wcm90b3R5cGUse3RoZW46ZnVuY3Rpb24odCxlKXt2YXIgcj1NKHRoaXMpLG49QihfKHRoaXMseikpO3JldHVybiBuLm9rPVwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fHQsbi5mYWlsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUsbi5kb21haW49Vz9HLmRvbWFpbjp2b2lkIDAsci5wYXJlbnQ9ITAsci5yZWFjdGlvbnMucHVzaChuKSxyLnN0YXRlIT1LJiZpdCh0aGlzLHIsITEpLG4ucHJvbWlzZX0sY2F0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9fSksaT1mdW5jdGlvbigpe3ZhciB0PW5ldyBuLGU9RCh0KTt0aGlzLnByb21pc2U9dCx0aGlzLnJlc29sdmU9dXQobHQsdCxlKSx0aGlzLnJlamVjdD11dChmdCx0LGUpfSxDLmY9Qj1mdW5jdGlvbih0KXtyZXR1cm4gdD09PXp8fHQ9PT1vP25ldyBpKHQpOlUodCl9LGN8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGx8fChhPWwucHJvdG90eXBlLnRoZW4scChsLnByb3RvdHlwZSxcInRoZW5cIiwoZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzO3JldHVybiBuZXcgeigoZnVuY3Rpb24odCxlKXthLmNhbGwocix0LGUpfSkpLnRoZW4odCxlKX0pLHt1bnNhZmU6ITB9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiAkJiZzKHtnbG9iYWw6ITAsZW51bWVyYWJsZTohMCxmb3JjZWQ6ITB9LHtmZXRjaDpmdW5jdGlvbih0KXtyZXR1cm4gVCh6LCQuYXBwbHkodSxhcmd1bWVudHMpKX19KSkpLHMoe2dsb2JhbDohMCx3cmFwOiEwLGZvcmNlZDpldH0se1Byb21pc2U6en0pLGgoeixOLCExLCEwKSx2KE4pLG89ZihOKSxzKHt0YXJnZXQ6TixzdGF0OiEwLGZvcmNlZDpldH0se3JlamVjdDpmdW5jdGlvbih0KXt2YXIgZT1CKHRoaXMpO3JldHVybiBlLnJlamVjdC5jYWxsKHZvaWQgMCx0KSxlLnByb21pc2V9fSkscyh7dGFyZ2V0Ok4sc3RhdDohMCxmb3JjZWQ6Y3x8ZXR9LHtyZXNvbHZlOmZ1bmN0aW9uKHQpe3JldHVybiBUKGMmJnRoaXM9PT1vP3o6dGhpcyx0KX19KSxzKHt0YXJnZXQ6TixzdGF0OiEwLGZvcmNlZDpydH0se2FsbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLHI9QihlKSxuPXIucmVzb2x2ZSxpPXIucmVqZWN0LG89aigoZnVuY3Rpb24oKXt2YXIgcj1nKGUucmVzb2x2ZSksbz1bXSxhPTAscz0xO2sodCwoZnVuY3Rpb24odCl7dmFyIGM9YSsrLHU9ITE7by5wdXNoKHZvaWQgMCkscysrLHIuY2FsbChlLHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3V8fCh1PSEwLG9bY109dCwtLXN8fG4obykpfSksaSl9KSksLS1zfHxuKG8pfSkpO3JldHVybiBvLmVycm9yJiZpKG8udmFsdWUpLHIucHJvbWlzZX0scmFjZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLHI9QihlKSxuPXIucmVqZWN0LGk9aigoZnVuY3Rpb24oKXt2YXIgaT1nKGUucmVzb2x2ZSk7ayh0LChmdW5jdGlvbih0KXtpLmNhbGwoZSx0KS50aGVuKHIucmVzb2x2ZSxuKX0pKX0pKTtyZXR1cm4gaS5lcnJvciYmbihpLnZhbHVlKSxyLnByb21pc2V9fSl9LGU4OTM6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI1MTM1XCIpLGk9cihcIjU2ZWZcIiksbz1yKFwiMDZjZlwiKSxhPXIoXCI5YmYyXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcj1pKGUpLHM9YS5mLGM9by5mLHU9MDt1PHIubGVuZ3RoO3UrKyl7dmFyIGY9clt1XTtuKHQsZil8fHModCxmLGMoZSxmKSl9fX0sZThiNTpmdW5jdGlvbih0LGUscil7dmFyIG49cihcImM2YjZcIik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiQXJyYXlcIj09bih0KX19LGU5NWE6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCJiNjIyXCIpLGk9cihcIjNmOGNcIiksbz1uKFwiaXRlcmF0b3JcIiksYT1BcnJheS5wcm90b3R5cGU7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiYoaS5BcnJheT09PXR8fGFbb109PT10KX19LGYwNjk6ZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoXCIxYzBiXCIpLGk9ZnVuY3Rpb24odCl7dmFyIGUscjt0aGlzLnByb21pc2U9bmV3IHQoKGZ1bmN0aW9uKHQsbil7aWYodm9pZCAwIT09ZXx8dm9pZCAwIT09cil0aHJvdyBUeXBlRXJyb3IoXCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvclwiKTtlPXQscj1ufSkpLHRoaXMucmVzb2x2ZT1uKGUpLHRoaXMucmVqZWN0PW4ocil9O3QuZXhwb3J0cy5mPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaSh0KX19LGY1ZGY6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCIwMGVlXCIpLGk9cihcImM2YjZcIiksbz1yKFwiYjYyMlwiKSxhPW8oXCJ0b1N0cmluZ1RhZ1wiKSxzPVwiQXJndW1lbnRzXCI9PWkoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKSxjPWZ1bmN0aW9uKHQsZSl7dHJ5e3JldHVybiB0W2VdfWNhdGNoKHIpe319O3QuZXhwb3J0cz1uP2k6ZnVuY3Rpb24odCl7dmFyIGUscixuO3JldHVybiB2b2lkIDA9PT10P1wiVW5kZWZpbmVkXCI6bnVsbD09PXQ/XCJOdWxsXCI6XCJzdHJpbmdcIj09dHlwZW9mKHI9YyhlPU9iamVjdCh0KSxhKSk/cjpzP2koZSk6XCJPYmplY3RcIj09KG49aShlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6bn19LGY3NzI6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoXCI1NjkyXCIpLGk9cihcIjkwZTNcIiksbz1uKFwia2V5c1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG9bdF18fChvW3RdPWkodCkpfX0sZmIxNTpmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7aWYoci5yKGUpLFwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93KXt2YXIgbj13aW5kb3cuZG9jdW1lbnQuY3VycmVudFNjcmlwdCxpPXIoXCI4ODc1XCIpO249aSgpLFwiY3VycmVudFNjcmlwdFwiaW4gZG9jdW1lbnR8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCxcImN1cnJlbnRTY3JpcHRcIix7Z2V0Oml9KTt2YXIgbz1uJiZuLnNyYy5tYXRjaCgvKC4rXFwvKVteL10rXFwuanMoXFw/LiopPyQvKTtvJiYoci5wPW9bMV0pfXZhciBhPXIoXCJmZTgzXCIpO2VbXCJkZWZhdWx0XCJdPWFbXCJhXCJdfSxmYzZhOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiNDRhZFwiKSxpPXIoXCIxZDgwXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbihpKHQpKX19LGZkYmM6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e0NTU1J1bGVMaXN0OjAsQ1NTU3R5bGVEZWNsYXJhdGlvbjowLENTU1ZhbHVlTGlzdDowLENsaWVudFJlY3RMaXN0OjAsRE9NUmVjdExpc3Q6MCxET01TdHJpbmdMaXN0OjAsRE9NVG9rZW5MaXN0OjEsRGF0YVRyYW5zZmVySXRlbUxpc3Q6MCxGaWxlTGlzdDowLEhUTUxBbGxDb2xsZWN0aW9uOjAsSFRNTENvbGxlY3Rpb246MCxIVE1MRm9ybUVsZW1lbnQ6MCxIVE1MU2VsZWN0RWxlbWVudDowLE1lZGlhTGlzdDowLE1pbWVUeXBlQXJyYXk6MCxOYW1lZE5vZGVNYXA6MCxOb2RlTGlzdDoxLFBhaW50UmVxdWVzdExpc3Q6MCxQbHVnaW46MCxQbHVnaW5BcnJheTowLFNWR0xlbmd0aExpc3Q6MCxTVkdOdW1iZXJMaXN0OjAsU1ZHUGF0aFNlZ0xpc3Q6MCxTVkdQb2ludExpc3Q6MCxTVkdTdHJpbmdMaXN0OjAsU1ZHVHJhbnNmb3JtTGlzdDowLFNvdXJjZUJ1ZmZlckxpc3Q6MCxTdHlsZVNoZWV0TGlzdDowLFRleHRUcmFja0N1ZUxpc3Q6MCxUZXh0VHJhY2tMaXN0OjAsVG91Y2hMaXN0OjB9fSxmZGJmOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiNDkzMFwiKTt0LmV4cG9ydHM9biYmIVN5bWJvbC5zaGFtJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yfSxmZTgzOmZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24odCl7dmFyIG49cihcIjI4YWJcIiksaT1mdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJ2dWUtZWxsaXBzZS1wcm9ncmVzc1wiO3JldHVybiB0LmNvbXBvbmVudChlLG5bXCJhXCJdKX0sbz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P289d2luZG93LlZ1ZTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIHQmJihvPXQuVnVlKSxvJiZvLnVzZSh7aW5zdGFsbDppfSksZVtcImFcIl09e2luc3RhbGw6aX19KS5jYWxsKHRoaXMscihcImM4YmFcIikpfSxmZWE5OmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiZGE4NFwiKTt0LmV4cG9ydHM9bi5Qcm9taXNlfSxmZWMxOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKFwiMDJkNFwiKTtcInN0cmluZ1wiPT09dHlwZW9mIG4mJihuPVtbdC5pLG4sXCJcIl1dKSxuLmxvY2FscyYmKHQuZXhwb3J0cz1uLmxvY2Fscyk7dmFyIGk9cihcIjQ5OWVcIikuZGVmYXVsdDtpKFwiZWMwOWI0OWNcIixuLCEwLHtzb3VyY2VNYXA6ITEsc2hhZG93TW9kZTohMX0pfX0pfSkpOyIsIi8qIVxuICogdnVlLWkxOG4gdjguMjQuNCBcbiAqIChjKSAyMDIxIGthenV5YSBrYXdhZ3VjaGlcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbi8qKlxuICogY29uc3RhbnRzXG4gKi9cblxudmFyIG51bWJlckZvcm1hdEtleXMgPSBbXG4gICdjb21wYWN0RGlzcGxheScsXG4gICdjdXJyZW5jeScsXG4gICdjdXJyZW5jeURpc3BsYXknLFxuICAnY3VycmVuY3lTaWduJyxcbiAgJ2xvY2FsZU1hdGNoZXInLFxuICAnbm90YXRpb24nLFxuICAnbnVtYmVyaW5nU3lzdGVtJyxcbiAgJ3NpZ25EaXNwbGF5JyxcbiAgJ3N0eWxlJyxcbiAgJ3VuaXQnLFxuICAndW5pdERpc3BsYXknLFxuICAndXNlR3JvdXBpbmcnLFxuICAnbWluaW11bUludGVnZXJEaWdpdHMnLFxuICAnbWluaW11bUZyYWN0aW9uRGlnaXRzJyxcbiAgJ21heGltdW1GcmFjdGlvbkRpZ2l0cycsXG4gICdtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHMnLFxuICAnbWF4aW11bVNpZ25pZmljYW50RGlnaXRzJ1xuXTtcblxuLyoqXG4gKiB1dGlsaXRpZXNcbiAqL1xuXG5mdW5jdGlvbiB3YXJuIChtc2csIGVycikge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS53YXJuKCdbdnVlLWkxOG5dICcgKyBtc2cpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybihlcnIuc3RhY2spO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBlcnJvciAobXNnLCBlcnIpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWUtaTE4bl0gJyArIG1zZyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spO1xuICAgIH1cbiAgfVxufVxuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnXG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgT0JKRUNUX1NUUklORyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcbn1cblxuZnVuY3Rpb24gaXNOdWxsICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gcGFyc2VBcmdzICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICB2YXIgbG9jYWxlID0gbnVsbDtcbiAgdmFyIHBhcmFtcyA9IG51bGw7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChpc09iamVjdChhcmdzWzBdKSB8fCBpc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBsb2NhbGUgPSBhcmdzWzBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxvY2FsZSA9IGFyZ3NbMF07XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc09iamVjdChhcmdzWzFdKSB8fCBpc0FycmF5KGFyZ3NbMV0pKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGxvY2FsZTogbG9jYWxlLCBwYXJhbXM6IHBhcmFtcyB9XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ2xvbmUgKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKVxufVxuXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmRlbGV0ZShpdGVtKSkge1xuICAgIHJldHVybiBhcnJcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyAoYXJyLCBpdGVtKSB7XG4gIHJldHVybiAhIX5hcnIuaW5kZXhPZihpdGVtKVxufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuZnVuY3Rpb24gbWVyZ2UgKHRhcmdldCkge1xuICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMkMVtpXTtcbiAgICBpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsKSB7XG4gICAgICB2YXIga2V5ID0gKHZvaWQgMCk7XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093bihzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IG1lcmdlKG91dHB1dFtrZXldLCBzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXRcbn1cblxuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBpc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBTYW5pdGl6ZXMgaHRtbCBzcGVjaWFsIGNoYXJhY3RlcnMgZnJvbSBpbnB1dCBzdHJpbmdzLiBGb3IgbWl0aWdhdGluZyByaXNrIG9mIFhTUyBhdHRhY2tzLlxuICogQHBhcmFtIHJhd1RleHQgVGhlIHJhdyBpbnB1dCBmcm9tIHRoZSB1c2VyIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUh0bWwocmF3VGV4dCkge1xuICByZXR1cm4gcmF3VGV4dFxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmYXBvczsnKVxufVxuXG4vKipcbiAqIEVzY2FwZXMgaHRtbCB0YWdzIGFuZCBzcGVjaWFsIHN5bWJvbHMgZnJvbSBhbGwgcHJvdmlkZWQgcGFyYW1zIHdoaWNoIHdlcmUgcmV0dXJuZWQgZnJvbSBwYXJzZUFyZ3MoKS5wYXJhbXMuXG4gKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBhbiBpbi1wbGFjZSBvcGVyYXRpb24gb24gdGhlIHBhcmFtcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHthbnl9IHBhcmFtcyBQYXJhbWV0ZXJzIGFzIHByb3ZpZGVkIGZyb20gYHBhcnNlQXJncygpLnBhcmFtc2AuXG4gKiAgICAgICAgICAgICAgICAgICAgIE1heSBiZSBlaXRoZXIgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvciBhIHN0cmluZy0+YW55IG1hcC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbWFuaXB1bGF0ZWQgYHBhcmFtc2Agb2JqZWN0LlxuICovXG5mdW5jdGlvbiBlc2NhcGVQYXJhbXMocGFyYW1zKSB7XG4gIGlmKHBhcmFtcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmKHR5cGVvZihwYXJhbXNba2V5XSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyYW1zW2tleV0gPSBlc2NhcGVIdG1sKHBhcmFtc1trZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyYW1zXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRlbmQgKFZ1ZSkge1xuICBpZiAoIVZ1ZS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJyRpMThuJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaTE4bicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX2kxOG4gfVxuICAgIH0pO1xuICB9XG5cbiAgVnVlLnByb3RvdHlwZS4kdCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuO1xuICAgIHJldHVybiBpMThuLl90LmFwcGx5KGkxOG4sIFsga2V5LCBpMThuLmxvY2FsZSwgaTE4bi5fZ2V0TWVzc2FnZXMoKSwgdGhpcyBdLmNvbmNhdCggdmFsdWVzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kdGMgPSBmdW5jdGlvbiAoa2V5LCBjaG9pY2UpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMiBdO1xuXG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuO1xuICAgIHJldHVybiBpMThuLl90Yy5hcHBseShpMThuLCBbIGtleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIHRoaXMsIGNob2ljZSBdLmNvbmNhdCggdmFsdWVzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kdGUgPSBmdW5jdGlvbiAoa2V5LCBsb2NhbGUpIHtcbiAgICB2YXIgaTE4biA9IHRoaXMuJGkxOG47XG4gICAgcmV0dXJuIGkxOG4uX3RlKGtleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIGxvY2FsZSlcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIHJlZjtcblxuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMuJGkxOG4pLmQuYXBwbHkocmVmLCBbIHZhbHVlIF0uY29uY2F0KCBhcmdzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG4gICAgcmV0dXJuIChyZWYgPSB0aGlzLiRpMThuKS5uLmFwcGx5KHJlZiwgWyB2YWx1ZSBdLmNvbmNhdCggYXJncyApKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIG1peGluID0ge1xuICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgIG9wdGlvbnMuaTE4biA9IG9wdGlvbnMuaTE4biB8fCAob3B0aW9ucy5fX2kxOG4gPyB7fSA6IG51bGwpO1xuXG4gICAgaWYgKG9wdGlvbnMuaTE4bikge1xuICAgICAgaWYgKG9wdGlvbnMuaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHtcbiAgICAgICAgLy8gaW5pdCBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3NcbiAgICAgICAgaWYgKG9wdGlvbnMuX19pMThuKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBsb2NhbGVNZXNzYWdlcyA9IG9wdGlvbnMuaTE4biAmJiBvcHRpb25zLmkxOG4ubWVzc2FnZXMgPyBvcHRpb25zLmkxOG4ubWVzc2FnZXMgOiB7fTtcbiAgICAgICAgICAgIG9wdGlvbnMuX19pMThuLmZvckVhY2goZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgIGxvY2FsZU1lc3NhZ2VzID0gbWVyZ2UobG9jYWxlTWVzc2FnZXMsIEpTT04ucGFyc2UocmVzb3VyY2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobG9jYWxlTWVzc2FnZXMpLmZvckVhY2goZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgICAgICAgICBvcHRpb25zLmkxOG4ubWVyZ2VMb2NhbGVNZXNzYWdlKGxvY2FsZSwgbG9jYWxlTWVzc2FnZXNbbG9jYWxlXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBlcnJvcihcIkNhbm5vdCBwYXJzZSBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3MuXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pMThuID0gb3B0aW9ucy5pMThuO1xuICAgICAgICB0aGlzLl9pMThuV2F0Y2hlciA9IHRoaXMuX2kxOG4ud2F0Y2hJMThuRGF0YSgpO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMuaTE4bikpIHtcbiAgICAgICAgdmFyIHJvb3RJMThuID0gdGhpcy4kcm9vdCAmJiB0aGlzLiRyb290LiRpMThuICYmIHRoaXMuJHJvb3QuJGkxOG4gaW5zdGFuY2VvZiBWdWVJMThuXG4gICAgICAgICAgPyB0aGlzLiRyb290LiRpMThuXG4gICAgICAgICAgOiBudWxsO1xuICAgICAgICAvLyBjb21wb25lbnQgbG9jYWwgaTE4blxuICAgICAgICBpZiAocm9vdEkxOG4pIHtcbiAgICAgICAgICBvcHRpb25zLmkxOG4ucm9vdCA9IHRoaXMuJHJvb3Q7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLmZvcm1hdHRlciA9IHJvb3RJMThuLmZvcm1hdHRlcjtcbiAgICAgICAgICBvcHRpb25zLmkxOG4uZmFsbGJhY2tMb2NhbGUgPSByb290STE4bi5mYWxsYmFja0xvY2FsZTtcbiAgICAgICAgICBvcHRpb25zLmkxOG4uZm9ybWF0RmFsbGJhY2tNZXNzYWdlcyA9IHJvb3RJMThuLmZvcm1hdEZhbGxiYWNrTWVzc2FnZXM7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLnNpbGVudFRyYW5zbGF0aW9uV2FybiA9IHJvb3RJMThuLnNpbGVudFRyYW5zbGF0aW9uV2FybjtcbiAgICAgICAgICBvcHRpb25zLmkxOG4uc2lsZW50RmFsbGJhY2tXYXJuID0gcm9vdEkxOG4uc2lsZW50RmFsbGJhY2tXYXJuO1xuICAgICAgICAgIG9wdGlvbnMuaTE4bi5wbHVyYWxpemF0aW9uUnVsZXMgPSByb290STE4bi5wbHVyYWxpemF0aW9uUnVsZXM7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudCA9IHJvb3RJMThuLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXQgbG9jYWxlIG1lc3NhZ2VzIHZpYSBjdXN0b20gYmxvY2tzXG4gICAgICAgIGlmIChvcHRpb25zLl9faTE4bikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlTWVzc2FnZXMkMSA9IG9wdGlvbnMuaTE4biAmJiBvcHRpb25zLmkxOG4ubWVzc2FnZXMgPyBvcHRpb25zLmkxOG4ubWVzc2FnZXMgOiB7fTtcbiAgICAgICAgICAgIG9wdGlvbnMuX19pMThuLmZvckVhY2goZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgIGxvY2FsZU1lc3NhZ2VzJDEgPSBtZXJnZShsb2NhbGVNZXNzYWdlcyQxLCBKU09OLnBhcnNlKHJlc291cmNlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wdGlvbnMuaTE4bi5tZXNzYWdlcyA9IGxvY2FsZU1lc3NhZ2VzJDE7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcIkNhbm5vdCBwYXJzZSBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3MuXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWYgPSBvcHRpb25zLmkxOG47XG4gICAgICAgIHZhciBzaGFyZWRNZXNzYWdlcyA9IHJlZi5zaGFyZWRNZXNzYWdlcztcbiAgICAgICAgaWYgKHNoYXJlZE1lc3NhZ2VzICYmIGlzUGxhaW5PYmplY3Qoc2hhcmVkTWVzc2FnZXMpKSB7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLm1lc3NhZ2VzID0gbWVyZ2Uob3B0aW9ucy5pMThuLm1lc3NhZ2VzLCBzaGFyZWRNZXNzYWdlcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pMThuID0gbmV3IFZ1ZUkxOG4ob3B0aW9ucy5pMThuKTtcbiAgICAgICAgdGhpcy5faTE4bldhdGNoZXIgPSB0aGlzLl9pMThuLndhdGNoSTE4bkRhdGEoKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5pMThuLnN5bmMgPT09IHVuZGVmaW5lZCB8fCAhIW9wdGlvbnMuaTE4bi5zeW5jKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxlV2F0Y2hlciA9IHRoaXMuJGkxOG4ud2F0Y2hMb2NhbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb290STE4bikge1xuICAgICAgICAgIHJvb3RJMThuLm9uQ29tcG9uZW50SW5zdGFuY2VDcmVhdGVkKHRoaXMuX2kxOG4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXCJDYW5ub3QgYmUgaW50ZXJwcmV0ZWQgJ2kxOG4nIG9wdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuJHJvb3QgJiYgdGhpcy4kcm9vdC4kaTE4biAmJiB0aGlzLiRyb290LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikge1xuICAgICAgLy8gcm9vdCBpMThuXG4gICAgICB0aGlzLl9pMThuID0gdGhpcy4kcm9vdC4kaTE4bjtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRpMThuICYmIG9wdGlvbnMucGFyZW50LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikge1xuICAgICAgLy8gcGFyZW50IGkxOG5cbiAgICAgIHRoaXMuX2kxOG4gPSBvcHRpb25zLnBhcmVudC4kaTE4bjtcbiAgICB9XG4gIH0sXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgb3B0aW9ucy5pMThuID0gb3B0aW9ucy5pMThuIHx8IChvcHRpb25zLl9faTE4biA/IHt9IDogbnVsbCk7XG5cbiAgICBpZiAob3B0aW9ucy5pMThuKSB7XG4gICAgICBpZiAob3B0aW9ucy5pMThuIGluc3RhbmNlb2YgVnVlSTE4bikge1xuICAgICAgICAvLyBpbml0IGxvY2FsZSBtZXNzYWdlcyB2aWEgY3VzdG9tIGJsb2Nrc1xuICAgICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJpbmcgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMuaTE4bikpIHtcbiAgICAgICAgdGhpcy5faTE4bi5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcodGhpcyk7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybihcIkNhbm5vdCBiZSBpbnRlcnByZXRlZCAnaTE4bicgb3B0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy4kcm9vdCAmJiB0aGlzLiRyb290LiRpMThuICYmIHRoaXMuJHJvb3QuJGkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7XG4gICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTtcbiAgICAgIHRoaXMuX3N1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LiRpMThuICYmIG9wdGlvbnMucGFyZW50LiRpMThuIGluc3RhbmNlb2YgVnVlSTE4bikge1xuICAgICAgdGhpcy5faTE4bi5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcodGhpcyk7XG4gICAgICB0aGlzLl9zdWJzY3JpYmluZyA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIGlmICh0aGlzICE9PSB0aGlzLiRyb290ICYmIHRoaXMuJG9wdGlvbnMuX19JTlRMSUZZX01FVEFfXyAmJiB0aGlzLiRlbCkge1xuICAgICAgdGhpcy4kZWwuc2V0QXR0cmlidXRlKCdkYXRhLWludGxpZnknLCB0aGlzLiRvcHRpb25zLl9fSU5UTElGWV9NRVRBX18pO1xuICAgIH1cbiAgfSxcblxuICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICBpZiAoIXRoaXMuX2kxOG4pIHsgcmV0dXJuIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5fc3Vic2NyaWJpbmcpIHtcbiAgICAgICAgc2VsZi5faTE4bi51bnN1YnNjcmliZURhdGFDaGFuZ2luZyhzZWxmKTtcbiAgICAgICAgZGVsZXRlIHNlbGYuX3N1YnNjcmliaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5faTE4bldhdGNoZXIpIHtcbiAgICAgICAgc2VsZi5faTE4bldhdGNoZXIoKTtcbiAgICAgICAgc2VsZi5faTE4bi5kZXN0cm95Vk0oKTtcbiAgICAgICAgZGVsZXRlIHNlbGYuX2kxOG5XYXRjaGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5fbG9jYWxlV2F0Y2hlcikge1xuICAgICAgICBzZWxmLl9sb2NhbGVXYXRjaGVyKCk7XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9sb2NhbGVXYXRjaGVyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIGludGVycG9sYXRpb25Db21wb25lbnQgPSB7XG4gIG5hbWU6ICdpMThuJyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW4sIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiAnc3BhbidcbiAgICB9LFxuICAgIHBhdGg6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBsb2NhbGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgcGxhY2VzOiB7XG4gICAgICB0eXBlOiBbQXJyYXksIE9iamVjdF1cbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoLCByZWYpIHtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICB2YXIgc2xvdHMgPSByZWYuc2xvdHM7XG5cbiAgICB2YXIgJGkxOG4gPSBwYXJlbnQuJGkxOG47XG4gICAgaWYgKCEkaTE4bikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybignQ2Fubm90IGZpbmQgVnVlSTE4biBpbnN0YW5jZSEnKTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBwYXRoID0gcHJvcHMucGF0aDtcbiAgICB2YXIgbG9jYWxlID0gcHJvcHMubG9jYWxlO1xuICAgIHZhciBwbGFjZXMgPSBwcm9wcy5wbGFjZXM7XG4gICAgdmFyIHBhcmFtcyA9IHNsb3RzKCk7XG4gICAgdmFyIGNoaWxkcmVuID0gJGkxOG4uaShcbiAgICAgIHBhdGgsXG4gICAgICBsb2NhbGUsXG4gICAgICBvbmx5SGFzRGVmYXVsdFBsYWNlKHBhcmFtcykgfHwgcGxhY2VzXG4gICAgICAgID8gdXNlTGVnYWN5UGxhY2VzKHBhcmFtcy5kZWZhdWx0LCBwbGFjZXMpXG4gICAgICAgIDogcGFyYW1zXG4gICAgKTtcblxuICAgIHZhciB0YWcgPSAoISFwcm9wcy50YWcgJiYgcHJvcHMudGFnICE9PSB0cnVlKSB8fCBwcm9wcy50YWcgPT09IGZhbHNlID8gcHJvcHMudGFnIDogJ3NwYW4nO1xuICAgIHJldHVybiB0YWcgPyBoKHRhZywgZGF0YSwgY2hpbGRyZW4pIDogY2hpbGRyZW5cbiAgfVxufTtcblxuZnVuY3Rpb24gb25seUhhc0RlZmF1bHRQbGFjZSAocGFyYW1zKSB7XG4gIHZhciBwcm9wO1xuICBmb3IgKHByb3AgaW4gcGFyYW1zKSB7XG4gICAgaWYgKHByb3AgIT09ICdkZWZhdWx0JykgeyByZXR1cm4gZmFsc2UgfVxuICB9XG4gIHJldHVybiBCb29sZWFuKHByb3ApXG59XG5cbmZ1bmN0aW9uIHVzZUxlZ2FjeVBsYWNlcyAoY2hpbGRyZW4sIHBsYWNlcykge1xuICB2YXIgcGFyYW1zID0gcGxhY2VzID8gY3JlYXRlUGFyYW1zRnJvbVBsYWNlcyhwbGFjZXMpIDoge307XG5cbiAgaWYgKCFjaGlsZHJlbikgeyByZXR1cm4gcGFyYW1zIH1cblxuICAvLyBGaWx0ZXIgZW1wdHkgdGV4dCBub2Rlc1xuICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQudGFnIHx8IGNoaWxkLnRleHQudHJpbSgpICE9PSAnJ1xuICB9KTtcblxuICB2YXIgZXZlcnlQbGFjZSA9IGNoaWxkcmVuLmV2ZXJ5KHZub2RlSGFzUGxhY2VBdHRyaWJ1dGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBldmVyeVBsYWNlKSB7XG4gICAgd2FybignYHBsYWNlYCBhdHRyaWJ1dGUgaXMgZGVwcmVjYXRlZCBpbiBuZXh0IG1ham9yIHZlcnNpb24uIFBsZWFzZSBzd2l0Y2ggdG8gVnVlIHNsb3RzLicpO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShcbiAgICBldmVyeVBsYWNlID8gYXNzaWduQ2hpbGRQbGFjZSA6IGFzc2lnbkNoaWxkSW5kZXgsXG4gICAgcGFyYW1zXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGFyYW1zRnJvbVBsYWNlcyAocGxhY2VzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybignYHBsYWNlc2AgcHJvcCBpcyBkZXByZWNhdGVkIGluIG5leHQgbWFqb3IgdmVyc2lvbi4gUGxlYXNlIHN3aXRjaCB0byBWdWUgc2xvdHMuJyk7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShwbGFjZXMpXG4gICAgPyBwbGFjZXMucmVkdWNlKGFzc2lnbkNoaWxkSW5kZXgsIHt9KVxuICAgIDogT2JqZWN0LmFzc2lnbih7fSwgcGxhY2VzKVxufVxuXG5mdW5jdGlvbiBhc3NpZ25DaGlsZFBsYWNlIChwYXJhbXMsIGNoaWxkKSB7XG4gIGlmIChjaGlsZC5kYXRhICYmIGNoaWxkLmRhdGEuYXR0cnMgJiYgY2hpbGQuZGF0YS5hdHRycy5wbGFjZSkge1xuICAgIHBhcmFtc1tjaGlsZC5kYXRhLmF0dHJzLnBsYWNlXSA9IGNoaWxkO1xuICB9XG4gIHJldHVybiBwYXJhbXNcbn1cblxuZnVuY3Rpb24gYXNzaWduQ2hpbGRJbmRleCAocGFyYW1zLCBjaGlsZCwgaW5kZXgpIHtcbiAgcGFyYW1zW2luZGV4XSA9IGNoaWxkO1xuICByZXR1cm4gcGFyYW1zXG59XG5cbmZ1bmN0aW9uIHZub2RlSGFzUGxhY2VBdHRyaWJ1dGUgKHZub2RlKSB7XG4gIHJldHVybiBCb29sZWFuKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLnBsYWNlKVxufVxuXG4vKiAgKi9cblxudmFyIG51bWJlckNvbXBvbmVudCA9IHtcbiAgbmFtZTogJ2kxOG4tbicsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogJ3NwYW4nXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XVxuICAgIH0sXG4gICAgbG9jYWxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIHBhcmVudCA9IHJlZi5wYXJlbnQ7XG4gICAgdmFyIGRhdGEgPSByZWYuZGF0YTtcblxuICAgIHZhciBpMThuID0gcGFyZW50LiRpMThuO1xuXG4gICAgaWYgKCFpMThuKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdDYW5ub3QgZmluZCBWdWVJMThuIGluc3RhbmNlIScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgb3B0aW9ucyA9IG51bGw7XG5cbiAgICBpZiAoaXNTdHJpbmcocHJvcHMuZm9ybWF0KSkge1xuICAgICAga2V5ID0gcHJvcHMuZm9ybWF0O1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcHMuZm9ybWF0KSkge1xuICAgICAgaWYgKHByb3BzLmZvcm1hdC5rZXkpIHtcbiAgICAgICAga2V5ID0gcHJvcHMuZm9ybWF0LmtleTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIG91dCBudW1iZXIgZm9ybWF0IG9wdGlvbnMgb25seVxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5rZXlzKHByb3BzLmZvcm1hdCkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHByb3ApIHtcbiAgICAgICAgdmFyIG9iajtcblxuICAgICAgICBpZiAoaW5jbHVkZXMobnVtYmVyRm9ybWF0S2V5cywgcHJvcCkpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAoIG9iaiA9IHt9LCBvYmpbcHJvcF0gPSBwcm9wcy5mb3JtYXRbcHJvcF0sIG9iaiApKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIG51bGwpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBwcm9wcy5sb2NhbGUgfHwgaTE4bi5sb2NhbGU7XG4gICAgdmFyIHBhcnRzID0gaTE4bi5fbnRwKHByb3BzLnZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgdmFsdWVzID0gcGFydHMubWFwKGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgdmFyIG9iajtcblxuICAgICAgdmFyIHNsb3QgPSBkYXRhLnNjb3BlZFNsb3RzICYmIGRhdGEuc2NvcGVkU2xvdHNbcGFydC50eXBlXTtcbiAgICAgIHJldHVybiBzbG90ID8gc2xvdCgoIG9iaiA9IHt9LCBvYmpbcGFydC50eXBlXSA9IHBhcnQudmFsdWUsIG9iai5pbmRleCA9IGluZGV4LCBvYmoucGFydHMgPSBwYXJ0cywgb2JqICkpIDogcGFydC52YWx1ZVxuICAgIH0pO1xuXG4gICAgdmFyIHRhZyA9ICghIXByb3BzLnRhZyAmJiBwcm9wcy50YWcgIT09IHRydWUpIHx8IHByb3BzLnRhZyA9PT0gZmFsc2UgPyBwcm9wcy50YWcgOiAnc3Bhbic7XG4gICAgcmV0dXJuIHRhZ1xuICAgICAgPyBoKHRhZywge1xuICAgICAgICBhdHRyczogZGF0YS5hdHRycyxcbiAgICAgICAgJ2NsYXNzJzogZGF0YVsnY2xhc3MnXSxcbiAgICAgICAgc3RhdGljQ2xhc3M6IGRhdGEuc3RhdGljQ2xhc3NcbiAgICAgIH0sIHZhbHVlcylcbiAgICAgIDogdmFsdWVzXG4gIH1cbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgaWYgKCFhc3NlcnQoZWwsIHZub2RlKSkgeyByZXR1cm4gfVxuXG4gIHQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZOb2RlKSB7XG4gIGlmICghYXNzZXJ0KGVsLCB2bm9kZSkpIHsgcmV0dXJuIH1cblxuICB2YXIgaTE4biA9IHZub2RlLmNvbnRleHQuJGkxOG47XG4gIGlmIChsb2NhbGVFcXVhbChlbCwgdm5vZGUpICYmXG4gICAgKGxvb3NlRXF1YWwoYmluZGluZy52YWx1ZSwgYmluZGluZy5vbGRWYWx1ZSkgJiZcbiAgICAgbG9vc2VFcXVhbChlbC5fbG9jYWxlTWVzc2FnZSwgaTE4bi5nZXRMb2NhbGVNZXNzYWdlKGkxOG4ubG9jYWxlKSkpKSB7IHJldHVybiB9XG5cbiAgdChlbCwgYmluZGluZywgdm5vZGUpO1xufVxuXG5mdW5jdGlvbiB1bmJpbmQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVk5vZGUpIHtcbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgaWYgKCF2bSkge1xuICAgIHdhcm4oJ1Z1ZSBpbnN0YW5jZSBkb2VzIG5vdCBleGlzdHMgaW4gVk5vZGUgY29udGV4dCcpO1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGkxOG4gPSB2bm9kZS5jb250ZXh0LiRpMThuIHx8IHt9O1xuICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLnByZXNlcnZlICYmICFpMThuLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudCkge1xuICAgIGVsLnRleHRDb250ZW50ID0gJyc7XG4gIH1cbiAgZWwuX3Z0ID0gdW5kZWZpbmVkO1xuICBkZWxldGUgZWxbJ192dCddO1xuICBlbC5fbG9jYWxlID0gdW5kZWZpbmVkO1xuICBkZWxldGUgZWxbJ19sb2NhbGUnXTtcbiAgZWwuX2xvY2FsZU1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gIGRlbGV0ZSBlbFsnX2xvY2FsZU1lc3NhZ2UnXTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChlbCwgdm5vZGUpIHtcbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgaWYgKCF2bSkge1xuICAgIHdhcm4oJ1Z1ZSBpbnN0YW5jZSBkb2VzIG5vdCBleGlzdHMgaW4gVk5vZGUgY29udGV4dCcpO1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKCF2bS4kaTE4bikge1xuICAgIHdhcm4oJ1Z1ZUkxOG4gaW5zdGFuY2UgZG9lcyBub3QgZXhpc3RzIGluIFZ1ZSBpbnN0YW5jZScpO1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gbG9jYWxlRXF1YWwgKGVsLCB2bm9kZSkge1xuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICByZXR1cm4gZWwuX2xvY2FsZSA9PT0gdm0uJGkxOG4ubG9jYWxlXG59XG5cbmZ1bmN0aW9uIHQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICB2YXIgcmVmJDEsIHJlZiQyO1xuXG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG5cbiAgdmFyIHJlZiA9IHBhcnNlVmFsdWUodmFsdWUpO1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgbG9jYWxlID0gcmVmLmxvY2FsZTtcbiAgdmFyIGFyZ3MgPSByZWYuYXJncztcbiAgdmFyIGNob2ljZSA9IHJlZi5jaG9pY2U7XG4gIGlmICghcGF0aCAmJiAhbG9jYWxlICYmICFhcmdzKSB7XG4gICAgd2FybigndmFsdWUgdHlwZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIXBhdGgpIHtcbiAgICB3YXJuKCdgcGF0aGAgaXMgcmVxdWlyZWQgaW4gdi10IGRpcmVjdGl2ZScpO1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgaWYgKGNob2ljZSAhPSBudWxsKSB7XG4gICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDEgPSB2bS4kaTE4bikudGMuYXBwbHkocmVmJDEsIFsgcGF0aCwgY2hvaWNlIF0uY29uY2F0KCBtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykgKSk7XG4gIH0gZWxzZSB7XG4gICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDIgPSB2bS4kaTE4bikudC5hcHBseShyZWYkMiwgWyBwYXRoIF0uY29uY2F0KCBtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykgKSk7XG4gIH1cbiAgZWwuX2xvY2FsZSA9IHZtLiRpMThuLmxvY2FsZTtcbiAgZWwuX2xvY2FsZU1lc3NhZ2UgPSB2bS4kaTE4bi5nZXRMb2NhbGVNZXNzYWdlKHZtLiRpMThuLmxvY2FsZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlKSB7XG4gIHZhciBwYXRoO1xuICB2YXIgbG9jYWxlO1xuICB2YXIgYXJncztcbiAgdmFyIGNob2ljZTtcblxuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcGF0aCA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgcGF0aCA9IHZhbHVlLnBhdGg7XG4gICAgbG9jYWxlID0gdmFsdWUubG9jYWxlO1xuICAgIGFyZ3MgPSB2YWx1ZS5hcmdzO1xuICAgIGNob2ljZSA9IHZhbHVlLmNob2ljZTtcbiAgfVxuXG4gIHJldHVybiB7IHBhdGg6IHBhdGgsIGxvY2FsZTogbG9jYWxlLCBhcmdzOiBhcmdzLCBjaG9pY2U6IGNob2ljZSB9XG59XG5cbmZ1bmN0aW9uIG1ha2VQYXJhbXMgKGxvY2FsZSwgYXJncykge1xuICB2YXIgcGFyYW1zID0gW107XG5cbiAgbG9jYWxlICYmIHBhcmFtcy5wdXNoKGxvY2FsZSk7XG4gIGlmIChhcmdzICYmIChBcnJheS5pc0FycmF5KGFyZ3MpIHx8IGlzUGxhaW5PYmplY3QoYXJncykpKSB7XG4gICAgcGFyYW1zLnB1c2goYXJncyk7XG4gIH1cblxuICByZXR1cm4gcGFyYW1zXG59XG5cbnZhciBWdWU7XG5cbmZ1bmN0aW9uIGluc3RhbGwgKF9WdWUpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIHdhcm4oJ2FscmVhZHkgaW5zdGFsbGVkLicpO1xuICAgIHJldHVyblxuICB9XG4gIGluc3RhbGwuaW5zdGFsbGVkID0gdHJ1ZTtcblxuICBWdWUgPSBfVnVlO1xuXG4gIHZhciB2ZXJzaW9uID0gKFZ1ZS52ZXJzaW9uICYmIE51bWJlcihWdWUudmVyc2lvbi5zcGxpdCgnLicpWzBdKSkgfHwgLTE7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2ZXJzaW9uIDwgMikge1xuICAgIHdhcm4oKFwidnVlLWkxOG4gKFwiICsgKGluc3RhbGwudmVyc2lvbikgKyBcIikgbmVlZCB0byB1c2UgVnVlIDIuMCBvciBsYXRlciAoVnVlOiBcIiArIChWdWUudmVyc2lvbikgKyBcIikuXCIpKTtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGV4dGVuZChWdWUpO1xuICBWdWUubWl4aW4obWl4aW4pO1xuICBWdWUuZGlyZWN0aXZlKCd0JywgeyBiaW5kOiBiaW5kLCB1cGRhdGU6IHVwZGF0ZSwgdW5iaW5kOiB1bmJpbmQgfSk7XG4gIFZ1ZS5jb21wb25lbnQoaW50ZXJwb2xhdGlvbkNvbXBvbmVudC5uYW1lLCBpbnRlcnBvbGF0aW9uQ29tcG9uZW50KTtcbiAgVnVlLmNvbXBvbmVudChudW1iZXJDb21wb25lbnQubmFtZSwgbnVtYmVyQ29tcG9uZW50KTtcblxuICAvLyB1c2Ugc2ltcGxlIG1lcmdlU3RyYXRlZ2llcyB0byBwcmV2ZW50IGkxOG4gaW5zdGFuY2UgbG9zZSAnX19wcm90b19fJ1xuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIHN0cmF0cy5pMThuID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgICAgPyBwYXJlbnRWYWxcbiAgICAgIDogY2hpbGRWYWxcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBCYXNlRm9ybWF0dGVyID0gZnVuY3Rpb24gQmFzZUZvcm1hdHRlciAoKSB7XG4gIHRoaXMuX2NhY2hlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59O1xuXG5CYXNlRm9ybWF0dGVyLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlIChtZXNzYWdlLCB2YWx1ZXMpIHtcbiAgaWYgKCF2YWx1ZXMpIHtcbiAgICByZXR1cm4gW21lc3NhZ2VdXG4gIH1cbiAgdmFyIHRva2VucyA9IHRoaXMuX2NhY2hlc1ttZXNzYWdlXTtcbiAgaWYgKCF0b2tlbnMpIHtcbiAgICB0b2tlbnMgPSBwYXJzZShtZXNzYWdlKTtcbiAgICB0aGlzLl9jYWNoZXNbbWVzc2FnZV0gPSB0b2tlbnM7XG4gIH1cbiAgcmV0dXJuIGNvbXBpbGUodG9rZW5zLCB2YWx1ZXMpXG59O1xuXG5cblxudmFyIFJFX1RPS0VOX0xJU1RfVkFMVUUgPSAvXig/OlxcZCkrLztcbnZhciBSRV9UT0tFTl9OQU1FRF9WQUxVRSA9IC9eKD86XFx3KSsvO1xuXG5mdW5jdGlvbiBwYXJzZSAoZm9ybWF0KSB7XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHBvc2l0aW9uID0gMDtcblxuICB2YXIgdGV4dCA9ICcnO1xuICB3aGlsZSAocG9zaXRpb24gPCBmb3JtYXQubGVuZ3RoKSB7XG4gICAgdmFyIGNoYXIgPSBmb3JtYXRbcG9zaXRpb24rK107XG4gICAgaWYgKGNoYXIgPT09ICd7Jykge1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlOiB0ZXh0IH0pO1xuICAgICAgfVxuXG4gICAgICB0ZXh0ID0gJyc7XG4gICAgICB2YXIgc3ViID0gJyc7XG4gICAgICBjaGFyID0gZm9ybWF0W3Bvc2l0aW9uKytdO1xuICAgICAgd2hpbGUgKGNoYXIgIT09IHVuZGVmaW5lZCAmJiBjaGFyICE9PSAnfScpIHtcbiAgICAgICAgc3ViICs9IGNoYXI7XG4gICAgICAgIGNoYXIgPSBmb3JtYXRbcG9zaXRpb24rK107XG4gICAgICB9XG4gICAgICB2YXIgaXNDbG9zZWQgPSBjaGFyID09PSAnfSc7XG5cbiAgICAgIHZhciB0eXBlID0gUkVfVE9LRU5fTElTVF9WQUxVRS50ZXN0KHN1YilcbiAgICAgICAgPyAnbGlzdCdcbiAgICAgICAgOiBpc0Nsb3NlZCAmJiBSRV9UT0tFTl9OQU1FRF9WQUxVRS50ZXN0KHN1YilcbiAgICAgICAgICA/ICduYW1lZCdcbiAgICAgICAgICA6ICd1bmtub3duJztcbiAgICAgIHRva2Vucy5wdXNoKHsgdmFsdWU6IHN1YiwgdHlwZTogdHlwZSB9KTtcbiAgICB9IGVsc2UgaWYgKGNoYXIgPT09ICclJykge1xuICAgICAgLy8gd2hlbiBmb3VuZCByYWlscyBpMThuIHN5bnRheCwgc2tpcCB0ZXh0IGNhcHR1cmVcbiAgICAgIGlmIChmb3JtYXRbKHBvc2l0aW9uKV0gIT09ICd7Jykge1xuICAgICAgICB0ZXh0ICs9IGNoYXI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHQgKz0gY2hhcjtcbiAgICB9XG4gIH1cblxuICB0ZXh0ICYmIHRva2Vucy5wdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGV4dCB9KTtcblxuICByZXR1cm4gdG9rZW5zXG59XG5cbmZ1bmN0aW9uIGNvbXBpbGUgKHRva2VucywgdmFsdWVzKSB7XG4gIHZhciBjb21waWxlZCA9IFtdO1xuICB2YXIgaW5kZXggPSAwO1xuXG4gIHZhciBtb2RlID0gQXJyYXkuaXNBcnJheSh2YWx1ZXMpXG4gICAgPyAnbGlzdCdcbiAgICA6IGlzT2JqZWN0KHZhbHVlcylcbiAgICAgID8gJ25hbWVkJ1xuICAgICAgOiAndW5rbm93bic7XG4gIGlmIChtb2RlID09PSAndW5rbm93bicpIHsgcmV0dXJuIGNvbXBpbGVkIH1cblxuICB3aGlsZSAoaW5kZXggPCB0b2tlbnMubGVuZ3RoKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2luZGV4XTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICBjb21waWxlZC5wdXNoKHRva2VuLnZhbHVlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgICBjb21waWxlZC5wdXNoKHZhbHVlc1twYXJzZUludCh0b2tlbi52YWx1ZSwgMTApXSk7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICduYW1lZCc6XG4gICAgICAgIGlmIChtb2RlID09PSAnbmFtZWQnKSB7XG4gICAgICAgICAgY29tcGlsZWQucHVzaCgodmFsdWVzKVt0b2tlbi52YWx1ZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuKChcIlR5cGUgb2YgdG9rZW4gJ1wiICsgKHRva2VuLnR5cGUpICsgXCInIGFuZCBmb3JtYXQgb2YgdmFsdWUgJ1wiICsgbW9kZSArIFwiJyBkb24ndCBtYXRjaCFcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndW5rbm93bic6XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybihcIkRldGVjdCAndW5rbm93bicgdHlwZSBvZiB0b2tlbiFcIik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiAgUGF0aCBwYXJzZXJcbiAqICAtIEluc3BpcmVkOlxuICogICAgVnVlLmpzIFBhdGggcGFyc2VyXG4gKi9cblxuLy8gYWN0aW9uc1xudmFyIEFQUEVORCA9IDA7XG52YXIgUFVTSCA9IDE7XG52YXIgSU5DX1NVQl9QQVRIX0RFUFRIID0gMjtcbnZhciBQVVNIX1NVQl9QQVRIID0gMztcblxuLy8gc3RhdGVzXG52YXIgQkVGT1JFX1BBVEggPSAwO1xudmFyIElOX1BBVEggPSAxO1xudmFyIEJFRk9SRV9JREVOVCA9IDI7XG52YXIgSU5fSURFTlQgPSAzO1xudmFyIElOX1NVQl9QQVRIID0gNDtcbnZhciBJTl9TSU5HTEVfUVVPVEUgPSA1O1xudmFyIElOX0RPVUJMRV9RVU9URSA9IDY7XG52YXIgQUZURVJfUEFUSCA9IDc7XG52YXIgRVJST1IgPSA4O1xuXG52YXIgcGF0aFN0YXRlTWFjaGluZSA9IFtdO1xuXG5wYXRoU3RhdGVNYWNoaW5lW0JFRk9SRV9QQVRIXSA9IHtcbiAgJ3dzJzogW0JFRk9SRV9QQVRIXSxcbiAgJ2lkZW50JzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAnWyc6IFtJTl9TVUJfUEFUSF0sXG4gICdlb2YnOiBbQUZURVJfUEFUSF1cbn07XG5cbnBhdGhTdGF0ZU1hY2hpbmVbSU5fUEFUSF0gPSB7XG4gICd3cyc6IFtJTl9QQVRIXSxcbiAgJy4nOiBbQkVGT1JFX0lERU5UXSxcbiAgJ1snOiBbSU5fU1VCX1BBVEhdLFxuICAnZW9mJzogW0FGVEVSX1BBVEhdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0JFRk9SRV9JREVOVF0gPSB7XG4gICd3cyc6IFtCRUZPUkVfSURFTlRdLFxuICAnaWRlbnQnOiBbSU5fSURFTlQsIEFQUEVORF0sXG4gICcwJzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAnbnVtYmVyJzogW0lOX0lERU5ULCBBUFBFTkRdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0lOX0lERU5UXSA9IHtcbiAgJ2lkZW50JzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAnMCc6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgJ251bWJlcic6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgJ3dzJzogW0lOX1BBVEgsIFBVU0hdLFxuICAnLic6IFtCRUZPUkVfSURFTlQsIFBVU0hdLFxuICAnWyc6IFtJTl9TVUJfUEFUSCwgUFVTSF0sXG4gICdlb2YnOiBbQUZURVJfUEFUSCwgUFVTSF1cbn07XG5cbnBhdGhTdGF0ZU1hY2hpbmVbSU5fU1VCX1BBVEhdID0ge1xuICBcIidcIjogW0lOX1NJTkdMRV9RVU9URSwgQVBQRU5EXSxcbiAgJ1wiJzogW0lOX0RPVUJMRV9RVU9URSwgQVBQRU5EXSxcbiAgJ1snOiBbSU5fU1VCX1BBVEgsIElOQ19TVUJfUEFUSF9ERVBUSF0sXG4gICddJzogW0lOX1BBVEgsIFBVU0hfU1VCX1BBVEhdLFxuICAnZW9mJzogRVJST1IsXG4gICdlbHNlJzogW0lOX1NVQl9QQVRILCBBUFBFTkRdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0lOX1NJTkdMRV9RVU9URV0gPSB7XG4gIFwiJ1wiOiBbSU5fU1VCX1BBVEgsIEFQUEVORF0sXG4gICdlb2YnOiBFUlJPUixcbiAgJ2Vsc2UnOiBbSU5fU0lOR0xFX1FVT1RFLCBBUFBFTkRdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0lOX0RPVUJMRV9RVU9URV0gPSB7XG4gICdcIic6IFtJTl9TVUJfUEFUSCwgQVBQRU5EXSxcbiAgJ2VvZic6IEVSUk9SLFxuICAnZWxzZSc6IFtJTl9ET1VCTEVfUVVPVEUsIEFQUEVORF1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gZXhwcmVzc2lvbiBpcyBhIGxpdGVyYWwgdmFsdWUuXG4gKi9cblxudmFyIGxpdGVyYWxWYWx1ZVJFID0gL15cXHM/KD86dHJ1ZXxmYWxzZXwtP1tcXGQuXSt8J1teJ10qJ3xcIlteXCJdKlwiKVxccz8kLztcbmZ1bmN0aW9uIGlzTGl0ZXJhbCAoZXhwKSB7XG4gIHJldHVybiBsaXRlcmFsVmFsdWVSRS50ZXN0KGV4cClcbn1cblxuLyoqXG4gKiBTdHJpcCBxdW90ZXMgZnJvbSBhIHN0cmluZ1xuICovXG5cbmZ1bmN0aW9uIHN0cmlwUXVvdGVzIChzdHIpIHtcbiAgdmFyIGEgPSBzdHIuY2hhckNvZGVBdCgwKTtcbiAgdmFyIGIgPSBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBhID09PSBiICYmIChhID09PSAweDIyIHx8IGEgPT09IDB4MjcpXG4gICAgPyBzdHIuc2xpY2UoMSwgLTEpXG4gICAgOiBzdHJcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIHR5cGUgb2YgYSBjaGFyYWN0ZXIgaW4gYSBrZXlwYXRoLlxuICovXG5cbmZ1bmN0aW9uIGdldFBhdGhDaGFyVHlwZSAoY2gpIHtcbiAgaWYgKGNoID09PSB1bmRlZmluZWQgfHwgY2ggPT09IG51bGwpIHsgcmV0dXJuICdlb2YnIH1cblxuICB2YXIgY29kZSA9IGNoLmNoYXJDb2RlQXQoMCk7XG5cbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSAweDVCOiAvLyBbXG4gICAgY2FzZSAweDVEOiAvLyBdXG4gICAgY2FzZSAweDJFOiAvLyAuXG4gICAgY2FzZSAweDIyOiAvLyBcIlxuICAgIGNhc2UgMHgyNzogLy8gJ1xuICAgICAgcmV0dXJuIGNoXG5cbiAgICBjYXNlIDB4NUY6IC8vIF9cbiAgICBjYXNlIDB4MjQ6IC8vICRcbiAgICBjYXNlIDB4MkQ6IC8vIC1cbiAgICAgIHJldHVybiAnaWRlbnQnXG5cbiAgICBjYXNlIDB4MDk6IC8vIFRhYlxuICAgIGNhc2UgMHgwQTogLy8gTmV3bGluZVxuICAgIGNhc2UgMHgwRDogLy8gUmV0dXJuXG4gICAgY2FzZSAweEEwOiAgLy8gTm8tYnJlYWsgc3BhY2VcbiAgICBjYXNlIDB4RkVGRjogIC8vIEJ5dGUgT3JkZXIgTWFya1xuICAgIGNhc2UgMHgyMDI4OiAgLy8gTGluZSBTZXBhcmF0b3JcbiAgICBjYXNlIDB4MjAyOTogIC8vIFBhcmFncmFwaCBTZXBhcmF0b3JcbiAgICAgIHJldHVybiAnd3MnXG4gIH1cblxuICByZXR1cm4gJ2lkZW50J1xufVxuXG4vKipcbiAqIEZvcm1hdCBhIHN1YlBhdGgsIHJldHVybiBpdHMgcGxhaW4gZm9ybSBpZiBpdCBpc1xuICogYSBsaXRlcmFsIHN0cmluZyBvciBudW1iZXIuIE90aGVyd2lzZSBwcmVwZW5kIHRoZVxuICogZHluYW1pYyBpbmRpY2F0b3IgKCopLlxuICovXG5cbmZ1bmN0aW9uIGZvcm1hdFN1YlBhdGggKHBhdGgpIHtcbiAgdmFyIHRyaW1tZWQgPSBwYXRoLnRyaW0oKTtcbiAgLy8gaW52YWxpZCBsZWFkaW5nIDBcbiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnMCcgJiYgaXNOYU4ocGF0aCkpIHsgcmV0dXJuIGZhbHNlIH1cblxuICByZXR1cm4gaXNMaXRlcmFsKHRyaW1tZWQpID8gc3RyaXBRdW90ZXModHJpbW1lZCkgOiAnKicgKyB0cmltbWVkXG59XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgcGF0aCBpbnRvIGFuIGFycmF5IG9mIHNlZ21lbnRzXG4gKi9cblxuZnVuY3Rpb24gcGFyc2UkMSAocGF0aCkge1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG1vZGUgPSBCRUZPUkVfUEFUSDtcbiAgdmFyIHN1YlBhdGhEZXB0aCA9IDA7XG4gIHZhciBjO1xuICB2YXIga2V5O1xuICB2YXIgbmV3Q2hhcjtcbiAgdmFyIHR5cGU7XG4gIHZhciB0cmFuc2l0aW9uO1xuICB2YXIgYWN0aW9uO1xuICB2YXIgdHlwZU1hcDtcbiAgdmFyIGFjdGlvbnMgPSBbXTtcblxuICBhY3Rpb25zW1BVU0hdID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICBrZXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIGFjdGlvbnNbQVBQRU5EXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleSA9IG5ld0NoYXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSArPSBuZXdDaGFyO1xuICAgIH1cbiAgfTtcblxuICBhY3Rpb25zW0lOQ19TVUJfUEFUSF9ERVBUSF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aW9uc1tBUFBFTkRdKCk7XG4gICAgc3ViUGF0aERlcHRoKys7XG4gIH07XG5cbiAgYWN0aW9uc1tQVVNIX1NVQl9QQVRIXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc3ViUGF0aERlcHRoID4gMCkge1xuICAgICAgc3ViUGF0aERlcHRoLS07XG4gICAgICBtb2RlID0gSU5fU1VCX1BBVEg7XG4gICAgICBhY3Rpb25zW0FQUEVORF0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViUGF0aERlcHRoID0gMDtcbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2UgfVxuICAgICAga2V5ID0gZm9ybWF0U3ViUGF0aChrZXkpO1xuICAgICAgaWYgKGtleSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25zW1BVU0hdKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1heWJlVW5lc2NhcGVRdW90ZSAoKSB7XG4gICAgdmFyIG5leHRDaGFyID0gcGF0aFtpbmRleCArIDFdO1xuICAgIGlmICgobW9kZSA9PT0gSU5fU0lOR0xFX1FVT1RFICYmIG5leHRDaGFyID09PSBcIidcIikgfHxcbiAgICAgIChtb2RlID09PSBJTl9ET1VCTEVfUVVPVEUgJiYgbmV4dENoYXIgPT09ICdcIicpKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgbmV3Q2hhciA9ICdcXFxcJyArIG5leHRDaGFyO1xuICAgICAgYWN0aW9uc1tBUFBFTkRdKCk7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChtb2RlICE9PSBudWxsKSB7XG4gICAgaW5kZXgrKztcbiAgICBjID0gcGF0aFtpbmRleF07XG5cbiAgICBpZiAoYyA9PT0gJ1xcXFwnICYmIG1heWJlVW5lc2NhcGVRdW90ZSgpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHR5cGUgPSBnZXRQYXRoQ2hhclR5cGUoYyk7XG4gICAgdHlwZU1hcCA9IHBhdGhTdGF0ZU1hY2hpbmVbbW9kZV07XG4gICAgdHJhbnNpdGlvbiA9IHR5cGVNYXBbdHlwZV0gfHwgdHlwZU1hcFsnZWxzZSddIHx8IEVSUk9SO1xuXG4gICAgaWYgKHRyYW5zaXRpb24gPT09IEVSUk9SKSB7XG4gICAgICByZXR1cm4gLy8gcGFyc2UgZXJyb3JcbiAgICB9XG5cbiAgICBtb2RlID0gdHJhbnNpdGlvblswXTtcbiAgICBhY3Rpb24gPSBhY3Rpb25zW3RyYW5zaXRpb25bMV1dO1xuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIG5ld0NoYXIgPSB0cmFuc2l0aW9uWzJdO1xuICAgICAgbmV3Q2hhciA9IG5ld0NoYXIgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGNcbiAgICAgICAgOiBuZXdDaGFyO1xuICAgICAgaWYgKGFjdGlvbigpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kZSA9PT0gQUZURVJfUEFUSCkge1xuICAgICAgcmV0dXJuIGtleXNcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG52YXIgSTE4blBhdGggPSBmdW5jdGlvbiBJMThuUGF0aCAoKSB7XG4gIHRoaXMuX2NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn07XG5cbi8qKlxuICogRXh0ZXJuYWwgcGFyc2UgdGhhdCBjaGVjayBmb3IgYSBjYWNoZSBoaXQgZmlyc3RcbiAqL1xuSTE4blBhdGgucHJvdG90eXBlLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGl0ID0gdGhpcy5fY2FjaGVbcGF0aF07XG4gIGlmICghaGl0KSB7XG4gICAgaGl0ID0gcGFyc2UkMShwYXRoKTtcbiAgICBpZiAoaGl0KSB7XG4gICAgICB0aGlzLl9jYWNoZVtwYXRoXSA9IGhpdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhpdCB8fCBbXVxufTtcblxuLyoqXG4gKiBHZXQgcGF0aCB2YWx1ZSBmcm9tIHBhdGggc3RyaW5nXG4gKi9cbkkxOG5QYXRoLnByb3RvdHlwZS5nZXRQYXRoVmFsdWUgPSBmdW5jdGlvbiBnZXRQYXRoVmFsdWUgKG9iaiwgcGF0aCkge1xuICBpZiAoIWlzT2JqZWN0KG9iaikpIHsgcmV0dXJuIG51bGwgfVxuXG4gIHZhciBwYXRocyA9IHRoaXMucGFyc2VQYXRoKHBhdGgpO1xuICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgIHZhciBsYXN0ID0gb2JqO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gbGFzdFtwYXRoc1tpXV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgbGFzdCA9IHZhbHVlO1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0XG4gIH1cbn07XG5cbi8qICAqL1xuXG5cblxudmFyIGh0bWxUYWdNYXRjaGVyID0gLzxcXC8/W1xcd1xccz1cIi8uJzo7Iy1cXC9dKz4vO1xudmFyIGxpbmtLZXlNYXRjaGVyID0gLyg/OkAoPzpcXC5bYS16XSspPzooPzpbXFx3XFwtX3wuXSt8XFwoW1xcd1xcLV98Ll0rXFwpKSkvZztcbnZhciBsaW5rS2V5UHJlZml4TWF0Y2hlciA9IC9eQCg/OlxcLihbYS16XSspKT86LztcbnZhciBicmFja2V0c01hdGNoZXIgPSAvWygpXS9nO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSB7XG4gICd1cHBlcic6IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0ci50b0xvY2FsZVVwcGVyQ2FzZSgpOyB9LFxuICAnbG93ZXInOiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIudG9Mb2NhbGVMb3dlckNhc2UoKTsgfSxcbiAgJ2NhcGl0YWxpemUnOiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiAoXCJcIiArIChzdHIuY2hhckF0KDApLnRvTG9jYWxlVXBwZXJDYXNlKCkpICsgKHN0ci5zdWJzdHIoMSkpKTsgfVxufTtcblxudmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSBuZXcgQmFzZUZvcm1hdHRlcigpO1xuXG52YXIgVnVlSTE4biA9IGZ1bmN0aW9uIFZ1ZUkxOG4gKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbiAgLy8gVG8gYWxsb3cgdXNlcnMgdG8gYXZvaWQgYXV0by1pbnN0YWxsYXRpb24gaW4gc29tZSBjYXNlcyxcbiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICMyOTBcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICBpbnN0YWxsKHdpbmRvdy5WdWUpO1xuICB9XG5cbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8ICdlbi1VUyc7XG4gIHZhciBmYWxsYmFja0xvY2FsZSA9IG9wdGlvbnMuZmFsbGJhY2tMb2NhbGUgPT09IGZhbHNlXG4gICAgPyBmYWxzZVxuICAgIDogb3B0aW9ucy5mYWxsYmFja0xvY2FsZSB8fCAnZW4tVVMnO1xuICB2YXIgbWVzc2FnZXMgPSBvcHRpb25zLm1lc3NhZ2VzIHx8IHt9O1xuICB2YXIgZGF0ZVRpbWVGb3JtYXRzID0gb3B0aW9ucy5kYXRlVGltZUZvcm1hdHMgfHwge307XG4gIHZhciBudW1iZXJGb3JtYXRzID0gb3B0aW9ucy5udW1iZXJGb3JtYXRzIHx8IHt9O1xuXG4gIHRoaXMuX3ZtID0gbnVsbDtcbiAgdGhpcy5fZm9ybWF0dGVyID0gb3B0aW9ucy5mb3JtYXR0ZXIgfHwgZGVmYXVsdEZvcm1hdHRlcjtcbiAgdGhpcy5fbW9kaWZpZXJzID0gb3B0aW9ucy5tb2RpZmllcnMgfHwge307XG4gIHRoaXMuX21pc3NpbmcgPSBvcHRpb25zLm1pc3NpbmcgfHwgbnVsbDtcbiAgdGhpcy5fcm9vdCA9IG9wdGlvbnMucm9vdCB8fCBudWxsO1xuICB0aGlzLl9zeW5jID0gb3B0aW9ucy5zeW5jID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnN5bmM7XG4gIHRoaXMuX2ZhbGxiYWNrUm9vdCA9IG9wdGlvbnMuZmFsbGJhY2tSb290ID09PSB1bmRlZmluZWRcbiAgICA/IHRydWVcbiAgICA6ICEhb3B0aW9ucy5mYWxsYmFja1Jvb3Q7XG4gIHRoaXMuX2Zvcm1hdEZhbGxiYWNrTWVzc2FnZXMgPSBvcHRpb25zLmZvcm1hdEZhbGxiYWNrTWVzc2FnZXMgPT09IHVuZGVmaW5lZFxuICAgID8gZmFsc2VcbiAgICA6ICEhb3B0aW9ucy5mb3JtYXRGYWxsYmFja01lc3NhZ2VzO1xuICB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4gPSBvcHRpb25zLnNpbGVudFRyYW5zbGF0aW9uV2FybiA9PT0gdW5kZWZpbmVkXG4gICAgPyBmYWxzZVxuICAgIDogb3B0aW9ucy5zaWxlbnRUcmFuc2xhdGlvbldhcm47XG4gIHRoaXMuX3NpbGVudEZhbGxiYWNrV2FybiA9IG9wdGlvbnMuc2lsZW50RmFsbGJhY2tXYXJuID09PSB1bmRlZmluZWRcbiAgICA/IGZhbHNlXG4gICAgOiAhIW9wdGlvbnMuc2lsZW50RmFsbGJhY2tXYXJuO1xuICB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnMgPSB7fTtcbiAgdGhpcy5fbnVtYmVyRm9ybWF0dGVycyA9IHt9O1xuICB0aGlzLl9wYXRoID0gbmV3IEkxOG5QYXRoKCk7XG4gIHRoaXMuX2RhdGFMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gIHRoaXMuX2NvbXBvbmVudEluc3RhbmNlQ3JlYXRlZExpc3RlbmVyID0gb3B0aW9ucy5jb21wb25lbnRJbnN0YW5jZUNyZWF0ZWRMaXN0ZW5lciB8fCBudWxsO1xuICB0aGlzLl9wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQgPSBvcHRpb25zLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudCA9PT0gdW5kZWZpbmVkXG4gICAgPyBmYWxzZVxuICAgIDogISFvcHRpb25zLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudDtcbiAgdGhpcy5wbHVyYWxpemF0aW9uUnVsZXMgPSBvcHRpb25zLnBsdXJhbGl6YXRpb25SdWxlcyB8fCB7fTtcbiAgdGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPSBvcHRpb25zLndhcm5IdG1sSW5NZXNzYWdlIHx8ICdvZmYnO1xuICB0aGlzLl9wb3N0VHJhbnNsYXRpb24gPSBvcHRpb25zLnBvc3RUcmFuc2xhdGlvbiB8fCBudWxsO1xuICB0aGlzLl9lc2NhcGVQYXJhbWV0ZXJIdG1sID0gb3B0aW9ucy5lc2NhcGVQYXJhbWV0ZXJIdG1sIHx8IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gY2hvaWNlIHtudW1iZXJ9IGEgY2hvaWNlIGluZGV4IGdpdmVuIGJ5IHRoZSBpbnB1dCB0byAkdGM6IGAkdGMoJ3BhdGgudG8ucnVsZScsIGNob2ljZUluZGV4KWBcbiAgICogQHBhcmFtIGNob2ljZXNMZW5ndGgge251bWJlcn0gYW4gb3ZlcmFsbCBhbW91bnQgb2YgYXZhaWxhYmxlIGNob2ljZXNcbiAgICogQHJldHVybnMgYSBmaW5hbCBjaG9pY2UgaW5kZXhcbiAgKi9cbiAgdGhpcy5nZXRDaG9pY2VJbmRleCA9IGZ1bmN0aW9uIChjaG9pY2UsIGNob2ljZXNMZW5ndGgpIHtcbiAgICB2YXIgdGhpc1Byb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzJDEpO1xuICAgIGlmICh0aGlzUHJvdG90eXBlICYmIHRoaXNQcm90b3R5cGUuZ2V0Q2hvaWNlSW5kZXgpIHtcbiAgICAgIHZhciBwcm90b3R5cGVHZXRDaG9pY2VJbmRleCA9ICh0aGlzUHJvdG90eXBlLmdldENob2ljZUluZGV4KTtcbiAgICAgIHJldHVybiAocHJvdG90eXBlR2V0Q2hvaWNlSW5kZXgpLmNhbGwodGhpcyQxLCBjaG9pY2UsIGNob2ljZXNMZW5ndGgpXG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCAob2xkKSBnZXRDaG9pY2VJbmRleCBpbXBsZW1lbnRhdGlvbiAtIGVuZ2xpc2gtY29tcGF0aWJsZVxuICAgIHZhciBkZWZhdWx0SW1wbCA9IGZ1bmN0aW9uIChfY2hvaWNlLCBfY2hvaWNlc0xlbmd0aCkge1xuICAgICAgX2Nob2ljZSA9IE1hdGguYWJzKF9jaG9pY2UpO1xuXG4gICAgICBpZiAoX2Nob2ljZXNMZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIF9jaG9pY2VcbiAgICAgICAgICA/IF9jaG9pY2UgPiAxXG4gICAgICAgICAgICA/IDFcbiAgICAgICAgICAgIDogMFxuICAgICAgICAgIDogMVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2Nob2ljZSA/IE1hdGgubWluKF9jaG9pY2UsIDIpIDogMFxuICAgIH07XG5cbiAgICBpZiAodGhpcyQxLmxvY2FsZSBpbiB0aGlzJDEucGx1cmFsaXphdGlvblJ1bGVzKSB7XG4gICAgICByZXR1cm4gdGhpcyQxLnBsdXJhbGl6YXRpb25SdWxlc1t0aGlzJDEubG9jYWxlXS5hcHBseSh0aGlzJDEsIFtjaG9pY2UsIGNob2ljZXNMZW5ndGhdKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEltcGwoY2hvaWNlLCBjaG9pY2VzTGVuZ3RoKVxuICAgIH1cbiAgfTtcblxuXG4gIHRoaXMuX2V4aXN0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSkge1xuICAgIGlmICghbWVzc2FnZSB8fCAha2V5KSB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKCFpc051bGwodGhpcyQxLl9wYXRoLmdldFBhdGhWYWx1ZShtZXNzYWdlLCBrZXkpKSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgLy8gZmFsbGJhY2sgZm9yIGZsYXQga2V5XG4gICAgaWYgKG1lc3NhZ2Vba2V5XSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgaWYgKHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnd2FybicgfHwgdGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPT09ICdlcnJvcicpIHtcbiAgICBPYmplY3Qua2V5cyhtZXNzYWdlcykuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICB0aGlzJDEuX2NoZWNrTG9jYWxlTWVzc2FnZShsb2NhbGUsIHRoaXMkMS5fd2Fybkh0bWxJbk1lc3NhZ2UsIG1lc3NhZ2VzW2xvY2FsZV0pO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5faW5pdFZNKHtcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBmYWxsYmFja0xvY2FsZTogZmFsbGJhY2tMb2NhbGUsXG4gICAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxuICAgIGRhdGVUaW1lRm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIG51bWJlckZvcm1hdHM6IG51bWJlckZvcm1hdHNcbiAgfSk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyB2bTogeyBjb25maWd1cmFibGU6IHRydWUgfSxtZXNzYWdlczogeyBjb25maWd1cmFibGU6IHRydWUgfSxkYXRlVGltZUZvcm1hdHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbnVtYmVyRm9ybWF0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxhdmFpbGFibGVMb2NhbGVzOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGxvY2FsZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxmYWxsYmFja0xvY2FsZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxmb3JtYXRGYWxsYmFja01lc3NhZ2VzOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG1pc3Npbmc6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZm9ybWF0dGVyOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHNpbGVudFRyYW5zbGF0aW9uV2FybjogeyBjb25maWd1cmFibGU6IHRydWUgfSxzaWxlbnRGYWxsYmFja1dhcm46IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scHJlc2VydmVEaXJlY3RpdmVDb250ZW50OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHdhcm5IdG1sSW5NZXNzYWdlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHBvc3RUcmFuc2xhdGlvbjogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fY2hlY2tMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gX2NoZWNrTG9jYWxlTWVzc2FnZSAobG9jYWxlLCBsZXZlbCwgbWVzc2FnZSkge1xuICB2YXIgcGF0aHMgPSBbXTtcblxuICB2YXIgZm4gPSBmdW5jdGlvbiAobGV2ZWwsIGxvY2FsZSwgbWVzc2FnZSwgcGF0aHMpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChtZXNzYWdlKSkge1xuICAgICAgT2JqZWN0LmtleXMobWVzc2FnZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWwgPSBtZXNzYWdlW2tleV07XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICBwYXRocy5wdXNoKGtleSk7XG4gICAgICAgICAgcGF0aHMucHVzaCgnLicpO1xuICAgICAgICAgIGZuKGxldmVsLCBsb2NhbGUsIHZhbCwgcGF0aHMpO1xuICAgICAgICAgIHBhdGhzLnBvcCgpO1xuICAgICAgICAgIHBhdGhzLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGhzLnB1c2goa2V5KTtcbiAgICAgICAgICBmbihsZXZlbCwgbG9jYWxlLCB2YWwsIHBhdGhzKTtcbiAgICAgICAgICBwYXRocy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG1lc3NhZ2UpKSB7XG4gICAgICBtZXNzYWdlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgICAgcGF0aHMucHVzaCgoXCJbXCIgKyBpbmRleCArIFwiXVwiKSk7XG4gICAgICAgICAgcGF0aHMucHVzaCgnLicpO1xuICAgICAgICAgIGZuKGxldmVsLCBsb2NhbGUsIGl0ZW0sIHBhdGhzKTtcbiAgICAgICAgICBwYXRocy5wb3AoKTtcbiAgICAgICAgICBwYXRocy5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRocy5wdXNoKChcIltcIiArIGluZGV4ICsgXCJdXCIpKTtcbiAgICAgICAgICBmbihsZXZlbCwgbG9jYWxlLCBpdGVtLCBwYXRocyk7XG4gICAgICAgICAgcGF0aHMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICAgIHZhciByZXQgPSBodG1sVGFnTWF0Y2hlci50ZXN0KG1lc3NhZ2UpO1xuICAgICAgaWYgKHJldCkge1xuICAgICAgICB2YXIgbXNnID0gXCJEZXRlY3RlZCBIVE1MIGluIG1lc3NhZ2UgJ1wiICsgbWVzc2FnZSArIFwiJyBvZiBrZXlwYXRoICdcIiArIChwYXRocy5qb2luKCcnKSkgKyBcIicgYXQgJ1wiICsgbG9jYWxlICsgXCInLiBDb25zaWRlciBjb21wb25lbnQgaW50ZXJwb2xhdGlvbiB3aXRoICc8aTE4bj4nIHRvIGF2b2lkIFhTUy4gU2VlIGh0dHBzOi8vYml0Lmx5LzJacUp6a3BcIjtcbiAgICAgICAgaWYgKGxldmVsID09PSAnd2FybicpIHtcbiAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgIH0gZWxzZSBpZiAobGV2ZWwgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICBlcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZuKGxldmVsLCBsb2NhbGUsIG1lc3NhZ2UsIHBhdGhzKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9pbml0Vk0gPSBmdW5jdGlvbiBfaW5pdFZNIChkYXRhKSB7XG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICB0aGlzLl92bSA9IG5ldyBWdWUoeyBkYXRhOiBkYXRhIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmRlc3Ryb3lWTSA9IGZ1bmN0aW9uIGRlc3Ryb3lWTSAoKSB7XG4gIHRoaXMuX3ZtLiRkZXN0cm95KCk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcgPSBmdW5jdGlvbiBzdWJzY3JpYmVEYXRhQ2hhbmdpbmcgKHZtKSB7XG4gIHRoaXMuX2RhdGFMaXN0ZW5lcnMuYWRkKHZtKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnVuc3Vic2NyaWJlRGF0YUNoYW5naW5nID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcgKHZtKSB7XG4gIHJlbW92ZSh0aGlzLl9kYXRhTGlzdGVuZXJzLCB2bSk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS53YXRjaEkxOG5EYXRhID0gZnVuY3Rpb24gd2F0Y2hJMThuRGF0YSAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHRoaXMuX3ZtLiR3YXRjaCgnJGRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fZGF0YUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBlICYmIGUuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgeyBkZWVwOiB0cnVlIH0pXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS53YXRjaExvY2FsZSA9IGZ1bmN0aW9uIHdhdGNoTG9jYWxlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghdGhpcy5fc3luYyB8fCAhdGhpcy5fcm9vdCkgeyByZXR1cm4gbnVsbCB9XG4gIHZhciB0YXJnZXQgPSB0aGlzLl92bTtcbiAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4udm0uJHdhdGNoKCdsb2NhbGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgdGFyZ2V0LiRzZXQodGFyZ2V0LCAnbG9jYWxlJywgdmFsKTtcbiAgICB0YXJnZXQuJGZvcmNlVXBkYXRlKCk7XG4gIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5vbkNvbXBvbmVudEluc3RhbmNlQ3JlYXRlZCA9IGZ1bmN0aW9uIG9uQ29tcG9uZW50SW5zdGFuY2VDcmVhdGVkIChuZXdJMThuKSB7XG4gIGlmICh0aGlzLl9jb21wb25lbnRJbnN0YW5jZUNyZWF0ZWRMaXN0ZW5lcikge1xuICAgIHRoaXMuX2NvbXBvbmVudEluc3RhbmNlQ3JlYXRlZExpc3RlbmVyKG5ld0kxOG4sIHRoaXMpO1xuICB9XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMudm0uZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdm0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm1lc3NhZ2VzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvb3NlQ2xvbmUodGhpcy5fZ2V0TWVzc2FnZXMoKSkgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5kYXRlVGltZUZvcm1hdHMuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9vc2VDbG9uZSh0aGlzLl9nZXREYXRlVGltZUZvcm1hdHMoKSkgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5udW1iZXJGb3JtYXRzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvb3NlQ2xvbmUodGhpcy5fZ2V0TnVtYmVyRm9ybWF0cygpKSB9O1xucHJvdG90eXBlQWNjZXNzb3JzLmF2YWlsYWJsZUxvY2FsZXMuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmtleXModGhpcy5tZXNzYWdlcykuc29ydCgpIH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5sb2NhbGUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdm0ubG9jYWxlIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMubG9jYWxlLnNldCA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bSwgJ2xvY2FsZScsIGxvY2FsZSk7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZmFsbGJhY2tMb2NhbGUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdm0uZmFsbGJhY2tMb2NhbGUgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5mYWxsYmFja0xvY2FsZS5zZXQgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gIHRoaXMuX2xvY2FsZUNoYWluQ2FjaGUgPSB7fTtcbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bSwgJ2ZhbGxiYWNrTG9jYWxlJywgbG9jYWxlKTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5mb3JtYXRGYWxsYmFja01lc3NhZ2VzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2Zvcm1hdEZhbGxiYWNrTWVzc2FnZXMgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5mb3JtYXRGYWxsYmFja01lc3NhZ2VzLnNldCA9IGZ1bmN0aW9uIChmYWxsYmFjaykgeyB0aGlzLl9mb3JtYXRGYWxsYmFja01lc3NhZ2VzID0gZmFsbGJhY2s7IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5taXNzaW5nLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21pc3NpbmcgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5taXNzaW5nLnNldCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7IHRoaXMuX21pc3NpbmcgPSBoYW5kbGVyOyB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZm9ybWF0dGVyLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2Zvcm1hdHRlciB9O1xucHJvdG90eXBlQWNjZXNzb3JzLmZvcm1hdHRlci5zZXQgPSBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7IHRoaXMuX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjsgfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnNpbGVudFRyYW5zbGF0aW9uV2Fybi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4gfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5zaWxlbnRUcmFuc2xhdGlvbldhcm4uc2V0ID0gZnVuY3Rpb24gKHNpbGVudCkgeyB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4gPSBzaWxlbnQ7IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zaWxlbnRGYWxsYmFja1dhcm4uZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMuc2lsZW50RmFsbGJhY2tXYXJuLnNldCA9IGZ1bmN0aW9uIChzaWxlbnQpIHsgdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuID0gc2lsZW50OyB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMucHJlc2VydmVEaXJlY3RpdmVDb250ZW50LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ByZXNlcnZlRGlyZWN0aXZlQ29udGVudCB9O1xucHJvdG90eXBlQWNjZXNzb3JzLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudC5zZXQgPSBmdW5jdGlvbiAocHJlc2VydmUpIHsgdGhpcy5fcHJlc2VydmVEaXJlY3RpdmVDb250ZW50ID0gcHJlc2VydmU7IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy53YXJuSHRtbEluTWVzc2FnZS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSB9O1xucHJvdG90eXBlQWNjZXNzb3JzLndhcm5IdG1sSW5NZXNzYWdlLnNldCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcmdMZXZlbCA9IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlO1xuICB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9IGxldmVsO1xuICBpZiAob3JnTGV2ZWwgIT09IGxldmVsICYmIChsZXZlbCA9PT0gJ3dhcm4nIHx8IGxldmVsID09PSAnZXJyb3InKSkge1xuICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuX2dldE1lc3NhZ2VzKCk7XG4gICAgT2JqZWN0LmtleXMobWVzc2FnZXMpLmZvckVhY2goZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgdGhpcyQxLl9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCB0aGlzJDEuX3dhcm5IdG1sSW5NZXNzYWdlLCBtZXNzYWdlc1tsb2NhbGVdKTtcbiAgICB9KTtcbiAgfVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnBvc3RUcmFuc2xhdGlvbi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wb3N0VHJhbnNsYXRpb24gfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5wb3N0VHJhbnNsYXRpb24uc2V0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgdGhpcy5fcG9zdFRyYW5zbGF0aW9uID0gaGFuZGxlcjsgfTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2dldE1lc3NhZ2VzID0gZnVuY3Rpb24gX2dldE1lc3NhZ2VzICgpIHsgcmV0dXJuIHRoaXMuX3ZtLm1lc3NhZ2VzIH07XG5WdWVJMThuLnByb3RvdHlwZS5fZ2V0RGF0ZVRpbWVGb3JtYXRzID0gZnVuY3Rpb24gX2dldERhdGVUaW1lRm9ybWF0cyAoKSB7IHJldHVybiB0aGlzLl92bS5kYXRlVGltZUZvcm1hdHMgfTtcblZ1ZUkxOG4ucHJvdG90eXBlLl9nZXROdW1iZXJGb3JtYXRzID0gZnVuY3Rpb24gX2dldE51bWJlckZvcm1hdHMgKCkgeyByZXR1cm4gdGhpcy5fdm0ubnVtYmVyRm9ybWF0cyB9O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fd2FybkRlZmF1bHQgPSBmdW5jdGlvbiBfd2FybkRlZmF1bHQgKGxvY2FsZSwga2V5LCByZXN1bHQsIHZtLCB2YWx1ZXMsIGludGVycG9sYXRlTW9kZSkge1xuICBpZiAoIWlzTnVsbChyZXN1bHQpKSB7IHJldHVybiByZXN1bHQgfVxuICBpZiAodGhpcy5fbWlzc2luZykge1xuICAgIHZhciBtaXNzaW5nUmV0ID0gdGhpcy5fbWlzc2luZy5hcHBseShudWxsLCBbbG9jYWxlLCBrZXksIHZtLCB2YWx1ZXNdKTtcbiAgICBpZiAoaXNTdHJpbmcobWlzc2luZ1JldCkpIHtcbiAgICAgIHJldHVybiBtaXNzaW5nUmV0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkNhbm5vdCB0cmFuc2xhdGUgdGhlIHZhbHVlIG9mIGtleXBhdGggJ1wiICsga2V5ICsgXCInLiBcIiArXG4gICAgICAgICdVc2UgdGhlIHZhbHVlIG9mIGtleXBhdGggYXMgZGVmYXVsdC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9mb3JtYXRGYWxsYmFja01lc3NhZ2VzKSB7XG4gICAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCB2YWx1ZXMpO1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXIoa2V5LCBpbnRlcnBvbGF0ZU1vZGUsIHBhcnNlZEFyZ3MucGFyYW1zLCBrZXkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGtleVxuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5faXNGYWxsYmFja1Jvb3QgPSBmdW5jdGlvbiBfaXNGYWxsYmFja1Jvb3QgKHZhbCkge1xuICByZXR1cm4gIXZhbCAmJiAhaXNOdWxsKHRoaXMuX3Jvb3QpICYmIHRoaXMuX2ZhbGxiYWNrUm9vdFxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2lzU2lsZW50RmFsbGJhY2tXYXJuID0gZnVuY3Rpb24gX2lzU2lsZW50RmFsbGJhY2tXYXJuIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3NpbGVudEZhbGxiYWNrV2FybiBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgID8gdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuLnRlc3Qoa2V5KVxuICAgIDogdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5faXNTaWxlbnRGYWxsYmFjayA9IGZ1bmN0aW9uIF9pc1NpbGVudEZhbGxiYWNrIChsb2NhbGUsIGtleSkge1xuICByZXR1cm4gdGhpcy5faXNTaWxlbnRGYWxsYmFja1dhcm4oa2V5KSAmJiAodGhpcy5faXNGYWxsYmFja1Jvb3QoKSB8fCBsb2NhbGUgIT09IHRoaXMuZmFsbGJhY2tMb2NhbGUpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4gPSBmdW5jdGlvbiBfaXNTaWxlbnRUcmFuc2xhdGlvbldhcm4gKGtleSkge1xuICByZXR1cm4gdGhpcy5fc2lsZW50VHJhbnNsYXRpb25XYXJuIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgPyB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4udGVzdChrZXkpXG4gICAgOiB0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm5cbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIF9pbnRlcnBvbGF0ZSAoXG4gIGxvY2FsZSxcbiAgbWVzc2FnZSxcbiAga2V5LFxuICBob3N0LFxuICBpbnRlcnBvbGF0ZU1vZGUsXG4gIHZhbHVlcyxcbiAgdmlzaXRlZExpbmtTdGFja1xuKSB7XG4gIGlmICghbWVzc2FnZSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgdmFyIHBhdGhSZXQgPSB0aGlzLl9wYXRoLmdldFBhdGhWYWx1ZShtZXNzYWdlLCBrZXkpO1xuICBpZiAoaXNBcnJheShwYXRoUmV0KSB8fCBpc1BsYWluT2JqZWN0KHBhdGhSZXQpKSB7IHJldHVybiBwYXRoUmV0IH1cblxuICB2YXIgcmV0O1xuICBpZiAoaXNOdWxsKHBhdGhSZXQpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXNQbGFpbk9iamVjdChtZXNzYWdlKSkge1xuICAgICAgcmV0ID0gbWVzc2FnZVtrZXldO1xuICAgICAgaWYgKCEoaXNTdHJpbmcocmV0KSB8fCBpc0Z1bmN0aW9uKHJldCkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrKGxvY2FsZSwga2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiVmFsdWUgb2Yga2V5ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBzdHJpbmcgb3IgZnVuY3Rpb24gIVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXNTdHJpbmcocGF0aFJldCkgfHwgaXNGdW5jdGlvbihwYXRoUmV0KSkge1xuICAgICAgcmV0ID0gcGF0aFJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2sobG9jYWxlLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oKFwiVmFsdWUgb2Yga2V5ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBzdHJpbmcgb3IgZnVuY3Rpb24hXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgbGlua3Mgd2l0aGluIHRoZSB0cmFuc2xhdGVkIHN0cmluZ1xuICBpZiAoaXNTdHJpbmcocmV0KSAmJiAocmV0LmluZGV4T2YoJ0A6JykgPj0gMCB8fCByZXQuaW5kZXhPZignQC4nKSA+PSAwKSkge1xuICAgIHJldCA9IHRoaXMuX2xpbmsobG9jYWxlLCBtZXNzYWdlLCByZXQsIGhvc3QsICdyYXcnLCB2YWx1ZXMsIHZpc2l0ZWRMaW5rU3RhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3JlbmRlcihyZXQsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzLCBrZXkpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fbGluayA9IGZ1bmN0aW9uIF9saW5rIChcbiAgbG9jYWxlLFxuICBtZXNzYWdlLFxuICBzdHIsXG4gIGhvc3QsXG4gIGludGVycG9sYXRlTW9kZSxcbiAgdmFsdWVzLFxuICB2aXNpdGVkTGlua1N0YWNrXG4pIHtcbiAgdmFyIHJldCA9IHN0cjtcblxuICAvLyBNYXRjaCBhbGwgdGhlIGxpbmtzIHdpdGhpbiB0aGUgbG9jYWxcbiAgLy8gV2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UgZWFjaCBvZlxuICAvLyB0aGVtIHdpdGggaXRzIHRyYW5zbGF0aW9uXG4gIHZhciBtYXRjaGVzID0gcmV0Lm1hdGNoKGxpbmtLZXlNYXRjaGVyKTtcbiAgZm9yICh2YXIgaWR4IGluIG1hdGNoZXMpIHtcbiAgICAvLyBpZSBjb21wYXRpYmxlOiBmaWx0ZXIgY3VzdG9tIGFycmF5XG4gICAgLy8gcHJvdG90eXBlIG1ldGhvZFxuICAgIGlmICghbWF0Y2hlcy5oYXNPd25Qcm9wZXJ0eShpZHgpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICB2YXIgbGluayA9IG1hdGNoZXNbaWR4XTtcbiAgICB2YXIgbGlua0tleVByZWZpeE1hdGNoZXMgPSBsaW5rLm1hdGNoKGxpbmtLZXlQcmVmaXhNYXRjaGVyKTtcbiAgICB2YXIgbGlua1ByZWZpeCA9IGxpbmtLZXlQcmVmaXhNYXRjaGVzWzBdO1xuICAgICAgdmFyIGZvcm1hdHRlck5hbWUgPSBsaW5rS2V5UHJlZml4TWF0Y2hlc1sxXTtcblxuICAgIC8vIFJlbW92ZSB0aGUgbGVhZGluZyBAOiwgQC5jYXNlOiBhbmQgdGhlIGJyYWNrZXRzXG4gICAgdmFyIGxpbmtQbGFjZWhvbGRlciA9IGxpbmsucmVwbGFjZShsaW5rUHJlZml4LCAnJykucmVwbGFjZShicmFja2V0c01hdGNoZXIsICcnKTtcblxuICAgIGlmIChpbmNsdWRlcyh2aXNpdGVkTGlua1N0YWNrLCBsaW5rUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKChcIkNpcmN1bGFyIHJlZmVyZW5jZSBmb3VuZC4gXFxcIlwiICsgbGluayArIFwiXFxcIiBpcyBhbHJlYWR5IHZpc2l0ZWQgaW4gdGhlIGNoYWluIG9mIFwiICsgKHZpc2l0ZWRMaW5rU3RhY2sucmV2ZXJzZSgpLmpvaW4oJyA8LSAnKSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRcbiAgICB9XG4gICAgdmlzaXRlZExpbmtTdGFjay5wdXNoKGxpbmtQbGFjZWhvbGRlcik7XG5cbiAgICAvLyBUcmFuc2xhdGUgdGhlIGxpbmtcbiAgICB2YXIgdHJhbnNsYXRlZCA9IHRoaXMuX2ludGVycG9sYXRlKFxuICAgICAgbG9jYWxlLCBtZXNzYWdlLCBsaW5rUGxhY2Vob2xkZXIsIGhvc3QsXG4gICAgICBpbnRlcnBvbGF0ZU1vZGUgPT09ICdyYXcnID8gJ3N0cmluZycgOiBpbnRlcnBvbGF0ZU1vZGUsXG4gICAgICBpbnRlcnBvbGF0ZU1vZGUgPT09ICdyYXcnID8gdW5kZWZpbmVkIDogdmFsdWVzLFxuICAgICAgdmlzaXRlZExpbmtTdGFja1xuICAgICk7XG5cbiAgICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QodHJhbnNsYXRlZCkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihsaW5rUGxhY2Vob2xkZXIpKSB7XG4gICAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIHRyYW5zbGF0ZSB0aGUgbGluayBwbGFjZWhvbGRlciAnXCIgKyBsaW5rUGxhY2Vob2xkZXIgKyBcIicgd2l0aCByb290IGxvY2FsZS5cIikpO1xuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgICB2YXIgcm9vdCA9IHRoaXMuX3Jvb3QuJGkxOG47XG4gICAgICB0cmFuc2xhdGVkID0gcm9vdC5fdHJhbnNsYXRlKFxuICAgICAgICByb290Ll9nZXRNZXNzYWdlcygpLCByb290LmxvY2FsZSwgcm9vdC5mYWxsYmFja0xvY2FsZSxcbiAgICAgICAgbGlua1BsYWNlaG9sZGVyLCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIHZhbHVlc1xuICAgICAgKTtcbiAgICB9XG4gICAgdHJhbnNsYXRlZCA9IHRoaXMuX3dhcm5EZWZhdWx0KFxuICAgICAgbG9jYWxlLCBsaW5rUGxhY2Vob2xkZXIsIHRyYW5zbGF0ZWQsIGhvc3QsXG4gICAgICBpc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbdmFsdWVzXSxcbiAgICAgIGludGVycG9sYXRlTW9kZVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5fbW9kaWZpZXJzLmhhc093blByb3BlcnR5KGZvcm1hdHRlck5hbWUpKSB7XG4gICAgICB0cmFuc2xhdGVkID0gdGhpcy5fbW9kaWZpZXJzW2Zvcm1hdHRlck5hbWVdKHRyYW5zbGF0ZWQpO1xuICAgIH0gZWxzZSBpZiAoZGVmYXVsdE1vZGlmaWVycy5oYXNPd25Qcm9wZXJ0eShmb3JtYXR0ZXJOYW1lKSkge1xuICAgICAgdHJhbnNsYXRlZCA9IGRlZmF1bHRNb2RpZmllcnNbZm9ybWF0dGVyTmFtZV0odHJhbnNsYXRlZCk7XG4gICAgfVxuXG4gICAgdmlzaXRlZExpbmtTdGFjay5wb3AoKTtcblxuICAgIC8vIFJlcGxhY2UgdGhlIGxpbmsgd2l0aCB0aGUgdHJhbnNsYXRlZFxuICAgIHJldCA9ICF0cmFuc2xhdGVkID8gcmV0IDogcmV0LnJlcGxhY2UobGluaywgdHJhbnNsYXRlZCk7XG4gIH1cblxuICByZXR1cm4gcmV0XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fY3JlYXRlTWVzc2FnZUNvbnRleHQgPSBmdW5jdGlvbiBfY3JlYXRlTWVzc2FnZUNvbnRleHQgKHZhbHVlcykge1xuICB2YXIgX2xpc3QgPSBpc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbXTtcbiAgdmFyIF9uYW1lZCA9IGlzT2JqZWN0KHZhbHVlcykgPyB2YWx1ZXMgOiB7fTtcbiAgdmFyIGxpc3QgPSBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIF9saXN0W2luZGV4XTsgfTtcbiAgdmFyIG5hbWVkID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gX25hbWVkW2tleV07IH07XG4gIHJldHVybiB7XG4gICAgbGlzdDogbGlzdCxcbiAgICBuYW1lZDogbmFtZWRcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uIF9yZW5kZXIgKG1lc3NhZ2UsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzLCBwYXRoKSB7XG4gIGlmIChpc0Z1bmN0aW9uKG1lc3NhZ2UpKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UodGhpcy5fY3JlYXRlTWVzc2FnZUNvbnRleHQodmFsdWVzKSlcbiAgfVxuXG4gIHZhciByZXQgPSB0aGlzLl9mb3JtYXR0ZXIuaW50ZXJwb2xhdGUobWVzc2FnZSwgdmFsdWVzLCBwYXRoKTtcblxuICAvLyBJZiB0aGUgY3VzdG9tIGZvcm1hdHRlciByZWZ1c2VzIHRvIHdvcmsgLSBhcHBseSB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKCFyZXQpIHtcbiAgICByZXQgPSBkZWZhdWx0Rm9ybWF0dGVyLmludGVycG9sYXRlKG1lc3NhZ2UsIHZhbHVlcywgcGF0aCk7XG4gIH1cblxuICAvLyBpZiBpbnRlcnBvbGF0ZU1vZGUgaXMgKipub3QqKiAnc3RyaW5nJyAoJ3JvdycpLFxuICAvLyByZXR1cm4gdGhlIGNvbXBpbGVkIGRhdGEgKGUuZy4gWydmb28nLCBWTm9kZSwgJ2JhciddKSB3aXRoIGZvcm1hdHRlclxuICByZXR1cm4gaW50ZXJwb2xhdGVNb2RlID09PSAnc3RyaW5nJyAmJiAhaXNTdHJpbmcocmV0KSA/IHJldC5qb2luKCcnKSA6IHJldFxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2FwcGVuZEl0ZW1Ub0NoYWluID0gZnVuY3Rpb24gX2FwcGVuZEl0ZW1Ub0NoYWluIChjaGFpbiwgaXRlbSwgYmxvY2tzKSB7XG4gIHZhciBmb2xsb3cgPSBmYWxzZTtcbiAgaWYgKCFpbmNsdWRlcyhjaGFpbiwgaXRlbSkpIHtcbiAgICBmb2xsb3cgPSB0cnVlO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICBmb2xsb3cgPSBpdGVtW2l0ZW0ubGVuZ3RoIC0gMV0gIT09ICchJztcbiAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoLyEvZywgJycpO1xuICAgICAgY2hhaW4ucHVzaChpdGVtKTtcbiAgICAgIGlmIChibG9ja3MgJiYgYmxvY2tzW2l0ZW1dKSB7XG4gICAgICAgIGZvbGxvdyA9IGJsb2Nrc1tpdGVtXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvbGxvd1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2FwcGVuZExvY2FsZVRvQ2hhaW4gPSBmdW5jdGlvbiBfYXBwZW5kTG9jYWxlVG9DaGFpbiAoY2hhaW4sIGxvY2FsZSwgYmxvY2tzKSB7XG4gIHZhciBmb2xsb3c7XG4gIHZhciB0b2tlbnMgPSBsb2NhbGUuc3BsaXQoJy0nKTtcbiAgZG8ge1xuICAgIHZhciBpdGVtID0gdG9rZW5zLmpvaW4oJy0nKTtcbiAgICBmb2xsb3cgPSB0aGlzLl9hcHBlbmRJdGVtVG9DaGFpbihjaGFpbiwgaXRlbSwgYmxvY2tzKTtcbiAgICB0b2tlbnMuc3BsaWNlKC0xLCAxKTtcbiAgfSB3aGlsZSAodG9rZW5zLmxlbmd0aCAmJiAoZm9sbG93ID09PSB0cnVlKSlcbiAgcmV0dXJuIGZvbGxvd1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2FwcGVuZEJsb2NrVG9DaGFpbiA9IGZ1bmN0aW9uIF9hcHBlbmRCbG9ja1RvQ2hhaW4gKGNoYWluLCBibG9jaywgYmxvY2tzKSB7XG4gIHZhciBmb2xsb3cgPSB0cnVlO1xuICBmb3IgKHZhciBpID0gMDsgKGkgPCBibG9jay5sZW5ndGgpICYmIChpc0Jvb2xlYW4oZm9sbG93KSk7IGkrKykge1xuICAgIHZhciBsb2NhbGUgPSBibG9ja1tpXTtcbiAgICBpZiAoaXNTdHJpbmcobG9jYWxlKSkge1xuICAgICAgZm9sbG93ID0gdGhpcy5fYXBwZW5kTG9jYWxlVG9DaGFpbihjaGFpbiwgbG9jYWxlLCBibG9ja3MpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9sbG93XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fZ2V0TG9jYWxlQ2hhaW4gPSBmdW5jdGlvbiBfZ2V0TG9jYWxlQ2hhaW4gKHN0YXJ0LCBmYWxsYmFja0xvY2FsZSkge1xuICBpZiAoc3RhcnQgPT09ICcnKSB7IHJldHVybiBbXSB9XG5cbiAgaWYgKCF0aGlzLl9sb2NhbGVDaGFpbkNhY2hlKSB7XG4gICAgdGhpcy5fbG9jYWxlQ2hhaW5DYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIGNoYWluID0gdGhpcy5fbG9jYWxlQ2hhaW5DYWNoZVtzdGFydF07XG4gIGlmICghY2hhaW4pIHtcbiAgICBpZiAoIWZhbGxiYWNrTG9jYWxlKSB7XG4gICAgICBmYWxsYmFja0xvY2FsZSA9IHRoaXMuZmFsbGJhY2tMb2NhbGU7XG4gICAgfVxuICAgIGNoYWluID0gW107XG5cbiAgICAvLyBmaXJzdCBibG9jayBkZWZpbmVkIGJ5IHN0YXJ0XG4gICAgdmFyIGJsb2NrID0gW3N0YXJ0XTtcblxuICAgIC8vIHdoaWxlIGFueSBpbnRlcnZlbmluZyBibG9jayBmb3VuZFxuICAgIHdoaWxlIChpc0FycmF5KGJsb2NrKSkge1xuICAgICAgYmxvY2sgPSB0aGlzLl9hcHBlbmRCbG9ja1RvQ2hhaW4oXG4gICAgICAgIGNoYWluLFxuICAgICAgICBibG9jayxcbiAgICAgICAgZmFsbGJhY2tMb2NhbGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gbGFzdCBibG9jayBkZWZpbmVkIGJ5IGRlZmF1bHRcbiAgICB2YXIgZGVmYXVsdHM7XG4gICAgaWYgKGlzQXJyYXkoZmFsbGJhY2tMb2NhbGUpKSB7XG4gICAgICBkZWZhdWx0cyA9IGZhbGxiYWNrTG9jYWxlO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZmFsbGJhY2tMb2NhbGUpKSB7XG4gICAgICAvKiAkRmxvd0ZpeE1lICovXG4gICAgICBpZiAoZmFsbGJhY2tMb2NhbGVbJ2RlZmF1bHQnXSkge1xuICAgICAgICBkZWZhdWx0cyA9IGZhbGxiYWNrTG9jYWxlWydkZWZhdWx0J107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZhdWx0cyA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmF1bHRzID0gZmFsbGJhY2tMb2NhbGU7XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBkZWZhdWx0cyB0byBhcnJheVxuICAgIGlmIChpc1N0cmluZyhkZWZhdWx0cykpIHtcbiAgICAgIGJsb2NrID0gW2RlZmF1bHRzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmxvY2sgPSBkZWZhdWx0cztcbiAgICB9XG4gICAgaWYgKGJsb2NrKSB7XG4gICAgICB0aGlzLl9hcHBlbmRCbG9ja1RvQ2hhaW4oXG4gICAgICAgIGNoYWluLFxuICAgICAgICBibG9jayxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fbG9jYWxlQ2hhaW5DYWNoZVtzdGFydF0gPSBjaGFpbjtcbiAgfVxuICByZXR1cm4gY2hhaW5cbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl90cmFuc2xhdGUgPSBmdW5jdGlvbiBfdHJhbnNsYXRlIChcbiAgbWVzc2FnZXMsXG4gIGxvY2FsZSxcbiAgZmFsbGJhY2ssXG4gIGtleSxcbiAgaG9zdCxcbiAgaW50ZXJwb2xhdGVNb2RlLFxuICBhcmdzXG4pIHtcbiAgdmFyIGNoYWluID0gdGhpcy5fZ2V0TG9jYWxlQ2hhaW4obG9jYWxlLCBmYWxsYmFjayk7XG4gIHZhciByZXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3RlcCA9IGNoYWluW2ldO1xuICAgIHJlcyA9XG4gICAgICB0aGlzLl9pbnRlcnBvbGF0ZShzdGVwLCBtZXNzYWdlc1tzdGVwXSwga2V5LCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIGFyZ3MsIFtrZXldKTtcbiAgICBpZiAoIWlzTnVsbChyZXMpKSB7XG4gICAgICBpZiAoc3RlcCAhPT0gbG9jYWxlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkpIHtcbiAgICAgICAgd2FybigoXCJGYWxsIGJhY2sgdG8gdHJhbnNsYXRlIHRoZSBrZXlwYXRoICdcIiArIGtleSArIFwiJyB3aXRoICdcIiArIHN0ZXAgKyBcIicgbG9jYWxlLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fdCA9IGZ1bmN0aW9uIF90IChrZXksIF9sb2NhbGUsIG1lc3NhZ2VzLCBob3N0KSB7XG4gICAgdmFyIHJlZjtcblxuICAgIHZhciB2YWx1ZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDQ7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSB2YWx1ZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyA0IF07XG4gIGlmICgha2V5KSB7IHJldHVybiAnJyB9XG5cbiAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCB2YWx1ZXMpO1xuICBpZih0aGlzLl9lc2NhcGVQYXJhbWV0ZXJIdG1sKSB7XG4gICAgcGFyc2VkQXJncy5wYXJhbXMgPSBlc2NhcGVQYXJhbXMocGFyc2VkQXJncy5wYXJhbXMpO1xuICB9XG5cbiAgdmFyIGxvY2FsZSA9IHBhcnNlZEFyZ3MubG9jYWxlIHx8IF9sb2NhbGU7XG5cbiAgdmFyIHJldCA9IHRoaXMuX3RyYW5zbGF0ZShcbiAgICBtZXNzYWdlcywgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCBrZXksXG4gICAgaG9zdCwgJ3N0cmluZycsIHBhcnNlZEFyZ3MucGFyYW1zXG4gICk7XG4gIGlmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdChyZXQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkpIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIHRyYW5zbGF0ZSB0aGUga2V5cGF0aCAnXCIgKyBrZXkgKyBcIicgd2l0aCByb290IGxvY2FsZS5cIikpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgcmV0dXJuIChyZWYgPSB0aGlzLl9yb290KS4kdC5hcHBseShyZWYsIFsga2V5IF0uY29uY2F0KCB2YWx1ZXMgKSlcbiAgfSBlbHNlIHtcbiAgICByZXQgPSB0aGlzLl93YXJuRGVmYXVsdChsb2NhbGUsIGtleSwgcmV0LCBob3N0LCB2YWx1ZXMsICdzdHJpbmcnKTtcbiAgICBpZiAodGhpcy5fcG9zdFRyYW5zbGF0aW9uICYmIHJldCAhPT0gbnVsbCAmJiByZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0ID0gdGhpcy5fcG9zdFRyYW5zbGF0aW9uKHJldCwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS50ID0gZnVuY3Rpb24gdCAoa2V5KSB7XG4gICAgdmFyIHJlZjtcblxuICAgIHZhciB2YWx1ZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSB2YWx1ZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG4gIHJldHVybiAocmVmID0gdGhpcykuX3QuYXBwbHkocmVmLCBbIGtleSwgdGhpcy5sb2NhbGUsIHRoaXMuX2dldE1lc3NhZ2VzKCksIG51bGwgXS5jb25jYXQoIHZhbHVlcyApKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2kgPSBmdW5jdGlvbiBfaSAoa2V5LCBsb2NhbGUsIG1lc3NhZ2VzLCBob3N0LCB2YWx1ZXMpIHtcbiAgdmFyIHJldCA9XG4gICAgdGhpcy5fdHJhbnNsYXRlKG1lc3NhZ2VzLCBsb2NhbGUsIHRoaXMuZmFsbGJhY2tMb2NhbGUsIGtleSwgaG9zdCwgJ3JhdycsIHZhbHVlcyk7XG4gIGlmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdChyZXQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkpIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIGludGVycG9sYXRlIHRoZSBrZXlwYXRoICdcIiArIGtleSArIFwiJyB3aXRoIHJvb3QgbG9jYWxlLlwiKSk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fcm9vdCkgeyB0aHJvdyBFcnJvcigndW5leHBlY3RlZCBlcnJvcicpIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdC4kaTE4bi5pKGtleSwgbG9jYWxlLCB2YWx1ZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhcm5EZWZhdWx0KGxvY2FsZSwga2V5LCByZXQsIGhvc3QsIFt2YWx1ZXNdLCAncmF3JylcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuaSA9IGZ1bmN0aW9uIGkgKGtleSwgbG9jYWxlLCB2YWx1ZXMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgha2V5KSB7IHJldHVybiAnJyB9XG5cbiAgaWYgKCFpc1N0cmluZyhsb2NhbGUpKSB7XG4gICAgbG9jYWxlID0gdGhpcy5sb2NhbGU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5faShrZXksIGxvY2FsZSwgdGhpcy5fZ2V0TWVzc2FnZXMoKSwgbnVsbCwgdmFsdWVzKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3RjID0gZnVuY3Rpb24gX3RjIChcbiAga2V5LFxuICBfbG9jYWxlLFxuICBtZXNzYWdlcyxcbiAgaG9zdCxcbiAgY2hvaWNlXG4pIHtcbiAgICB2YXIgcmVmO1xuXG4gICAgdmFyIHZhbHVlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gNTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIHZhbHVlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDUgXTtcbiAgaWYgKCFrZXkpIHsgcmV0dXJuICcnIH1cbiAgaWYgKGNob2ljZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hvaWNlID0gMTtcbiAgfVxuXG4gIHZhciBwcmVkZWZpbmVkID0geyAnY291bnQnOiBjaG9pY2UsICduJzogY2hvaWNlIH07XG4gIHZhciBwYXJzZWRBcmdzID0gcGFyc2VBcmdzLmFwcGx5KHZvaWQgMCwgdmFsdWVzKTtcbiAgcGFyc2VkQXJncy5wYXJhbXMgPSBPYmplY3QuYXNzaWduKHByZWRlZmluZWQsIHBhcnNlZEFyZ3MucGFyYW1zKTtcbiAgdmFsdWVzID0gcGFyc2VkQXJncy5sb2NhbGUgPT09IG51bGwgPyBbcGFyc2VkQXJncy5wYXJhbXNdIDogW3BhcnNlZEFyZ3MubG9jYWxlLCBwYXJzZWRBcmdzLnBhcmFtc107XG4gIHJldHVybiB0aGlzLmZldGNoQ2hvaWNlKChyZWYgPSB0aGlzKS5fdC5hcHBseShyZWYsIFsga2V5LCBfbG9jYWxlLCBtZXNzYWdlcywgaG9zdCBdLmNvbmNhdCggdmFsdWVzICkpLCBjaG9pY2UpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5mZXRjaENob2ljZSA9IGZ1bmN0aW9uIGZldGNoQ2hvaWNlIChtZXNzYWdlLCBjaG9pY2UpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghbWVzc2FnZSB8fCAhaXNTdHJpbmcobWVzc2FnZSkpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgY2hvaWNlcyA9IG1lc3NhZ2Uuc3BsaXQoJ3wnKTtcblxuICBjaG9pY2UgPSB0aGlzLmdldENob2ljZUluZGV4KGNob2ljZSwgY2hvaWNlcy5sZW5ndGgpO1xuICBpZiAoIWNob2ljZXNbY2hvaWNlXSkgeyByZXR1cm4gbWVzc2FnZSB9XG4gIHJldHVybiBjaG9pY2VzW2Nob2ljZV0udHJpbSgpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS50YyA9IGZ1bmN0aW9uIHRjIChrZXksIGNob2ljZSkge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMiBdO1xuICByZXR1cm4gKHJlZiA9IHRoaXMpLl90Yy5hcHBseShyZWYsIFsga2V5LCB0aGlzLmxvY2FsZSwgdGhpcy5fZ2V0TWVzc2FnZXMoKSwgbnVsbCwgY2hvaWNlIF0uY29uY2F0KCB2YWx1ZXMgKSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl90ZSA9IGZ1bmN0aW9uIF90ZSAoa2V5LCBsb2NhbGUsIG1lc3NhZ2VzKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDM7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMyBdO1xuXG4gIHZhciBfbG9jYWxlID0gcGFyc2VBcmdzLmFwcGx5KHZvaWQgMCwgYXJncykubG9jYWxlIHx8IGxvY2FsZTtcbiAgcmV0dXJuIHRoaXMuX2V4aXN0KG1lc3NhZ2VzW19sb2NhbGVdLCBrZXkpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS50ZSA9IGZ1bmN0aW9uIHRlIChrZXksIGxvY2FsZSkge1xuICByZXR1cm4gdGhpcy5fdGUoa2V5LCB0aGlzLmxvY2FsZSwgdGhpcy5fZ2V0TWVzc2FnZXMoKSwgbG9jYWxlKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuZ2V0TG9jYWxlTWVzc2FnZSA9IGZ1bmN0aW9uIGdldExvY2FsZU1lc3NhZ2UgKGxvY2FsZSkge1xuICByZXR1cm4gbG9vc2VDbG9uZSh0aGlzLl92bS5tZXNzYWdlc1tsb2NhbGVdIHx8IHt9KVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuc2V0TG9jYWxlTWVzc2FnZSA9IGZ1bmN0aW9uIHNldExvY2FsZU1lc3NhZ2UgKGxvY2FsZSwgbWVzc2FnZSkge1xuICBpZiAodGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPT09ICd3YXJuJyB8fCB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ2Vycm9yJykge1xuICAgIHRoaXMuX2NoZWNrTG9jYWxlTWVzc2FnZShsb2NhbGUsIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlLCBtZXNzYWdlKTtcbiAgfVxuICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm1lc3NhZ2VzLCBsb2NhbGUsIG1lc3NhZ2UpO1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUubWVyZ2VMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gbWVyZ2VMb2NhbGVNZXNzYWdlIChsb2NhbGUsIG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnd2FybicgfHwgdGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPT09ICdlcnJvcicpIHtcbiAgICB0aGlzLl9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSwgbWVzc2FnZSk7XG4gIH1cbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bS5tZXNzYWdlcywgbG9jYWxlLCBtZXJnZShcbiAgICB0eXBlb2YgdGhpcy5fdm0ubWVzc2FnZXNbbG9jYWxlXSAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LmtleXModGhpcy5fdm0ubWVzc2FnZXNbbG9jYWxlXSkubGVuZ3RoXG4gICAgICA/IHRoaXMuX3ZtLm1lc3NhZ2VzW2xvY2FsZV1cbiAgICAgIDoge30sXG4gICAgbWVzc2FnZVxuICApKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmdldERhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gZ2V0RGF0ZVRpbWVGb3JtYXQgKGxvY2FsZSkge1xuICByZXR1cm4gbG9vc2VDbG9uZSh0aGlzLl92bS5kYXRlVGltZUZvcm1hdHNbbG9jYWxlXSB8fCB7fSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnNldERhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gc2V0RGF0ZVRpbWVGb3JtYXQgKGxvY2FsZSwgZm9ybWF0KSB7XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0uZGF0ZVRpbWVGb3JtYXRzLCBsb2NhbGUsIGZvcm1hdCk7XG4gIHRoaXMuX2NsZWFyRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBmb3JtYXQpO1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUubWVyZ2VEYXRlVGltZUZvcm1hdCA9IGZ1bmN0aW9uIG1lcmdlRGF0ZVRpbWVGb3JtYXQgKGxvY2FsZSwgZm9ybWF0KSB7XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0uZGF0ZVRpbWVGb3JtYXRzLCBsb2NhbGUsIG1lcmdlKHRoaXMuX3ZtLmRhdGVUaW1lRm9ybWF0c1tsb2NhbGVdIHx8IHt9LCBmb3JtYXQpKTtcbiAgdGhpcy5fY2xlYXJEYXRlVGltZUZvcm1hdChsb2NhbGUsIGZvcm1hdCk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fY2xlYXJEYXRlVGltZUZvcm1hdCA9IGZ1bmN0aW9uIF9jbGVhckRhdGVUaW1lRm9ybWF0IChsb2NhbGUsIGZvcm1hdCkge1xuICBmb3IgKHZhciBrZXkgaW4gZm9ybWF0KSB7XG4gICAgdmFyIGlkID0gbG9jYWxlICsgXCJfX1wiICsga2V5O1xuXG4gICAgaWYgKCF0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdO1xuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fbG9jYWxpemVEYXRlVGltZSA9IGZ1bmN0aW9uIF9sb2NhbGl6ZURhdGVUaW1lIChcbiAgdmFsdWUsXG4gIGxvY2FsZSxcbiAgZmFsbGJhY2ssXG4gIGRhdGVUaW1lRm9ybWF0cyxcbiAga2V5XG4pIHtcbiAgdmFyIF9sb2NhbGUgPSBsb2NhbGU7XG4gIHZhciBmb3JtYXRzID0gZGF0ZVRpbWVGb3JtYXRzW19sb2NhbGVdO1xuXG4gIHZhciBjaGFpbiA9IHRoaXMuX2dldExvY2FsZUNoYWluKGxvY2FsZSwgZmFsbGJhY2spO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYWluLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBfbG9jYWxlO1xuICAgIHZhciBzdGVwID0gY2hhaW5baV07XG4gICAgZm9ybWF0cyA9IGRhdGVUaW1lRm9ybWF0c1tzdGVwXTtcbiAgICBfbG9jYWxlID0gc3RlcDtcbiAgICAvLyBmYWxsYmFjayBsb2NhbGVcbiAgICBpZiAoaXNOdWxsKGZvcm1hdHMpIHx8IGlzTnVsbChmb3JtYXRzW2tleV0pKSB7XG4gICAgICBpZiAoc3RlcCAhPT0gbG9jYWxlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX2lzU2lsZW50VHJhbnNsYXRpb25XYXJuKGtleSkgJiYgIXRoaXMuX2lzU2lsZW50RmFsbGJhY2tXYXJuKGtleSkpIHtcbiAgICAgICAgd2FybigoXCJGYWxsIGJhY2sgdG8gJ1wiICsgc3RlcCArIFwiJyBkYXRldGltZSBmb3JtYXRzIGZyb20gJ1wiICsgY3VycmVudCArIFwiJyBkYXRldGltZSBmb3JtYXRzLlwiKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkge1xuICAgIHJldHVybiBudWxsXG4gIH0gZWxzZSB7XG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNba2V5XTtcbiAgICB2YXIgaWQgPSBfbG9jYWxlICsgXCJfX1wiICsga2V5O1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICBmb3JtYXR0ZXIgPSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoX2xvY2FsZSwgZm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQodmFsdWUpXG4gIH1cbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9kID0gZnVuY3Rpb24gX2QgKHZhbHVlLCBsb2NhbGUsIGtleSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIVZ1ZUkxOG4uYXZhaWxhYmlsaXRpZXMuZGF0ZVRpbWVGb3JtYXQpIHtcbiAgICB3YXJuKCdDYW5ub3QgZm9ybWF0IGEgRGF0ZSB2YWx1ZSBkdWUgdG8gbm90IHN1cHBvcnRlZCBJbnRsLkRhdGVUaW1lRm9ybWF0LicpO1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlKS5mb3JtYXQodmFsdWUpXG4gIH1cblxuICB2YXIgcmV0ID1cbiAgICB0aGlzLl9sb2NhbGl6ZURhdGVUaW1lKHZhbHVlLCBsb2NhbGUsIHRoaXMuZmFsbGJhY2tMb2NhbGUsIHRoaXMuX2dldERhdGVUaW1lRm9ybWF0cygpLCBrZXkpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrV2FybihrZXkpKSB7XG4gICAgICB3YXJuKChcIkZhbGwgYmFjayB0byBkYXRldGltZSBsb2NhbGl6YXRpb24gb2Ygcm9vdDoga2V5ICdcIiArIGtleSArIFwiJy5cIikpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4uZCh2YWx1ZSwga2V5LCBsb2NhbGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldCB8fCAnJ1xuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5kID0gZnVuY3Rpb24gZCAodmFsdWUpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICB2YXIga2V5ID0gbnVsbDtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoaXNTdHJpbmcoYXJnc1swXSkpIHtcbiAgICAgIGtleSA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChhcmdzWzBdKSkge1xuICAgICAgaWYgKGFyZ3NbMF0ubG9jYWxlKSB7XG4gICAgICAgIGxvY2FsZSA9IGFyZ3NbMF0ubG9jYWxlO1xuICAgICAgfVxuICAgICAgaWYgKGFyZ3NbMF0ua2V5KSB7XG4gICAgICAgIGtleSA9IGFyZ3NbMF0ua2V5O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgIGlmIChpc1N0cmluZyhhcmdzWzBdKSkge1xuICAgICAga2V5ID0gYXJnc1swXTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKGFyZ3NbMV0pKSB7XG4gICAgICBsb2NhbGUgPSBhcmdzWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLl9kKHZhbHVlLCBsb2NhbGUsIGtleSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmdldE51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIGdldE51bWJlckZvcm1hdCAobG9jYWxlKSB7XG4gIHJldHVybiBsb29zZUNsb25lKHRoaXMuX3ZtLm51bWJlckZvcm1hdHNbbG9jYWxlXSB8fCB7fSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnNldE51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIHNldE51bWJlckZvcm1hdCAobG9jYWxlLCBmb3JtYXQpIHtcbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bS5udW1iZXJGb3JtYXRzLCBsb2NhbGUsIGZvcm1hdCk7XG4gIHRoaXMuX2NsZWFyTnVtYmVyRm9ybWF0KGxvY2FsZSwgZm9ybWF0KTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLm1lcmdlTnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24gbWVyZ2VOdW1iZXJGb3JtYXQgKGxvY2FsZSwgZm9ybWF0KSB7XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0ubnVtYmVyRm9ybWF0cywgbG9jYWxlLCBtZXJnZSh0aGlzLl92bS5udW1iZXJGb3JtYXRzW2xvY2FsZV0gfHwge30sIGZvcm1hdCkpO1xuICB0aGlzLl9jbGVhck51bWJlckZvcm1hdChsb2NhbGUsIGZvcm1hdCk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fY2xlYXJOdW1iZXJGb3JtYXQgPSBmdW5jdGlvbiBfY2xlYXJOdW1iZXJGb3JtYXQgKGxvY2FsZSwgZm9ybWF0KSB7XG4gIGZvciAodmFyIGtleSBpbiBmb3JtYXQpIHtcbiAgICB2YXIgaWQgPSBsb2NhbGUgKyBcIl9fXCIgKyBrZXk7XG5cbiAgICBpZiAoIXRoaXMuX251bWJlckZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLl9udW1iZXJGb3JtYXR0ZXJzW2lkXTtcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2dldE51bWJlckZvcm1hdHRlciA9IGZ1bmN0aW9uIF9nZXROdW1iZXJGb3JtYXR0ZXIgKFxuICB2YWx1ZSxcbiAgbG9jYWxlLFxuICBmYWxsYmFjayxcbiAgbnVtYmVyRm9ybWF0cyxcbiAga2V5LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIF9sb2NhbGUgPSBsb2NhbGU7XG4gIHZhciBmb3JtYXRzID0gbnVtYmVyRm9ybWF0c1tfbG9jYWxlXTtcblxuICB2YXIgY2hhaW4gPSB0aGlzLl9nZXRMb2NhbGVDaGFpbihsb2NhbGUsIGZhbGxiYWNrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFpbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdXJyZW50ID0gX2xvY2FsZTtcbiAgICB2YXIgc3RlcCA9IGNoYWluW2ldO1xuICAgIGZvcm1hdHMgPSBudW1iZXJGb3JtYXRzW3N0ZXBdO1xuICAgIF9sb2NhbGUgPSBzdGVwO1xuICAgIC8vIGZhbGxiYWNrIGxvY2FsZVxuICAgIGlmIChpc051bGwoZm9ybWF0cykgfHwgaXNOdWxsKGZvcm1hdHNba2V5XSkpIHtcbiAgICAgIGlmIChzdGVwICE9PSBsb2NhbGUgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5faXNTaWxlbnRUcmFuc2xhdGlvbldhcm4oa2V5KSAmJiAhdGhpcy5faXNTaWxlbnRGYWxsYmFja1dhcm4oa2V5KSkge1xuICAgICAgICB3YXJuKChcIkZhbGwgYmFjayB0byAnXCIgKyBzdGVwICsgXCInIG51bWJlciBmb3JtYXRzIGZyb20gJ1wiICsgY3VycmVudCArIFwiJyBudW1iZXIgZm9ybWF0cy5cIikpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc051bGwoZm9ybWF0cykgfHwgaXNOdWxsKGZvcm1hdHNba2V5XSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9IGVsc2Uge1xuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzW2tleV07XG5cbiAgICB2YXIgZm9ybWF0dGVyO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAvLyBJZiBvcHRpb25zIHNwZWNpZmllZCAtIGNyZWF0ZSBvbmUgdGltZSBudW1iZXIgZm9ybWF0dGVyXG4gICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoX2xvY2FsZSwgT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0LCBvcHRpb25zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpZCA9IF9sb2NhbGUgKyBcIl9fXCIgKyBrZXk7XG4gICAgICBmb3JtYXR0ZXIgPSB0aGlzLl9udW1iZXJGb3JtYXR0ZXJzW2lkXTtcbiAgICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IHRoaXMuX251bWJlckZvcm1hdHRlcnNbaWRdID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KF9sb2NhbGUsIGZvcm1hdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXJcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiBfbiAodmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIVZ1ZUkxOG4uYXZhaWxhYmlsaXRpZXMubnVtYmVyRm9ybWF0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oJ0Nhbm5vdCBmb3JtYXQgYSBOdW1iZXIgdmFsdWUgZHVlIHRvIG5vdCBzdXBwb3J0ZWQgSW50bC5OdW1iZXJGb3JtYXQuJyk7XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFrZXkpIHtcbiAgICB2YXIgbmYgPSAhb3B0aW9ucyA/IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUpIDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5mLmZvcm1hdCh2YWx1ZSlcbiAgfVxuXG4gIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9nZXROdW1iZXJGb3JtYXR0ZXIodmFsdWUsIGxvY2FsZSwgdGhpcy5mYWxsYmFja0xvY2FsZSwgdGhpcy5fZ2V0TnVtYmVyRm9ybWF0cygpLCBrZXksIG9wdGlvbnMpO1xuICB2YXIgcmV0ID0gZm9ybWF0dGVyICYmIGZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpICYmICF0aGlzLl9pc1NpbGVudEZhbGxiYWNrV2FybihrZXkpKSB7XG4gICAgICB3YXJuKChcIkZhbGwgYmFjayB0byBudW1iZXIgbG9jYWxpemF0aW9uIG9mIHJvb3Q6IGtleSAnXCIgKyBrZXkgKyBcIicuXCIpKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0aGlzLl9yb290KSB7IHRocm93IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yJykgfVxuICAgIHJldHVybiB0aGlzLl9yb290LiRpMThuLm4odmFsdWUsIE9iamVjdC5hc3NpZ24oe30sIHsga2V5OiBrZXksIGxvY2FsZTogbG9jYWxlIH0sIG9wdGlvbnMpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXQgfHwgJydcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUubiA9IGZ1bmN0aW9uIG4gKHZhbHVlKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciBvcHRpb25zID0gbnVsbDtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoaXNTdHJpbmcoYXJnc1swXSkpIHtcbiAgICAgIGtleSA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChhcmdzWzBdKSkge1xuICAgICAgaWYgKGFyZ3NbMF0ubG9jYWxlKSB7XG4gICAgICAgIGxvY2FsZSA9IGFyZ3NbMF0ubG9jYWxlO1xuICAgICAgfVxuICAgICAgaWYgKGFyZ3NbMF0ua2V5KSB7XG4gICAgICAgIGtleSA9IGFyZ3NbMF0ua2V5O1xuICAgICAgfVxuXG4gICAgICAvLyBGaWx0ZXIgb3V0IG51bWJlciBmb3JtYXQgb3B0aW9ucyBvbmx5XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmtleXMoYXJnc1swXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICAgIHZhciBvYmo7XG5cbiAgICAgICAgaWYgKGluY2x1ZGVzKG51bWJlckZvcm1hdEtleXMsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAoIG9iaiA9IHt9LCBvYmpba2V5XSA9IGFyZ3NbMF1ba2V5XSwgb2JqICkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgbnVsbCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgaWYgKGlzU3RyaW5nKGFyZ3NbMF0pKSB7XG4gICAgICBrZXkgPSBhcmdzWzBdO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcoYXJnc1sxXSkpIHtcbiAgICAgIGxvY2FsZSA9IGFyZ3NbMV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXMuX24odmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX250cCA9IGZ1bmN0aW9uIF9udHAgKHZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFWdWVJMThuLmF2YWlsYWJpbGl0aWVzLm51bWJlckZvcm1hdCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKCdDYW5ub3QgZm9ybWF0IHRvIHBhcnRzIGEgTnVtYmVyIHZhbHVlIGR1ZSB0byBub3Qgc3VwcG9ydGVkIEludGwuTnVtYmVyRm9ybWF0LicpO1xuICAgIH1cbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGlmICgha2V5KSB7XG4gICAgdmFyIG5mID0gIW9wdGlvbnMgPyBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlKSA6IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZi5mb3JtYXRUb1BhcnRzKHZhbHVlKVxuICB9XG5cbiAgdmFyIGZvcm1hdHRlciA9IHRoaXMuX2dldE51bWJlckZvcm1hdHRlcih2YWx1ZSwgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCB0aGlzLl9nZXROdW1iZXJGb3JtYXRzKCksIGtleSwgb3B0aW9ucyk7XG4gIHZhciByZXQgPSBmb3JtYXR0ZXIgJiYgZm9ybWF0dGVyLmZvcm1hdFRvUGFydHModmFsdWUpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9pc1NpbGVudFRyYW5zbGF0aW9uV2FybihrZXkpKSB7XG4gICAgICB3YXJuKChcIkZhbGwgYmFjayB0byBmb3JtYXQgbnVtYmVyIHRvIHBhcnRzIG9mIHJvb3Q6IGtleSAnXCIgKyBrZXkgKyBcIicgLlwiKSk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdGhpcy5fcm9vdCkgeyB0aHJvdyBFcnJvcigndW5leHBlY3RlZCBlcnJvcicpIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdC4kaTE4bi5fbnRwKHZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV0IHx8IFtdXG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWdWVJMThuLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBhdmFpbGFiaWxpdGllcztcbi8vICRGbG93Rml4TWVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWVJMThuLCAnYXZhaWxhYmlsaXRpZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICBpZiAoIWF2YWlsYWJpbGl0aWVzKSB7XG4gICAgICB2YXIgaW50bERlZmluZWQgPSB0eXBlb2YgSW50bCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICBhdmFpbGFiaWxpdGllcyA9IHtcbiAgICAgICAgZGF0ZVRpbWVGb3JtYXQ6IGludGxEZWZpbmVkICYmIHR5cGVvZiBJbnRsLkRhdGVUaW1lRm9ybWF0ICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgbnVtYmVyRm9ybWF0OiBpbnRsRGVmaW5lZCAmJiB0eXBlb2YgSW50bC5OdW1iZXJGb3JtYXQgIT09ICd1bmRlZmluZWQnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhdmFpbGFiaWxpdGllc1xuICB9XG59KTtcblxuVnVlSTE4bi5pbnN0YWxsID0gaW5zdGFsbDtcblZ1ZUkxOG4udmVyc2lvbiA9ICc4LjI0LjQnO1xuXG5leHBvcnQgZGVmYXVsdCBWdWVJMThuO1xuIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIChvcHRpb25zLmZ1bmN0aW9uYWwgPyB0aGlzLnBhcmVudCA6IHRoaXMpLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3RcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsIi8qIVxuICAqIHZ1ZS1yb3V0ZXIgdjMuNS4xXG4gICogKGMpIDIwMjEgRXZhbiBZb3VcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbi8qICAqL1xuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmRpdGlvbikge1xuICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCAoYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGFba2V5XSA9IGJba2V5XTtcbiAgfVxuICByZXR1cm4gYVxufVxuXG4vKiAgKi9cblxudmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7XG52YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7IH07XG52YXIgY29tbWFSRSA9IC8lMkMvZztcblxuLy8gZml4ZWQgZW5jb2RlVVJJQ29tcG9uZW50IHdoaWNoIGlzIG1vcmUgY29uZm9ybWFudCB0byBSRkMzOTg2OlxuLy8gLSBlc2NhcGVzIFshJygpKl1cbi8vIC0gcHJlc2VydmUgY29tbWFzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgICAucmVwbGFjZShlbmNvZGVSZXNlcnZlUkUsIGVuY29kZVJlc2VydmVSZXBsYWNlcilcbiAgICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGUgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwiRXJyb3IgZGVjb2RpbmcgXFxcIlwiICsgc3RyICsgXCJcXFwiLiBMZWF2aW5nIGl0IGludGFjdC5cIikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWVyeSAoXG4gIHF1ZXJ5LFxuICBleHRyYVF1ZXJ5LFxuICBfcGFyc2VRdWVyeVxuKSB7XG4gIGlmICggZXh0cmFRdWVyeSA9PT0gdm9pZCAwICkgZXh0cmFRdWVyeSA9IHt9O1xuXG4gIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XG4gIHZhciBwYXJzZWRRdWVyeTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRRdWVyeSA9IHBhcnNlKHF1ZXJ5IHx8ICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTtcbiAgICBwYXJzZWRRdWVyeSA9IHt9O1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7XG4gICAgdmFyIHZhbHVlID0gZXh0cmFRdWVyeVtrZXldO1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKVxuICAgICAgPyB2YWx1ZS5tYXAoY2FzdFF1ZXJ5UGFyYW1WYWx1ZSlcbiAgICAgIDogY2FzdFF1ZXJ5UGFyYW1WYWx1ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbnZhciBjYXN0UXVlcnlQYXJhbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpKTsgfTtcblxuZnVuY3Rpb24gcGFyc2VRdWVyeSAocXVlcnkpIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHF1ZXJ5LnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG4gICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBkZWNvZGUocGFydHMuam9pbignPScpKSA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqXG4gICAgPyBPYmplY3Qua2V5cyhvYmopXG4gICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodmFsMikge1xuICAgICAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbClcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA+IDA7IH0pXG4gICAgICAuam9pbignJicpXG4gICAgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIsIG9ubHlQYXRoKSB7XG4gIGlmIChiID09PSBTVEFSVCkge1xuICAgIHJldHVybiBhID09PSBiXG4gIH0gZWxzZSBpZiAoIWIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChhLnBhdGggJiYgYi5wYXRoKSB7XG4gICAgcmV0dXJuIGEucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpID09PSBiLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSAmJiAob25seVBhdGggfHxcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIChvbmx5UGF0aCB8fCAoXG4gICAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcykpXG4gICAgICApXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiS2V5ID0gYktleXNbaV07XG4gICAgaWYgKGJLZXkgIT09IGtleSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIHF1ZXJ5IHZhbHVlcyBjYW4gYmUgbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgaWYgKGFWYWwgPT0gbnVsbCB8fCBiVmFsID09IG51bGwpIHsgcmV0dXJuIGFWYWwgPT09IGJWYWwgfVxuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJvdXRlRW50ZXJlZCAocm91dGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5tYXRjaGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJlY29yZCA9IHJvdXRlLm1hdGNoZWRbaV07XG4gICAgZm9yICh2YXIgbmFtZSBpbiByZWNvcmQuaW5zdGFuY2VzKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSByZWNvcmQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgdmFyIGNicyA9IHJlY29yZC5lbnRlcmVkQ2JzW25hbWVdO1xuICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhY2JzKSB7IGNvbnRpbnVlIH1cbiAgICAgIGRlbGV0ZSByZWNvcmQuZW50ZXJlZENic1tuYW1lXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UuX2lzQmVpbmdEZXN0cm95ZWQpIHsgY2JzW2kkMV0oaW5zdGFuY2UpOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBWaWV3ID0ge1xuICBuYW1lOiAnUm91dGVyVmlldycsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoXywgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG4gICAgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2VcbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgPyBwYXJlbnQuJHZub2RlLmRhdGEgOiB7fTtcbiAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9kaXJlY3RJbmFjdGl2ZSAmJiBwYXJlbnQuX2luYWN0aXZlKSB7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHZhciBjYWNoZWREYXRhID0gY2FjaGVbbmFtZV07XG4gICAgICB2YXIgY2FjaGVkQ29tcG9uZW50ID0gY2FjaGVkRGF0YSAmJiBjYWNoZWREYXRhLmNvbXBvbmVudDtcbiAgICAgIGlmIChjYWNoZWRDb21wb25lbnQpIHtcbiAgICAgICAgLy8gIzIzMDFcbiAgICAgICAgLy8gcGFzcyBwcm9wc1xuICAgICAgICBpZiAoY2FjaGVkRGF0YS5jb25maWdQcm9wcykge1xuICAgICAgICAgIGZpbGxQcm9wc2luRGF0YShjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNhY2hlZERhdGEucm91dGUsIGNhY2hlZERhdGEuY29uZmlnUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoKGNhY2hlZENvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW5kZXIgcHJldmlvdXMgZW1wdHkgdmlld1xuICAgICAgICByZXR1cm4gaCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWQgPSByb3V0ZS5tYXRjaGVkW2RlcHRoXTtcbiAgICB2YXIgY29tcG9uZW50ID0gbWF0Y2hlZCAmJiBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyByZW5kZXIgZW1wdHkgbm9kZSBpZiBubyBtYXRjaGVkIHJvdXRlIG9yIG5vIGNvbmZpZyBjb21wb25lbnRcbiAgICBpZiAoIW1hdGNoZWQgfHwgIWNvbXBvbmVudCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIC8vIGNhY2hlIGNvbXBvbmVudFxuICAgIGNhY2hlW25hbWVdID0geyBjb21wb25lbnQ6IGNvbXBvbmVudCB9O1xuXG4gICAgLy8gYXR0YWNoIGluc3RhbmNlIHJlZ2lzdHJhdGlvbiBob29rXG4gICAgLy8gdGhpcyB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgaW5zdGFuY2UncyBpbmplY3RlZCBsaWZlY3ljbGUgaG9va3NcbiAgICBkYXRhLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgdmFsKSB7XG4gICAgICAvLyB2YWwgY291bGQgYmUgdW5kZWZpbmVkIGZvciB1bnJlZ2lzdHJhdGlvblxuICAgICAgdmFyIGN1cnJlbnQgPSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXTtcbiAgICAgIGlmIChcbiAgICAgICAgKHZhbCAmJiBjdXJyZW50ICE9PSB2bSkgfHxcbiAgICAgICAgKCF2YWwgJiYgY3VycmVudCA9PT0gdm0pXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWxzbyByZWdpc3RlciBpbnN0YW5jZSBpbiBwcmVwYXRjaCBob29rXG4gICAgLy8gaW4gY2FzZSB0aGUgc2FtZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGFjcm9zcyBkaWZmZXJlbnQgcm91dGVzXG4gICAgOyhkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KSkucHJlcGF0Y2ggPSBmdW5jdGlvbiAoXywgdm5vZGUpIHtcbiAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGluc3RhbmNlIGluIGluaXQgaG9va1xuICAgIC8vIGluIGNhc2Uga2VwdC1hbGl2ZSBjb21wb25lbnQgYmUgYWN0aXZlZCB3aGVuIHJvdXRlcyBjaGFuZ2VkXG4gICAgZGF0YS5ob29rLmluaXQgPSBmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAhPT0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV1cbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgcm91dGUgdHJhbnNpdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpcm1lZCB0aGVuIHdlIHdlcmVuJ3RcbiAgICAgIC8vIGFibGUgdG8gY2FsbCB0aGUgY2JzIGR1cmluZyBjb25maXJtYXRpb24gYXMgdGhlIGNvbXBvbmVudCB3YXMgbm90XG4gICAgICAvLyByZWdpc3RlcmVkIHlldCwgc28gd2UgY2FsbCBpdCBoZXJlLlxuICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbmZpZ1Byb3BzID0gbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdO1xuICAgIC8vIHNhdmUgcm91dGUgYW5kIGNvbmZpZ1Byb3BzIGluIGNhY2hlXG4gICAgaWYgKGNvbmZpZ1Byb3BzKSB7XG4gICAgICBleHRlbmQoY2FjaGVbbmFtZV0sIHtcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBjb25maWdQcm9wczogY29uZmlnUHJvcHNcbiAgICAgIH0pO1xuICAgICAgZmlsbFByb3BzaW5EYXRhKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59O1xuXG5mdW5jdGlvbiBmaWxsUHJvcHNpbkRhdGEgKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKSB7XG4gIC8vIHJlc29sdmUgcHJvcHNcbiAgdmFyIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IHJlc29sdmVQcm9wcyhyb3V0ZSwgY29uZmlnUHJvcHMpO1xuICBpZiAocHJvcHNUb1Bhc3MpIHtcbiAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7XG4gICAgLy8gcGFzcyBub24tZGVjbGFyZWQgcHJvcHMgYXMgYXR0cnNcbiAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNUb1Bhc3MpIHtcbiAgICAgIGlmICghY29tcG9uZW50LnByb3BzIHx8ICEoa2V5IGluIGNvbXBvbmVudC5wcm9wcykpIHtcbiAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIGRlbGV0ZSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGggKFxuICByZWxhdGl2ZSxcbiAgYmFzZSxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTtcbiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlXG4gIH1cblxuICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHtcbiAgICByZXR1cm4gYmFzZSArIHJlbGF0aXZlXG4gIH1cblxuICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6XG4gIC8vIC0gbm90IGFwcGVuZGluZ1xuICAvLyAtIGFwcGVuZGluZyB0byB0cmFpbGluZyBzbGFzaCAobGFzdCBzZWdtZW50IGlzIGVtcHR5KVxuICBpZiAoIWFwcGVuZCB8fCAhc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aFxuICB2YXIgc2VnbWVudHMgPSByZWxhdGl2ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykge1xuICAgICAgc3RhY2sucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaFxuICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7XG4gICAgc3RhY2sudW5zaGlmdCgnJyk7XG4gIH1cblxuICByZXR1cm4gc3RhY2suam9pbignLycpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgcXVlcnkgPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgIGhhc2ggPSBwYXRoLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy9nLCAnLycpXG59XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbnZhciBwYXRoVG9SZWdleHBfMSA9IHBhdGhUb1JlZ2V4cDtcbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgY29tcGlsZV8xID0gY29tcGlsZTtcbnZhciB0b2tlbnNUb0Z1bmN0aW9uXzEgPSB0b2tlbnNUb0Z1bmN0aW9uO1xudmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDtcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJztcbiAgdmFyIHJlcztcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XTtcbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdO1xuICAgIHZhciBuYW1lID0gcmVzWzNdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdO1xuICAgIHZhciBncm91cCA9IHJlc1s1XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07XG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddO1xuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gICAgICBwYXRoID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4O1xuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlcjtcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXA7XG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpO1xuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgcm91dGUgPSAnJztcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7XG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJztcblxuICAgICAga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJztcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7XG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyO1xuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nO1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJztcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknO1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxuLy8gJGZsb3ctZGlzYWJsZS1saW5lXG52YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gZmlsbFBhcmFtcyAoXG4gIHBhdGgsXG4gIHBhcmFtcyxcbiAgcm91dGVNc2dcbikge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHRyeSB7XG4gICAgdmFyIGZpbGxlciA9XG4gICAgICByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHxcbiAgICAgIChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTtcblxuICAgIC8vIEZpeCAjMjUwNSByZXNvbHZpbmcgYXN0ZXJpc2sgcm91dGVzIHsgbmFtZTogJ25vdC1mb3VuZCcsIHBhcmFtczogeyBwYXRoTWF0Y2g6ICcvbm90LWZvdW5kJyB9fVxuICAgIC8vIGFuZCBmaXggIzMxMDYgc28gdGhhdCB5b3UgY2FuIHdvcmsgd2l0aCBsb2NhdGlvbiBkZXNjcmlwdG9yIG9iamVjdCBoYXZpbmcgcGFyYW1zLnBhdGhNYXRjaCBlcXVhbCB0byBlbXB0eSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnKSB7IHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7IH1cblxuICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEZpeCAjMzA3MiBubyB3YXJuIGlmIGBwYXRoTWF0Y2hgIGlzIHN0cmluZ1xuICAgICAgd2Fybih0eXBlb2YgcGFyYW1zLnBhdGhNYXRjaCA9PT0gJ3N0cmluZycsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkXG4gICAgZGVsZXRlIHBhcmFtc1swXTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgbmV4dCA9IGV4dGVuZCh7fSwgcmF3KTtcbiAgICB2YXIgcGFyYW1zID0gbmV4dC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV4dC5wYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMkMSA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zJDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zJDEsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciB3YXJuZWRDdXN0b21TbG90O1xudmFyIHdhcm5lZFRhZ1Byb3A7XG52YXIgd2FybmVkRXZlbnRQcm9wO1xuXG52YXIgTGluayA9IHtcbiAgbmFtZTogJ1JvdXRlckxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBjdXN0b206IEJvb2xlYW4sXG4gICAgZXhhY3Q6IEJvb2xlYW4sXG4gICAgZXhhY3RQYXRoOiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFyaWFDdXJyZW50VmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwYWdlJ1xuICAgIH0sXG4gICAgZXZlbnQ6IHtcbiAgICAgIHR5cGU6IGV2ZW50VHlwZXMsXG4gICAgICBkZWZhdWx0OiAnY2xpY2snXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuJHJvdXRlO1xuICAgIHZhciByZWYgPSByb3V0ZXIucmVzb2x2ZShcbiAgICAgIHRoaXMudG8sXG4gICAgICBjdXJyZW50LFxuICAgICAgdGhpcy5hcHBlbmRcbiAgICApO1xuICAgIHZhciBsb2NhdGlvbiA9IHJlZi5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGUgPSByZWYucm91dGU7XG4gICAgdmFyIGhyZWYgPSByZWYuaHJlZjtcblxuICAgIHZhciBjbGFzc2VzID0ge307XG4gICAgdmFyIGdsb2JhbEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzO1xuICAgIHZhciBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0V4YWN0QWN0aXZlQ2xhc3M7XG4gICAgLy8gU3VwcG9ydCBnbG9iYWwgZW1wdHkgYWN0aXZlIGNsYXNzXG4gICAgdmFyIGFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbCA/ICdyb3V0ZXItbGluay1hY3RpdmUnIDogZ2xvYmFsQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9XG4gICAgICBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgICAgPyAncm91dGVyLWxpbmstZXhhY3QtYWN0aXZlJ1xuICAgICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGFjdGl2ZUNsYXNzRmFsbGJhY2sgOiB0aGlzLmFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrXG4gICAgICAgIDogdGhpcy5leGFjdEFjdGl2ZUNsYXNzO1xuXG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSByb3V0ZS5yZWRpcmVjdGVkRnJvbVxuICAgICAgPyBjcmVhdGVSb3V0ZShudWxsLCBub3JtYWxpemVMb2NhdGlvbihyb3V0ZS5yZWRpcmVjdGVkRnJvbSksIG51bGwsIHJvdXRlcilcbiAgICAgIDogcm91dGU7XG5cbiAgICBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID0gaXNTYW1lUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCwgdGhpcy5leGFjdFBhdGgpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdCB8fCB0aGlzLmV4YWN0UGF0aFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBhcmlhQ3VycmVudFZhbHVlID0gY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA/IHRoaXMuYXJpYUN1cnJlbnRWYWx1ZSA6IG51bGw7XG5cbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xuICAgICAgICBpZiAodGhpcyQxLnJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXIucmVwbGFjZShsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24sIG5vb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBvbiA9IHsgY2xpY2s6IGd1YXJkRXZlbnQgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIG9uW2VdID0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblt0aGlzLmV2ZW50XSA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7IGNsYXNzOiBjbGFzc2VzIH07XG5cbiAgICB2YXIgc2NvcGVkU2xvdCA9XG4gICAgICAhdGhpcy4kc2NvcGVkU2xvdHMuJGhhc05vcm1hbCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgbmF2aWdhdGU6IGhhbmRsZXIsXG4gICAgICAgIGlzQWN0aXZlOiBjbGFzc2VzW2FjdGl2ZUNsYXNzXSxcbiAgICAgICAgaXNFeGFjdEFjdGl2ZTogY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgfSk7XG5cbiAgICBpZiAoc2NvcGVkU2xvdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuY3VzdG9tKSB7XG4gICAgICAgICF3YXJuZWRDdXN0b21TbG90ICYmIHdhcm4oZmFsc2UsICdJbiBWdWUgUm91dGVyIDQsIHRoZSB2LXNsb3QgQVBJIHdpbGwgYnkgZGVmYXVsdCB3cmFwIGl0cyBjb250ZW50IHdpdGggYW4gPGE+IGVsZW1lbnQuIFVzZSB0aGUgY3VzdG9tIHByb3AgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzpcXG48cm91dGVyLWxpbmsgdi1zbG90PVwieyBuYXZpZ2F0ZSwgaHJlZiB9XCIgY3VzdG9tPjwvcm91dGVyLWxpbms+XFxuJyk7XG4gICAgICAgIHdhcm5lZEN1c3RvbVNsb3QgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90WzBdXG4gICAgICB9IGVsc2UgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID4gMSB8fCAhc2NvcGVkU2xvdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoXCI8cm91dGVyLWxpbms+IHdpdGggdG89XFxcIlwiICsgKHRoaXMudG8pICsgXCJcXFwiIGlzIHRyeWluZyB0byB1c2UgYSBzY29wZWQgc2xvdCBidXQgaXQgZGlkbid0IHByb3ZpZGUgZXhhY3RseSBvbmUgY2hpbGQuIFdyYXBwaW5nIHRoZSBjb250ZW50IHdpdGggYSBzcGFuIGVsZW1lbnQuXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGVkU2xvdC5sZW5ndGggPT09IDAgPyBoKCkgOiBoKCdzcGFuJywge30sIHNjb3BlZFNsb3QpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICgndGFnJyBpbiB0aGlzLiRvcHRpb25zLnByb3BzRGF0YSAmJiAhd2FybmVkVGFnUHJvcCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiPHJvdXRlci1saW5rPidzIHRhZyBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIFJvdXRlciA0LiBVc2UgdGhlIHYtc2xvdCBBUEkgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzogaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyNyZW1vdmFsLW9mLWV2ZW50LWFuZC10YWctcHJvcHMtaW4tcm91dGVyLWxpbmsuXCJcbiAgICAgICAgKTtcbiAgICAgICAgd2FybmVkVGFnUHJvcCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoJ2V2ZW50JyBpbiB0aGlzLiRvcHRpb25zLnByb3BzRGF0YSAmJiAhd2FybmVkRXZlbnRQcm9wKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCI8cm91dGVyLWxpbms+J3MgZXZlbnQgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHRoZSB2LXNsb3QgQVBJIHRvIHJlbW92ZSB0aGlzIHdhcm5pbmc6IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZhbC1vZi1ldmVudC1hbmQtdGFnLXByb3BzLWluLXJvdXRlci1saW5rLlwiXG4gICAgICAgICk7XG4gICAgICAgIHdhcm5lZEV2ZW50UHJvcCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYsICdhcmlhLWN1cnJlbnQnOiBhcmlhQ3VycmVudFZhbHVlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IDxhPiBjaGlsZCBhbmQgYXBwbHkgbGlzdGVuZXIgYW5kIGhyZWZcbiAgICAgIHZhciBhID0gZmluZEFuY2hvcih0aGlzLiRzbG90cy5kZWZhdWx0KTtcbiAgICAgIGlmIChhKSB7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIDxhPiBpcyBhIHN0YXRpYyBub2RlXG4gICAgICAgIGEuaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFEYXRhID0gKGEuZGF0YSA9IGV4dGVuZCh7fSwgYS5kYXRhKSk7XG4gICAgICAgIGFEYXRhLm9uID0gYURhdGEub24gfHwge307XG4gICAgICAgIC8vIHRyYW5zZm9ybSBleGlzdGluZyBldmVudHMgaW4gYm90aCBvYmplY3RzIGludG8gYXJyYXlzIHNvIHdlIGNhbiBwdXNoIGxhdGVyXG4gICAgICAgIGZvciAodmFyIGV2ZW50IGluIGFEYXRhLm9uKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXIkMSA9IGFEYXRhLm9uW2V2ZW50XTtcbiAgICAgICAgICBpZiAoZXZlbnQgaW4gb24pIHtcbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50XSA9IEFycmF5LmlzQXJyYXkoaGFuZGxlciQxKSA/IGhhbmRsZXIkMSA6IFtoYW5kbGVyJDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBlbmQgbmV3IGxpc3RlbmVycyBmb3Igcm91dGVyLWxpbmtcbiAgICAgICAgZm9yICh2YXIgZXZlbnQkMSBpbiBvbikge1xuICAgICAgICAgIGlmIChldmVudCQxIGluIGFEYXRhLm9uKSB7XG4gICAgICAgICAgICAvLyBvbltldmVudF0gaXMgYWx3YXlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdLnB1c2gob25bZXZlbnQkMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhRGF0YS5vbltldmVudCQxXSA9IGhhbmRsZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFBdHRycyA9IChhLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGEuZGF0YS5hdHRycykpO1xuICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7XG4gICAgICAgIGFBdHRyc1snYXJpYS1jdXJyZW50J10gPSBhcmlhQ3VycmVudFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG9lc24ndCBoYXZlIDxhPiBjaGlsZCwgYXBwbHkgbGlzdGVuZXIgdG8gc2VsZlxuICAgICAgICBkYXRhLm9uID0gb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGhpcy50YWcsIGRhdGEsIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwIChcbiAgcm91dGVzLFxuICBvbGRQYXRoTGlzdCxcbiAgb2xkUGF0aE1hcCxcbiAgb2xkTmFtZU1hcCxcbiAgcGFyZW50Um91dGVcbikge1xuICAvLyB0aGUgcGF0aCBsaXN0IGlzIHVzZWQgdG8gY29udHJvbCBwYXRoIG1hdGNoaW5nIHByaW9yaXR5XG4gIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcbiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUsIHBhcmVudFJvdXRlKTtcbiAgfSk7XG5cbiAgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmRcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocGF0aExpc3RbaV0gPT09ICcqJykge1xuICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pO1xuICAgICAgbC0tO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIC8vIHdhcm4gaWYgcm91dGVzIGRvIG5vdCBpbmNsdWRlIGxlYWRpbmcgc2xhc2hlc1xuICAgIHZhciBmb3VuZCA9IHBhdGhMaXN0XG4gICAgLy8gY2hlY2sgZm9yIG1pc3NpbmcgbGVhZGluZyBzbGFzaFxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gcGF0aCAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJyonICYmIHBhdGguY2hhckF0KDApICE9PSAnLyc7IH0pO1xuXG4gICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBwYXRoTmFtZXMgPSBmb3VuZC5tYXAoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIChcIi0gXCIgKyBwYXRoKTsgfSkuam9pbignXFxuJyk7XG4gICAgICB3YXJuKGZhbHNlLCAoXCJOb24tbmVzdGVkIHJvdXRlcyBtdXN0IGluY2x1ZGUgYSBsZWFkaW5nIHNsYXNoIGNoYXJhY3Rlci4gRml4IHRoZSBmb2xsb3dpbmcgcm91dGVzOiBcXG5cIiArIHBhdGhOYW1lcykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aExpc3Q6IHBhdGhMaXN0LFxuICAgIHBhdGhNYXA6IHBhdGhNYXAsXG4gICAgbmFtZU1hcDogbmFtZU1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkIChcbiAgcGF0aExpc3QsXG4gIHBhdGhNYXAsXG4gIG5hbWVNYXAsXG4gIHJvdXRlLFxuICBwYXJlbnQsXG4gIG1hdGNoQXNcbikge1xuICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIHZhciBuYW1lID0gcm91dGUubmFtZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQocGF0aCAhPSBudWxsLCBcIlxcXCJwYXRoXFxcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiByb3V0ZS5jb21wb25lbnQgIT09ICdzdHJpbmcnLFxuICAgICAgXCJyb3V0ZSBjb25maWcgXFxcImNvbXBvbmVudFxcXCIgZm9yIHBhdGg6IFwiICsgKFN0cmluZyhcbiAgICAgICAgcGF0aCB8fCBuYW1lXG4gICAgICApKSArIFwiIGNhbm5vdCBiZSBhIFwiICsgXCJzdHJpbmcgaWQuIFVzZSBhbiBhY3R1YWwgY29tcG9uZW50IGluc3RlYWQuXCJcbiAgICApO1xuXG4gICAgd2FybihcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgICAhL1teXFx1MDAwMC1cXHUwMDdGXSsvLnRlc3QocGF0aCksXG4gICAgICBcIlJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIGNvbnRhaW5zIHVuZW5jb2RlZCBjaGFyYWN0ZXJzLCBtYWtlIHN1cmUgXCIgK1xuICAgICAgICBcInlvdXIgcGF0aCBpcyBjb3JyZWN0bHkgZW5jb2RlZCBiZWZvcmUgcGFzc2luZyBpdCB0byB0aGUgcm91dGVyLiBVc2UgXCIgK1xuICAgICAgICBcImVuY29kZVVSSSB0byBlbmNvZGUgc3RhdGljIHNlZ21lbnRzIG9mIHlvdXIgcGF0aC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9XG4gICAgcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgYWxpYXM6IHJvdXRlLmFsaWFzXG4gICAgICA/IHR5cGVvZiByb3V0ZS5hbGlhcyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBbcm91dGUuYWxpYXNdXG4gICAgICAgIDogcm91dGUuYWxpYXNcbiAgICAgIDogW10sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBlbnRlcmVkQ2JzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOlxuICAgICAgcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgICA/IHt9XG4gICAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKFxuICAgICAgICByb3V0ZS5uYW1lICYmXG4gICAgICAgICFyb3V0ZS5yZWRpcmVjdCAmJlxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSlcbiAgICAgICkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIChcIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29ya1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKFxuICBwYXRoLFxuICBwYXRoVG9SZWdleHBPcHRpb25zXG4pIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2FybihcbiAgICAgICAgIWtleXNba2V5Lm5hbWVdLFxuICAgICAgICAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIilcbiAgICAgICk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKFxuICBwYXRoLFxuICBwYXJlbnQsXG4gIHN0cmljdFxuKSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFJvdXRlIChwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xuICAgIHZhciBwYXJlbnQgPSAodHlwZW9mIHBhcmVudE9yUm91dGUgIT09ICdvYmplY3QnKSA/IG5hbWVNYXBbcGFyZW50T3JSb3V0ZV0gOiB1bmRlZmluZWQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY3JlYXRlUm91dGVNYXAoW3JvdXRlIHx8IHBhcmVudE9yUm91dGVdLCBwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcGFyZW50KTtcblxuICAgIC8vIGFkZCBhbGlhc2VzIG9mIHBhcmVudFxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGNyZWF0ZVJvdXRlTWFwKFxuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUgcm91dGUgaXMgZGVmaW5lZCBpZiBwYXJlbnQgaXNcbiAgICAgICAgcGFyZW50LmFsaWFzLm1hcChmdW5jdGlvbiAoYWxpYXMpIHsgcmV0dXJuICh7IHBhdGg6IGFsaWFzLCBjaGlsZHJlbjogW3JvdXRlXSB9KTsgfSksXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Um91dGVzICgpIHtcbiAgICByZXR1cm4gcGF0aExpc3QubWFwKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiBwYXRoTWFwW3BhdGhdOyB9KVxuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlOiBhZGRSb3V0ZSxcbiAgICBnZXRSb3V0ZXM6IGdldFJvdXRlcyxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGUobVtpXSkgOiBtW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSZWNvcmRQYXRoIChwYXRoLCByZWNvcmQpIHtcbiAgcmV0dXJuIHJlc29sdmVQYXRoKHBhdGgsIHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LnBhdGggOiAnLycsIHRydWUpXG59XG5cbi8qICAqL1xuXG4vLyB1c2UgVXNlciBUaW1pbmcgYXBpIChpZiBwcmVzZW50KSBmb3IgbW9yZSBhY2N1cmF0ZSBrZXkgcHJlY2lzaW9uXG52YXIgVGltZSA9XG4gIGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICAgID8gd2luZG93LnBlcmZvcm1hbmNlXG4gICAgOiBEYXRlO1xuXG5mdW5jdGlvbiBnZW5TdGF0ZUtleSAoKSB7XG4gIHJldHVybiBUaW1lLm5vdygpLnRvRml4ZWQoMylcbn1cblxudmFyIF9rZXkgPSBnZW5TdGF0ZUtleSgpO1xuXG5mdW5jdGlvbiBnZXRTdGF0ZUtleSAoKSB7XG4gIHJldHVybiBfa2V5XG59XG5cbmZ1bmN0aW9uIHNldFN0YXRlS2V5IChrZXkpIHtcbiAgcmV0dXJuIChfa2V5ID0ga2V5KVxufVxuXG4vKiAgKi9cblxudmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBzZXR1cFNjcm9sbCAoKSB7XG4gIC8vIFByZXZlbnQgYnJvd3NlciBzY3JvbGwgYmVoYXZpb3Igb24gSGlzdG9yeSBwb3BzdGF0ZVxuICBpZiAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiB3aW5kb3cuaGlzdG9yeSkge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gIH1cbiAgLy8gRml4IGZvciAjMTU4NSBmb3IgRmlyZWZveFxuICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OFxuICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aFxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RcbiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndFxuICB2YXIgcHJvdG9jb2xBbmRQYXRoID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTtcbiAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpO1xuICBzdGF0ZUNvcHkua2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlQ29weSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcFN0YXRlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVQb3BTdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2Nyb2xsIChcbiAgcm91dGVyLFxuICB0byxcbiAgZnJvbSxcbiAgaXNQb3Bcbikge1xuICBpZiAoIXJvdXRlci5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiZWhhdmlvciA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICBpZiAoIWJlaGF2aW9yKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgYmVoYXZpb3IgPT09ICdmdW5jdGlvbicsIFwic2Nyb2xsQmVoYXZpb3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgLy8gd2FpdCB1bnRpbCByZS1yZW5kZXIgZmluaXNoZXMgYmVmb3JlIHNjcm9sbGluZ1xuICByb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB2YXIgc2hvdWxkU2Nyb2xsID0gYmVoYXZpb3IuY2FsbChcbiAgICAgIHJvdXRlcixcbiAgICAgIHRvLFxuICAgICAgZnJvbSxcbiAgICAgIGlzUG9wID8gcG9zaXRpb24gOiBudWxsXG4gICAgKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGxcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUgKGUpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIGlmIChlLnN0YXRlICYmIGUuc3RhdGUua2V5KSB7XG4gICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXFxkLztcblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZ2V0RWxlbWVudEJ5SWQgd291bGQgc3RpbGwgZmFpbCBpZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgYSBtb3JlIGNvbXBsaWNhdGVkIHF1ZXJ5IGxpa2UgI21haW5bZGF0YS1hdHRyXVxuICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCBpdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBzZWxlY3QgYW4gZWxlbWVudCB3aXRoIGFuIGlkIGFuZCBhbiBleHRyYSBzZWxlY3RvclxuICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPVxuICAgICAgICBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gc2hvdWxkU2Nyb2xsLm9mZnNldFxuICAgICAgICAgIDoge307XG4gICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTtcbiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uLngsXG4gICAgICAgIHRvcDogcG9zaXRpb24ueSxcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGJlaGF2aW9yOiBzaG91bGRTY3JvbGwuYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPVxuICBpbkJyb3dzZXIgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmIChcbiAgICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgdHlwZW9mIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICB9KSgpO1xuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgICAgIHZhciBzdGF0ZUNvcHkgPSBleHRlbmQoe30sIGhpc3Rvcnkuc3RhdGUpO1xuICAgICAgc3RhdGVDb3B5LmtleSA9IGdldFN0YXRlS2V5KCk7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLy8gV2hlbiBjaGFuZ2luZyB0aGluZywgYWxzbyBlZGl0IHJvdXRlci5kLnRzXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge1xuICByZWRpcmVjdGVkOiAyLFxuICBhYm9ydGVkOiA0LFxuICBjYW5jZWxsZWQ6IDgsXG4gIGR1cGxpY2F0ZWQ6IDE2XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uUmVkaXJlY3RlZEVycm9yIChmcm9tLCB0bykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoXG4gICAgZnJvbSxcbiAgICB0byxcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUucmVkaXJlY3RlZCxcbiAgICAoXCJSZWRpcmVjdGVkIHdoZW4gZ29pbmcgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHN0cmluZ2lmeVJvdXRlKFxuICAgICAgdG9cbiAgICApKSArIFwiXFxcIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLlwiKVxuICApXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25EdXBsaWNhdGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHZhciBlcnJvciA9IGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQsXG4gICAgKFwiQXZvaWRlZCByZWR1bmRhbnQgbmF2aWdhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uOiBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIuXCIpXG4gICk7XG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdGhlIGZpcnN0IGludHJvZHVjdGlvbiBvZiBFcnJvcnNcbiAgZXJyb3IubmFtZSA9ICdOYXZpZ2F0aW9uRHVwbGljYXRlZCc7XG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihcbiAgICBmcm9tLFxuICAgIHRvLFxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5jYW5jZWxsZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHRvLmZ1bGxQYXRoKSArIFwiXFxcIiB3aXRoIGEgbmV3IG5hdmlnYXRpb24uXCIpXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkFib3J0ZWRFcnJvciAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmFib3J0ZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBhYm9ydGVkIGZyb20gXFxcIlwiICsgKGZyb20uZnVsbFBhdGgpICsgXCJcXFwiIHRvIFxcXCJcIiArICh0by5mdWxsUGF0aCkgKyBcIlxcXCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC5cIilcbiAgKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvciAoZnJvbSwgdG8sIHR5cGUsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5faXNSb3V0ZXIgPSB0cnVlO1xuICBlcnJvci5mcm9tID0gZnJvbTtcbiAgZXJyb3IudG8gPSB0bztcbiAgZXJyb3IudHlwZSA9IHR5cGU7XG5cbiAgcmV0dXJuIGVycm9yXG59XG5cbnZhciBwcm9wZXJ0aWVzVG9Mb2cgPSBbJ3BhcmFtcycsICdxdWVyeScsICdoYXNoJ107XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVJvdXRlICh0bykge1xuICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykgeyByZXR1cm4gdG8gfVxuICBpZiAoJ3BhdGgnIGluIHRvKSB7IHJldHVybiB0by5wYXRoIH1cbiAgdmFyIGxvY2F0aW9uID0ge307XG4gIHByb3BlcnRpZXNUb0xvZy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5IGluIHRvKSB7IGxvY2F0aW9uW2tleV0gPSB0b1trZXldOyB9XG4gIH0pO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24sIG51bGwsIDIpXG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IgKGVycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xXG59XG5cbmZ1bmN0aW9uIGlzTmF2aWdhdGlvbkZhaWx1cmUgKGVyciwgZXJyb3JUeXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNFcnJvcihlcnIpICYmXG4gICAgZXJyLl9pc1JvdXRlciAmJlxuICAgIChlcnJvclR5cGUgPT0gbnVsbCB8fCBlcnIudHlwZSA9PT0gZXJyb3JUeXBlKVxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlO1xuICAvLyBjYXRjaCByZWRpcmVjdCBvcHRpb24gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMDFcbiAgdHJ5IHtcbiAgICByb3V0ZSA9IHRoaXMucm91dGVyLm1hdGNoKGxvY2F0aW9uLCB0aGlzLmN1cnJlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgY2IoZSk7XG4gICAgfSk7XG4gICAgLy8gRXhjZXB0aW9uIHNob3VsZCBzdGlsbCBiZSB0aHJvd25cbiAgICB0aHJvdyBlXG4gIH1cbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG4gICAgICB0aGlzJDEucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgLy8gSW5pdGlhbCByZWRpcmVjdGlvbiBzaG91bGQgbm90IG1hcmsgdGhlIGhpc3RvcnkgYXMgcmVhZHkgeWV0XG4gICAgICAgIC8vIGJlY2F1c2UgaXQncyB0cmlnZ2VyZWQgYnkgdGhlIHJlZGlyZWN0aW9uIGluc3RlYWRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMjVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMzMzFcbiAgICAgICAgaWYgKCFpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLnJlZGlyZWN0ZWQpIHx8IHByZXYgIT09IFNUQVJUKSB7XG4gICAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gY2hhbmdlZCBhZnRlciBhZGRpbmcgZXJyb3JzIHdpdGhcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzMwNDcgYmVmb3JlIHRoYXQgY2hhbmdlLFxuICAgIC8vIHJlZGlyZWN0IGFuZCBhYm9ydGVkIG5hdmlnYXRpb24gd291bGQgcHJvZHVjZSBhbiBlcnIgPT0gbnVsbFxuICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIpICYmIGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIHZhciBsYXN0Um91dGVJbmRleCA9IHJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgdmFyIGxhc3RDdXJyZW50SW5kZXggPSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgaWYgKFxuICAgIGlzU2FtZVJvdXRlKHJvdXRlLCBjdXJyZW50KSAmJlxuICAgIC8vIGluIHRoZSBjYXNlIHRoZSByb3V0ZSBtYXAgaGFzIGJlZW4gZHluYW1pY2FsbHkgYXBwZW5kZWQgdG9cbiAgICBsYXN0Um91dGVJbmRleCA9PT0gbGFzdEN1cnJlbnRJbmRleCAmJlxuICAgIHJvdXRlLm1hdGNoZWRbbGFzdFJvdXRlSW5kZXhdID09PSBjdXJyZW50Lm1hdGNoZWRbbGFzdEN1cnJlbnRJbmRleF1cbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkR1cGxpY2F0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydChjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IoY3VycmVudCwgcm91dGUpKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25SZWRpcmVjdGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJiB0by5yZXBsYWNlKSB7XG4gICAgICAgICAgICB0aGlzJDEucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMkMS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uZmlybSB0cmFuc2l0aW9uIGFuZCBwYXNzIG9uIHRoZSB2YWx1ZVxuICAgICAgICAgIG5leHQodG8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhYm9ydChlKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkKTtcbiAgICB2YXIgcXVldWUgPSBlbnRlckd1YXJkcy5jb25jYXQodGhpcyQxLnJvdXRlci5yZXNvbHZlSG9va3MpO1xuICAgIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSlcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBlbXB0eVxufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIC8vIGNsZWFuIHVwIGV2ZW50IGxpc3RlbmVyc1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjM0MVxuICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjbGVhbnVwTGlzdGVuZXIpIHtcbiAgICBjbGVhbnVwTGlzdGVuZXIoKTtcbiAgfSk7XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG5cbiAgLy8gcmVzZXQgY3VycmVudCBoaXN0b3J5IHJvdXRlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMjk0XG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgKVxufVxuXG5mdW5jdGlvbiBiaW5kRW50ZXJHdWFyZCAoXG4gIGd1YXJkLFxuICBtYXRjaCxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoIW1hdGNoLmVudGVyZWRDYnNba2V5XSkge1xuICAgICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XS5wdXNoKGNiKTtcbiAgICAgIH1cbiAgICAgIG5leHQoY2IpO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB0aGlzLl9zdGFydExvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcy5iYXNlKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gdGhpcyQxLl9zdGFydExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVJvdXRpbmdFdmVudCk7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVSb3V0aW5nRXZlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgaWYgKGJhc2UgJiYgcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoYmFzZS50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaFxufVxuXG4vKiAgKi9cblxudmFyIEhhc2hIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBIYXNoSGlzdG9yeSAocm91dGVyLCBiYXNlLCBmYWxsYmFjaykge1xuICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIC8vIGNoZWNrIGhpc3RvcnkgZmFsbGJhY2sgZGVlcGxpbmtpbmdcbiAgICBpZiAoZmFsbGJhY2sgJiYgY2hlY2tGYWxsYmFjayh0aGlzLmJhc2UpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW5zdXJlU2xhc2goKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhhc2hIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGFzaEhpc3Rvcnk7XG5cbiAgLy8gdGhpcyBpcyBkZWxheWVkIHVudGlsIHRoZSBhcHAgbW91bnRzXG4gIC8vIHRvIGF2b2lkIHRoZSBoYXNoY2hhbmdlIGxpc3RlbmVyIGJlaW5nIGZpcmVkIHRvbyBlYXJseVxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZXZlbnRUeXBlID0gc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgaGFuZGxlUm91dGluZ0V2ZW50XG4gICAgKTtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlUm91dGluZ0V2ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICBwdXNoSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoO1xuICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHtcbiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SGFzaCgpXG4gIH07XG5cbiAgcmV0dXJuIEhhc2hIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2sgKGJhc2UpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7XG4gIGlmICghL15cXC8jLy50ZXN0KGxvY2F0aW9uKSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGNsZWFuUGF0aChiYXNlICsgJy8jJyArIGxvY2F0aW9uKSk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCAoKSB7XG4gIHZhciBwYXRoID0gZ2V0SGFzaCgpO1xuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoICgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgLy8gZW1wdHkgcGF0aFxuICBpZiAoaW5kZXggPCAwKSB7IHJldHVybiAnJyB9XG5cbiAgaHJlZiA9IGhyZWYuc2xpY2UoaW5kZXggKyAxKTtcblxuICByZXR1cm4gaHJlZlxufVxuXG5mdW5jdGlvbiBnZXRVcmwgKHBhdGgpIHtcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGkgPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjtcbiAgcmV0dXJuIChiYXNlICsgXCIjXCIgKyBwYXRoKVxufVxuXG5mdW5jdGlvbiBwdXNoSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICBwdXNoU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcmVwbGFjZVN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoZ2V0VXJsKHBhdGgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gQWJzdHJhY3RIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgQWJzdHJhY3RIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIHRoaXMkMS5pbmRleCsrO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjtcbiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07XG4gICAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICAgIHJvdXRlLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldiA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQpKSB7XG4gICAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLydcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAoKSB7XG4gICAgLy8gbm9vcFxuICB9O1xuXG4gIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuLyogICovXG5cbnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIgKG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdGhpcy5hcHAgPSBudWxsO1xuICB0aGlzLmFwcHMgPSBbXTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5iZWZvcmVIb29rcyA9IFtdO1xuICB0aGlzLnJlc29sdmVIb29rcyA9IFtdO1xuICB0aGlzLmFmdGVySG9va3MgPSBbXTtcbiAgdGhpcy5tYXRjaGVyID0gY3JlYXRlTWF0Y2hlcihvcHRpb25zLnJvdXRlcyB8fCBbXSwgdGhpcyk7XG5cbiAgdmFyIG1vZGUgPSBvcHRpb25zLm1vZGUgfHwgJ2hhc2gnO1xuICB0aGlzLmZhbGxiYWNrID1cbiAgICBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGFzc2VydChcbiAgICAgIGluc3RhbGwuaW5zdGFsbGVkLFxuICAgICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgICAgIFwiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuXCJcbiAgICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuXG4gICAgaWYgKCF0aGlzJDEuYXBwKSB7IHRoaXMkMS5oaXN0b3J5LnRlYXJkb3duKCk7IH1cbiAgfSk7XG5cbiAgLy8gbWFpbiBhcHAgcHJldmlvdXNseSBpbml0aWFsaXplZFxuICAvLyByZXR1cm4gYXMgd2UgZG9uJ3QgbmVlZCB0byBzZXQgdXAgbmV3IGhpc3RvcnkgbGlzdGVuZXJcbiAgaWYgKHRoaXMuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICB2YXIgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhUTUw1SGlzdG9yeSB8fCBoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgaGFuZGxlSW5pdGlhbFNjcm9sbCA9IGZ1bmN0aW9uIChyb3V0ZU9yRXJyb3IpIHtcbiAgICAgIHZhciBmcm9tID0gaGlzdG9yeS5jdXJyZW50O1xuICAgICAgdmFyIGV4cGVjdFNjcm9sbCA9IHRoaXMkMS5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICAgICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgICBpZiAoc3VwcG9ydHNTY3JvbGwgJiYgJ2Z1bGxQYXRoJyBpbiByb3V0ZU9yRXJyb3IpIHtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMSwgcm91dGVPckVycm9yLCBmcm9tLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocm91dGVPckVycm9yKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgICBoYW5kbGVJbml0aWFsU2Nyb2xsKHJvdXRlT3JFcnJvcik7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cExpc3RlbmVycyxcbiAgICAgIHNldHVwTGlzdGVuZXJzXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoaXMkMS5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICB0aGlzLmhpc3RvcnkuZ28obik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiBiYWNrICgpIHtcbiAgdGhpcy5nbygtMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgdGhpcy5nbygxKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyAodG8pIHtcbiAgdmFyIHJvdXRlID0gdG9cbiAgICA/IHRvLm1hdGNoZWRcbiAgICAgID8gdG9cbiAgICAgIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZVxuICAgIDogdGhpcy5jdXJyZW50Um91dGU7XG4gIGlmICghcm91dGUpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFxuICAgIFtdLFxuICAgIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbS5jb21wb25lbnRzW2tleV1cbiAgICAgIH0pXG4gICAgfSlcbiAgKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICBjdXJyZW50ID0gY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudDtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24odG8sIGN1cnJlbnQsIGFwcGVuZCwgdGhpcyk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0Um91dGVzID0gZnVuY3Rpb24gZ2V0Um91dGVzICgpIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5nZXRSb3V0ZXMoKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZSA9IGZ1bmN0aW9uIGFkZFJvdXRlIChwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xuICB0aGlzLm1hdGNoZXIuYWRkUm91dGUocGFyZW50T3JSb3V0ZSwgcm91dGUpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihmYWxzZSwgJ3JvdXRlci5hZGRSb3V0ZXMoKSBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHJvdXRlci5hZGRSb3V0ZSgpIGluc3RlYWQuJyk7XG4gIH1cbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjUuMSc7XG5WdWVSb3V0ZXIuaXNOYXZpZ2F0aW9uRmFpbHVyZSA9IGlzTmF2aWdhdGlvbkZhaWx1cmU7XG5WdWVSb3V0ZXIuTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xuVnVlUm91dGVyLlNUQVJUX0xPQ0FUSU9OID0gU1RBUlQ7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWdWVSb3V0ZXI7XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjEyXG4gKiAoYykgMjAxNC0yMDIwIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdHJpbmcgY29udGFpbmluZyBzdGF0aWMga2V5cyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEyJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgKGFyZ3MgIT09ICcpJyA/ICcsJyArIGFyZ3MgOiBhcmdzKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ2NvbnRleHRtZW51JztcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGlmaWVycy5taWRkbGUpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J21vdXNldXAnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIGlmIChtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCd+JywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChtb2RpZmllcnMucGFzc2l2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxuXG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWVcbikge1xuICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFsndi1iaW5kOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlbW92ZUZyb21NYXApIHtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5mdW5jdGlvbiBnZW5Db21wb25lbnRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG5cbiAgdmFyIGJhc2VWYWx1ZUV4cHJlc3Npb24gPSAnJCR2JztcbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGJhc2VWYWx1ZUV4cHJlc3Npb247XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID1cbiAgICAgIFwiKHR5cGVvZiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIiA9PT0gJ3N0cmluZydcIiArXG4gICAgICBcIj8gXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIudHJpbSgpXCIgK1xuICAgICAgXCI6IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBlbC5tb2RlbCA9IHtcbiAgICB2YWx1ZTogKFwiKFwiICsgdmFsdWUgKyBcIilcIiksXG4gICAgZXhwcmVzc2lvbjogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuICAgIGNhbGxiYWNrOiAoXCJmdW5jdGlvbiAoXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpIHtcIiArIGFzc2lnbm1lbnQgKyBcIn1cIilcbiAgfTtcbn1cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2VuQXNzaWdubWVudENvZGUgKFxuICB2YWx1ZSxcbiAgYXNzaWdubWVudFxuKSB7XG4gIHZhciByZXMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYSB2LW1vZGVsIGV4cHJlc3Npb24gaW50byBhIGJhc2UgcGF0aCBhbmQgYSBmaW5hbCBrZXkgc2VnbWVudC5cbiAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIFBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2tleV1cbiAqIC0gdGVzdFt0ZXN0MVtrZXldXVxuICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtrZXldXVxuICpcbiAqL1xuXG52YXIgbGVuLCBzdHIsIGNociwgaW5kZXgkMSwgZXhwcmVzc2lvblBvcywgZXhwcmVzc2lvbkVuZFBvcztcblxuXG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9wdWxsLzc3MzBcbiAgLy8gYWxsb3cgdi1tb2RlbD1cIm9iai52YWwgXCIgKHRyYWlsaW5nIHdoaXRlc3BhY2UpXG4gIHZhbCA9IHZhbC50cmltKCk7XG4gIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICBpZiAoaW5kZXgkMSA+IC0xKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAga2V5OiAnXCInICsgdmFsLnNsaWNlKGluZGV4JDEgKyAxKSArICdcIidcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwsXG4gICAgICAgIGtleTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0ciA9IHZhbDtcbiAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc2xpY2UoMCwgZXhwcmVzc2lvblBvcyksXG4gICAga2V5OiB2YWwuc2xpY2UoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dCAoKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG59XG5cbmZ1bmN0aW9uIGVvZiAoKSB7XG4gIHJldHVybiBpbmRleCQxID49IGxlblxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcbiAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4Mjdcbn1cblxuZnVuY3Rpb24gcGFyc2VCcmFja2V0IChjaHIpIHtcbiAgdmFyIGluQnJhY2tldCA9IDE7XG4gIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY2hyID09PSAweDVCKSB7IGluQnJhY2tldCsrOyB9XG4gICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHtcbiAgICAgIGV4cHJlc3Npb25FbmRQb3MgPSBpbmRleCQxO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcgKGNocikge1xuICB2YXIgc3RyaW5nUXVvdGUgPSBjaHI7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiQxO1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuZnVuY3Rpb24gbW9kZWwgKFxuICBlbCxcbiAgZGlyLFxuICBfd2FyblxuKSB7XG4gIHdhcm4kMSA9IF93YXJuO1xuICB2YXIgdmFsdWUgPSBkaXIudmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBkaXIubW9kaWZpZXJzO1xuICB2YXIgdGFnID0gZWwudGFnO1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3NcbiAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIiArXG4gICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4kMShcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgXCJ2LW1vZGVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBlbGVtZW50IHR5cGUuIFwiICtcbiAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcbiAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YXIgdHJ1ZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHJ1ZS12YWx1ZScpIHx8ICd0cnVlJztcbiAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJyxcbiAgICBcIkFycmF5LmlzQXJyYXkoXCIgKyB2YWx1ZSArIFwiKVwiICtcbiAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICA/IChcIjooXCIgKyB2YWx1ZSArIFwiKVwiKVxuICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJyxcbiAgICBcInZhciAkJGE9XCIgKyB2YWx1ZSArIFwiLFwiICtcbiAgICAgICAgJyQkZWw9JGV2ZW50LnRhcmdldCwnICtcbiAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgK1xuICAgICAgXCJ2YXIgJCR2PVwiICsgKG51bWJlciA/ICdfbignICsgdmFsdWVCaW5kaW5nICsgJyknIDogdmFsdWVCaW5kaW5nKSArIFwiLFwiICtcbiAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgXCJpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuY29uY2F0KFskJHZdKScpKSArIFwiKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKScpKSArIFwiKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArIFwifVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFsdWVCaW5kaW5nID0gbnVtYmVyID8gKFwiX24oXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikgOiB2YWx1ZUJpbmRpbmc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUJpbmRpbmcpLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU2VsZWN0IChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciBzZWxlY3RlZFZhbCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuICAgIFwiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiO1xuXG4gIHZhciBhc3NpZ25tZW50ID0gJyRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXSc7XG4gIHZhciBjb2RlID0gXCJ2YXIgJCRzZWxlY3RlZFZhbCA9IFwiICsgc2VsZWN0ZWRWYWwgKyBcIjtcIjtcbiAgY29kZSA9IGNvZGUgKyBcIiBcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCkpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgLy8gZXhjZXB0IGZvciBpbnB1dHMgd2l0aCB2LWJpbmQ6dHlwZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciB2YWx1ZSQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddIHx8IGVsLmF0dHJzTWFwWyc6dmFsdWUnXTtcbiAgICB2YXIgdHlwZUJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddID8gJ3YtYmluZDp2YWx1ZScgOiAnOnZhbHVlJztcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgJ2JlY2F1c2UgdGhlIGxhdHRlciBhbHJlYWR5IGV4cGFuZHMgdG8gYSB2YWx1ZSBiaW5kaW5nIGludGVybmFsbHknLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFtiaW5kaW5nXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIG5lZWRDb21wb3NpdGlvbkd1YXJkID0gIWxhenkgJiYgdHlwZSAhPT0gJ3JhbmdlJztcbiAgdmFyIGV2ZW50ID0gbGF6eVxuICAgID8gJ2NoYW5nZSdcbiAgICA6IHR5cGUgPT09ICdyYW5nZSdcbiAgICAgID8gUkFOR0VfVE9LRU5cbiAgICAgIDogJ2lucHV0JztcblxuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gJyRldmVudC50YXJnZXQudmFsdWUnO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcbiAgaWYgKG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgY29kZSA9IFwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiICsgY29kZTtcbiAgfVxuXG4gIGFkZFByb3AoZWwsICd2YWx1ZScsIChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgZXZlbnQsIGNvZGUsIG51bGwsIHRydWUpO1xuICBpZiAodHJpbSB8fCBudW1iZXIpIHtcbiAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2Vzc2FyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSk7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgcmF3VG9rZW5zLnB1c2goeyAnQGJpbmRpbmcnOiBleHAgfSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4KSk7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICB0b2tlbnM6IHJhd1Rva2Vuc1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICBlbC5zdGF0aWNDbGFzcyA9IEpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTtcbiAgfVxuICB2YXIgY2xhc3NCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdjbGFzcycsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChjbGFzc0JpbmRpbmcpIHtcbiAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzdHlsZSddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQxXG59O1xuXG4vKiAgKi9cblxudmFyIGRlY29kZXI7XG5cbnZhciBoZSA9IHtcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcbiAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnXG4pO1xuXG4vLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4vLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcbnZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIGF0dHJpYnV0ZSA9IC9eXFxzKihbXlxcc1wiJzw+XFwvPV0rKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIGR5bmFtaWNBcmdBdHRyaWJ1dGUgPSAvXlxccyooKD86di1bXFx3LV0rOnxAfDp8IylcXFtbXj1dK1xcXVteXFxzXCInPD5cXC89XSopKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgbmNuYW1lID0gXCJbYS16QS1aX11bXFxcXC1cXFxcLjAtOV9hLXpBLVpcIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qXCI7XG52YXIgcW5hbWVDYXB0dXJlID0gXCIoKD86XCIgKyBuY25hbWUgKyBcIlxcXFw6KT9cIiArIG5jbmFtZSArIFwiKVwiO1xudmFyIHN0YXJ0VGFnT3BlbiA9IG5ldyBSZWdFeHAoKFwiXjxcIiArIHFuYW1lQ2FwdHVyZSkpO1xudmFyIHN0YXJ0VGFnQ2xvc2UgPSAvXlxccyooXFwvPyk+LztcbnZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKChcIl48XFxcXC9cIiArIHFuYW1lQ2FwdHVyZSArIFwiW14+XSo+XCIpKTtcbnZhciBkb2N0eXBlID0gL148IURPQ1RZUEUgW14+XSs+L2k7XG4vLyAjNzI5ODogZXNjYXBlIC0gdG8gYXZvaWQgYmVpbmcgcGFzc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyQkMSA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIiksIHsgc3RhcnQ6IGluZGV4ICsgaHRtbC5sZW5ndGggfSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnJCQxKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGFyZ3MuZW5kO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG9uUkUgPSAvXkB8XnYtb246LztcbnZhciBkaXJSRSA9IC9edi18XkB8Xjp8XiMvO1xudmFyIGZvckFsaWFzUkUgPSAvKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS87XG52YXIgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcbnZhciBzdHJpcFBhcmVuc1JFID0gL15cXCh8XFwpJC9nO1xudmFyIGR5bmFtaWNBcmdSRSA9IC9eXFxbLipcXF0kLztcblxudmFyIGFyZ1JFID0gLzooLiopJC87XG52YXIgYmluZFJFID0gL146fF5cXC58XnYtYmluZDovO1xudmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZztcblxudmFyIHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvO1xuXG52YXIgbGluZUJyZWFrUkUgPSAvW1xcclxcbl0vO1xudmFyIHdoaXRlc3BhY2VSRSQxID0gL1xccysvZztcblxudmFyIGludmFsaWRBdHRyaWJ1dGVSRSA9IC9bXFxzXCInPD5cXC89XS87XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGhlLmRlY29kZSk7XG5cbnZhciBlbXB0eVNsb3RTY29wZVRva2VuID0gXCJfZW1wdHlfXCI7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMjtcbnZhciBkZWxpbWl0ZXJzO1xudmFyIHRyYW5zZm9ybXM7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciBwb3N0VHJhbnNmb3JtcztcbnZhciBwbGF0Zm9ybUlzUHJlVGFnO1xudmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG52YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG52YXIgbWF5YmVDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUFTVEVsZW1lbnQgKFxuICB0YWcsXG4gIGF0dHJzLFxuICBwYXJlbnRcbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDEsXG4gICAgdGFnOiB0YWcsXG4gICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICByYXdBdHRyc01hcDoge30sXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgY2hpbGRyZW46IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICBtYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcblxuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgcG9zdFRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3Bvc3RUcmFuc2Zvcm1Ob2RlJyk7XG5cbiAgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycztcblxuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcbiAgdmFyIHdoaXRlc3BhY2VPcHRpb24gPSBvcHRpb25zLndoaXRlc3BhY2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2csIHJhbmdlKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB3YXJuJDIobXNnLCByYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VFbGVtZW50IChlbGVtZW50KSB7XG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgaWYgKCFpblZQcmUgJiYgIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICBlbGVtZW50ID0gcHJvY2Vzc0VsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgIGlmICghc3RhY2subGVuZ3RoICYmIGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgZXhwOiBlbGVtZW50LmVsc2VpZixcbiAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIFwiICtcbiAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgLy8gc2NvcGVkIHNsb3RcbiAgICAgICAgICAvLyBrZWVwIGl0IGluIHRoZSBjaGlsZHJlbiBsaXN0IHNvIHRoYXQgdi1lbHNlKC1pZikgY29uZGl0aW9ucyBjYW5cbiAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ1wiZGVmYXVsdFwiJ1xuICAgICAgICAgIDsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsIGNoaWxkcmVuIGNsZWFudXBcbiAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gIShjKS5zbG90U2NvcGU7IH0pO1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGUgYWdhaW5cbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9zdFRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJpbUVuZGluZ1doaXRlc3BhY2UgKGVsKSB7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZVxuICAgIGlmICghaW5QcmUpIHtcbiAgICAgIHZhciBsYXN0Tm9kZTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgIGxhc3ROb2RlLnR5cGUgPT09IDMgJiZcbiAgICAgICAgbGFzdE5vZGUudGV4dCA9PT0gJyAnXG4gICAgICApIHtcbiAgICAgICAgZWwuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgIFwiQ2Fubm90IHVzZSA8XCIgKyAoZWwudGFnKSArIFwiPiBhcyBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgaXQgbWF5IFwiICtcbiAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVsLmF0dHJzTWFwLmhhc093blByb3BlcnR5KCd2LWZvcicpKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50cy4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICB3YXJuOiB3YXJuJDIsXG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICBzaG91bGRLZWVwQ29tbWVudDogb3B0aW9ucy5jb21tZW50cyxcbiAgICBvdXRwdXRTb3VyY2VSYW5nZTogb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQVNURWxlbWVudCh0YWcsIGF0dHJzLCBjdXJyZW50UGFyZW50KTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBlbGVtZW50Lm5zID0gbnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgZWxlbWVudC5zdGFydCA9IHN0YXJ0JDE7XG4gICAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQ7XG4gICAgICAgICAgZWxlbWVudC5yYXdBdHRyc01hcCA9IGVsZW1lbnQuYXR0cnNMaXN0LnJlZHVjZShmdW5jdGlvbiAoY3VtdWxhdGVkLCBhdHRyKSB7XG4gICAgICAgICAgICBjdW11bGF0ZWRbYXR0ci5uYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICByZXR1cm4gY3VtdWxhdGVkXG4gICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICBpZiAoaW52YWxpZEF0dHJpYnV0ZVJFLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIkludmFsaWQgZHluYW1pYyBhcmd1bWVudCBleHByZXNzaW9uOiBhdHRyaWJ1dGUgbmFtZXMgY2Fubm90IGNvbnRhaW4gXCIgK1xuICAgICAgICAgICAgICBcInNwYWNlcywgcXVvdGVzLCA8LCA+LCAvIG9yID0uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMocm9vdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKHRhZywgc3RhcnQsIGVuZCQxKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgLy8gcG9wIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggLT0gMTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQkMTtcbiAgICAgIH1cbiAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQuJyxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgKFwidGV4dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIG91dHNpZGUgcm9vdCBlbGVtZW50IHdpbGwgYmUgaWdub3JlZC5cIiksXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXIgPT09IHRleHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICBpZiAoaW5QcmUgfHwgdGV4dC50cmltKCkpIHtcbiAgICAgICAgdGV4dCA9IGlzVGV4dFRhZyhjdXJyZW50UGFyZW50KSA/IHRleHQgOiBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpO1xuICAgICAgfSBlbHNlIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIC8vIHJlbW92ZSB0aGUgd2hpdGVzcGFjZS1vbmx5IG5vZGUgcmlnaHQgYWZ0ZXIgYW4gb3BlbmluZyB0YWdcbiAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlT3B0aW9uKSB7XG4gICAgICAgIGlmICh3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gaW4gY29uZGVuc2UgbW9kZSwgcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIG5vZGUgaWYgaXQgY29udGFpbnNcbiAgICAgICAgICAvLyBsaW5lIGJyZWFrLCBvdGhlcndpc2UgY29uZGVuc2UgdG8gYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gbGluZUJyZWFrUkUudGVzdCh0ZXh0KSA/ICcnIDogJyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSAnICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPyAnICcgOiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGlmICghaW5QcmUgJiYgd2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGNvbmRlbnNlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VzIGludG8gc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSh3aGl0ZXNwYWNlUkUkMSwgJyAnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzO1xuICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLFxuICAgICAgICAgICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8ICFjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY2hpbGQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIGFkZGluZyBhbnl0aGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDIoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIGNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZiA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICB2YXIgc2xvdEJpbmRpbmckMSA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nJDEpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIW1heWJlQ29tcG9uZW50KGVsKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcInYtc2xvdCBjYW4gb25seSBiZSB1c2VkIG9uIGNvbXBvbmVudHMgb3IgPHRlbXBsYXRlPi5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNsb3RTY29wZSB8fCBlbC5zbG90VGFyZ2V0KSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eSwgdGhlIGRlZmF1bHQgc2xvdCBzaG91bGQgYWxzbyB1c2UgXCIgK1xuICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZT4gc3ludGF4IHdoZW4gdGhlcmUgYXJlIG90aGVyIG5hbWVkIHNsb3RzLlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3RcbiAgICAgICAgdmFyIHNsb3RzID0gZWwuc2NvcGVkU2xvdHMgfHwgKGVsLnNjb3BlZFNsb3RzID0ge30pO1xuICAgICAgICB2YXIgcmVmJDEgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyQxKTtcbiAgICAgICAgdmFyIG5hbWUkMSA9IHJlZiQxLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljJDEgPSByZWYkMS5keW5hbWljO1xuICAgICAgICB2YXIgc2xvdENvbnRhaW5lciA9IHNsb3RzW25hbWUkMV0gPSBjcmVhdGVBU1RFbGVtZW50KCd0ZW1wbGF0ZScsIFtdLCBlbCk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWUkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWMkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlmICghYy5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgIGMucGFyZW50ID0gc2xvdENvbnRhaW5lcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90U2NvcGUgPSBzbG90QmluZGluZyQxLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47XG4gICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vd1xuICAgICAgICBlbC5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAvLyBtYXJrIGVsIG5vbi1wbGFpbiBzbyBkYXRhIGdldHMgZ2VuZXJhdGVkXG4gICAgICAgIGVsLnBsYWluID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNsb3ROYW1lIChiaW5kaW5nKSB7XG4gIHZhciBuYW1lID0gYmluZGluZy5uYW1lLnJlcGxhY2Uoc2xvdFJFLCAnJyk7XG4gIGlmICghbmFtZSkge1xuICAgIGlmIChiaW5kaW5nLm5hbWVbMF0gIT09ICcjJykge1xuICAgICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ2LXNsb3Qgc2hvcnRoYW5kIHN5bnRheCByZXF1aXJlcyBhIHNsb3QgbmFtZS5cIixcbiAgICAgICAgYmluZGluZ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpXG4gICAgLy8gZHluYW1pYyBbbmFtZV1cbiAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfVxuICAgIC8vIHN0YXRpYyBuYW1lXG4gICAgOiB7IG5hbWU6IChcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIiksIGR5bmFtaWM6IGZhbHNlIH1cbn1cblxuLy8gaGFuZGxlIDxzbG90Lz4gb3V0bGV0c1xuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RPdXRsZXQgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICBcIlVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLlwiLFxuICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuICB2YXIgYmluZGluZztcbiAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG4gIH1cbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBzeW5jR2VuLCBpc0R5bmFtaWM7XG4gIGZvciAoaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lO1xuICAgIHZhbHVlID0gbGlzdFtpXS52YWx1ZTtcbiAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWNcbiAgICAgIGVsLmhhc0JpbmRpbmdzID0gdHJ1ZTtcbiAgICAgIC8vIG1vZGlmaWVyc1xuICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZS5yZXBsYWNlKGRpclJFLCAnJykpO1xuICAgICAgLy8gc3VwcG9ydCAuZm9vIHNob3J0aGFuZCBzeW50YXggZm9yIHRoZSAucHJvcCBtb2RpZmllclxuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkgeyAvLyB2LWJpbmRcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICBpc0R5bmFtaWMgPSBkeW5hbWljQXJnUkUudGVzdChuYW1lKTtcbiAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgKFwiVGhlIHZhbHVlIGZvciBhIHYtYmluZCBleHByZXNzaW9uIGNhbm5vdCBiZSBlbXB0eS4gRm91bmQgaW4gXFxcInYtYmluZDpcIiArIG5hbWUgKyBcIlxcXCJcIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3AgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbm5lckh0bWwnKSB7IG5hbWUgPSAnaW5uZXJIVE1MJzsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmNhbWVsICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICBzeW5jR2VuID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIFwiJGV2ZW50XCIpO1xuICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoY2FtZWxpemUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKGh5cGhlbmF0ZShuYW1lKSAhPT0gY2FtZWxpemUobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoaHlwaGVuYXRlKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lXG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwiXFxcInVwZGF0ZTpcXFwiKyhcIiArIG5hbWUgKyBcIilcIiksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldLFxuICAgICAgICAgICAgICAgIHRydWUgLy8gZHluYW1pY1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKFxuICAgICAgICAgICFlbC5jb21wb25lbnQgJiYgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpXG4gICAgICAgICkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsgLy8gdi1vblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSGFuZGxlcihlbCwgbmFtZSwgdmFsdWUsIG1vZGlmaWVycywgZmFsc2UsIHdhcm4kMiwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIHZhciBhcmdNYXRjaCA9IG5hbWUubWF0Y2goYXJnUkUpO1xuICAgICAgICB2YXIgYXJnID0gYXJnTWF0Y2ggJiYgYXJnTWF0Y2hbMV07XG4gICAgICAgIGlzRHluYW1pYyA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJnKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICAgIGlmIChkeW5hbWljQXJnUkUudGVzdChhcmcpKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgaXNEeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBpc0R5bmFtaWMsIG1vZGlmaWVycywgbGlzdFtpXSk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6aWQ9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIGxpc3RbaV0pO1xuICAgICAgLy8gIzY4ODcgZmlyZWZveCBkb2Vzbid0IHVwZGF0ZSBtdXRlZCBzdGF0ZSBpZiBzZXQgdmlhIGF0dHJpYnV0ZVxuICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uXG4gICAgICBpZiAoIWVsLmNvbXBvbmVudCAmJlxuICAgICAgICAgIG5hbWUgPT09ICdtdXRlZCcgJiZcbiAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgJ3RydWUnLCBsaXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgdmFyIHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSAmJiAhaXNFZGdlXG4gICAgKSB7XG4gICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuLy8gZm9yIHNjcmlwdCAoZS5nLiB0eXBlPVwieC90ZW1wbGF0ZVwiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50XG5mdW5jdGlvbiBpc1RleHRUYWcgKGVsKSB7XG4gIHJldHVybiBlbC50YWcgPT09ICdzY3JpcHQnIHx8IGVsLnRhZyA9PT0gJ3N0eWxlJ1xufVxuXG5mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAhZWwuYXR0cnNNYXAudHlwZSB8fFxuICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICApKVxuICApXG59XG5cbnZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xudmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICB2YXIgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICBcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiICtcbiAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0Jykge1xuICAgIHZhciBtYXAgPSBlbC5hdHRyc01hcDtcbiAgICBpZiAoIW1hcFsndi1tb2RlbCddKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgdHlwZUJpbmRpbmc7XG4gICAgaWYgKG1hcFsnOnR5cGUnXSB8fCBtYXBbJ3YtYmluZDp0eXBlJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0eXBlJyk7XG4gICAgfVxuICAgIGlmICghbWFwLnR5cGUgJiYgIXR5cGVCaW5kaW5nICYmIG1hcFsndi1iaW5kJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gXCIoXCIgKyAobWFwWyd2LWJpbmQnXSkgKyBcIikudHlwZVwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlQmluZGluZykge1xuICAgICAgdmFyIGlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnLCB0cnVlKTtcbiAgICAgIHZhciBpZkNvbmRpdGlvbkV4dHJhID0gaWZDb25kaXRpb24gPyAoXCImJihcIiArIGlmQ29uZGl0aW9uICsgXCIpXCIpIDogXCJcIjtcbiAgICAgIHZhciBoYXNFbHNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScsIHRydWUpICE9IG51bGw7XG4gICAgICB2YXIgZWxzZUlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicsIHRydWUpO1xuICAgICAgLy8gMS4gY2hlY2tib3hcbiAgICAgIHZhciBicmFuY2gwID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIC8vIHByb2Nlc3MgZm9yIG9uIHRoZSBtYWluIG5vZGVcbiAgICAgIHByb2Nlc3NGb3IoYnJhbmNoMCk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDAsICd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gwLCBvcHRpb25zKTtcbiAgICAgIGJyYW5jaDAucHJvY2Vzc2VkID0gdHJ1ZTsgLy8gcHJldmVudCBpdCBmcm9tIGRvdWJsZS1wcm9jZXNzZWRcbiAgICAgIGJyYW5jaDAuaWYgPSBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J2NoZWNrYm94J1wiICsgaWZDb25kaXRpb25FeHRyYTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBicmFuY2gwLmlmLFxuICAgICAgICBibG9jazogYnJhbmNoMFxuICAgICAgfSk7XG4gICAgICAvLyAyLiBhZGQgcmFkaW8gZWxzZS1pZiBjb25kaXRpb25cbiAgICAgIHZhciBicmFuY2gxID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMSwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDEsICd0eXBlJywgJ3JhZGlvJyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gxLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J3JhZGlvJ1wiICsgaWZDb25kaXRpb25FeHRyYSxcbiAgICAgICAgYmxvY2s6IGJyYW5jaDFcbiAgICAgIH0pO1xuICAgICAgLy8gMy4gb3RoZXJcbiAgICAgIHZhciBicmFuY2gyID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMiwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDIsICc6dHlwZScsIHR5cGVCaW5kaW5nKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDIsIG9wdGlvbnMpO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IGlmQ29uZGl0aW9uLFxuICAgICAgICBibG9jazogYnJhbmNoMlxuICAgICAgfSk7XG5cbiAgICAgIGlmIChoYXNFbHNlKSB7XG4gICAgICAgIGJyYW5jaDAuZWxzZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGVsc2VJZkNvbmRpdGlvbikge1xuICAgICAgICBicmFuY2gwLmVsc2VpZiA9IGVsc2VJZkNvbmRpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyYW5jaDBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBU1RFbGVtZW50IChlbCkge1xuICByZXR1cm4gY3JlYXRlQVNURWxlbWVudChlbC50YWcsIGVsLmF0dHJzTGlzdC5zbGljZSgpLCBlbC5wYXJlbnQpXG59XG5cbnZhciBtb2RlbCQxID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlXG59O1xuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxLFxuICBtb2RlbCQxXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIHZhciBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2s7XG4gICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaywgaXNJbkZvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvO1xudmFyIGZuSW52b2tlUkUgPSAvXFwoW14pXSo/XFwpOyokLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xudmFyIGtleU5hbWVzID0ge1xuICAvLyAjNzg4MDogSUUxMSBhbmQgRWRnZSB1c2UgYEVzY2AgZm9yIEVzY2FwZSBrZXkgbmFtZS5cbiAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgdGFiOiAnVGFiJyxcbiAgZW50ZXI6ICdFbnRlcicsXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gIHNwYWNlOiBbJyAnLCAnU3BhY2ViYXInXSxcbiAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy5cbiAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICBsZWZ0OiBbJ0xlZnQnLCAnQXJyb3dMZWZ0J10sXG4gIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSxcbiAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBEZWxgIGZvciBEZWxldGUga2V5IG5hbWUuXG4gICdkZWxldGUnOiBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRGVsJ11cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZVxuKSB7XG4gIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gIHZhciBzdGF0aWNIYW5kbGVycyA9IFwiXCI7XG4gIHZhciBkeW5hbWljSGFuZGxlcnMgPSBcIlwiO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHZhciBoYW5kbGVyQ29kZSA9IGdlbkhhbmRsZXIoZXZlbnRzW25hbWVdKTtcbiAgICBpZiAoZXZlbnRzW25hbWVdICYmIGV2ZW50c1tuYW1lXS5keW5hbWljKSB7XG4gICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljSGFuZGxlcnMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljSGFuZGxlcnMgPSBcIntcIiArIChzdGF0aWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgXCJfZChcIiArIHN0YXRpY0hhbmRsZXJzICsgXCIsW1wiICsgKGR5bmFtaWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJdKVwiXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICBpZiAoIWhhbmRsZXIpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCl7fSdcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgcmV0dXJuIChcIltcIiArIChoYW5kbGVyLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gZ2VuSGFuZGxlcihoYW5kbGVyKTsgfSkuam9pbignLCcpKSArIFwiXVwiKVxuICB9XG5cbiAgdmFyIGlzTWV0aG9kUGF0aCA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICBpZiAoaXNNZXRob2RQYXRoIHx8IGlzRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChpc0Z1bmN0aW9uSW52b2NhdGlvbiA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSkgOiBoYW5kbGVyLnZhbHVlKSArIFwifVwiKSAvLyBpbmxpbmUgc3RhdGVtZW50XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICB2YXIgZ2VuTW9kaWZpZXJDb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgIC8vIGxlZnQvcmlnaHRcbiAgICAgICAgaWYgKGtleUNvZGVzW2tleV0pIHtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdleGFjdCcpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBnZW5HdWFyZChcbiAgICAgICAgICBbJ2N0cmwnLCAnc2hpZnQnLCAnYWx0JywgJ21ldGEnXVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuIChcIiRldmVudC5cIiArIGtleU1vZGlmaWVyICsgXCJLZXlcIik7IH0pXG4gICAgICAgICAgICAuam9pbignfHwnKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSBtb2RpZmllcnMgbGlrZSBwcmV2ZW50IGFuZCBzdG9wIGdldCBleGVjdXRlZCBhZnRlciBrZXkgZmlsdGVyaW5nXG4gICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgY29kZSArPSBnZW5Nb2RpZmllckNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIigkZXZlbnQpXCIpXG4gICAgICA6IGlzRnVuY3Rpb25FeHByZXNzaW9uXG4gICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKSgkZXZlbnQpXCIpXG4gICAgICAgIDogaXNGdW5jdGlvbkludm9jYXRpb25cbiAgICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSlcbiAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAvLyAjOTQ0MTogY2FuJ3QgdXNlICdrZXlDb2RlJyBpbiAkZXZlbnQgYmVjYXVzZSBDaHJvbWUgYXV0b2ZpbGwgZmlyZXMgZmFrZVxuICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uXG4gICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIlxuICApXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICB2YXIga2V5VmFsID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcbiAgfVxuICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gIHZhciBrZXlOYW1lID0ga2V5TmFtZXNba2V5XTtcbiAgcmV0dXJuIChcbiAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyBcIixcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleUNvZGUpKSArIFwiLFwiICtcbiAgICBcIiRldmVudC5rZXksXCIgK1xuICAgIFwiXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5TmFtZSkpICtcbiAgICBcIilcIlxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkaXIubW9kaWZpZXJzKSB7XG4gICAgd2FybihcInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy5cIik7XG4gIH1cbiAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIFwiLFwiICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIG9uOiBvbixcbiAgYmluZDogYmluZCQxLFxuICBjbG9hazogbm9vcFxufTtcblxuLyogICovXG5cblxuXG5cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICB0aGlzLnByZSA9IGZhbHNlO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwucGFyZW50KSB7XG4gICAgZWwucHJlID0gZWwucHJlIHx8IGVsLnBhcmVudC5wcmU7XG4gIH1cblxuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0ICYmICFzdGF0ZS5wcmUpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJ1xuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgcmV0dXJuIGdlblNsb3QoZWwsIHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgdmFyIGNvZGU7XG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhO1xuICAgICAgaWYgKCFlbC5wbGFpbiB8fCAoZWwucHJlICYmIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSkpIHtcbiAgICAgICAgZGF0YSA9IGdlbkRhdGEkMihlbCwgc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICB2YXIgb3JpZ2luYWxQcmVTdGF0ZSA9IHN0YXRlLnByZTtcbiAgaWYgKGVsLnByZSkge1xuICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgfVxuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSxcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRhdGEgPSAneyc7XG5cbiAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cbiAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOlwiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBET00gcHJvcHNcbiAgaWYgKGVsLnByb3BzKSB7XG4gICAgZGF0YSArPSBcImRvbVByb3BzOlwiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBldmVudCBoYW5kbGVyc1xuICBpZiAoZWwuZXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwuZXZlbnRzLCBmYWxzZSkpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLm5hdGl2ZUV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2xvdFRhcmdldCAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgZGF0YSArPSBcInNsb3Q6XCIgKyAoZWwuc2xvdFRhcmdldCkgKyBcIixcIjtcbiAgfVxuICAvLyBzY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gY29tcG9uZW50IHYtbW9kZWxcbiAgaWYgKGVsLm1vZGVsKSB7XG4gICAgZGF0YSArPSBcIm1vZGVsOnt2YWx1ZTpcIiArIChlbC5tb2RlbC52YWx1ZSkgKyBcIixjYWxsYmFjazpcIiArIChlbC5tb2RlbC5jYWxsYmFjaykgKyBcIixleHByZXNzaW9uOlwiICsgKGVsLm1vZGVsLmV4cHJlc3Npb24pICsgXCJ9LFwiO1xuICB9XG4gIC8vIGlubGluZS10ZW1wbGF0ZVxuICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSBnZW5JbmxpbmVUZW1wbGF0ZShlbCwgc3RhdGUpO1xuICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKC8sJC8sICcnKSArICd9JztcbiAgLy8gdi1iaW5kIGR5bmFtaWMgYXJndW1lbnQgd3JhcFxuICAvLyB2LWJpbmQgd2l0aCBkeW5hbWljIGFyZ3VtZW50cyBtdXN0IGJlIGFwcGxpZWQgdXNpbmcgdGhlIHNhbWUgdi1iaW5kIG9iamVjdFxuICAvLyBtZXJnZSBoZWxwZXIgc28gdGhhdCBjbGFzcy9zdHlsZS9tdXN0VXNlUHJvcCBhdHRycyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkuXG4gIGlmIChlbC5keW5hbWljQXR0cnMpIHtcbiAgICBkYXRhID0gXCJfYihcIiArIGRhdGEgKyBcIixcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIiArIChnZW5Qcm9wcyhlbC5keW5hbWljQXR0cnMpKSArIFwiKVwiO1xuICB9XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIC8vIHYtb24gZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgZGF0YSA9IGVsLndyYXBMaXN0ZW5lcnMoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBcIntuYW1lOlxcXCJcIiArIChkaXIubmFtZSkgKyBcIlxcXCIscmF3TmFtZTpcXFwiXCIgKyAoZGlyLnJhd05hbWUpICsgXCJcXFwiXCIgKyAoZGlyLnZhbHVlID8gKFwiLHZhbHVlOihcIiArIChkaXIudmFsdWUpICsgXCIpLGV4cHJlc3Npb246XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKSkpIDogJycpICsgKGRpci5hcmcgPyAoXCIsYXJnOlwiICsgKGRpci5pc0R5bmFtaWNBcmcgPyBkaXIuYXJnIDogKFwiXFxcIlwiICsgKGRpci5hcmcpICsgXCJcXFwiXCIpKSkgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCwgc3RhdGUpIHtcbiAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGFzdC50eXBlICE9PSAxXG4gICkpIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicsXG4gICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgKTtcbiAgfVxuICBpZiAoYXN0ICYmIGFzdC50eXBlID09PSAxKSB7XG4gICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgc3RhdGUub3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gIGVsLFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICAvLyBieSBkZWZhdWx0IHNjb3BlZCBzbG90cyBhcmUgY29uc2lkZXJlZCBcInN0YWJsZVwiLCB0aGlzIGFsbG93cyBjaGlsZFxuICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAvLyBmb3IgZXhhbXBsZSBpZiB0aGUgc2xvdCBjb250YWlucyBkeW5hbWljIG5hbWVzLCBoYXMgdi1pZiBvciB2LWZvciBvbiB0aGVtLi4uXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gZWwuZm9yIHx8IE9iamVjdC5rZXlzKHNsb3RzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc2xvdCA9IHNsb3RzW2tleV07XG4gICAgcmV0dXJuIChcbiAgICAgIHNsb3Quc2xvdFRhcmdldER5bmFtaWMgfHxcbiAgICAgIHNsb3QuaWYgfHxcbiAgICAgIHNsb3QuZm9yIHx8XG4gICAgICBjb250YWluc1Nsb3RDaGlsZChzbG90KSAvLyBpcyBwYXNzaW5nIGRvd24gc2xvdCBmcm9tIHBhcmVudCB3aGljaCBtYXkgYmUgZHluYW1pY1xuICAgIClcbiAgfSk7XG5cbiAgLy8gIzk1MzQ6IGlmIGEgY29tcG9uZW50IHdpdGggc2NvcGVkIHNsb3RzIGlzIGluc2lkZSBhIGNvbmRpdGlvbmFsIGJyYW5jaCxcbiAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnRcbiAgLy8gY29tcGlsZWQgc2xvdCBjb250ZW50LiBUbyBhdm9pZCB0aGF0LCB3ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBrZXkgYmFzZWQgb25cbiAgLy8gdGhlIGdlbmVyYXRlZCBjb2RlIG9mIGFsbCB0aGUgc2xvdCBjb250ZW50cy5cbiAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjtcblxuICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmVcbiAgLy8gZGlzY29ubmVjdGVkIGR1ZSB0byB0aGUgaW50ZXJtZWRpYXRlIHNjb3BlIHZhcmlhYmxlKVxuICAvLyAjOTQzOCwgIzk1MDZcbiAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzXG4gIC8vIGFuZCBza2lwIGZvcmNlIHVwZGF0aW5nIG9uZXMgdGhhdCBkbyBub3QgYWN0dWFsbHkgdXNlIHNjb3BlIHZhcmlhYmxlcy5cbiAgaWYgKCFuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8XG4gICAgICAgIHBhcmVudC5mb3JcbiAgICAgICkge1xuICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuaWYpIHtcbiAgICAgICAgbmVlZHNLZXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVkU2xvdHMgPSBPYmplY3Qua2V5cyhzbG90cylcbiAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpOyB9KVxuICAgIC5qb2luKCcsJyk7XG5cbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIGdlbmVyYXRlZFNsb3RzICsgXCJdXCIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/IFwiLG51bGwsdHJ1ZVwiIDogXCJcIikgKyAoIW5lZWRzRm9yY2VVcGRhdGUgJiYgbmVlZHNLZXkgPyAoXCIsbnVsbCxmYWxzZSxcIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogXCJcIikgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgdmFyIGhhc2ggPSA1MzgxO1xuICB2YXIgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG4gIHJldHVybiBoYXNoID4+PiAwXG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2xvdENoaWxkIChlbCkge1xuICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgaXNMZWdhY3lTeW50YXggPSBlbC5hdHRyc01hcFsnc2xvdC1zY29wZSddO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkICYmICFpc0xlZ2FjeVN5bnRheCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QsIFwibnVsbFwiKVxuICB9XG4gIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90KVxuICB9XG4gIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW5cbiAgICA/IFwiXCJcbiAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICB2YXIgZm4gPSBcImZ1bmN0aW9uKFwiICsgc2xvdFNjb3BlICsgXCIpe1wiICtcbiAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgPyAoXCIoXCIgKyAoZWwuaWYpICsgXCIpP1wiICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgXCI6dW5kZWZpbmVkXCIpXG4gICAgICAgIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCI7XG4gIC8vIHJldmVyc2UgcHJveHkgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgdmFyIHJldmVyc2VQcm94eSA9IHNsb3RTY29wZSA/IFwiXCIgOiBcIixwcm94eTp0cnVlXCI7XG4gIHJldHVybiAoXCJ7a2V5OlwiICsgKGVsLnNsb3RUYXJnZXQgfHwgXCJcXFwiZGVmYXVsdFxcXCJcIikgKyBcIixmbjpcIiArIGZuICsgcmV2ZXJzZVByb3h5ICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChcbiAgZWwsXG4gIHN0YXRlLFxuICBjaGVja1NraXAsXG4gIGFsdEdlbkVsZW1lbnQsXG4gIGFsdEdlbk5vZGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwkMS5mb3IgJiZcbiAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/IFwiLDFcIiA6IFwiLDBcIlxuICAgICAgICA6IFwiXCI7XG4gICAgICByZXR1cm4gKFwiXCIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUkMSA9IGNoZWNrU2tpcFxuICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICA6IDA7XG4gICAgdmFyIGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlJDEgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICBjaGlsZHJlbixcbiAgbWF5YmVDb21wb25lbnRcbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSwgc3RhdGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMyAmJiBub2RlLmlzQ29tbWVudCkge1xuICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgcmV0dXJuIChcIl9lKFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnNcbiAgICA/IGdlblByb3BzKChlbC5hdHRycyB8fCBbXSkuY29uY2F0KGVsLmR5bmFtaWNBdHRycyB8fCBbXSkubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoe1xuICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgdmFsdWU6IGF0dHIudmFsdWUsXG4gICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgfSk7IH0pKVxuICAgIDogbnVsbDtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNQcm9wcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKTtcbiAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiAoXCJfZChcIiArIHN0YXRpY1Byb3BzICsgXCIsW1wiICsgKGR5bmFtaWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJdKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICd2LXNsb3QnIHx8IG5hbWVbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgY2hlY2tGdW5jdGlvblBhcmFtZXRlckV4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB2YXIgc3RyaXBwZWQgPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJyk7XG4gIHZhciBrZXl3b3JkTWF0Y2ggPSBzdHJpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdHJpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgIHdhcm4oXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKChcImludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpKSwgcmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKGV4cCwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgd2FybihcbiAgICAgIFwiaW52YWxpZCBmdW5jdGlvbiBwYXJhbWV0ZXIgZXhwcmVzc2lvbjogXCIgKyAoZS5tZXNzYWdlKSArIFwiIGluXFxuXFxuXCIgK1xuICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHJhbmdlID0gMjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUgKFxuICBzb3VyY2UsXG4gIHN0YXJ0LFxuICBlbmRcbikge1xuICBpZiAoIHN0YXJ0ID09PSB2b2lkIDAgKSBzdGFydCA9IDA7XG4gIGlmICggZW5kID09PSB2b2lkIDAgKSBlbmQgPSBzb3VyY2UubGVuZ3RoO1xuXG4gIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpIHsgY29udGludWUgfVxuICAgICAgICByZXMucHVzaCgoXCJcIiArIChqICsgMSkgKyAocmVwZWF0JDEoXCIgXCIsIDMgLSBTdHJpbmcoaiArIDEpLmxlbmd0aCkpICsgXCJ8ICBcIiArIChsaW5lc1tqXSkpKTtcbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIiBcIiwgcGFkKSArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCQxID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKVxufVxuXG5mdW5jdGlvbiByZXBlYXQkMSAoc3RyLCBuKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKG4gPiAwKSB7XG4gICAgd2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKG4gJiAxKSB7IHJlc3VsdCArPSBzdHI7IH1cbiAgICAgIG4gPj4+PSAxO1xuICAgICAgaWYgKG4gPD0gMCkgeyBicmVhayB9XG4gICAgICBzdHIgKz0gc3RyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICByZXR1cm4gbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgZm5HZW5FcnJvcnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyO1xuICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgcmV0dXJuICgoZXJyLnRvU3RyaW5nKCkpICsgXCIgaW5cXG5cXG5cIiArIGNvZGUgKyBcIlxcblwiKTtcbiAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGNvbXBpbGUgKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgdGlwcyA9IFtdO1xuXG4gICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZSA9IHJlZiQxLmNvbXBpbGU7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbnZhciBkaXY7XG5mdW5jdGlvbiBnZXRTaG91bGREZWNvZGUgKGhyZWYpIHtcbiAgZGl2ID0gZGl2IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoJyYjMTA7JykgPiAwXG59XG5cbi8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUoZmFsc2UpIDogZmFsc2U7XG4vLyAjNjgyODogY2hyb21lIGVuY29kZXMgY29udGVudCBpbiBhW2hyZWZdXG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gIHJldHVybiBlbCAmJiBlbC5pbm5lckhUTUxcbn0pO1xuXG52YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuICAgICAgICBvdXRwdXRTb3VyY2VSYW5nZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgfSwgdGhpcyk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh0aGlzLl9uYW1lKSArIFwiIGNvbXBpbGVcIiksICdjb21waWxlJywgJ2NvbXBpbGUgZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCIvKipcbiAqXG4gKiBAYXV0aG9yICAgIEplcnJ5IEJlbmR5XG4gKiBAc2luY2UgICAgIDQvMTIvMjAxN1xuICovXG5cbmZ1bmN0aW9uIHRvdWNoWChldmVudCkge1xuICAgIGlmKGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpe1xuICAgICAgICByZXR1cm4gZXZlbnQuY2xpZW50WDtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbn1cblxuZnVuY3Rpb24gdG91Y2hZKGV2ZW50KSB7XG4gICAgaWYoZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSl7XG4gICAgICAgIHJldHVybiBldmVudC5jbGllbnRZO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xufVxuXG52YXIgaXNQYXNzaXZlU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbn0pKCk7XG5cbi8vIFNhdmUgbGFzdCB0b3VjaCB0aW1lIGdsb2JhbGx5ICh0b3VjaCBzdGFydCB0aW1lIG9yIHRvdWNoIGVuZCB0aW1lKSwgaWYgYSBgY2xpY2tgIGV2ZW50IHRyaWdnZXJlZCxcbi8vIGFuZCB0aGUgdGltZSBuZWFyIGJ5IHRoZSBsYXN0IHRvdWNoIHRpbWUsIHRoaXMgYGNsaWNrYCBldmVudCB3aWxsIGJlIGlnbm9yZWQuIFRoaXMgaXMgdXNlZCBmb3Jcbi8vIHJlc29sdmUgdG91Y2ggdGhyb3VnaCBpc3N1ZS5cbnZhciBnbG9iYWxMYXN0VG91Y2hUaW1lID0gMDtcblxudmFyIHZ1ZVRvdWNoRXZlbnRzID0ge1xuICAgIGluc3RhbGw6IGZ1bmN0aW9uIChWdWUsIGNvbnN0cnVjdG9yT3B0aW9ucykge1xuXG4gICAgICAgIHZhciBnbG9iYWxPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgZGlzYWJsZUNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIHRhcFRvbGVyYW5jZTogMTAsICAvLyBweFxuICAgICAgICAgICAgc3dpcGVUb2xlcmFuY2U6IDMwLCAgLy8gcHhcbiAgICAgICAgICAgIHRvdWNoSG9sZFRvbGVyYW5jZTogNDAwLCAgLy8gbXNcbiAgICAgICAgICAgIGxvbmdUYXBUaW1lSW50ZXJ2YWw6IDQwMCwgIC8vIG1zXG4gICAgICAgICAgICB0b3VjaENsYXNzOiAnJyxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogJ3RvdWNoJ1xuICAgICAgICB9LCBjb25zdHJ1Y3Rvck9wdGlvbnMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHRvdWNoU3RhcnRFdmVudChldmVudCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcy4kJHRvdWNoT2JqLFxuICAgICAgICAgICAgICAgIGlzVG91Y2hFdmVudCA9IGV2ZW50LnR5cGUuaW5kZXhPZigndG91Y2gnKSA+PSAwLFxuICAgICAgICAgICAgICAgIGlzTW91c2VFdmVudCA9IGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSA+PSAwLFxuICAgICAgICAgICAgICAgICRlbCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChpc1RvdWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxMYXN0VG91Y2hUaW1lID0gZXZlbnQudGltZVN0YW1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNNb3VzZUV2ZW50ICYmIGdsb2JhbExhc3RUb3VjaFRpbWUgJiYgZXZlbnQudGltZVN0YW1wIC0gZ2xvYmFsTGFzdFRvdWNoVGltZSA8IDM1MCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCR0aGlzLnRvdWNoU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkVG91Y2hDbGFzcyh0aGlzKTtcblxuICAgICAgICAgICAgJHRoaXMudG91Y2hTdGFydGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgJHRoaXMudG91Y2hNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgJHRoaXMuc3dpcGVPdXRCb3VuZGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICR0aGlzLnN0YXJ0WCA9IHRvdWNoWChldmVudCk7XG4gICAgICAgICAgICAkdGhpcy5zdGFydFkgPSB0b3VjaFkoZXZlbnQpO1xuXG4gICAgICAgICAgICAkdGhpcy5jdXJyZW50WCA9IDA7XG4gICAgICAgICAgICAkdGhpcy5jdXJyZW50WSA9IDA7XG5cbiAgICAgICAgICAgICR0aGlzLnRvdWNoU3RhcnRUaW1lID0gZXZlbnQudGltZVN0YW1wO1xuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIHRvdWNoaG9sZCBldmVudCBhZnRlciBgdG91Y2hIb2xkVG9sZXJhbmNlYG1zXG4gICAgICAgICAgICAkdGhpcy50b3VjaEhvbGRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMudG91Y2hIb2xkVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgJGVsLCAndG91Y2hob2xkJyk7XG4gICAgICAgICAgICB9LCAkdGhpcy5vcHRpb25zLnRvdWNoSG9sZFRvbGVyYW5jZSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgdGhpcywgJ3N0YXJ0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b3VjaE1vdmVFdmVudChldmVudCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcy4kJHRvdWNoT2JqO1xuXG4gICAgICAgICAgICAkdGhpcy5jdXJyZW50WCA9IHRvdWNoWChldmVudCk7XG4gICAgICAgICAgICAkdGhpcy5jdXJyZW50WSA9IHRvdWNoWShldmVudCk7XG5cbiAgICAgICAgICAgIGlmICghJHRoaXMudG91Y2hNb3ZlZCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXBUb2xlcmFuY2UgPSAkdGhpcy5vcHRpb25zLnRhcFRvbGVyYW5jZTtcblxuICAgICAgICAgICAgICAgICR0aGlzLnRvdWNoTW92ZWQgPSBNYXRoLmFicygkdGhpcy5zdGFydFggLSAkdGhpcy5jdXJyZW50WCkgPiB0YXBUb2xlcmFuY2UgfHxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoJHRoaXMuc3RhcnRZIC0gJHRoaXMuY3VycmVudFkpID4gdGFwVG9sZXJhbmNlO1xuXG4gICAgICAgICAgICAgICAgaWYoJHRoaXMudG91Y2hNb3ZlZCl7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFRvdWNoSG9sZFRpbWVyKCR0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KGV2ZW50LCB0aGlzLCAnbW92ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoISR0aGlzLnN3aXBlT3V0Qm91bmRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBzd2lwZU91dEJvdW5kZWQgPSAkdGhpcy5vcHRpb25zLnN3aXBlVG9sZXJhbmNlO1xuXG4gICAgICAgICAgICAgICAgJHRoaXMuc3dpcGVPdXRCb3VuZGVkID0gTWF0aC5hYnMoJHRoaXMuc3RhcnRYIC0gJHRoaXMuY3VycmVudFgpID4gc3dpcGVPdXRCb3VuZGVkICYmXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKCR0aGlzLnN0YXJ0WSAtICR0aGlzLmN1cnJlbnRZKSA+IHN3aXBlT3V0Qm91bmRlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoJHRoaXMudG91Y2hNb3ZlZCl7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KGV2ZW50LCB0aGlzLCAnbW92aW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b3VjaENhbmNlbEV2ZW50KCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcy4kJHRvdWNoT2JqO1xuXG4gICAgICAgICAgICBjYW5jZWxUb3VjaEhvbGRUaW1lcigkdGhpcyk7XG4gICAgICAgICAgICByZW1vdmVUb3VjaENsYXNzKHRoaXMpO1xuXG4gICAgICAgICAgICAkdGhpcy50b3VjaFN0YXJ0ZWQgPSAkdGhpcy50b3VjaE1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAkdGhpcy5zdGFydFggPSAkdGhpcy5zdGFydFkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG91Y2hFbmRFdmVudChldmVudCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcy4kJHRvdWNoT2JqLFxuICAgICAgICAgICAgICAgIGlzVG91Y2hFdmVudCA9IGV2ZW50LnR5cGUuaW5kZXhPZigndG91Y2gnKSA+PSAwLFxuICAgICAgICAgICAgICAgIGlzTW91c2VFdmVudCA9IGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSA+PSAwO1xuXG4gICAgICAgICAgICBpZiAoaXNUb3VjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTGFzdFRvdWNoVGltZSA9IGV2ZW50LnRpbWVTdGFtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRvdWNoaG9sZEVuZCA9IGlzVG91Y2hFdmVudCAmJiAhJHRoaXMudG91Y2hIb2xkVGltZXI7XG4gICAgICAgICAgICBjYW5jZWxUb3VjaEhvbGRUaW1lcigkdGhpcyk7XG5cbiAgICAgICAgICAgICR0aGlzLnRvdWNoU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZW1vdmVUb3VjaENsYXNzKHRoaXMpO1xuXG4gICAgICAgICAgICBpZiAoaXNNb3VzZUV2ZW50ICYmIGdsb2JhbExhc3RUb3VjaFRpbWUgJiYgZXZlbnQudGltZVN0YW1wIC0gZ2xvYmFsTGFzdFRvdWNoVGltZSA8IDM1MCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRml4ICMzMywgVHJpZ2dlciBgZW5kYCBldmVudCB3aGVuIHRvdWNoIHN0b3BwZWRcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgdGhpcywgJ2VuZCcpO1xuXG4gICAgICAgICAgICBpZiAoISR0aGlzLnRvdWNoTW92ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBkZXRlY3QgaWYgdGhpcyBpcyBhIGxvbmdUYXAgZXZlbnQgb3Igbm90XG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmNhbGxiYWNrcy5sb25ndGFwICYmIGV2ZW50LnRpbWVTdGFtcCAtICR0aGlzLnRvdWNoU3RhcnRUaW1lID4gJHRoaXMub3B0aW9ucy5sb25nVGFwVGltZUludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgdGhpcywgJ2xvbmd0YXAnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHRoaXMuY2FsbGJhY2tzLnRvdWNoaG9sZCAmJiB0b3VjaGhvbGRFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmNlbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVtaXQgdGFwIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgdGhpcywgJ3RhcCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIGlmICghJHRoaXMuc3dpcGVPdXRCb3VuZGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlT3V0Qm91bmRlZCA9ICR0aGlzLm9wdGlvbnMuc3dpcGVUb2xlcmFuY2UsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VZID0gTWF0aC5hYnMoJHRoaXMuc3RhcnRZIC0gJHRoaXMuY3VycmVudFkpLFxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZVggPSBNYXRoLmFicygkdGhpcy5zdGFydFggLSAkdGhpcy5jdXJyZW50WCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VZID4gc3dpcGVPdXRCb3VuZGVkIHx8IGRpc3RhbmNlWCA+IHN3aXBlT3V0Qm91bmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VZID4gc3dpcGVPdXRCb3VuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAkdGhpcy5zdGFydFkgPiAkdGhpcy5jdXJyZW50WSA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAkdGhpcy5zdGFydFggPiAkdGhpcy5jdXJyZW50WCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGVtaXQgdGhlIHNwZWNpZmllZCBldmVudCB3aGVuIGl0IGhhcyBtb2RpZmllcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmNhbGxiYWNrc1snc3dpcGUuJyArIGRpcmVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudCwgdGhpcywgJ3N3aXBlLicgKyBkaXJlY3Rpb24sIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbWl0IGEgY29tbW9uIGV2ZW50IHdoZW4gaXQgaGFzIG5vIGFueSBtb2RpZmllclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KGV2ZW50LCB0aGlzLCAnc3dpcGUnLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbW91c2VFbnRlckV2ZW50KCkge1xuICAgICAgICAgICAgYWRkVG91Y2hDbGFzcyh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1vdXNlTGVhdmVFdmVudCgpIHtcbiAgICAgICAgICAgIHJlbW92ZVRvdWNoQ2xhc3ModGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZSwgJGVsLCBldmVudFR5cGUsIHBhcmFtKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkZWwuJCR0b3VjaE9iajtcblxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBjYWxsYmFjayBsaXN0XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gJHRoaXMgJiYgJHRoaXMuY2FsbGJhY2tzW2V2ZW50VHlwZV0gfHwgW107XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nID0gY2FsbGJhY2tzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmcubW9kaWZpZXJzLnN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYmluZGluZy5tb2RpZmllcnMucHJldmVudCAmJiBlLmNhbmNlbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBgc2VsZmAgbW9kaWZpZXJgXG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmcubW9kaWZpZXJzLnNlbGYgJiYgZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJpbmRpbmcudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nLnZhbHVlKHBhcmFtLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmcudmFsdWUoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRUb3VjaENsYXNzKCRlbCkge1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICRlbC4kJHRvdWNoT2JqLm9wdGlvbnMudG91Y2hDbGFzcztcbiAgICAgICAgICAgIGNsYXNzTmFtZSAmJiAkZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG91Y2hDbGFzcygkZWwpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSAkZWwuJCR0b3VjaE9iai5vcHRpb25zLnRvdWNoQ2xhc3M7XG4gICAgICAgICAgICBjbGFzc05hbWUgJiYgJGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbmNlbFRvdWNoSG9sZFRpbWVyKCR0aGlzKSB7XG4gICAgICAgICAgICBpZiAoJHRoaXMudG91Y2hIb2xkVGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoJHRoaXMudG91Y2hIb2xkVGltZXIpO1xuICAgICAgICAgICAgICAgICR0aGlzLnRvdWNoSG9sZFRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkVG91Y2hPYmooJGVsLCBleHRyYU9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaE9iaiA9ICRlbC4kJHRvdWNoT2JqIHx8IHtcbiAgICAgICAgICAgICAgICAvLyBhbiBvYmplY3QgY29udGFpbnMgYWxsIGNhbGxiYWNrcyByZWdpc3RlcmVkLFxuICAgICAgICAgICAgICAgIC8vIGtleSBpcyBldmVudCBuYW1lLCB2YWx1ZSBpcyBhbiBhcnJheVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge30sXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBiaW5kIHR3aWNlLCBzZXQgdG8gdHJ1ZSB3aGVuIGV2ZW50IGJvdW5kXG4gICAgICAgICAgICAgICAgaGFzQmluZFRvdWNoRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IG9wdGlvbnMsIHdvdWxkIGJlIG92ZXJyaWRlIGJ5IHYtdG91Y2gtb3B0aW9uc1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGdsb2JhbE9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdG91Y2hPYmoub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRvdWNoT2JqLm9wdGlvbnMsIGV4dHJhT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkZWwuJCR0b3VjaE9iaiA9IHRvdWNoT2JqO1xuICAgICAgICAgICAgcmV0dXJuICRlbC4kJHRvdWNoT2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgVnVlLmRpcmVjdGl2ZShnbG9iYWxPcHRpb25zLm5hbWVzcGFjZSwge1xuICAgICAgICAgICAgYmluZDogZnVuY3Rpb24gKCRlbCwgYmluZGluZykge1xuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIGEgdG91Y2ggY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSBidWlsZFRvdWNoT2JqKCRlbCk7XG4gICAgICAgICAgICAgICAgLy8gZGVjbGFyZSBwYXNzaXZlIG9wdGlvbiBmb3IgdGhlIGV2ZW50IGxpc3RlbmVyLiBEZWZhdWx0cyB0byB7IHBhc3NpdmU6IHRydWUgfSBpZiBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICB2YXIgcGFzc2l2ZU9wdCA9IGlzUGFzc2l2ZVN1cHBvcnRlZCA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gYmluZGluZy5hcmcgfHwgJ3RhcCc7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3dpcGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9tID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX20ubGVmdCB8fCBfbS5yaWdodCB8fCBfbS50b3AgfHwgX20uYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBiaW5kaW5nLm1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKGkpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZSA9ICdzd2lwZS4nICsgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmNhbGxiYWNrc1tfZV0gPSAkdGhpcy5jYWxsYmFja3NbX2VdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuY2FsbGJhY2tzW19lXS5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5jYWxsYmFja3Muc3dpcGUgPSAkdGhpcy5jYWxsYmFja3Muc3dpcGUgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuY2FsbGJhY2tzLnN3aXBlLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW92aW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLm1vZGlmaWVycy5kaXNhYmxlUGFzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgcGFzc2l2ZSBvcHRpb24gZm9yIHRoZSBtb3ZpbmcgZXZlbnQgaWYgZGlzYWJsZVBhc3NpdmUgbW9kaWZpZXIgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2l2ZU9wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuY2FsbGJhY2tzW2V2ZW50VHlwZV0gPSAkdGhpcy5jYWxsYmFja3NbZXZlbnRUeXBlXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmNhbGxiYWNrc1tldmVudFR5cGVdLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBiaW5kIHR3aWNlXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmhhc0JpbmRUb3VjaEV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaFN0YXJ0RXZlbnQsIHBhc3NpdmVPcHQpO1xuICAgICAgICAgICAgICAgICRlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaE1vdmVFdmVudCwgcGFzc2l2ZU9wdCk7XG4gICAgICAgICAgICAgICAgJGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdG91Y2hDYW5jZWxFdmVudCk7XG4gICAgICAgICAgICAgICAgJGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdG91Y2hFbmRFdmVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoISR0aGlzLm9wdGlvbnMuZGlzYWJsZUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0b3VjaFN0YXJ0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdG91Y2hNb3ZlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRvdWNoRW5kRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG1vdXNlRW50ZXJFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICRlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgbW91c2VMZWF2ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgYmluZCBtYXJrIHRvIHRydWVcbiAgICAgICAgICAgICAgICAkdGhpcy5oYXNCaW5kVG91Y2hFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiAoJGVsKSB7XG4gICAgICAgICAgICAgICAgJGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaFN0YXJ0RXZlbnQpO1xuICAgICAgICAgICAgICAgICRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaE1vdmVFdmVudCk7XG4gICAgICAgICAgICAgICAgJGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdG91Y2hDYW5jZWxFdmVudCk7XG4gICAgICAgICAgICAgICAgJGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdG91Y2hFbmRFdmVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJGVsLiQkdG91Y2hPYmogJiYgISRlbC4kJHRvdWNoT2JqLm9wdGlvbnMuZGlzYWJsZUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0b3VjaFN0YXJ0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdG91Y2hNb3ZlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRvdWNoRW5kRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG1vdXNlRW50ZXJFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgbW91c2VMZWF2ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdmFyc1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkZWwuJCR0b3VjaE9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgVnVlLmRpcmVjdGl2ZShnbG9iYWxPcHRpb25zLm5hbWVzcGFjZSArICctY2xhc3MnLCB7XG4gICAgICAgICAgICBiaW5kOiBmdW5jdGlvbiAoJGVsLCBiaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRUb3VjaE9iaigkZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hDbGFzczogYmluZGluZy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBWdWUuZGlyZWN0aXZlKGdsb2JhbE9wdGlvbnMubmFtZXNwYWNlICsgJy1vcHRpb25zJywge1xuICAgICAgICAgICAgYmluZDogZnVuY3Rpb24oJGVsLCBiaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRUb3VjaE9iaigkZWwsIGJpbmRpbmcudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5cbi8qXG4gKiBFeHBvcnRzXG4gKi9cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdnVlVG91Y2hFdmVudHM7XG5cbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2dWVUb3VjaEV2ZW50cztcbiAgICB9KTtcbn0gZWxzZSBpZiAod2luZG93LlZ1ZSkge1xuICAgIHdpbmRvdy52dWVUb3VjaEV2ZW50cyA9IHZ1ZVRvdWNoRXZlbnRzO1xuICAgIFZ1ZS51c2UodnVlVG91Y2hFdmVudHMpO1xufVxuIiwiLyohXG4gKiB2dWV4IHYzLjYuMlxuICogKGMpIDIwMjEgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBhcHBseU1peGluIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGFyZ2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbnZhciBkZXZ0b29sSG9vayA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0sIHsgcHJlcGVuZDogdHJ1ZSB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmVBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmFjdGlvbicsIGFjdGlvbiwgc3RhdGUpO1xuICB9LCB7IHByZXBlbmQ6IHRydWUgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICogYnkgc2Vjb25kIGFyZ3VtZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZlxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gZmluZCAobGlzdCwgZikge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoZilbMF1cbn1cblxuLyoqXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdCBjb25zaWRlcmluZyBjaXJjdWxhciBzdHJ1Y3R1cmUuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhY2hlcyBhbGwgbmVzdGVkIG9iamVjdHMgYW5kIGl0cyBjb3BpZXMuXG4gKiBJZiBpdCBkZXRlY3RzIGNpcmN1bGFyIHN0cnVjdHVyZSwgdXNlIGNhY2hlZCBjb3B5IHRvIGF2b2lkIGluZmluaXRlIGxvb3AuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gY2FjaGVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5IChvYmosIGNhY2hlKSB7XG4gIGlmICggY2FjaGUgPT09IHZvaWQgMCApIGNhY2hlID0gW107XG5cbiAgLy8ganVzdCByZXR1cm4gaWYgb2JqIGlzIGltbXV0YWJsZSB2YWx1ZVxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLy8gaWYgb2JqIGlzIGhpdCwgaXQgaXMgaW4gY2lyY3VsYXIgc3RydWN0dXJlXG4gIHZhciBoaXQgPSBmaW5kKGNhY2hlLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5vcmlnaW5hbCA9PT0gb2JqOyB9KTtcbiAgaWYgKGhpdCkge1xuICAgIHJldHVybiBoaXQuY29weVxuICB9XG5cbiAgdmFyIGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICAvLyBwdXQgdGhlIGNvcHkgaW50byBjYWNoZSBhdCBmaXJzdFxuICAvLyBiZWNhdXNlIHdlIHdhbnQgdG8gcmVmZXIgaXQgaW4gcmVjdXJzaXZlIGRlZXBDb3B5XG4gIGNhY2hlLnB1c2goe1xuICAgIG9yaWdpbmFsOiBvYmosXG4gICAgY29weTogY29weVxuICB9KTtcblxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldLCBjYWNoZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb3B5XG59XG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiBoYXNDaGlsZCAoa2V5KSB7XG4gIHJldHVybiBrZXkgaW4gdGhpcy5fY2hpbGRyZW5cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgdmFyIGNoaWxkID0gcGFyZW50LmdldENoaWxkKGtleSk7XG5cbiAgaWYgKCFjaGlsZCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIHVucmVnaXN0ZXIgbW9kdWxlICdcIiArIGtleSArIFwiJywgd2hpY2ggaXMgXCIgK1xuICAgICAgICBcIm5vdCByZWdpc3RlcmVkXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCFjaGlsZC5ydW50aW1lKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBwYXJlbnQucmVtb3ZlQ2hpbGQoa2V5KTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmlzUmVnaXN0ZXJlZCA9IGZ1bmN0aW9uIGlzUmVnaXN0ZXJlZCAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICByZXR1cm4gcGFyZW50Lmhhc0NoaWxkKGtleSlcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbdnVleF0gdHJ5aW5nIHRvIGFkZCBhIG5ldyBtb2R1bGUgJ1wiICsga2V5ICsgXCInIG9uIGhvdCByZWxvYWRpbmcsIFwiICtcbiAgICAgICAgICAgICdtYW51YWwgcmVsb2FkIGlzIG5lZWRlZCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKFxuICAgICAgICBwYXRoLmNvbmNhdChrZXkpLFxuICAgICAgICB0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSxcbiAgICAgICAgbmV3TW9kdWxlLm1vZHVsZXNba2V5XVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uQXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uJ1xufTtcblxudmFyIG9iamVjdEFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5oYW5kbGVyID09PSAnZnVuY3Rpb24nKTsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCBcImhhbmRsZXJcIiBmdW5jdGlvbidcbn07XG5cbnZhciBhc3NlcnRUeXBlcyA9IHtcbiAgZ2V0dGVyczogZnVuY3Rpb25Bc3NlcnQsXG4gIG11dGF0aW9uczogZnVuY3Rpb25Bc3NlcnQsXG4gIGFjdGlvbnM6IG9iamVjdEFzc2VydFxufTtcblxuZnVuY3Rpb24gYXNzZXJ0UmF3TW9kdWxlIChwYXRoLCByYXdNb2R1bGUpIHtcbiAgT2JqZWN0LmtleXMoYXNzZXJ0VHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghcmF3TW9kdWxlW2tleV0pIHsgcmV0dXJuIH1cblxuICAgIHZhciBhc3NlcnRPcHRpb25zID0gYXNzZXJ0VHlwZXNba2V5XTtcblxuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGVba2V5XSwgZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGFzc2VydE9wdGlvbnMuYXNzZXJ0KHZhbHVlKSxcbiAgICAgICAgbWFrZUFzc2VydGlvbk1lc3NhZ2UocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgYXNzZXJ0T3B0aW9ucy5leHBlY3RlZClcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQXNzZXJ0aW9uTWVzc2FnZSAocGF0aCwga2V5LCB0eXBlLCB2YWx1ZSwgZXhwZWN0ZWQpIHtcbiAgdmFyIGJ1ZiA9IGtleSArIFwiIHNob3VsZCBiZSBcIiArIGV4cGVjdGVkICsgXCIgYnV0IFxcXCJcIiArIGtleSArIFwiLlwiICsgdHlwZSArIFwiXFxcIlwiO1xuICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgYnVmICs9IFwiIGluIG1vZHVsZSBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCI7XG4gIH1cbiAgYnVmICs9IFwiIGlzIFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgKyBcIi5cIjtcbiAgcmV0dXJuIGJ1ZlxufVxuXG52YXIgVnVlOyAvLyBiaW5kIG9uIGluc3RhbGxcblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEF1dG8gaW5zdGFsbCBpZiBpdCBpcyBub3QgZG9uZSB5ZXQgYW5kIGB3aW5kb3dgIGhhcyBgVnVlYC5cbiAgLy8gVG8gYWxsb3cgdXNlcnMgdG8gYXZvaWQgYXV0by1pbnN0YWxsYXRpb24gaW4gc29tZSBjYXNlcyxcbiAgLy8gdGhpcyBjb2RlIHNob3VsZCBiZSBwbGFjZWQgaGVyZS4gU2VlICM3MzFcbiAgaWYgKCFWdWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICAgIGluc3RhbGwod2luZG93LlZ1ZSk7XG4gIH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG4gIHRoaXMuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX3N1YnNjcmliZXJzXG4gICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5zbGljZSgpIC8vIHNoYWxsb3cgY29weSB0byBwcmV2ZW50IGl0ZXJhdG9yIGludmFsaWRhdGlvbiBpZiBzdWJzY3JpYmVyIHN5bmNocm9ub3VzbHkgY2FsbHMgdW5zdWJzY3JpYmVcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBiZWZvcmUgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZCk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcyQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmVycm9yOyB9KVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5lcnJvcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSwgZXJyb3IpOyB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBlcnJvciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycywgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgZ2V0dGVyID09PSAnZnVuY3Rpb24nLCBcInN0b3JlLndhdGNoIG9ubHkgYWNjZXB0cyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLCB0aGlzJDEuZ2V0dGVycyk7IH0sIGNiLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAoc3RhdGUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEuX3ZtLl9kYXRhLiQkc3RhdGUgPSBzdGF0ZTtcbiAgfSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZSAocGF0aCwgcmF3TW9kdWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhhc01vZHVsZSA9IGZ1bmN0aW9uIGhhc01vZHVsZSAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fbW9kdWxlcy5pc1JlZ2lzdGVyZWQocGF0aClcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicywgb3B0aW9ucykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBvcHRpb25zICYmIG9wdGlvbnMucHJlcGVuZFxuICAgICAgPyBzdWJzLnVuc2hpZnQoZm4pXG4gICAgICA6IHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgLy8gcmVzZXQgbG9jYWwgZ2V0dGVycyBjYWNoZVxuICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkVm0uXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9ubWVudC5cbiAgICBjb21wdXRlZFtrZXldID0gcGFydGlhbChmbiwgc3RvcmUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuX3ZtW2tleV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBqdXN0IGluIGNhc2UgdGhlIHVzZXIgaGFzIGFkZGVkXG4gIC8vIHNvbWUgZnVua3kgZ2xvYmFsIG1peGluc1xuICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbiAgc3RvcmUuX3ZtID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgJCRzdGF0ZTogc3RhdGVcbiAgICB9LFxuICAgIGNvbXB1dGVkOiBjb21wdXRlZFxuICB9KTtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7XG5cbiAgLy8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbiAgaWYgKHN0b3JlLnN0cmljdCkge1xuICAgIGVuYWJsZVN0cmljdE1vZGUoc3RvcmUpO1xuICB9XG5cbiAgaWYgKG9sZFZtKSB7XG4gICAgaWYgKGhvdCkge1xuICAgICAgLy8gZGlzcGF0Y2ggY2hhbmdlcyBpbiBhbGwgc3Vic2NyaWJlZCB3YXRjaGVyc1xuICAgICAgLy8gdG8gZm9yY2UgZ2V0dGVyIHJlLWV2YWx1YXRpb24gZm9yIGhvdCByZWxvYWRpbmcuXG4gICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZFZtLl9kYXRhLiQkc3RhdGUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFZ1ZS5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJldHVybiBvbGRWbS4kZGVzdHJveSgpOyB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgaWYgKHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgbmFtZXNwYWNlIFwiICsgbmFtZXNwYWNlICsgXCIgZm9yIHRoZSBuYW1lc3BhY2VkIG1vZHVsZSBcIiArIChwYXRoLmpvaW4oJy8nKSkpKTtcbiAgICB9XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpZiAobW9kdWxlTmFtZSBpbiBwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIChcIlt2dWV4XSBzdGF0ZSBmaWVsZCBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIHdhcyBvdmVycmlkZGVuIGJ5IGEgbW9kdWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhdCBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzdG9yZS5fbXV0YXRpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBtdXRhdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbiAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY2hhbmdlZCBieSB2bSB1cGRhdGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWwsIHtcbiAgICBnZXR0ZXJzOiB7XG4gICAgICBnZXQ6IG5vTmFtZXNwYWNlXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyczsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG5hbWVzcGFjZSk7IH1cbiAgICB9LFxuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldE5lc3RlZFN0YXRlKHN0b3JlLnN0YXRlLCBwYXRoKTsgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2FsXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMgKHN0b3JlLCBuYW1lc3BhY2UpIHtcbiAgaWYgKCFzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0pIHtcbiAgICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG4gICAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAvLyBza2lwIGlmIHRoZSB0YXJnZXQgZ2V0dGVyIGlzIG5vdCBtYXRjaCB0aGlzIG5hbWVzcGFjZVxuICAgICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgICAgdmFyIGxvY2FsVHlwZSA9IHR5cGUuc2xpY2Uoc3BsaXRQb3MpO1xuXG4gICAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV0gPSBnZXR0ZXJzUHJveHk7XG4gIH1cblxuICByZXR1cm4gc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuY2FsbChzdG9yZSwge1xuICAgICAgZGlzcGF0Y2g6IGxvY2FsLmRpc3BhdGNoLFxuICAgICAgY29tbWl0OiBsb2NhbC5jb21taXQsXG4gICAgICBnZXR0ZXJzOiBsb2NhbC5nZXR0ZXJzLFxuICAgICAgc3RhdGU6IGxvY2FsLnN0YXRlLFxuICAgICAgcm9vdEdldHRlcnM6IHN0b3JlLmdldHRlcnMsXG4gICAgICByb290U3RhdGU6IHN0b3JlLnN0YXRlXG4gICAgfSwgcGF5bG9hZCk7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJkbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIHN5bmM6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcImV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIGlmIChWdWUgJiYgX1Z1ZSA9PT0gVnVlKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKHN0YXRlcykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwU3RhdGU6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKHN0YXRlcykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZFN0YXRlICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlO1xuICAgICAgdmFyIGdldHRlcnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBTdGF0ZScsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBtb2R1bGUuY29udGV4dC5zdGF0ZTtcbiAgICAgICAgZ2V0dGVycyA9IG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5jYWxsKHRoaXMsIHN0YXRlLCBnZXR0ZXJzKVxuICAgICAgICA6IHN0YXRlW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGNvbW1pdHRpbmcgdGhlIG11dGF0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBtdXRhdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgY29tbWl0YCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW5vdGhlciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKG11dGF0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwTXV0YXRpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChtdXRhdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRNdXRhdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gR2V0IHRoZSBjb21taXQgbWV0aG9kIGZyb20gc3RvcmVcbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIGdldHRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGdldHRlcnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzVmFsaWRNYXAoZ2V0dGVycykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwR2V0dGVyczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICEodmFsIGluIHRoaXMuJHN0b3JlLmdldHRlcnMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gZ2V0dGVyOiBcIiArIHZhbCkpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGRpc3BhdGNoIHRoZSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGFjdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGRpc3BhdGNoIGFjdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBBY3Rpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGFjdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKGFjdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEFjdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgaWYgKCFpc1ZhbGlkTWFwKG1hcCkpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApXG4gICAgPyBtYXAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IGtleSB9KTsgfSlcbiAgICA6IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IG1hcFtrZXldIH0pOyB9KVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHdoZXRoZXIgZ2l2ZW4gbWFwIGlzIHZhbGlkIG9yIG5vdFxuICogQHBhcmFtIHsqfSBtYXBcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNYXAgKG1hcCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApIHx8IGlzT2JqZWN0KG1hcClcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxuLy8gQ3JlZGl0czogYm9ycm93ZWQgY29kZSBmcm9tIGZjb21iL3JlZHV4LWxvZ2dlclxuXG5mdW5jdGlvbiBjcmVhdGVMb2dnZXIgKHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBjb2xsYXBzZWQgPSByZWYuY29sbGFwc2VkOyBpZiAoIGNvbGxhcHNlZCA9PT0gdm9pZCAwICkgY29sbGFwc2VkID0gdHJ1ZTtcbiAgdmFyIGZpbHRlciA9IHJlZi5maWx0ZXI7IGlmICggZmlsdGVyID09PSB2b2lkIDAgKSBmaWx0ZXIgPSBmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlQmVmb3JlLCBzdGF0ZUFmdGVyKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgdHJhbnNmb3JtZXIgPSByZWYudHJhbnNmb3JtZXI7IGlmICggdHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIHRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZTsgfTtcbiAgdmFyIG11dGF0aW9uVHJhbnNmb3JtZXIgPSByZWYubXV0YXRpb25UcmFuc2Zvcm1lcjsgaWYgKCBtdXRhdGlvblRyYW5zZm9ybWVyID09PSB2b2lkIDAgKSBtdXRhdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKG11dCkgeyByZXR1cm4gbXV0OyB9O1xuICB2YXIgYWN0aW9uRmlsdGVyID0gcmVmLmFjdGlvbkZpbHRlcjsgaWYgKCBhY3Rpb25GaWx0ZXIgPT09IHZvaWQgMCApIGFjdGlvbkZpbHRlciA9IGZ1bmN0aW9uIChhY3Rpb24sIHN0YXRlKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgYWN0aW9uVHJhbnNmb3JtZXIgPSByZWYuYWN0aW9uVHJhbnNmb3JtZXI7IGlmICggYWN0aW9uVHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIGFjdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGFjdCkgeyByZXR1cm4gYWN0OyB9O1xuICB2YXIgbG9nTXV0YXRpb25zID0gcmVmLmxvZ011dGF0aW9uczsgaWYgKCBsb2dNdXRhdGlvbnMgPT09IHZvaWQgMCApIGxvZ011dGF0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dBY3Rpb25zID0gcmVmLmxvZ0FjdGlvbnM7IGlmICggbG9nQWN0aW9ucyA9PT0gdm9pZCAwICkgbG9nQWN0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dnZXIgPSByZWYubG9nZ2VyOyBpZiAoIGxvZ2dlciA9PT0gdm9pZCAwICkgbG9nZ2VyID0gY29uc29sZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgdmFyIHByZXZTdGF0ZSA9IGRlZXBDb3B5KHN0b3JlLnN0YXRlKTtcblxuICAgIGlmICh0eXBlb2YgbG9nZ2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGxvZ011dGF0aW9ucykge1xuICAgICAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGRlZXBDb3B5KHN0YXRlKTtcblxuICAgICAgICBpZiAoZmlsdGVyKG11dGF0aW9uLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSkpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkVGltZSA9IGdldEZvcm1hdHRlZFRpbWUoKTtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkTXV0YXRpb24gPSBtdXRhdGlvblRyYW5zZm9ybWVyKG11dGF0aW9uKTtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwibXV0YXRpb24gXCIgKyAobXV0YXRpb24udHlwZSkgKyBmb3JtYXR0ZWRUaW1lO1xuXG4gICAgICAgICAgc3RhcnRNZXNzYWdlKGxvZ2dlciwgbWVzc2FnZSwgY29sbGFwc2VkKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKHByZXZTdGF0ZSkpO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIG11dGF0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZE11dGF0aW9uKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBuZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKG5leHRTdGF0ZSkpO1xuICAgICAgICAgIGVuZE1lc3NhZ2UobG9nZ2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsb2dBY3Rpb25zKSB7XG4gICAgICBzdG9yZS5zdWJzY3JpYmVBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGFjdGlvbkZpbHRlcihhY3Rpb24sIHN0YXRlKSkge1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRUaW1lID0gZ2V0Rm9ybWF0dGVkVGltZSgpO1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRBY3Rpb24gPSBhY3Rpb25UcmFuc2Zvcm1lcihhY3Rpb24pO1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJhY3Rpb24gXCIgKyAoYWN0aW9uLnR5cGUpICsgZm9ybWF0dGVkVGltZTtcblxuICAgICAgICAgIHN0YXJ0TWVzc2FnZShsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCk7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgYWN0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZEFjdGlvbik7XG4gICAgICAgICAgZW5kTWVzc2FnZShsb2dnZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRNZXNzYWdlIChsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCkge1xuICB2YXIgc3RhcnRNZXNzYWdlID0gY29sbGFwc2VkXG4gICAgPyBsb2dnZXIuZ3JvdXBDb2xsYXBzZWRcbiAgICA6IGxvZ2dlci5ncm91cDtcblxuICAvLyByZW5kZXJcbiAgdHJ5IHtcbiAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZyhtZXNzYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRNZXNzYWdlIChsb2dnZXIpIHtcbiAgdHJ5IHtcbiAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5sb2coJ+KAlOKAlCBsb2cgZW5kIOKAlOKAlCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlZFRpbWUgKCkge1xuICB2YXIgdGltZSA9IG5ldyBEYXRlKCk7XG4gIHJldHVybiAoXCIgQCBcIiArIChwYWQodGltZS5nZXRIb3VycygpLCAyKSkgKyBcIjpcIiArIChwYWQodGltZS5nZXRNaW51dGVzKCksIDIpKSArIFwiOlwiICsgKHBhZCh0aW1lLmdldFNlY29uZHMoKSwgMikpICsgXCIuXCIgKyAocGFkKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpKSlcbn1cblxuZnVuY3Rpb24gcmVwZWF0IChzdHIsIHRpbWVzKSB7XG4gIHJldHVybiAobmV3IEFycmF5KHRpbWVzICsgMSkpLmpvaW4oc3RyKVxufVxuXG5mdW5jdGlvbiBwYWQgKG51bSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiByZXBlYXQoJzAnLCBtYXhMZW5ndGggLSBudW0udG9TdHJpbmcoKS5sZW5ndGgpICsgbnVtXG59XG5cbnZhciBpbmRleCA9IHtcbiAgU3RvcmU6IFN0b3JlLFxuICBpbnN0YWxsOiBpbnN0YWxsLFxuICB2ZXJzaW9uOiAnMy42LjInLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMsXG4gIGNyZWF0ZUxvZ2dlcjogY3JlYXRlTG9nZ2VyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IFN0b3JlLCBjcmVhdGVMb2dnZXIsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzLCBpbnN0YWxsLCBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMsIG1hcFN0YXRlIH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9